commit 71bf91837a480bacc5fa1d21f094dd7b7d633c07
Author: Pascal Rapicault <prapicau>
Date:   Wed Jan 30 15:06:54 2008 +0000

    Bug 217100 - Enabling provisioning of features in the installer

1	1	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
index ee97e66..512955c 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
@@ -85,7 +85,7 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 			profile.internalSetValue(Profile.PROP_FLAVOR, installDescription.getFlavor());
 			profile.internalSetValue(PROP_LAUNCHER_NAME, installDescription.getLauncherName());
 			EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(InstallerActivator.getDefault().getContext(), EnvironmentInfo.class.getName());
-			String env = "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch(); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+			String env = "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch() + ",eclipse.p2.install.features=true"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
 			profile.internalSetValue(Profile.PROP_ENVIRONMENTS, env);
 			profileRegistry.addProfile(profile);
 		}
commit 2587c3f1b32fce71d45e6b0ea364f698f7002dcb
Author: John Arthorne <johna>
Date:   Thu Jan 31 20:50:13 2008 +0000

    Bug 217100 [prov] Enabling provisioning of features in the installer

13	3	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
2	2	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
19	13	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
index def187e..fde724f 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
@@ -12,7 +12,7 @@ package org.eclipse.equinox.internal.p2.installer;
 
 import java.io.*;
 import java.net.URL;
-import java.util.Properties;
+import java.util.*;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.core.runtime.SubMonitor;
 import org.eclipse.equinox.internal.provisional.p2.installer.InstallDescription;
@@ -29,7 +29,6 @@ public class InstallDescriptionParser {
 	private static final String PROP_IS_AUTO_START = "eclipse.p2.autoStart";//$NON-NLS-1$
 	private static final String PROP_LAUNCHER_NAME = "eclipse.p2.launcherName";//$NON-NLS-1$
 	private static final String PROP_METADATA_REPOSITORY = "eclipse.p2.metadata";//$NON-NLS-1$
-	private static final String PROP_PROFILE_FLAVOR = "eclipse.p2.flavor";//$NON-NLS-1$
 	private static final String PROP_PROFILE_NAME = "eclipse.p2.profileName";//$NON-NLS-1$
 	private static final String PROP_ROOT_ID = "eclipse.p2.rootId";//$NON-NLS-1$
 	private static final String PROP_ROOT_VERSION = "eclipse.p2.rootVersion";//$NON-NLS-1$
@@ -50,7 +49,6 @@ public class InstallDescriptionParser {
 			InstallDescription description = new InstallDescription(properties.getProperty(PROP_PROFILE_NAME));
 			description.setArtifactRepository(new URL(properties.getProperty(PROP_ARTIFACT_REPOSITORY)));
 			description.setMetadataRepository(new URL(properties.getProperty(PROP_METADATA_REPOSITORY)));
-			description.setFlavor(properties.getProperty(PROP_PROFILE_FLAVOR));
 			description.setAutoStart(Boolean.TRUE.toString().equalsIgnoreCase(properties.getProperty(PROP_IS_AUTO_START)));
 			description.setLauncherName(properties.getProperty(PROP_LAUNCHER_NAME));
 			String locationString = properties.getProperty(PROP_INSTALL_LOCATION);
@@ -66,6 +64,18 @@ public class InstallDescriptionParser {
 			String versionString = properties.getProperty(PROP_ROOT_VERSION);
 			Version version = versionString == null ? null : new Version(versionString);
 			description.setRootVersion(version);
+
+			//any remaining properties are profile properties
+			Map profileProperties = new HashMap(properties);
+			profileProperties.remove(PROP_PROFILE_NAME);
+			profileProperties.remove(PROP_ARTIFACT_REPOSITORY);
+			profileProperties.remove(PROP_METADATA_REPOSITORY);
+			profileProperties.remove(PROP_IS_AUTO_START);
+			profileProperties.remove(PROP_AGENT_LOCATION);
+			profileProperties.remove(PROP_BUNDLE_LOCATION);
+			profileProperties.remove(PROP_ROOT_ID);
+			profileProperties.remove(PROP_ROOT_VERSION);
+			description.setProfileProperties(profileProperties);
 			return description;
 		} finally {
 			safeClose(in);
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
index a7ad246..ca1bb4c 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
@@ -81,11 +81,11 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 		if (profile == null) {
 			Map properties = new HashMap();
 			properties.put(IProfile.PROP_INSTALL_FOLDER, installDescription.getInstallLocation().toString());
-			properties.put(IProfile.PROP_FLAVOR, installDescription.getFlavor());
 			properties.put(PROP_LAUNCHER_NAME, installDescription.getLauncherName());
 			EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(InstallerActivator.getDefault().getContext(), EnvironmentInfo.class.getName());
-			String env = "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch() + ",eclipse.p2.install.features=true"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			String env = "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch(); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 			properties.put(IProfile.PROP_ENVIRONMENTS, env);
+			properties.putAll(installDescription.getProfileProperties());
 			profile = profileRegistry.addProfile(installDescription.getProductName(), properties);
 		}
 		return profile;
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
index 6879926..b59fe5d 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
@@ -11,6 +11,8 @@
 package org.eclipse.equinox.internal.provisional.p2.installer;
 
 import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
 import org.eclipse.core.runtime.IPath;
 import org.osgi.framework.Version;
 
@@ -25,9 +27,10 @@ public class InstallDescription {
 	private boolean isAutoStart;
 	private String launcherName;
 	private URL metadataRepo;
-	private String productName, flavor;
+	private String productName;
 	private String rootId;
 	private Version rootVersion;
+	private final Map profileProperties = new HashMap();
 
 	public InstallDescription(String name) {
 		this.productName = name;
@@ -58,14 +61,6 @@ public class InstallDescription {
 	}
 
 	/**
-	 * Returns the flavor used to configure the product being installed.
-	 * @return the install flavor
-	 */
-	public String getFlavor() {
-		return flavor;
-	}
-
-	/**
 	 * Returns the local file system location to install into.
 	 * @return a local file system location
 	 */
@@ -90,6 +85,13 @@ public class InstallDescription {
 	}
 
 	/**
+	 * Returns the profile properties for this install.
+	 */
+	public Map getProfileProperties() {
+		return profileProperties;
+	}
+
+	/**
 	 * Returns a human-readable name for this install.
 	 * @return the name of the product
 	 */
@@ -139,10 +141,6 @@ public class InstallDescription {
 		this.bundleLocation = bundleLocation;
 	}
 
-	public void setFlavor(String flavor) {
-		this.flavor = flavor;
-	}
-
 	public void setInstallLocation(IPath location) {
 		this.installLocation = location;
 	}
@@ -155,6 +153,14 @@ public class InstallDescription {
 		this.metadataRepo = repository;
 	}
 
+	/**
+	 * Supplies a set of profile properties to be added when the profile is created.
+	 * @param properties the profile properties to be added
+	 */
+	public void setProfileProperties(Map properties) {
+		profileProperties.putAll(properties);
+	}
+
 	public void setRootId(String root) {
 		this.rootId = root;
 	}
commit b0b8ba5ec3b7c29901d02ff4588fb1ac8dbdcbdf
Author: Dave Stevenson <dstevenso>
Date:   Thu Jan 31 21:34:48 2008 +0000

    Work on bug 217100:
    
    The code in Profile was an early hack since we hadn't made decisions about the
    level of update compatibility.
    
    Talked with John about the right solution and we arrived at two conclusions:
    
    1). We should use a separate profile property as the filter for feature install
    since it is a general case of selection (like source or other random content
    selections). The environment property should be reserved for os, ws, arch, nl.
    
    2). The decision about selection filters (like feature or source install)
    should be made by the creator of a profile and passed into profile construction
    as properties.
    
    John is going to make the changes for the installer. I am going to fix Profile
    and the Director App.
    
    I eliminated the hack in Profile.  The aguments to DirectorApp can now include -profileProperties  or -props, e.g.
    
    -props  org.eclipse.p2.installFeatures=true,foo=bar

28	3	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
0	18	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
index 4484821..9d5fb37 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
@@ -9,8 +9,7 @@
 package org.eclipse.equinox.internal.p2.director.app;
 
 import java.net.URL;
-import java.util.Enumeration;
-import java.util.Properties;
+import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.app.IApplication;
 import org.eclipse.equinox.app.IApplicationContext;
@@ -33,8 +32,10 @@ public class Application implements IApplication {
 	private URL artifactRepositoryLocation;
 	private URL metadataRepositoryLocation;
 	private String root;
+	private Version version = null;
 	private String flavor;
 	private String profileId;
+	private String profileProperties; // a comma-separated list of property pairs "tag=value"
 	private boolean install;
 	private String bundlePool = null;
 	private String nl;
@@ -42,7 +43,6 @@ public class Application implements IApplication {
 	private String arch;
 	private String ws;
 	private boolean roamingProfile = false;
-	private Version version = null;
 
 	private String getEnvironmentProperty() {
 		Properties values = new Properties();
@@ -84,6 +84,9 @@ public class Application implements IApplication {
 			if (args[i - 1].equalsIgnoreCase("-profile")) //$NON-NLS-1$
 				profileId = arg;
 
+			if (args[i - 1].equalsIgnoreCase("-profileProperties") || args[i - 1].equalsIgnoreCase("-props")) //$NON-NLS-1$ //$NON-NLS-2$
+				profileProperties = arg;
+
 			// we create a path object here to handle ../ entries in the middle of paths
 			if (args[i - 1].equalsIgnoreCase("-destination") || args[i - 1].equalsIgnoreCase("-dest")) //$NON-NLS-1$ //$NON-NLS-2$
 				destination = new Path(arg).toOSString();
@@ -130,6 +133,25 @@ public class Application implements IApplication {
 		}
 	}
 
+	/**
+	 * @param pairs	a comma separated list of tag=value pairs
+	 * @param properties the collection into which the pairs are put
+	 */
+	private void putProperties(String pairs, Properties properties) {
+		StringTokenizer tok = new StringTokenizer(pairs, ",", true); //$NON-NLS-1$
+		while (tok.hasMoreTokens()) {
+			String next = tok.nextToken().trim();
+			int i = next.indexOf('=');
+			if (i > 0 && i < next.length() - 1) {
+				String tag = next.substring(0, i).trim();
+				String value = next.substring(i + 1, next.length()).trim();
+				if (tag.length() > 0 && value.length() > 0) {
+					properties.put(tag, value);
+				}
+			}
+		}
+	}
+
 	public Object run(String[] args) throws Exception {
 		long time = -System.currentTimeMillis();
 		initializeFromArguments(args);
@@ -148,6 +170,9 @@ public class Application implements IApplication {
 		String env = getEnvironmentProperty();
 		if (env != null)
 			props.setProperty(IProfile.PROP_ENVIRONMENTS, env);
+		if (profileProperties != null) {
+			putProperties(profileProperties, props);
+		}
 		IProfile profile = ProvisioningHelper.addProfile(profileId, props);
 		String currentFlavor = profile.getProperty(IProfile.PROP_FLAVOR);
 		if (currentFlavor != null && !currentFlavor.endsWith(flavor))
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
index 07a35fa..8a5a608 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
@@ -14,7 +14,6 @@ import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.installregistry.IInstallRegistry;
 import org.eclipse.equinox.internal.p2.installregistry.IProfileInstallRegistry;
-import org.eclipse.equinox.internal.p2.metadata.repository.Activator;
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.*;
@@ -57,7 +56,6 @@ public class Profile implements IQueryable, IProfile {
 			storage.putAll(properties);
 
 		populateIUs();
-		checkUpdateCompatibility();
 	}
 
 	private void populateIUs() {
@@ -79,22 +77,6 @@ public class Profile implements IQueryable, IProfile {
 		}
 	}
 
-	/*
-	 * 	TODO: Temporary for determining whether eclipse installs
-	 * 		  in this profile should support backward compatibility
-	 * 		  with update manager.
-	 */
-	private static final String UPDATE_COMPATIBILITY = "eclipse.p2.update.compatibility"; //$NON-NLS-1$
-
-	private void checkUpdateCompatibility() {
-		if (getProperty(IProfile.PROP_INSTALL_FEATURES) == null) {
-			String updateCompatible = Activator.getContext().getProperty(UPDATE_COMPATIBILITY);
-			if (updateCompatible == null)
-				updateCompatible = Boolean.FALSE.toString();
-			setProperty(IProfile.PROP_INSTALL_FEATURES, updateCompatible);
-		}
-	}
-
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.p2.engine.IProfile#getProfileId()
 	 */

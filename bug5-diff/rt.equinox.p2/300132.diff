commit e4b5472f36bad445641e6e5abb40743d094646bc
Author: Simon Kaegi <skaegi>
Date:   Mon Jan 25 15:13:46 2010 +0000

    Bug 300132 [engine][planner] Move ProvisioningPlan Planner details

31	16	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
116	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlannerStatus.java
0	28	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningPlan.java
14	59	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningPlan.java
11	6	bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/PlanAnalyzer.java
7	10	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest.java
14	17	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest2.java
2	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug252638.java
2	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug270683.java
4	8	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/DisabledExplanation.java
2	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationDeepConflict.java
3	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForOptionalDependencies.java
3	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForPartialInstallation.java
5	8	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationSeveralConflictingRoots.java
3	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingDependency.java
3	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement.java
3	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement2.java
4	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MultipleSingleton.java
11	15	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
2	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest12.java
3	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
2	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
2	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest9.java
2	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTestUpdate.java
4	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/SimpleSingleton.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 71304c4..9191de3 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -61,10 +61,16 @@ public class SimplePlanner implements IPlanner {
 				Tracing.debug(operands[i].toString());
 			}
 		}
-		return new ProvisioningPlan(Status.OK_STATUS, operands, computeActualChangeRequest(toState, changeRequest), null, installerPlan, changeRequest.getProfile(), new QueryableArray(toState.toArray(new IInstallableUnit[toState.size()])), context);
+
+		Map<IInstallableUnit, RequestStatus>[] changes = computeActualChangeRequest(toState, changeRequest);
+		Map<IInstallableUnit, RequestStatus> requestChanges = (changes == null) ? null : changes[0];
+		Map<IInstallableUnit, RequestStatus> requestSideEffects = (changes == null) ? null : changes[1];
+		QueryableArray plannedState = new QueryableArray(toState.toArray(new IInstallableUnit[toState.size()]));
+		PlannerStatus plannerStatus = new PlannerStatus(Status.OK_STATUS, null, requestChanges, requestSideEffects, plannedState);
+		return new ProvisioningPlan(plannerStatus, changeRequest.getProfile(), operands, context, installerPlan);
 	}
 
-	private Map<IInstallableUnit, IStatus>[] buildDetailedErrors(ProfileChangeRequest changeRequest) {
+	private Map<IInstallableUnit, RequestStatus>[] buildDetailedErrors(ProfileChangeRequest changeRequest) {
 		IInstallableUnit[] added = changeRequest.getAddedInstallableUnits();
 		IInstallableUnit[] removed = changeRequest.getRemovedInstallableUnits();
 		Map<IInstallableUnit, RequestStatus> requestStatus = new HashMap<IInstallableUnit, RequestStatus>(added.length + removed.length);
@@ -75,11 +81,11 @@ public class SimplePlanner implements IPlanner {
 			requestStatus.put(removed[i], new RequestStatus(removed[i], RequestStatus.REMOVED, IStatus.ERROR, null));
 		}
 		@SuppressWarnings("unchecked")
-		Map<IInstallableUnit, IStatus>[] maps = new Map[] {requestStatus, null};
+		Map<IInstallableUnit, RequestStatus>[] maps = new Map[] {requestStatus, null};
 		return maps;
 	}
 
-	private Map<IInstallableUnit, IStatus>[] computeActualChangeRequest(Collection<IInstallableUnit> toState, ProfileChangeRequest changeRequest) {
+	private Map<IInstallableUnit, RequestStatus>[] computeActualChangeRequest(Collection<IInstallableUnit> toState, ProfileChangeRequest changeRequest) {
 		IInstallableUnit[] added = changeRequest.getAddedInstallableUnits();
 		IInstallableUnit[] removed = changeRequest.getRemovedInstallableUnits();
 		Map<IInstallableUnit, RequestStatus> requestStatus = new HashMap<IInstallableUnit, RequestStatus>(added.length + removed.length);
@@ -107,7 +113,7 @@ public class SimplePlanner implements IPlanner {
 			}
 		}
 		@SuppressWarnings("unchecked")
-		Map<IInstallableUnit, IStatus>[] maps = new Map[] {requestStatus, sideEffectStatus};
+		Map<IInstallableUnit, RequestStatus>[] maps = new Map[] {requestStatus, sideEffectStatus};
 		return maps;
 	}
 
@@ -308,21 +314,26 @@ public class SimplePlanner implements IPlanner {
 			Slicer slicer = new Slicer(new QueryableArray(availableIUs), newSelectionContext, satisfyMetaRequirements(profileChangeRequest.getProfileProperties()));
 			IQueryable<IInstallableUnit> slice = slicer.slice(new IInstallableUnit[] {(IInstallableUnit) updatedPlan[0]}, sub.newChild(ExpandWork / 4));
 			if (slice == null)
-				return new ProvisioningPlan(slicer.getStatus(), profile, null, context);
+				return new ProvisioningPlan(slicer.getStatus(), profile, context, null);
 			Projector projector = new Projector(slice, newSelectionContext, satisfyMetaRequirements(profileChangeRequest.getProfileProperties()));
 			projector.encode((IInstallableUnit) updatedPlan[0], (IInstallableUnit[]) updatedPlan[1], profile, profileChangeRequest.getAddedInstallableUnits(), sub.newChild(ExpandWork / 4));
 			IStatus s = projector.invokeSolver(sub.newChild(ExpandWork / 4));
 			if (s.getSeverity() == IStatus.CANCEL)
-				return new ProvisioningPlan(s, profile, null, context);
+				return new ProvisioningPlan(s, profile, context, null);
 			if (s.getSeverity() == IStatus.ERROR) {
 				sub.setTaskName(Messages.Planner_NoSolution);
 				if (context != null && !(context.getProperty(EXPLANATION) == null || Boolean.TRUE.toString().equalsIgnoreCase(context.getProperty(EXPLANATION))))
-					return new ProvisioningPlan(s, profile, null, context);
+					return new ProvisioningPlan(s, profile, context, null);
 
 				//Extract the explanation
 				Set<Explanation> explanation = projector.getExplanation(sub.newChild(ExpandWork / 4));
 				IStatus explanationStatus = convertExplanationToStatus(explanation);
-				return new ProvisioningPlan(explanationStatus, new Operand[0], buildDetailedErrors(profileChangeRequest), new RequestStatus(null, RequestStatus.REMOVED, IStatus.ERROR, explanation), null, profile, null, context);
+
+				Map<IInstallableUnit, RequestStatus>[] changes = buildDetailedErrors(profileChangeRequest);
+				Map<IInstallableUnit, RequestStatus> requestChanges = (changes == null) ? null : changes[0];
+				Map<IInstallableUnit, RequestStatus> requestSideEffects = (changes == null) ? null : changes[1];
+				PlannerStatus plannerStatus = new PlannerStatus(explanationStatus, new RequestStatus(null, RequestStatus.REMOVED, IStatus.ERROR, explanation), requestChanges, requestSideEffects, null);
+				return new ProvisioningPlan(plannerStatus, profile, new Operand[0], context, null);
 			}
 			//The resolution succeeded. We can forget about the warnings since there is a solution.
 			if (Tracing.DEBUG && s.getSeverity() != IStatus.OK)
@@ -356,7 +367,7 @@ public class SimplePlanner implements IPlanner {
 			//Create a plan for installing necessary pieces to complete the installation (e.g touchpoint actions)
 			return createInstallerPlan(profileChangeRequest.getProfile(), profileChangeRequest, fullState, newState, temporaryPlan, context, sub.newChild(ExpandWork / 2));
 		} catch (OperationCanceledException e) {
-			return new ProvisioningPlan(Status.CANCEL_STATUS, profileChangeRequest.getProfile(), null, context);
+			return new ProvisioningPlan(Status.CANCEL_STATUS, profileChangeRequest.getProfile(), context, null);
 		} finally {
 			sub.done();
 		}
@@ -382,8 +393,12 @@ public class SimplePlanner implements IPlanner {
 				Tracing.debug(operands[i].toString());
 			}
 		}
-		return new ProvisioningPlan(Status.OK_STATUS, operands, computeActualChangeRequest(toState, profileChangeRequest), null, null, profileChangeRequest.getProfile(), new QueryableArray(toState.toArray(new IInstallableUnit[toState.size()])), context);
-
+		Map<IInstallableUnit, RequestStatus>[] changes = computeActualChangeRequest(toState, profileChangeRequest);
+		Map<IInstallableUnit, RequestStatus> requestChanges = (changes == null) ? null : changes[0];
+		Map<IInstallableUnit, RequestStatus> requestSideEffects = (changes == null) ? null : changes[1];
+		QueryableArray plannedState = new QueryableArray(toState.toArray(new IInstallableUnit[toState.size()]));
+		PlannerStatus plannerStatus = new PlannerStatus(Status.OK_STATUS, null, requestChanges, requestSideEffects, plannedState);
+		return new ProvisioningPlan(plannerStatus, profileChangeRequest.getProfile(), operands, context, null);
 	}
 
 	//Verify that all the meta requirements necessary to perform the uninstallation (if necessary) and all t
@@ -416,7 +431,7 @@ public class SimplePlanner implements IPlanner {
 		try {
 			sub.setTaskName(Messages.Director_Task_installer_plan);
 			if (profileRegistry == null)
-				return new ProvisioningPlan(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, Messages.Planner_no_profile_registry), profile, null, initialContext);
+				return new ProvisioningPlan(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, Messages.Planner_no_profile_registry), profile, initialContext, null);
 
 			IProfile agentProfile = profileRegistry.getProfile(IProfileRegistry.SELF);
 			if (agentProfile == null)
@@ -424,7 +439,7 @@ public class SimplePlanner implements IPlanner {
 
 			if (profile.getProfileId().equals(agentProfile.getProfileId())) {
 				if (profile.getTimestamp() != agentProfile.getTimestamp())
-					return new ProvisioningPlan(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Planner_profile_out_of_sync, profile.getProfileId())), profile, null, initialContext);
+					return new ProvisioningPlan(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Planner_profile_out_of_sync, profile.getProfileId())), profile, initialContext, null);
 				return createInstallerPlanForCohostedCase(profile, initialRequest, initialPlan, unattachedState, expectedState, initialContext, sub);
 			}
 
@@ -459,7 +474,7 @@ public class SimplePlanner implements IPlanner {
 		if (externalInstallerPlan instanceof IProvisioningPlan && ((IProvisioningPlan) externalInstallerPlan).getStatus().getSeverity() == IStatus.ERROR) {
 			MultiStatus externalInstallerStatus = new MultiStatus(DirectorActivator.PI_DIRECTOR, 0, Messages.Planner_can_not_install_preq, null);
 			externalInstallerStatus.add(((IProvisioningPlan) externalInstallerPlan).getStatus());
-			return new ProvisioningPlan(externalInstallerStatus, initialRequest.getProfile(), new ProvisioningPlan(externalInstallerStatus, agentProfile, null, initialContext), initialContext);
+			return new ProvisioningPlan(externalInstallerStatus, initialRequest.getProfile(), initialContext, new ProvisioningPlan(externalInstallerStatus, agentProfile, initialContext, null));
 		}
 
 		initialPlan.setInstallerPlan(generatePlan((Projector) externalInstallerPlan, null, agentRequest, initialContext));
@@ -504,7 +519,7 @@ public class SimplePlanner implements IPlanner {
 		if (agentSolution instanceof IProvisioningPlan && ((IProvisioningPlan) agentSolution).getStatus().getSeverity() == IStatus.ERROR) {
 			MultiStatus agentStatus = new MultiStatus(DirectorActivator.PI_DIRECTOR, 0, Messages.Planner_actions_and_software_incompatible, null);
 			agentStatus.add(((IProvisioningPlan) agentSolution).getStatus());
-			return new ProvisioningPlan(agentStatus, initialRequest.getProfile(), new ProvisioningPlan(agentStatus, agentRequest.getProfile(), null, initialContext), initialContext);
+			return new ProvisioningPlan(agentStatus, initialRequest.getProfile(), initialContext, new ProvisioningPlan(agentStatus, agentRequest.getProfile(), initialContext, null));
 		}
 
 		//Compute the installer plan. It is the difference between what is currently in the profile and the solution we just computed
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlannerStatus.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlannerStatus.java
new file mode 100644
index 0000000..99a1cf8
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlannerStatus.java
@@ -0,0 +1,116 @@
+package org.eclipse.equinox.internal.provisional.p2.director;
+
+import java.util.Map;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.query.*;
+
+public class PlannerStatus implements IStatus {
+
+	private final IStatus status;
+	private final RequestStatus globalRequestStatus;
+	private final Map<IInstallableUnit, RequestStatus> requestChanges;
+	private final Map<IInstallableUnit, RequestStatus> requestSideEffects;
+	private final IQueryable<IInstallableUnit> plannedState;
+
+	private static final IQueryable<IInstallableUnit> EMPTY_IU_QUERYABLE = new IQueryable<IInstallableUnit>() {
+		public IQueryResult<IInstallableUnit> query(IQuery<IInstallableUnit> query, IProgressMonitor monitor) {
+			return Collector.emptyCollector();
+		}
+	};
+
+	public PlannerStatus(IStatus status, RequestStatus globalRequestStatus, Map<IInstallableUnit, RequestStatus> requestChanges, Map<IInstallableUnit, RequestStatus> requestSideEffects, IQueryable<IInstallableUnit> plannedState) {
+		this.status = status;
+		this.globalRequestStatus = globalRequestStatus;
+		this.requestChanges = requestChanges;
+		this.requestSideEffects = requestSideEffects;
+		this.plannedState = (plannedState == null) ? EMPTY_IU_QUERYABLE : plannedState;
+	}
+
+	/**
+	 * Returns a request status object containing additional global details on the planning of the request
+	 * 
+	 * @return An IStatus object with global details on the planning process
+	 */
+	public RequestStatus getRequestStatus() {
+		return globalRequestStatus;
+	}
+
+	/**
+	 * Returns a map of the problems associated with changes to the given installable unit
+	 * in this plan. A status with severity {@link IStatus#OK} is returned if the unit
+	 * can be provisioned successfully
+	 * 
+	 * @return A map of {@link IInstallableUnit} to {@link IStatus} of the requested 
+	 * changes and their corresponding explanation.
+	 */
+	public Map<IInstallableUnit, RequestStatus> getRequestChanges() {
+		return requestChanges;
+	}
+
+	/**
+	 * Returns a map of side-effects that will occur as a result of the plan being executed.
+	 * Side-effects of an install may include:
+	 * <ul>
+	 * <li>Optional software being installed that will become satisfied once the plan
+	 * is executed.</li>
+	 * <li>Optional software currently in the profile that will be uninstalled as a result
+	 * of the plan being executed. This occurs when the optional software has dependencies
+	 * that are incompatible with the software being installed.
+	 * This includes additional software that will be installed as a result of the change,
+	 * or optional changes and their corresponding explanation.
+	 * @return A map of {@link IInstallableUnit} to {@link IStatus} of the additional 
+	 */
+	public Map<IInstallableUnit, RequestStatus> getRequestSideEffects() {
+		return requestSideEffects;
+	}
+
+	/**
+	 * Returns the set of InstallableUnits that make up the expected planned state in terms 
+	 * of additions and removals to the profile based on the planning process. 
+	 * 
+	 * @return An IQueryable of the InstallableUnits in the planned state. 
+	 */
+	public IQueryable<IInstallableUnit> getPlannedState() {
+		return plannedState;
+	}
+
+	// Remaining Methods Delegate to wrapped Status 
+	public IStatus[] getChildren() {
+		return status.getChildren();
+	}
+
+	public int getCode() {
+		return status.getCode();
+	}
+
+	public Throwable getException() {
+		return status.getException();
+	}
+
+	public String getMessage() {
+		return status.getMessage();
+	}
+
+	public String getPlugin() {
+		return status.getPlugin();
+	}
+
+	public int getSeverity() {
+		return status.getSeverity();
+	}
+
+	public boolean isMultiStatus() {
+		return status.isMultiStatus();
+	}
+
+	public boolean isOK() {
+		return status.isOK();
+	}
+
+	public boolean matches(int severityMask) {
+		return status.matches(severityMask);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningPlan.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningPlan.java
index 0f24aff..a32d901 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningPlan.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningPlan.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.engine;
 
-import java.util.Map;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.IQueryable;
@@ -71,33 +70,6 @@ public interface IProvisioningPlan {
 	public abstract IQueryable<IInstallableUnit> getRemovals();
 
 	/**
-	 * Returns the problems associated with changes to the given installable unit
-	 * in this plan. A status with severity {@link IStatus#OK} is returned if the unit
-	 * can be provisioned successfully, or if this plan does not include changes to the
-	 * given unit.
-	 * 
-	 * @param iu The installable unit to return status for
-	 * @return The status for the given unit in this plan
-	 */
-	public abstract IStatus getRequestStatus(IInstallableUnit iu);
-
-	/**
-	 * Returns a map of side-effects that will occur as a result of the plan being executed.
-	 * Side-effects of an install may include:
-	 * <ul>
-	 * <li>Optional software being installed that will become satisfied once the plan
-	 * is executed.</li>
-	 * <li>Optional software currently in the profile that will be uninstalled as a result
-	 * of the plan being executed. This occurs when the optional software has dependencies
-	 * that are incompatible with the software being installed.
-	 * This includes additional software that will be installed as a result of the change,
-	 * or optional
-	 * @return A map of {@link IInstallableUnit} to {@link IStatus} of the additional 
-	 * changes and their corresponding explanation.
-	 */
-	public abstract Map<IInstallableUnit, IStatus> getSideEffectChanges();
-
-	/**
 	 * Returns the overall plan status. The severity of this status indicates
 	 * whether the plan can be successfully executed or not:
 	 * <ul>
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningPlan.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningPlan.java
index 5ea81fb..20f0d67 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningPlan.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningPlan.java
@@ -10,9 +10,9 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.engine;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.CollectionUtils;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.*;
 
@@ -20,45 +20,26 @@ import org.eclipse.equinox.p2.query.*;
  * @since 2.0
  */
 public class ProvisioningPlan implements IProvisioningPlan {
-	IStatus status;
-	Operand[] operands;
-	Map<IInstallableUnit, IStatus> actualChangeRequest;
-	Map<IInstallableUnit, IStatus> sideEffectChanges;
-	IProvisioningPlan installerPlan;
-	IStatus globalRequestStatus;
-	IProfile profile;
-	IQueryable<IInstallableUnit> completeState;
-	private final ProvisioningContext context;
+	final IStatus status;
+	final IProfile profile;
+	final Operand[] operands;
+	final ProvisioningContext context;
+	private IProvisioningPlan installerPlan;
 
 	public ProvisioningPlan(IProfile profile, Operand[] operands, ProvisioningContext context) {
-		this(Status.OK_STATUS, operands, null, Status.OK_STATUS, null, profile, null, context);
+		this(Status.OK_STATUS, profile, operands, context, null);
 	}
 
-	public ProvisioningPlan(IStatus status, IProfile profile, IProvisioningPlan installerPlan, ProvisioningContext context) {
-		this(status, new Operand[0], null, null, installerPlan, profile, null, null);
+	public ProvisioningPlan(IStatus status, IProfile profile, ProvisioningContext context, IProvisioningPlan installerPlan) {
+		this(status, profile, new Operand[0], context, installerPlan);
 	}
 
-	public ProvisioningPlan(IStatus status, Operand[] operands, Map<IInstallableUnit, IStatus>[] actualChangeRequest, IStatus globalStatus, IProvisioningPlan installerPlan, IProfile profile, IQueryable<IInstallableUnit> futureState, ProvisioningContext context) {
+	public ProvisioningPlan(IStatus status, IProfile profile, Operand[] operands, ProvisioningContext context, IProvisioningPlan installerPlan) {
 		this.status = status;
-		this.operands = operands;
-		if (actualChangeRequest != null) {
-			this.actualChangeRequest = actualChangeRequest[0];
-			this.sideEffectChanges = actualChangeRequest[1];
-		}
-		this.globalRequestStatus = globalStatus;
-		this.installerPlan = installerPlan;
 		this.profile = profile;
-		if (futureState == null) {
-			futureState = new IQueryable<IInstallableUnit>() {
-				public IQueryResult<IInstallableUnit> query(IQuery<IInstallableUnit> query, IProgressMonitor monitor) {
-					return Collector.emptyCollector();
-				}
-			};
-		}
-		completeState = futureState;
-		if (context == null)
-			context = new ProvisioningContext();
-		this.context = context;
+		this.operands = (operands == null) ? new Operand[0] : operands;
+		this.context = (context == null) ? new ProvisioningContext() : context;
+		this.installerPlan = installerPlan;
 	}
 
 	/* (non-Javadoc)
@@ -96,28 +77,6 @@ public class ProvisioningPlan implements IProvisioningPlan {
 		return new QueryablePlan(true);
 	}
 
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.engine.IProvisioningPlan#getRequestStatus(org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit)
-	 */
-	public IStatus getRequestStatus(IInstallableUnit iu) {
-		if (actualChangeRequest == null)
-			return null;
-		return actualChangeRequest.get(iu);
-	}
-
-	public IStatus getRequestStatus() {
-		return globalRequestStatus;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.engine.IProvisioningPlan#getSideEffectChanges()
-	 */
-	public Map<IInstallableUnit, IStatus> getSideEffectChanges() {
-		if (sideEffectChanges == null)
-			return CollectionUtils.emptyMap();
-		return sideEffectChanges;
-	}
-
 	private class QueryablePlan implements IQueryable<IInstallableUnit> {
 		private boolean addition;
 
@@ -155,8 +114,4 @@ public class ProvisioningPlan implements IProvisioningPlan {
 	public void setInstallerPlan(IProvisioningPlan p) {
 		installerPlan = p;
 	}
-
-	public IQueryable<IInstallableUnit> getCompleteState() {
-		return completeState;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/PlanAnalyzer.java b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/PlanAnalyzer.java
index 6a0a709..e88b7b4 100644
--- a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/PlanAnalyzer.java
+++ b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/PlanAnalyzer.java
@@ -13,8 +13,7 @@ package org.eclipse.equinox.internal.p2.operations;
 
 import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.RequestStatus;
+import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.p2.engine.IProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.osgi.util.NLS;
@@ -96,10 +95,16 @@ public class PlanAnalyzer {
 		// As it stands now, if the provisioning plan is in error, that info is more detailed
 		// than the request status.  So we will only add request status info to the overall
 		// status when the overall status is not in error.
+
+		PlannerStatus plannerStatus = plan.getStatus() instanceof PlannerStatus ? (PlannerStatus) plan.getStatus() : null;
+		// If there is no additional plannerStatus details just return the report
+		if (plannerStatus == null)
+			return report;
+
 		if (plan.getStatus().getSeverity() != IStatus.ERROR) {
 			IInstallableUnit[] iusAdded = originalRequest.getAddedInstallableUnits();
 			for (int i = 0; i < iusAdded.length; i++) {
-				RequestStatus rs = (RequestStatus) plan.getRequestStatus(iusAdded[i]);
+				RequestStatus rs = plannerStatus.getRequestChanges().get(iusAdded[i]);
 				if (rs.getSeverity() == IStatus.ERROR) {
 					// This is a serious error so it must also appear in the overall status
 					IStatus fail = new Status(IStatus.ERROR, Activator.ID, IStatusCodes.ALTERED_IGNORED_INSTALL_REQUEST, NLS.bind(Messages.PlanAnalyzer_IgnoringInstall, getIUString(iusAdded[i])), null);
@@ -109,7 +114,7 @@ public class PlanAnalyzer {
 			}
 			IInstallableUnit[] iusRemoved = originalRequest.getRemovedInstallableUnits();
 			for (int i = 0; i < iusRemoved.length; i++) {
-				RequestStatus rs = (RequestStatus) plan.getRequestStatus(iusRemoved[i]);
+				RequestStatus rs = plannerStatus.getRequestChanges().get(iusRemoved[i]);
 				if (rs.getSeverity() == IStatus.ERROR) {
 					// TODO see https://bugs.eclipse.org/bugs/show_bug.cgi?id=255984
 					// We are making assumptions here about why the planner chose to ignore an uninstall.
@@ -124,9 +129,9 @@ public class PlanAnalyzer {
 		}
 
 		// Now process the side effects
-		for (Entry<IInstallableUnit, IStatus> entry : plan.getSideEffectChanges().entrySet()) {
+		for (Entry<IInstallableUnit, RequestStatus> entry : plannerStatus.getRequestSideEffects().entrySet()) {
 			IInstallableUnit iu = entry.getKey();
-			RequestStatus rs = (RequestStatus) entry.getValue();
+			RequestStatus rs = entry.getValue();
 			if (rs.getInitialRequestType() == RequestStatus.ADDED) {
 				report.addStatus(iu, new Status(rs.getSeverity(), Activator.ID, IStatusCodes.ALTERED_SIDE_EFFECT_INSTALL, NLS.bind(Messages.PlanAnalyzer_SideEffectInstall, getIUString(iu)), null));
 			} else {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest.java
index 868c7de..bfb78b2 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest.java
@@ -10,16 +10,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Map;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
@@ -51,7 +48,7 @@ public class ActualChangeRequestTest extends AbstractProvisioningTest {
 		req.setInstallableUnitInclusionRules(b, PlannerHelper.createStrictInclusionRule(b));
 		req.setInstallableUnitProfileProperty(b, "foo", "bar");
 		IProvisioningPlan plan = planner.getProvisioningPlan(req, null, null);
-		assertEquals(IStatus.OK, plan.getRequestStatus(b).getSeverity());
+		assertEquals(IStatus.OK, ((PlannerStatus) plan.getStatus()).getRequestChanges().get(b).getSeverity());
 		assertEquals(IStatus.OK, plan.getStatus().getSeverity());
 		engine.perform(plan, null);
 		assertProfileContainsAll("B is missing", profile1, new IInstallableUnit[] {b});
@@ -64,10 +61,10 @@ public class ActualChangeRequestTest extends AbstractProvisioningTest {
 		req2.setInstallableUnitProfileProperty(a, "foo", "bar");
 		IProvisioningPlan plan2 = planner.getProvisioningPlan(req2, null, null);
 		assertEquals(IStatus.OK, plan2.getStatus().getSeverity());
-		assertNull(plan2.getRequestStatus(b));
-		Map m = plan2.getSideEffectChanges();
+		assertNull(((PlannerStatus) plan2.getStatus()).getRequestChanges().get(b));
+		Map m = ((PlannerStatus) plan2.getStatus()).getRequestSideEffects();
 		m.toString();
-		assertEquals(IStatus.OK, plan2.getRequestStatus(a).getSeverity());
+		assertEquals(IStatus.OK, ((PlannerStatus) plan2.getStatus()).getRequestChanges().get(a).getSeverity());
 		engine.perform(plan2, null);
 		assertProfileContainsAll("A is missing", profile1, new IInstallableUnit[] {a, b});
 		assertEquals(2, queryResultSize(profile1.query(InstallableUnitQuery.ANY, null)));
@@ -78,6 +75,6 @@ public class ActualChangeRequestTest extends AbstractProvisioningTest {
 		req3.removeInstallableUnitProfileProperty(b, "foo");
 		IProvisioningPlan plan3 = planner.getProvisioningPlan(req3, null, null);
 		assertEquals(IStatus.OK, plan3.getStatus().getSeverity());
-		assertEquals(IStatus.ERROR, plan3.getRequestStatus(b).getSeverity());
+		assertEquals(IStatus.ERROR, ((PlannerStatus) plan3.getStatus()).getRequestChanges().get(b).getSeverity());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest2.java
index a74fa8f..bad516a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ActualChangeRequestTest2.java
@@ -10,16 +10,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Map;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
@@ -55,7 +52,7 @@ public class ActualChangeRequestTest2 extends AbstractProvisioningTest {
 		req.setInstallableUnitInclusionRules(a, PlannerHelper.createOptionalInclusionRule(a));
 
 		IProvisioningPlan plan = planner.getProvisioningPlan(req, null, null);
-		assertEquals(IStatus.OK, plan.getRequestStatus(b).getSeverity());
+		assertEquals(IStatus.OK, ((PlannerStatus) plan.getStatus()).getRequestChanges().get(b).getSeverity());
 		assertEquals(IStatus.OK, plan.getStatus().getSeverity());
 		engine.perform(plan, null);
 		assertProfileContainsAll("B is missing", profile1, new IInstallableUnit[] {a, b});
@@ -68,13 +65,13 @@ public class ActualChangeRequestTest2 extends AbstractProvisioningTest {
 		req2.removeInstallableUnits(new IInstallableUnit[] {b});
 		IProvisioningPlan plan2 = planner.getProvisioningPlan(req2, null, null);
 		assertEquals(IStatus.OK, plan2.getStatus().getSeverity());
-		assertNotNull(plan2.getRequestStatus(b));
-		assertNotNull(plan2.getRequestStatus(b2));
-		Map m = plan2.getSideEffectChanges();
+		assertNotNull(((PlannerStatus) plan2.getStatus()).getRequestChanges().get(b));
+		assertNotNull(((PlannerStatus) plan2.getStatus()).getRequestChanges().get(b2));
+		Map<IInstallableUnit, RequestStatus> m = ((PlannerStatus) plan2.getStatus()).getRequestSideEffects();
 		assertEquals(1, m.size());
 		assertNotNull(m.get(a));
-		assertEquals(IStatus.INFO, ((RequestStatus) m.get(a)).getSeverity());
-		assertEquals(RequestStatus.REMOVED, ((RequestStatus) m.get(a)).getInitialRequestType());
+		assertEquals(IStatus.INFO, m.get(a).getSeverity());
+		assertEquals(RequestStatus.REMOVED, m.get(a).getInitialRequestType());
 		engine.perform(plan2, null);
 		assertProfileContainsAll("A is missing", profile1, new IInstallableUnit[] {b2});
 		assertEquals(1, queryResultSize(profile1.query(InstallableUnitQuery.ANY, null)));
@@ -84,17 +81,17 @@ public class ActualChangeRequestTest2 extends AbstractProvisioningTest {
 		req3.addInstallableUnits(new IInstallableUnit[] {a});
 		req3.setInstallableUnitInclusionRules(a, PlannerHelper.createOptionalInclusionRule(a));
 		IProvisioningPlan plan3 = planner.getProvisioningPlan(req3, null, null);
-		assertNotNull(plan3.getRequestStatus(a));
-		assertEquals(IStatus.ERROR, plan3.getRequestStatus(a).getSeverity());
-		assertEquals(RequestStatus.ADDED, ((RequestStatus) plan3.getRequestStatus(a)).getInitialRequestType());
+		assertNotNull(((PlannerStatus) plan3.getStatus()).getRequestChanges().get(a));
+		assertEquals(IStatus.ERROR, ((PlannerStatus) plan3.getStatus()).getRequestChanges().get(a).getSeverity());
+		assertEquals(RequestStatus.ADDED, ((PlannerStatus) plan3.getStatus()).getRequestChanges().get(a).getInitialRequestType());
 
 		//Try to Install A
 		ProfileChangeRequest req4 = new ProfileChangeRequest(profile1);
 		req4.addInstallableUnits(new IInstallableUnit[] {a});
 		req4.setInstallableUnitInclusionRules(a, PlannerHelper.createStrictInclusionRule(a));
 		IProvisioningPlan plan4 = planner.getProvisioningPlan(req4, null, null);
-		assertNotNull(plan4.getRequestStatus(a));
-		assertEquals(IStatus.ERROR, plan4.getRequestStatus(a).getSeverity());
-		assertEquals(RequestStatus.ADDED, ((RequestStatus) plan4.getRequestStatus(a)).getInitialRequestType());
+		assertNotNull(((PlannerStatus) plan4.getStatus()).getRequestChanges().get(a));
+		assertEquals(IStatus.ERROR, ((PlannerStatus) plan4.getStatus()).getRequestChanges().get(a).getSeverity());
+		assertEquals(RequestStatus.ADDED, ((PlannerStatus) plan4.getStatus()).getRequestChanges().get(a).getInitialRequestType());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug252638.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug252638.java
index 8957684..ec00b0a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug252638.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug252638.java
@@ -10,13 +10,10 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -57,6 +54,6 @@ public class Bug252638 extends AbstractProvisioningTest {
 		req2.setInstallableUnitInclusionRules(p1, PlannerHelper.createOptionalInclusionRule(p1));
 		IProvisioningPlan plan2 = planner.getProvisioningPlan(req2, null, null);
 		assertEquals(IStatus.OK, plan2.getStatus().getCode());
-		assertEquals(IStatus.ERROR, plan2.getRequestStatus(p1).getSeverity());
+		assertEquals(IStatus.ERROR, ((PlannerStatus) plan2.getStatus()).getRequestChanges().get(p1).getSeverity());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug270683.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug270683.java
index a722081..e027616 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug270683.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug270683.java
@@ -10,13 +10,10 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -57,6 +54,6 @@ public class Bug270683 extends AbstractProvisioningTest {
 		req3.addInstallableUnits(new IInstallableUnit[] {a1, p1, pp1});
 		ProvisioningPlan plan3 = (ProvisioningPlan) planner.getProvisioningPlan(req3, null, null);
 		assertEquals(IStatus.ERROR, plan3.getStatus().getSeverity());
-		assertTrue(((RequestStatus) plan3.getRequestStatus()).getExplanations().toString().contains("patched"));
+		assertTrue(((PlannerStatus) plan3.getStatus()).getRequestStatus().getExplanations().toString().contains("patched"));
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/DisabledExplanation.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/DisabledExplanation.java
index 630e7d8..2e040d8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/DisabledExplanation.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/DisabledExplanation.java
@@ -10,16 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
-import org.eclipse.equinox.internal.provisional.p2.director.IPlanner;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.director.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class DisabledExplanation extends AbstractProvisioningTest {
@@ -50,6 +46,6 @@ public class DisabledExplanation extends AbstractProvisioningTest {
 		ctx.setProperty("org.eclipse.equinox.p2.director.explain", "false");
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, ctx, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		assertNull(plan.getRequestStatus());
+		assertFalse((plan.getStatus() instanceof PlannerStatus));
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationDeepConflict.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationDeepConflict.java
index 72090cd..778a4e8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationDeepConflict.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationDeepConflict.java
@@ -10,12 +10,9 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class ExplanationDeepConflict extends AbstractProvisioningTest {
@@ -55,7 +52,7 @@ public class ExplanationDeepConflict extends AbstractProvisioningTest {
 		pcr.addInstallableUnits(new IInstallableUnit[] {cdt});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(pcr, null, null);
 		// System.out.println(plan.getRequestStatus().getExplanations());
-		RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		assertTrue(requestStatus.getConflictsWithInstalledRoots().contains(cdt));
 		//Here we verify that we only return the roots we asked the installation of. The SDK is installable since it is already installed
 		assertFalse(requestStatus.getConflictsWithInstalledRoots().contains(sdk));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForOptionalDependencies.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForOptionalDependencies.java
index a7aa0e1..597d64a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForOptionalDependencies.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForOptionalDependencies.java
@@ -10,14 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class ExplanationForOptionalDependencies extends AbstractProvisioningTest {
@@ -58,7 +55,7 @@ public class ExplanationForOptionalDependencies extends AbstractProvisioningTest
 		ProfileChangeRequest pcr = new ProfileChangeRequest(profile);
 		pcr.addInstallableUnits(new IInstallableUnit[] {cdt, emf});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(pcr, null, null);
-		RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		assertTrue(requestStatus.getConflictsWithInstalledRoots().contains(emf));
 		assertFalse(requestStatus.getConflictsWithInstalledRoots().contains(cdt));
 		assertFalse(requestStatus.getConflictsWithInstalledRoots().contains(sdk));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForPartialInstallation.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForPartialInstallation.java
index 0addc22..0f00a3c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForPartialInstallation.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationForPartialInstallation.java
@@ -10,12 +10,9 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class ExplanationForPartialInstallation extends AbstractProvisioningTest {
@@ -55,7 +52,7 @@ public class ExplanationForPartialInstallation extends AbstractProvisioningTest
 		pcr.addInstallableUnits(new IInstallableUnit[] {cdt, emf});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(pcr, null, null);
 		// System.out.println(plan.getRequestStatus().getExplanations());
-		RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		assertTrue(requestStatus.getConflictsWithInstalledRoots().contains(cdt));
 		assertFalse(requestStatus.getConflictsWithInstalledRoots().contains(emf));
 		assertFalse(requestStatus.getConflictsWithInstalledRoots().contains(sdk));
@@ -83,7 +80,7 @@ public class ExplanationForPartialInstallation extends AbstractProvisioningTest
 		pcr.addInstallableUnits(new IInstallableUnit[] {cdt, emf});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(pcr, null, null);
 		// System.out.println(plan.getRequestStatus().getExplanations());
-		RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		assertTrue(requestStatus.getConflictsWithInstalledRoots().contains(cdt));
 		assertFalse(requestStatus.getConflictsWithInstalledRoots().contains(emf));
 		assertFalse(requestStatus.getConflictsWithInstalledRoots().contains(sdk));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationSeveralConflictingRoots.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationSeveralConflictingRoots.java
index 39f734d..228a269 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationSeveralConflictingRoots.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ExplanationSeveralConflictingRoots.java
@@ -10,15 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class ExplanationSeveralConflictingRoots extends AbstractProvisioningTest {
@@ -57,7 +54,7 @@ public class ExplanationSeveralConflictingRoots extends AbstractProvisioningTest
 		pcr.addInstallableUnits(new IInstallableUnit[] {cdt, emf});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(pcr, null, null);
 		// System.out.println(plan.getRequestStatus().getExplanations());
-		Set conflictRoots = ((RequestStatus) plan.getRequestStatus()).getConflictsWithInstalledRoots();
+		Set conflictRoots = ((PlannerStatus) plan.getStatus()).getRequestStatus().getConflictsWithInstalledRoots();
 		assertTrue(conflictRoots.contains(cdt) || conflictRoots.contains(emf));
 		//		assertTrue(plan.getRequestStatus().getConflictsWithInstalledRoots().contains(emf));
 
@@ -83,7 +80,7 @@ public class ExplanationSeveralConflictingRoots extends AbstractProvisioningTest
 		pcr.addInstallableUnits(new IInstallableUnit[] {cdt, emf});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(pcr, null, null);
 		// System.out.println(plan.getRequestStatus().getExplanations());
-		Set conflictRoots = ((RequestStatus) plan.getRequestStatus()).getConflictsWithInstalledRoots();
+		Set conflictRoots = ((PlannerStatus) plan.getStatus()).getRequestStatus().getConflictsWithInstalledRoots();
 		assertTrue(conflictRoots.contains(cdt) || conflictRoots.contains(emf));
 
 		//		assertEquals(0, plan.getRequestStatus(cdt).getConflictsWithInstalledRoots().size());
@@ -107,7 +104,7 @@ public class ExplanationSeveralConflictingRoots extends AbstractProvisioningTest
 		pcr.addInstallableUnits(new IInstallableUnit[] {cdt, emf});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(pcr, null, null);
 		// System.out.println(plan.getRequestStatus().getExplanations());
-		Set conflictRoots = ((RequestStatus) plan.getRequestStatus()).getConflictsWithInstalledRoots();
+		Set conflictRoots = ((PlannerStatus) plan.getStatus()).getRequestStatus().getConflictsWithInstalledRoots();
 		assertTrue(conflictRoots.contains(cdt) || conflictRoots.contains(emf));
 		//		assertTrue(plan.getRequestStatus().getConflictsWithInstalledRoots().contains(cdt));
 		//		assertTrue(plan.getRequestStatus().getConflictsWithInstalledRoots().contains(emf));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingDependency.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingDependency.java
index 358b16a..38f7130 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingDependency.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingDependency.java
@@ -10,17 +10,14 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class MissingDependency extends AbstractProvisioningTest {
@@ -56,7 +53,7 @@ public class MissingDependency extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {a1, b1});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		Set explanation = requestStatus.getExplanations();
 		// System.out.println(explanation);
 		assertEquals(2, explanation.size());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement.java
index 1a40c65..a46b2df 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement.java
@@ -10,17 +10,14 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class MissingNonGreedyRequirement extends AbstractProvisioningTest {
@@ -60,7 +57,7 @@ public class MissingNonGreedyRequirement extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {a1});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		Set explanation = requestStatus.getExplanations();
 		assertFalse(explanation.isEmpty());
 		assertTrue(requestStatus.getConflictsWithInstalledRoots().contains(a1));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement2.java
index 907cdc6..6413be6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MissingNonGreedyRequirement2.java
@@ -10,17 +10,14 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class MissingNonGreedyRequirement2 extends AbstractProvisioningTest {
@@ -57,7 +54,7 @@ public class MissingNonGreedyRequirement2 extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {a1});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		Set explanation = requestStatus.getExplanations();
 		assertFalse(explanation.isEmpty());
 		assertTrue(requestStatus.getConflictsWithInstalledRoots().contains(a1));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MultipleSingleton.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MultipleSingleton.java
index 081cc6f..ccb4f7a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MultipleSingleton.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/MultipleSingleton.java
@@ -72,7 +72,7 @@ public class MultipleSingleton extends AbstractProvisioningTest {
 		ProfileChangeRequest req = new ProfileChangeRequest(profile);
 		req.addInstallableUnits(new IInstallableUnit[] {x});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
-		assertEquals(1, queryResultSize(plan.getCompleteState().query(new InstallableUnitQuery("X"), null)));
+		assertEquals(1, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(new InstallableUnitQuery("X"), null)));
 		assertEquals(IStatus.OK, plan.getStatus().getSeverity());
 
 	}
@@ -88,7 +88,7 @@ public class MultipleSingleton extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {y});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		Set explanation = requestStatus.getExplanations();
 		// System.out.println(explanation);
 		assertFalse(explanation.isEmpty());
@@ -117,7 +117,7 @@ public class MultipleSingleton extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {w});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		Set explanation = requestStatus.getExplanations();
 		// System.out.println(explanation);
 		assertFalse(explanation.isEmpty());
@@ -152,7 +152,7 @@ public class MultipleSingleton extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {u, v});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		Set explanation = requestStatus.getExplanations();
 		assertFalse(explanation.isEmpty());
 		assertEquals(Explanation.VIOLATED_SINGLETON_CONSTRAINT, requestStatus.getShortExplanation());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
index d002ce5..dcf2355 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
@@ -1,18 +1,14 @@
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.*;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.director.Slicer;
 import org.eclipse.equinox.internal.p2.metadata.ProvidedCapability;
 import org.eclipse.equinox.internal.p2.metadata.RequiredCapability;
-import org.eclipse.equinox.internal.provisional.p2.director.IPlanner;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.director.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.repository.metadata.IMetadataRepository;
@@ -87,8 +83,8 @@ public class NegationTesting extends AbstractProvisioningTest {
 		ProfileChangeRequest changeRequest = new ProfileChangeRequest(profile);
 		changeRequest.addInstallableUnits(new IInstallableUnit[] {iu1});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(changeRequest, null, null);
-		assertEquals(0, queryResultSize(plan.getCompleteState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
-		assertEquals(2, queryResultSize(plan.getCompleteState().query(InstallableUnitQuery.ANY, null)));
+		assertEquals(0, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
+		assertEquals(2, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(InstallableUnitQuery.ANY, null)));
 
 		//Verify that the installing iu1 and iu3 will result in a conflict since iu3 is excluded by the requirement of iu1
 		ProfileChangeRequest changeRequest2 = new ProfileChangeRequest(profile);
@@ -175,8 +171,8 @@ public class NegationTesting extends AbstractProvisioningTest {
 		ProfileChangeRequest changeRequest = new ProfileChangeRequest(profile);
 		changeRequest.addInstallableUnits(new IInstallableUnit[] {iu1});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(changeRequest, null, null);
-		assertEquals(0, queryResultSize(plan.getCompleteState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
-		assertEquals(2, queryResultSize(plan.getCompleteState().query(InstallableUnitQuery.ANY, null)));
+		assertEquals(0, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
+		assertEquals(2, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(InstallableUnitQuery.ANY, null)));
 	}
 
 	//Test the slicer and the resolver. 
@@ -228,8 +224,8 @@ public class NegationTesting extends AbstractProvisioningTest {
 		ProfileChangeRequest changeRequest = new ProfileChangeRequest(profile);
 		changeRequest.addInstallableUnits(new IInstallableUnit[] {iu1});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(changeRequest, null, null);
-		assertEquals(0, queryResultSize(plan.getCompleteState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
-		assertEquals(2, queryResultSize(plan.getCompleteState().query(InstallableUnitQuery.ANY, null)));
+		assertEquals(0, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
+		assertEquals(2, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(InstallableUnitQuery.ANY, null)));
 
 		//Verify that the installing iu1 and iu3 will result in a conflict since iu3 is excluded by the requirement of iu1
 		ProfileChangeRequest changeRequest2 = new ProfileChangeRequest(profile);
@@ -299,8 +295,8 @@ public class NegationTesting extends AbstractProvisioningTest {
 		ProfileChangeRequest changeRequest = new ProfileChangeRequest(profile);
 		changeRequest.addInstallableUnits(new IInstallableUnit[] {iu1});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(changeRequest, null, null);
-		assertEquals(0, queryResultSize(plan.getCompleteState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
-		assertEquals(2, queryResultSize(plan.getCompleteState().query(InstallableUnitQuery.ANY, null)));
+		assertEquals(0, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(new InstallableUnitQuery("ProviderOf1_1_1"), null)));
+		assertEquals(2, queryResultSize(((PlannerStatus) plan.getStatus()).getPlannedState().query(InstallableUnitQuery.ANY, null)));
 
 		//Verify that the installing iu1 and iu4 will result in a conflict since iu3 is excluded by the requirement of iu1
 		ProfileChangeRequest changeRequest2 = new ProfileChangeRequest(profile);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest12.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest12.java
index 3d362de..9da689d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest12.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest12.java
@@ -10,15 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -76,7 +73,7 @@ public class PatchTest12 extends AbstractProvisioningTest {
 		req3.addInstallableUnits(new IInstallableUnit[] {a1, p1});
 		ProvisioningPlan plan3 = (ProvisioningPlan) planner.getProvisioningPlan(req3, null, null);
 		assertTrue(IStatus.ERROR == plan3.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan3.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan3.getStatus()).getRequestStatus();
 		Set conflictRootIUs = requestStatus.getConflictsWithInstalledRoots();
 		assertTrue(conflictRootIUs.contains(p1));
 		assertEquals(Explanation.MISSING_REQUIREMENT, requestStatus.getShortExplanation());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
index 70571a5..0096833 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
@@ -10,15 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -101,7 +98,7 @@ public class PatchTest2 extends AbstractProvisioningTest {
 		req3.addInstallableUnits(new IInstallableUnit[] {a1, p2});
 		ProvisioningPlan plan3 = (ProvisioningPlan) planner.getProvisioningPlan(req3, null, null);
 		assertEquals(IStatus.ERROR, plan3.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan3.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan3.getStatus()).getRequestStatus();
 		assertEquals(Explanation.MISSING_REQUIREMENT, requestStatus.getShortExplanation());
 		// System.out.println(plan3.getRequestStatus().getExplanations());
 		Set conflictingRoot = requestStatus.getConflictsWithInstalledRoots();
@@ -115,7 +112,7 @@ public class PatchTest2 extends AbstractProvisioningTest {
 		req5.addInstallableUnits(new IInstallableUnit[] {a1, p4});
 		ProvisioningPlan plan5 = (ProvisioningPlan) planner.getProvisioningPlan(req5, null, null);
 		assertEquals(IStatus.ERROR, plan5.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan5.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan5.getStatus()).getRequestStatus();
 		assertEquals(Explanation.MISSING_REQUIREMENT, requestStatus.getShortExplanation());
 		// System.out.println(plan5.getRequestStatus().getExplanations());
 		Set conflictingRoot = requestStatus.getConflictsWithInstalledRoots();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
index 17b87a5..0b08bb6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
@@ -10,15 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -107,7 +104,7 @@ public class PatchTest6 extends AbstractProvisioningTest {
 		req1.addInstallableUnits(new IInstallableUnit[] {a1, c1});
 		ProvisioningPlan plan1 = (ProvisioningPlan) planner.getProvisioningPlan(req1, null, null);
 		assertEquals(IStatus.ERROR, plan1.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan1.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan1.getStatus()).getRequestStatus();
 		assertEquals(Explanation.MISSING_REQUIREMENT, requestStatus.getShortExplanation());
 		Set conflictingRoots = requestStatus.getConflictsWithInstalledRoots();
 		assertEquals(1, conflictingRoots.size());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest9.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest9.java
index 0a9f4a7..debd36e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest9.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest9.java
@@ -10,15 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -69,7 +66,7 @@ public class PatchTest9 extends AbstractProvisioningTest {
 		req1.addInstallableUnits(new IInstallableUnit[] {a1, p1});
 		ProvisioningPlan plan1 = (ProvisioningPlan) planner.getProvisioningPlan(req1, null, null);
 		assertEquals(IStatus.ERROR, plan1.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan1.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan1.getStatus()).getRequestStatus();
 		assertEquals(Explanation.MISSING_REQUIREMENT, requestStatus.getShortExplanation());
 		Set conflictingRoots = requestStatus.getConflictsWithInstalledRoots();
 		assertEquals(1, conflictingRoots.size());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTestUpdate.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTestUpdate.java
index f092723..db1542e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTestUpdate.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTestUpdate.java
@@ -10,15 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import java.util.Set;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -90,7 +87,7 @@ public class PatchTestUpdate extends AbstractProvisioningTest {
 		req1.removeInstallableUnits(new IInstallableUnit[] {p2Feature});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req1, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		Set conflictingRoot = requestStatus.getConflictsWithInstalledRoots();
 		assertEquals(1, conflictingRoot.size());
 		assertTrue(conflictingRoot.contains(p2Feature20));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/SimpleSingleton.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/SimpleSingleton.java
index 810e109..5c313d6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/SimpleSingleton.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/SimpleSingleton.java
@@ -10,17 +10,14 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.p2.metadata.Version;
-import org.eclipse.equinox.p2.metadata.VersionRange;
-
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.director.Explanation;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.engine.ProvisioningPlan;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class SimpleSingleton extends AbstractProvisioningTest {
@@ -55,7 +52,7 @@ public class SimpleSingleton extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {y});
 		ProvisioningPlan provisioningPlan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, provisioningPlan.getStatus().getSeverity());
-		assertNotNull(provisioningPlan.getCompleteState());
+		assertNotNull(((PlannerStatus) provisioningPlan.getStatus()).getPlannedState());
 	}
 
 	public void testExplanation() {
@@ -63,7 +60,7 @@ public class SimpleSingleton extends AbstractProvisioningTest {
 		req.addInstallableUnits(new IInstallableUnit[] {y});
 		ProvisioningPlan plan = (ProvisioningPlan) planner.getProvisioningPlan(req, null, null);
 		assertEquals(IStatus.ERROR, plan.getStatus().getSeverity());
-		final RequestStatus requestStatus = (RequestStatus) plan.getRequestStatus();
+		final RequestStatus requestStatus = ((PlannerStatus) plan.getStatus()).getRequestStatus();
 		assertEquals(Explanation.VIOLATED_SINGLETON_CONSTRAINT, requestStatus.getShortExplanation());
 		assertTrue(requestStatus.getConflictsWithInstalledRoots().contains(y));
 	}

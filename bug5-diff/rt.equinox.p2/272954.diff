commit 9c0845528c7738f2d8b0085987e4ff770353ab81
Author: Pascal Rapicault <prapicau>
Date:   Fri Feb 26 17:35:57 2010 +0000

    Bug 272954 - [planner] updatesFor should return a Queryable

9	13	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
2	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/planner/IPlanner.java
7	7	bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/UpdateOperation.java
8	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/FindingPatchesThroughUpdates.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
3	5	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index f49fbef..7a97672 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -11,12 +11,9 @@
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.director;
 
-import org.eclipse.equinox.p2.query.QueryUtil;
-
 import java.lang.reflect.Method;
 import java.net.URI;
 import java.util.*;
-import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
@@ -161,21 +158,21 @@ public class SimplePlanner implements IPlanner {
 		}
 		// Now deal with profile property changes/additions
 		Map<String, String> propertyChanges = profileChangeRequest.getPropertiesToAdd();
-		for (Entry<String, String> entry : propertyChanges.entrySet()) {
+		for (Map.Entry<String, String> entry : propertyChanges.entrySet()) {
 			plan.setProfileProperty(entry.getKey(), entry.getValue());
 		}
 
 		// Now deal with iu property changes/additions.
 		Map<IInstallableUnit, Map<String, String>> allIUPropertyChanges = profileChangeRequest.getInstallableUnitProfilePropertiesToAdd();
-		for (Entry<IInstallableUnit, Map<String, String>> entry : allIUPropertyChanges.entrySet()) {
+		for (Map.Entry<IInstallableUnit, Map<String, String>> entry : allIUPropertyChanges.entrySet()) {
 			IInstallableUnit iu = entry.getKey();
-			for (Entry<String, String> entry2 : entry.getValue().entrySet()) {
+			for (Map.Entry<String, String> entry2 : entry.getValue().entrySet()) {
 				plan.setInstallableUnitProfileProperty(iu, entry2.getKey(), entry2.getValue());
 			}
 		}
 		// Now deal with iu property removals.
 		Map<IInstallableUnit, List<String>> allIUPropertyDeletions = profileChangeRequest.getInstallableUnitProfilePropertiesToRemove();
-		for (Entry<IInstallableUnit, List<String>> entry : allIUPropertyDeletions.entrySet()) {
+		for (Map.Entry<IInstallableUnit, List<String>> entry : allIUPropertyDeletions.entrySet()) {
 			IInstallableUnit iu = entry.getKey();
 			List<String> iuPropertyRemovals = entry.getValue();
 			for (String key : iuPropertyRemovals) {
@@ -527,7 +524,7 @@ public class SimplePlanner implements IPlanner {
 
 		//Create an agent request from the initial request
 		ProfileChangeRequest agentRequest = new ProfileChangeRequest(profile);
-		for (Entry<String, String> entry : initialRequest.getPropertiesToAdd().entrySet()) {
+		for (Map.Entry<String, String> entry : initialRequest.getPropertiesToAdd().entrySet()) {
 			agentRequest.setProfileProperty(entry.getKey(), entry.getValue());
 		}
 		String[] removedProperties = initialRequest.getPropertiesToRemove();
@@ -535,7 +532,7 @@ public class SimplePlanner implements IPlanner {
 			agentRequest.removeProfileProperty(removedProperties[i]);
 		}
 		Map<IInstallableUnit, List<String>> removedIUProperties = initialRequest.getInstallableUnitProfilePropertiesToRemove();
-		for (Entry<IInstallableUnit, List<String>> entry : removedIUProperties.entrySet()) {
+		for (Map.Entry<IInstallableUnit, List<String>> entry : removedIUProperties.entrySet()) {
 			for (String propKey : entry.getValue()) {
 				agentRequest.removeInstallableUnitProfileProperty(entry.getKey(), propKey);
 			}
@@ -657,7 +654,7 @@ public class SimplePlanner implements IPlanner {
 		Collection<IInstallableUnit> additionRequested = profileChangeRequest.getAdditions();
 		Collection<IInstallableUnit> removalRequested = profileChangeRequest.getRemovals();
 
-		for (Entry<IInstallableUnit, List<String>> object : profileChangeRequest.getInstallableUnitProfilePropertiesToRemove().entrySet()) {
+		for (Map.Entry<IInstallableUnit, List<String>> object : profileChangeRequest.getInstallableUnitProfilePropertiesToRemove().entrySet()) {
 			if (object.getValue().contains(INCLUSION_RULES))
 				profileChangeRequest.setInstallableUnitProfileProperty(object.getKey(), INCLUSION_RULES, PlannerHelper.createStrictInclusionRule(object.getKey()));
 		}
@@ -732,7 +729,7 @@ public class SimplePlanner implements IPlanner {
 		return MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, iu.getId(), new VersionRange(iu.getVersion(), true, iu.getVersion(), true), null, false, false, true);
 	}
 
-	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, ProvisioningContext context, IProgressMonitor monitor) {
+	public IQueryResult<IInstallableUnit> updatesFor(IInstallableUnit toUpdate, ProvisioningContext context, IProgressMonitor monitor) {
 		Map<String, IInstallableUnit> resultsMap = new HashMap<String, IInstallableUnit>();
 
 		URI[] repositories = context.getMetadataRepositories();
@@ -758,8 +755,7 @@ public class SimplePlanner implements IPlanner {
 			}
 		}
 		sub.done();
-		Collection<IInstallableUnit> results = resultsMap.values();
-		return results.toArray(new IInstallableUnit[results.size()]);
+		return new CollectionResult<IInstallableUnit>(resultsMap.values());
 	}
 
 	//helper class to trick the resolver to believe that everything is optional
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/planner/IPlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/planner/IPlanner.java
index 251bc7a..d7f44bd 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/planner/IPlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/planner/IPlanner.java
@@ -14,6 +14,7 @@ package org.eclipse.equinox.p2.planner;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.query.IQueryResult;
 
 /**
  * Planners are responsible for determining what should be done to a given 
@@ -42,5 +43,5 @@ public interface IPlanner {
 
 	public IProfileChangeRequest createChangeRequest(IProfile profileToChange);
 
-	public IInstallableUnit[] updatesFor(IInstallableUnit iu, ProvisioningContext context, IProgressMonitor monitor);
+	public IQueryResult<IInstallableUnit> updatesFor(IInstallableUnit iu, ProvisioningContext context, IProgressMonitor monitor);
 }
diff --git a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/UpdateOperation.java b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/UpdateOperation.java
index 4fdd8b7..f715ac0 100644
--- a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/UpdateOperation.java
+++ b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/UpdateOperation.java
@@ -12,8 +12,6 @@
 
 package org.eclipse.equinox.p2.operations;
 
-import org.eclipse.equinox.p2.query.QueryUtil;
-
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.operations.*;
@@ -22,6 +20,7 @@ import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.IQueryResult;
+import org.eclipse.equinox.p2.query.QueryUtil;
 
 /**
  * An UpdateOperation describes an operation that updates {@link IInstallableUnit}s in
@@ -133,16 +132,17 @@ public class UpdateOperation extends ProfileChangeOperation {
 			updates = possibleUpdatesByIU.get(iu);
 		} else {
 			// We must consult the planner
-			IInstallableUnit[] replacements = session.getPlanner().updatesFor(iu, context, monitor);
-			updates = new ArrayList<Update>(replacements.length);
-			for (int i = 0; i < replacements.length; i++) {
+			IQueryResult<IInstallableUnit> replacements = session.getPlanner().updatesFor(iu, context, monitor);
+			updates = new ArrayList<Update>();
+			for (Iterator<IInstallableUnit> replacementIterator = replacements.iterator(); replacementIterator.hasNext();) {
 				// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=273967
 				// In the case of patches, it's possible that a patch is returned as an available update
 				// even though it is already installed, because we are querying each IU for updates individually.
 				// For now, we ignore any proposed update that is already installed.
-				IQueryResult<IInstallableUnit> alreadyInstalled = profile.query(QueryUtil.createIUQuery(replacements[i]), null);
+				IInstallableUnit replacementIU = replacementIterator.next();
+				IQueryResult<IInstallableUnit> alreadyInstalled = profile.query(QueryUtil.createIUQuery(replacementIU), null);
 				if (alreadyInstalled.isEmpty()) {
-					Update update = new Update(iu, replacements[i]);
+					Update update = new Update(iu, replacementIU);
 					updates.add(update);
 				}
 			}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/FindingPatchesThroughUpdates.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/FindingPatchesThroughUpdates.java
index 0578b3c..94e9468 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/FindingPatchesThroughUpdates.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/FindingPatchesThroughUpdates.java
@@ -17,6 +17,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.planner.IPlanner;
+import org.eclipse.equinox.p2.query.IQueryResult;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class FindingPatchesThroughUpdates extends AbstractProvisioningTest {
@@ -56,14 +57,15 @@ public class FindingPatchesThroughUpdates extends AbstractProvisioningTest {
 	}
 
 	public void testInstall() {
-		IInstallableUnit[] updates = planner.updatesFor(a1, new ProvisioningContext(), new NullProgressMonitor());
-		assertEquals(2, updates.length);
-		assertEquals("Checking updates", new IInstallableUnit[] {a120, patchA1}, updates, false);
+		IQueryResult<IInstallableUnit> updates = planner.updatesFor(a1, new ProvisioningContext(), new NullProgressMonitor());
+		assertEquals(2, updates.unmodifiableSet().size());
+		assertTrue(updates.unmodifiableSet().contains(a120));
+		assertTrue(updates.unmodifiableSet().contains(patchA1));
 	}
 
 	public void testFindUpdatesOfPatches() {
-		IInstallableUnit[] updates = planner.updatesFor(anotherPatch2, new ProvisioningContext(), new NullProgressMonitor());
-		assertEquals(1, updates.length);
-		assertEquals("Checking updates", new IInstallableUnit[] {anotherPatch3}, updates, false);
+		IQueryResult<IInstallableUnit> updates = planner.updatesFor(anotherPatch2, new ProvisioningContext(), new NullProgressMonitor());
+		assertEquals(1, updates.unmodifiableSet().size());
+		assertTrue(updates.unmodifiableSet().contains(anotherPatch3));
 	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
index c5a5bf4..cee4567 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
@@ -12,7 +12,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.query;
 
-import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.engine.ProvisioningContext;
@@ -41,13 +42,12 @@ public class QueryableUpdates implements IQueryable<IInstallableUnit> {
 		monitor.beginTask(ProvUIMessages.QueryableUpdates_UpdateListProgress, totalWork);
 		IPlanner planner = ui.getSession().getPlanner();
 		try {
-			ArrayList<IInstallableUnit> allUpdates = new ArrayList<IInstallableUnit>();
+			Set<IInstallableUnit> allUpdates = new HashSet<IInstallableUnit>();
 			for (int i = 0; i < iusToUpdate.length; i++) {
 				if (monitor.isCanceled())
 					return Collector.emptyCollector();
-				IInstallableUnit[] updates = planner.updatesFor(iusToUpdate[i], new ProvisioningContext(), new SubProgressMonitor(monitor, totalWork / 2 / iusToUpdate.length));
-				for (int j = 0; j < updates.length; j++)
-					allUpdates.add(updates[j]);
+				IQueryResult<IInstallableUnit> updates = planner.updatesFor(iusToUpdate[i], new ProvisioningContext(), new SubProgressMonitor(monitor, totalWork / 2 / iusToUpdate.length));
+				allUpdates.addAll(updates.unmodifiableSet());
 			}
 			return query.perform(allUpdates.iterator());
 		} catch (OperationCanceledException e) {
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
index 9b76364..eb483f5 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
@@ -11,8 +11,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatechecker;
 
-import org.eclipse.equinox.p2.query.QueryUtil;
-
 import java.net.URI;
 import java.text.SimpleDateFormat;
 import java.util.*;
@@ -25,7 +23,7 @@ import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.planner.IPlanner;
-import org.eclipse.equinox.p2.query.IQuery;
+import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.repository.IRepositoryManager;
 import org.eclipse.equinox.p2.repository.metadata.IMetadataRepositoryManager;
 
@@ -132,8 +130,8 @@ public class UpdateChecker implements IUpdateChecker {
 		Iterator<IInstallableUnit> iter = profile.query(query, null).iterator();
 		while (iter.hasNext()) {
 			IInstallableUnit iu = iter.next();
-			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, context, null);
-			if (replacements.length > 0)
+			IQueryResult<IInstallableUnit> replacements = getPlanner().updatesFor(iu, context, null);
+			if (!replacements.isEmpty())
 				iusWithUpdates.add(iu);
 		}
 		return iusWithUpdates;

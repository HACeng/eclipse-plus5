commit d1fd658e1de855f36d003e1b557ee11a80b8c7f2
Author: Susan Franklin <sfranklin>
Date:   Thu Jan 3 22:12:40 2008 +0000

    Bug 212607 - [prov][ui] Resolving should be a job

2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
4	21	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
5	28	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
31	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
9	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
31	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index ac10a4b..9281332 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -43,6 +43,7 @@ public class ProvUIMessages extends NLS {
 	public static String IUPropertiesGroup_LicenseProperty;
 	public static String IUDetailsLabelProvider_KB;
 	public static String IUDetailsLabelProvider_Bytes;
+	public static String IUDetailsLabelProvider_ComputingSize;
 	public static String IUDetailsLabelProvider_Unknown;
 	public static String IUPropertiesGroup_NameProperty;
 	public static String IUPropertiesGroup_ProviderProperty;
@@ -112,6 +113,7 @@ public class ProvUIMessages extends NLS {
 	// Dialogs
 	public static String AddRepositoryDialog_DuplicateURL;
 	public static String AddRepositoryDialog_Title;
+	public static String AvailableIUElement_ProfileNotFound;
 	public static String UpdateAction_UpdateInformationTitle;
 	public static String UpdateAction_UpdatesAvailableMessage;
 	public static String UpdateDialog_AssemblingUpdatesProgress;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index a5f3362..2c429a6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -14,7 +14,6 @@ import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.List;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.SubMonitor;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -31,7 +30,6 @@ import org.eclipse.swt.SWT;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.PlatformUI;
 
 public abstract class ProfileModificationWizardPage extends WizardPage {
 	private static final int DEFAULT_HEIGHT = 20;
@@ -78,19 +76,7 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 				tc.setWidth(convertWidthInCharsToPixels(DEFAULT_COLUMN_WIDTH));
 		}
 		final List list = new ArrayList(ius.length);
-		IRunnableWithProgress runnable = new IRunnableWithProgress() {
-			public void run(IProgressMonitor monitor) {
-				makeElements(getIUs(), list, monitor);
-			}
-		};
-		try {
-			// We are not open yet so we can't use the local progress control
-			PlatformUI.getWorkbench().getProgressService().busyCursorWhile(runnable);
-		} catch (InterruptedException e) {
-			// don't report thread interruption
-		} catch (InvocationTargetException e) {
-			ProvUI.handleException(e.getCause(), null);
-		}
+		makeElements(getIUs(), list);
 
 		listViewer.addCheckStateListener(new ICheckStateListener() {
 			public void checkStateChanged(CheckStateChangedEvent event) {
@@ -100,20 +86,17 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		contentProvider = new StaticContentProvider(list.toArray());
 		listViewer.setContentProvider(contentProvider);
 		listViewer.setInput(new Object());
-		listViewer.setLabelProvider(new IUDetailsLabelProvider(getColumnConfig()));
+		listViewer.setLabelProvider(new IUDetailsLabelProvider(getColumnConfig(), getShell()));
 		setInitialSelections();
 		selectedIUsChanged();
 		setControl(composite);
 		Dialog.applyDialogFont(composite);
 	}
 
-	protected void makeElements(IInstallableUnit[] iusToShow, List list, IProgressMonitor monitor) {
-		SubMonitor sub = SubMonitor.convert(monitor);
-		sub.setWorkRemaining(iusToShow.length);
+	protected void makeElements(IInstallableUnit[] iusToShow, List list) {
 		for (int i = 0; i < iusToShow.length; i++) {
-			list.add(new AvailableIUElement(iusToShow[i], getSize(iusToShow[i], sub.newChild(1))));
+			list.add(new AvailableIUElement(iusToShow[i], profile.getProfileId()));
 		}
-		monitor.done();
 	}
 
 	public boolean performFinish() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 2eeb08f..d7e9a3e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -11,16 +11,15 @@
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
 import java.util.*;
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.engine.phases.Sizing;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.model.IUElement;
 import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
@@ -32,20 +31,12 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 		setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
 	}
 
-	protected void makeElements(IInstallableUnit[] ius, List elements, IProgressMonitor monitor) {
-		SubMonitor sub = SubMonitor.convert(monitor);
-		sub.setWorkRemaining(ius.length * 2);
+	protected void makeElements(IInstallableUnit[] ius, List elements) {
 		for (int i = 0; i < ius.length; i++) {
-			if (monitor.isCanceled())
-				getWizard().performCancel();
 			try {
-				IInstallableUnit[] replacementIUs = ProvisioningUtil.updatesFor(new IInstallableUnit[] {ius[i]}, sub.newChild(1));
-				SubMonitor loopMonitor = sub.newChild(1);
-				loopMonitor.setWorkRemaining(replacementIUs.length);
+				IInstallableUnit[] replacementIUs = ProvisioningUtil.updatesFor(new IInstallableUnit[] {ius[i]}, null);
 				for (int j = 0; j < replacementIUs.length; j++) {
-					elements.add(new AvailableUpdateElement(replacementIUs[j], getSize(ius[i], replacementIUs[j], loopMonitor.newChild(1)), ius[i]));
-					if (monitor.isCanceled())
-						getWizard().performCancel();
+					elements.add(new AvailableUpdateElement(replacementIUs[j], ius[i], getProfile().getProfileId()));
 				}
 			} catch (ProvisionException e) {
 				break;
@@ -63,20 +54,6 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 		return (IInstallableUnit[]) iusToReplace.toArray(new IInstallableUnit[iusToReplace.size()]);
 	}
 
-	protected long getSize(IInstallableUnit iuToRemove, IInstallableUnit iuToAdd, IProgressMonitor monitor) {
-		long size;
-		SubMonitor sub = SubMonitor.convert(monitor);
-		sub.setWorkRemaining(100);
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(new IInstallableUnit[] {iuToRemove}, new IInstallableUnit[] {iuToAdd}, getProfile(), sub.newChild(50));
-			Sizing info = ProvisioningUtil.getSizeInfo(plan, getProfile(), sub.newChild(50));
-			size = info.getDiskSize();
-		} catch (ProvisionException e) {
-			size = IUElement.SIZE_UNKNOWN;
-		}
-		return size;
-	}
-
 	protected String getOperationLabel() {
 		return ProvUIMessages.UpdateIUOperationLabel;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index e7f1522..6007819 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -58,6 +58,7 @@ ProvElementQueryResult_CouldNotInstantiateElement=Could not instantiate UI eleme
 IUPropertyPage_NoIUSelected=There was nothing selected to show in the properties.
 IUDetailsLabelProvider_KB={0} KB
 IUDetailsLabelProvider_Bytes={0} Bytes
+IUDetailsLabelProvider_ComputingSize=Computing size...
 IUDetailsLabelProvider_Unknown=Unknown
 IUPropertiesGroup_NameProperty=Name
 IUPropertiesGroup_ProviderProperty=Provider
@@ -113,6 +114,7 @@ OptionalPlatformRestartMessage = It is recommended you restart the system for th
 but it may be possible to apply the changes you have made without restarting. \
 Would you like to restart now?
 ApplyProfileChangesDialog_ApplyChanges=Apply Changes
+AvailableIUElement_ProfileNotFound=Could not find profile to use for size computation.
 QueryableArtifactRepositoryManager_RepositoryQueryProgress=Getting artifact repositories
 QueryableMetadataRepositoryManager_RepositoryQueryProgress=Getting repositories
 QueryableProfileRegistry_QueryProfileProgress=Getting profiles
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index bde4f36..d9d2e53 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -10,9 +10,16 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.model;
 
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.engine.phases.Sizing;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.model.IUElement;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
 /**
  * Element wrapper class for IU's that are available for installation.
@@ -23,12 +30,13 @@ import org.eclipse.equinox.p2.ui.model.IUElement;
  */
 public class AvailableIUElement extends ProvElement implements IUElement {
 
-	long size;
 	IInstallableUnit iu;
+	long size = IUElement.SIZE_UNKNOWN;
+	String profileID;
 
-	public AvailableIUElement(IInstallableUnit iu, long size) {
-		this.size = size;
+	public AvailableIUElement(IInstallableUnit iu, String profileID) {
 		this.iu = iu;
+		this.profileID = profileID;
 	}
 
 	/*
@@ -66,6 +74,26 @@ public class AvailableIUElement extends ProvElement implements IUElement {
 		return size;
 	}
 
+	public void computeSize() {
+		if (profileID == null)
+			return;
+		try {
+			ProvisioningPlan plan = getSizingPlan();
+			Sizing info = ProvisioningUtil.getSizeInfo(plan, getProfile(), null);
+			size = info.getDiskSize();
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, ProvUIMessages.AvailableIUElement_ProfileNotFound);
+		}
+	}
+
+	protected Profile getProfile() throws ProvisionException {
+		return ProvisioningUtil.getProfile(profileID);
+	}
+
+	protected ProvisioningPlan getSizingPlan() throws ProvisionException {
+		return ProvisioningUtil.getInstallPlan(new IInstallableUnit[] {getIU()}, getProfile(), null);
+	}
+
 	public IInstallableUnit getIU() {
 		return iu;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
index 51b9dbd..367d25b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
@@ -10,7 +10,10 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.model;
 
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
 /**
  * Element wrapper class for IU's that are available for installation.
@@ -23,12 +26,16 @@ public class AvailableUpdateElement extends AvailableIUElement {
 
 	IInstallableUnit iuToBeUpdated;
 
-	public AvailableUpdateElement(IInstallableUnit iu, long size, IInstallableUnit iuToBeUpdated) {
-		super(iu, size);
+	public AvailableUpdateElement(IInstallableUnit iu, IInstallableUnit iuToBeUpdated, String profileID) {
+		super(iu, profileID);
 		this.iuToBeUpdated = iuToBeUpdated;
 	}
 
 	public IInstallableUnit getIUToBeUpdated() {
 		return iuToBeUpdated;
 	}
+
+	protected ProvisioningPlan getSizingPlan() throws ProvisionException {
+		return ProvisioningUtil.getReplacePlan(new IInstallableUnit[] {iuToBeUpdated}, new IInstallableUnit[] {getIU()}, getProfile(), null);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
index 46000c3..c69d5e7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
@@ -64,6 +64,10 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 		return false;
 	}
 
+	public void computeSize() {
+		// Should never be called, since shouldShowSize() returns false
+	}
+
 	public boolean shouldShowVersion() {
 		return false;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
index 6f3bad7..6c72daa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
@@ -28,4 +28,6 @@ public interface IUElement {
 	public boolean shouldShowVersion();
 
 	public long getSize();
+
+	public void computeSize();
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
index c5175fd..de379d5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
@@ -66,4 +66,8 @@ public class IUVersionsElement extends CachedQueryElement implements IUElement {
 	public boolean shouldShowVersion() {
 		return true;
 	}
+
+	public void computeSize() {
+		// Should never be called, since shouldShowSize() returns false
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
index fde4331..d926691 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
@@ -81,6 +81,10 @@ public class InstalledIUElement extends ProvElement implements IUElement {
 		return false;
 	}
 
+	public void computeSize() {
+		// Should never be called, as long as shouldShowSize() returns false
+	}
+
 	public boolean shouldShowVersion() {
 		return true;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java
index fde5007..acc5f9a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java
@@ -81,4 +81,8 @@ public class RollbackProfileElement extends ProvElement implements IUElement {
 		return null;
 	}
 
+	public void computeSize() {
+		// Should never be called, since shouldShowSize() returns false
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
index faa8570..f9b7cac 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
@@ -15,7 +15,6 @@ import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.p2.ui.model.IUElement;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
 /**
@@ -50,7 +49,7 @@ public class AvailableIUCollector extends QueriedElementCollector {
 	}
 
 	protected ProvElement makeDefaultElement(IInstallableUnit iu) {
-		return new AvailableIUElement(iu, IUElement.SIZE_UNKNOWN);
+		return new AvailableIUElement(iu, null);
 	}
 
 	protected boolean isCategory(IInstallableUnit iu) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
index 7a6eb19..37ec4da 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -12,17 +12,18 @@
 package org.eclipse.equinox.p2.ui.viewers;
 
 import java.text.NumberFormat;
-import org.eclipse.core.runtime.Assert;
+import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.model.IUElement;
-import org.eclipse.jface.viewers.ColumnLabelProvider;
-import org.eclipse.jface.viewers.ITableLabelProvider;
+import org.eclipse.jface.viewers.*;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.widgets.Shell;
 
 /**
  * Label provider for showing IU's in a table.  Clients can configure
@@ -36,14 +37,16 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 	private String toolTipProperty = null;
 
 	private IUColumnConfig[] columnConfig = ProvUI.getIUColumnConfig();
+	Shell shell;
 
 	public IUDetailsLabelProvider() {
 		// use default column config
 	}
 
-	public IUDetailsLabelProvider(IUColumnConfig[] columnConfig) {
+	public IUDetailsLabelProvider(IUColumnConfig[] columnConfig, Shell shell) {
 		Assert.isLegal(columnConfig.length > 0);
 		this.columnConfig = columnConfig;
+		this.shell = shell;
 	}
 
 	public String getText(Object obj) {
@@ -95,15 +98,35 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 		return null;
 	}
 
-	private String getIUSize(IUElement element) {
+	private String getIUSize(final IUElement element) {
 		long size = element.getSize();
-		if (size != IUElement.SIZE_UNKNOWN) {
+		if (size != IUElement.SIZE_UNKNOWN)
 			return getFormattedSize(size);
-		}
-		return ProvUIMessages.IUDetailsLabelProvider_Unknown;
+		Job resolveJob = new Job(element.getIU().getId()) {
+
+			protected IStatus run(IProgressMonitor monitor) {
+				element.computeSize();
+
+				if (shell == null || shell.isDisposed())
+					return Status.OK_STATUS;
+				shell.getDisplay().asyncExec(new Runnable() {
+
+					public void run() {
+						fireLabelProviderChanged(new LabelProviderChangedEvent(IUDetailsLabelProvider.this, element));
+					}
+				});
+
+				return Status.OK_STATUS;
+			}
+		};
+		resolveJob.setSystem(true);
+		resolveJob.schedule();
+		return ProvUIMessages.IUDetailsLabelProvider_ComputingSize;
 	}
 
 	private String getFormattedSize(long size) {
+		if (size == IUElement.SIZE_UNKNOWN)
+			return ProvUIMessages.IUDetailsLabelProvider_Unknown;
 		if (size > 1000L) {
 			long kb = size / 1000L;
 			return NLS.bind(ProvUIMessages.IUDetailsLabelProvider_KB, NumberFormat.getInstance().format(new Long(kb)));

commit cf868b19c9d05f793ee850fd2fc1df9d3b23f428
Author: John Arthorne <johna>
Date:   Tue Jan 20 21:46:19 2009 +0000

    Bug 261637 - NPE downloading when URI scheme is null

2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
index d5143fc..61ad113 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
@@ -38,9 +38,9 @@ public class DownloadManager {
 			String protocol0 = ((URI) arg0).getScheme();
 			String protocol1 = ((URI) arg1).getScheme();
 
-			if (protocol0.equals(FILE_PROTOCOL) && !protocol1.equals(FILE_PROTOCOL))
+			if (FILE_PROTOCOL.equals(protocol0) && !FILE_PROTOCOL.equals(protocol1))
 				return -1;
-			if (!protocol0.equals(FILE_PROTOCOL) && protocol1.equals(FILE_PROTOCOL))
+			if (!FILE_PROTOCOL.equals(protocol0) && FILE_PROTOCOL.equals(protocol1))
 				return 1;
 			return 0;
 		}
commit 90f5e446cb8d5dd8c2d405ec526c4d3c3ab2edc1
Author: Susan Franklin <sfranklin>
Date:   Thu Apr 16 23:22:19 2009 +0000

    Bug 261637 - [ui] Interpret path names with no scheme as file: in the UI

2	1	bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
1	0	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
13	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
13	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/URLDropAdapter.java
14	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
0	22	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
diff --git a/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
index 4b00223..b05755c 100644
--- a/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
@@ -43,7 +43,8 @@ Export-Package: org.eclipse.equinox.internal.p2.persistence;x-friends:="org.ecli
    org.eclipse.equinox.p2.exemplarysetup,
    org.eclipse.equinox.p2.metadata.repository,
    org.eclipse.equinox.p2.updatesite,
-   org.eclipse.equinox.p2.repository.tools";
+   org.eclipse.equinox.p2.repository.tools,
+   org.eclipse.equinox.p2.ui";
   uses:="org.eclipse.equinox.internal.provisional.p2.core.eventbus,
    org.eclipse.equinox.internal.provisional.p2.core.repository,
    org.osgi.service.prefs,
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index 7ba0031..216dc30 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -10,6 +10,7 @@ Import-Package: com.ibm.icu.text,
  org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.internal.p2.metadata.repository,
+ org.eclipse.equinox.internal.p2.repository.helpers,
  org.eclipse.equinox.internal.p2.rollback,
  org.eclipse.equinox.internal.provisional.configurator,
  org.eclipse.equinox.internal.provisional.p2.artifact.repository,
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
index 4f9ee2c..f47616b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
@@ -11,11 +11,11 @@
 
 package org.eclipse.equinox.internal.p2.ui;
 
-import org.eclipse.equinox.internal.provisional.p2.repository.IRepositoryManager;
-
 import java.net.URI;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryLocationValidator;
 
@@ -49,20 +49,26 @@ public class DefaultMetadataURLValidator extends RepositoryLocationValidator {
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.dialogs.URLValidator#validateRepositoryURL(boolean)
 	 */
 	public IStatus validateRepositoryLocation(URI location, boolean contactRepositories, IProgressMonitor monitor) {
-		IStatus duplicateStatus = Status.OK_STATUS;
+		// First validate syntax issues
+		IStatus localValidationStatus = RepositoryHelper.checkRepositoryLocationSyntax(location);
+		if (!localValidationStatus.isOK()) {
+			return localValidationStatus;
+		}
 
+		// Syntax was ok, now look for duplicates
 		URI[] knownRepositories = getKnownLocations();
 		for (int i = 0; i < knownRepositories.length; i++) {
 			if (knownRepositories[i].equals(location)) {
-				duplicateStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, LOCAL_VALIDATION_ERROR, ProvUIMessages.AddRepositoryDialog_DuplicateURL, null);
+				localValidationStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, LOCAL_VALIDATION_ERROR, ProvUIMessages.AddRepositoryDialog_DuplicateURL, null);
 				break;
 			}
 		}
-		if (!duplicateStatus.isOK())
-			return duplicateStatus;
+		if (!localValidationStatus.isOK())
+			return localValidationStatus;
 
 		if (contactRepositories)
 			return ProvisioningUtil.validateMetadataRepositoryLocation(location, monitor);
-		return duplicateStatus;
+
+		return localValidationStatus;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/URLDropAdapter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/URLDropAdapter.java
index ebf26eb..ab681cd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/URLDropAdapter.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/URLDropAdapter.java
@@ -11,7 +11,10 @@
 
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryLocationValidator;
+import java.net.URI;
+import java.net.URISyntaxException;
+import org.eclipse.core.runtime.URIUtil;
+import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
 import org.eclipse.swt.dnd.*;
 
 /**
@@ -60,8 +63,15 @@ public abstract class URLDropAdapter extends DropTargetAdapter {
 			return (String) URLTransfer.getInstance().nativeToJava(event.currentDataType);
 		if (convertFileToURL && FileTransfer.getInstance().isSupportedType(event.currentDataType)) {
 			String[] names = (String[]) FileTransfer.getInstance().nativeToJava(event.currentDataType);
-			if (names != null && names.length == 1)
-				return RepositoryLocationValidator.makeJarURLString(names[0]);
+			if (names != null && names.length == 1) {
+				URI potentialLocation;
+				try {
+					potentialLocation = URIUtil.fromString(names[0]);
+					return URIUtil.toUnencodedString(RepositoryHelper.localRepoURIHelper(potentialLocation));
+				} catch (URISyntaxException e) {
+					return names[0];
+				}
+			}
 		}
 		return null;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
index 4d1e256..2dcd229 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 import java.net.URI;
 import java.net.URISyntaxException;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.TextURLDropAdapter;
@@ -92,7 +93,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 				String path = dialog.open();
 				if (path != null) {
 					lastLocalLocation = path;
-					url.setText(RepositoryLocationValidator.makeFileURLString(path));
+					url.setText(makeLocalURIString(path));
 					validateRepositoryURL(false);
 				}
 			}
@@ -128,7 +129,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 				String path = dialog.open();
 				if (path != null) {
 					lastArchiveLocation = path;
-					url.setText(RepositoryLocationValidator.makeJarURLString(path));
+					url.setText(makeLocalURIString(path));
 					validateRepositoryURL(false);
 				}
 			}
@@ -139,6 +140,15 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 		return comp;
 	}
 
+	String makeLocalURIString(String path) {
+		try {
+			URI localURI = URIUtil.fromString(path);
+			return URIUtil.toUnencodedString(RepositoryHelper.localRepoURIHelper(localURI));
+		} catch (URISyntaxException e) {
+			return path;
+		}
+	}
+
 	/**
 	 * Return a location validator appropriate for this dialog.  The
 	 * default is to retrieve it from the repository manipulator.
@@ -181,7 +191,8 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 		} catch (URISyntaxException e) {
 			return null;
 		}
-		return userLocation;
+		// Using the local repo helper will append file scheme to something that has no scheme.
+		return RepositoryHelper.localRepoURIHelper(userLocation);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
index 33d2fff..76c93cd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
@@ -17,6 +17,7 @@ import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.*;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.UIRepositoryEvent;
 import org.eclipse.equinox.internal.p2.ui.dialogs.ComboAutoCompleteField;
@@ -158,7 +159,7 @@ public class RepositorySelectionGroup {
 					int index = getComboIndex(text);
 					// only validate text that doesn't match existing text in combo
 					if (index < 0) {
-						location = URIUtil.fromString(repoCombo.getText());
+						location = RepositoryHelper.localRepoURIHelper(URIUtil.fromString(repoCombo.getText()));
 						RepositoryLocationValidator validator = policy.getRepositoryManipulator().getRepositoryLocationValidator(repoCombo.getShell());
 						status = validator.validateRepositoryLocation(location, false, new NullProgressMonitor());
 					} else {
@@ -513,7 +514,7 @@ public class RepositorySelectionGroup {
 						URI location = null;
 						IStatus status;
 						try {
-							location = URIUtil.fromString(selectedRepo);
+							location = RepositoryHelper.localRepoURIHelper(URIUtil.fromString(selectedRepo));
 							RepositoryLocationValidator validator = manipulator.getRepositoryLocationValidator(repoCombo.getShell());
 							status = validator.validateRepositoryLocation(location, false, monitor);
 						} catch (URISyntaxException e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
index 9b422ec..41e4a01 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
@@ -27,11 +27,6 @@ import org.eclipse.osgi.util.NLS;
  *
  */
 public abstract class RepositoryLocationValidator {
-	public static final String FILE_PROTOCOL_PREFIX = "file:"; //$NON-NLS-1$
-	public static final String JAR_PATH_PREFIX = "jar:";//$NON-NLS-1$
-	public static final String JAR_PATH_SUFFIX = "!/"; //$NON-NLS-1$
-	public static final String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
-	public static final String ZIP_EXTENSION = ".zip"; //$NON-NLS-1$
 
 	public static final int LOCAL_VALIDATION_ERROR = 3000;
 	public static final int ALTERNATE_ACTION_TAKEN = 3001;
@@ -40,22 +35,5 @@ public abstract class RepositoryLocationValidator {
 		return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, LOCAL_VALIDATION_ERROR, NLS.bind(ProvUIMessages.URLValidator_UnrecognizedURL, urlText), null);
 	}
 
-	public static String makeJarURLString(String path) {
-		String lowerCase = path.toLowerCase();
-		if (lowerCase.endsWith(JAR_EXTENSION) || lowerCase.endsWith(ZIP_EXTENSION))
-			return JAR_PATH_PREFIX + FILE_PROTOCOL_PREFIX + path + JAR_PATH_SUFFIX;
-		return makeFileURLString(path);
-	}
-
-	public static String makeFileURLString(String path) {
-		StringBuffer result = new StringBuffer(path.length() + 6);
-		result.append(FILE_PROTOCOL_PREFIX);
-		//make sure URL has leading slash to indicate a hierarchical URL
-		if (path.length() == 0 || path.charAt(0) != '/')
-			result.append('/');
-		result.append(path);
-		return result.toString();
-	}
-
 	public abstract IStatus validateRepositoryLocation(URI url, boolean contactRepositories, IProgressMonitor monitor);
 }
commit 663415839aa4021148aa5ecab09971618d8d6f29
Author: Susan Franklin <sfranklin>
Date:   Fri Apr 17 00:31:33 2009 +0000

    Bug 261637 - [ui] Interpret path names with no scheme as file: in the UI
    Only do so if separator char is specified

12	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
1	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
25	19	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
17	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
index f47616b..5c2522f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultMetadataURLValidator.java
@@ -11,6 +11,7 @@
 
 package org.eclipse.equinox.internal.p2.ui;
 
+import java.io.File;
 import java.net.URI;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
@@ -49,12 +50,22 @@ public class DefaultMetadataURLValidator extends RepositoryLocationValidator {
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.dialogs.URLValidator#validateRepositoryURL(boolean)
 	 */
 	public IStatus validateRepositoryLocation(URI location, boolean contactRepositories, IProgressMonitor monitor) {
+
 		// First validate syntax issues
 		IStatus localValidationStatus = RepositoryHelper.checkRepositoryLocationSyntax(location);
 		if (!localValidationStatus.isOK()) {
-			return localValidationStatus;
+			// bad syntax, but it could just be non-absolute.
+			// In this case, use the helper
+			String locationString = URIUtil.toUnencodedString(location);
+			if (locationString.length() > 0 && (locationString.charAt(0) == '/' || locationString.charAt(0) == File.separatorChar)) {
+				location = RepositoryHelper.localRepoURIHelper(location);
+				localValidationStatus = RepositoryHelper.checkRepositoryLocationSyntax(location);
+			}
 		}
 
+		if (!localValidationStatus.isOK())
+			return localValidationStatus;
+
 		// Syntax was ok, now look for duplicates
 		URI[] knownRepositories = getKnownLocations();
 		for (int i = 0; i < knownRepositories.length; i++) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
index 2dcd229..4d9d37c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
@@ -185,14 +185,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 	 * @return the URL currently typed in by the user.
 	 */
 	protected URI getUserLocation() {
-		URI userLocation;
-		try {
-			userLocation = URIUtil.fromString(url.getText().trim());
-		} catch (URISyntaxException e) {
-			return null;
-		}
-		// Using the local repo helper will append file scheme to something that has no scheme.
-		return RepositoryHelper.localRepoURIHelper(userLocation);
+		return RepositoryLocationValidator.locationFromString(url.getText().trim());
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
index 76c93cd..861ccb8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositorySelectionGroup.java
@@ -14,10 +14,8 @@ package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 import com.ibm.icu.text.Collator;
 import java.lang.reflect.InvocationTargetException;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.util.*;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.UIRepositoryEvent;
 import org.eclipse.equinox.internal.p2.ui.dialogs.ComboAutoCompleteField;
@@ -154,20 +152,20 @@ public class RepositorySelectionGroup {
 			public void modifyText(ModifyEvent event) {
 				URI location = null;
 				IStatus status = null;
-				try {
-					String text = repoCombo.getText();
-					int index = getComboIndex(text);
-					// only validate text that doesn't match existing text in combo
-					if (index < 0) {
-						location = RepositoryHelper.localRepoURIHelper(URIUtil.fromString(repoCombo.getText()));
+				String text = repoCombo.getText();
+				int index = getComboIndex(text);
+				// only validate text that doesn't match existing text in combo
+				if (index < 0) {
+					location = RepositoryLocationValidator.locationFromString(repoCombo.getText());
+					if (location == null) {
+						status = RepositoryLocationValidator.getInvalidLocationStatus(repoCombo.getText());
+					} else {
 						RepositoryLocationValidator validator = policy.getRepositoryManipulator().getRepositoryLocationValidator(repoCombo.getShell());
 						status = validator.validateRepositoryLocation(location, false, new NullProgressMonitor());
-					} else {
-						// user typed or pasted an existing location.  Select it.
-						repoComboSelectionChanged();
 					}
-				} catch (URISyntaxException e) {
-					status = RepositoryLocationValidator.getInvalidLocationStatus(repoCombo.getText());
+				} else {
+					// user typed or pasted an existing location.  Select it.
+					repoComboSelectionChanged();
 				}
 				setRepoComboDecoration(status);
 			}
@@ -250,7 +248,7 @@ public class RepositorySelectionGroup {
 		setRepoComboDecoration(null);
 	}
 
-	protected void setRepoComboDecoration(IStatus status) {
+	protected void setRepoComboDecoration(final IStatus status) {
 		if (status == null || status.isOK() || status.getSeverity() == IStatus.CANCEL) {
 			repoDec.setShowOnlyOnFocus(true);
 			repoDec.setDescriptionText(ProvUIMessages.AvailableIUsPage_RepoFilterInstructions);
@@ -272,7 +270,15 @@ public class RepositorySelectionGroup {
 		repoDec.setImage(image);
 		repoDec.setDescriptionText(status.getMessage());
 		repoDec.setShowOnlyOnFocus(false);
-		repoDec.showHoverText(status.getMessage());
+		// use a delay to show the validation method because the very next
+		// selection or keystroke might fix it
+		repoCombo.getDisplay().timerExec(500, new Runnable() {
+			public void run() {
+				if (repoDec != null && repoDec.getImage() != info)
+					repoDec.showHoverText(status.getMessage());
+			}
+		});
+
 	}
 
 	/*
@@ -513,12 +519,12 @@ public class RepositorySelectionGroup {
 					public void run(IProgressMonitor monitor) {
 						URI location = null;
 						IStatus status;
-						try {
-							location = RepositoryHelper.localRepoURIHelper(URIUtil.fromString(selectedRepo));
+						location = RepositoryLocationValidator.locationFromString(selectedRepo);
+						if (location == null)
+							status = RepositoryLocationValidator.getInvalidLocationStatus(selectedRepo);
+						else {
 							RepositoryLocationValidator validator = manipulator.getRepositoryLocationValidator(repoCombo.getShell());
 							status = validator.validateRepositoryLocation(location, false, monitor);
-						} catch (URISyntaxException e) {
-							status = RepositoryLocationValidator.getInvalidLocationStatus(selectedRepo);
 						}
 						if (status.isOK() && location != null) {
 							try {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
index 41e4a01..2109abb 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryLocationValidator.java
@@ -11,8 +11,11 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.policy;
 
+import java.io.File;
 import java.net.URI;
+import java.net.URISyntaxException;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.osgi.util.NLS;
@@ -35,5 +38,19 @@ public abstract class RepositoryLocationValidator {
 		return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, LOCAL_VALIDATION_ERROR, NLS.bind(ProvUIMessages.URLValidator_UnrecognizedURL, urlText), null);
 	}
 
+	public static URI locationFromString(String locationString) {
+		URI userLocation;
+		try {
+			userLocation = URIUtil.fromString(locationString);
+		} catch (URISyntaxException e) {
+			return null;
+		}
+		// If a path separator char was used, interpret as a local file URI
+		String uriString = URIUtil.toUnencodedString(userLocation);
+		if (uriString.length() > 0 && (uriString.charAt(0) == '/' || uriString.charAt(0) == File.separatorChar))
+			return RepositoryHelper.localRepoURIHelper(userLocation);
+		return userLocation;
+	}
+
 	public abstract IStatus validateRepositoryLocation(URI url, boolean contactRepositories, IProgressMonitor monitor);
 }

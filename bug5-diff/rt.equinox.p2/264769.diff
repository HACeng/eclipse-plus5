commit c17e825c657b12378108e23f79df912fc72114df
Author: DJ Houghton <dj>
Date:   Thu Feb 12 20:42:19 2009 +0000

    Bug 264769 - [composite] Clean up repository persistence code

2	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
2	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
145	8	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
5	187	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
35	9	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
2	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
2	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
index 6aa78e5..9651f4b 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
@@ -35,6 +35,7 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	static final public String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 	static final public String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
 	static final public String CONTENT_FILENAME = "compositeArtifacts"; //$NON-NLS-1$
+	public static final String XML_REPO_TYPE = "artifactRepository"; //$NON-NLS-1$
 
 	private ArrayList childrenURIs = new ArrayList();
 
@@ -356,7 +357,7 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 					os = jOs;
 				}
 				super.setProperty(IRepository.PROP_TIMESTAMP, Long.toString(System.currentTimeMillis()));
-				new CompositeRepositoryIO().write(this, os);
+				new CompositeRepositoryIO().write(this, os, XML_REPO_TYPE);
 			} catch (IOException e) {
 				// TODO proper exception handling
 				e.printStackTrace();
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
index 24b081f..32d4841 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
@@ -50,7 +50,7 @@ public class CompositeArtifactRepositoryFactory extends ArtifactRepositoryFactor
 				}
 			} else {
 				//download to local temp file
-				localFile = File.createTempFile(CompositeArtifactRepository.CONTENT_FILENAME, CompositeArtifactRepository.XML_EXTENSION); 
+				localFile = File.createTempFile(CompositeArtifactRepository.CONTENT_FILENAME, CompositeArtifactRepository.XML_EXTENSION);
 				try {
 					artifacts = new BufferedOutputStream(new FileOutputStream(localFile));
 					IStatus status = getTransport().download(CompositeArtifactRepository.getActualLocation(location, compress).toString(), artifacts, sub.newChild(100));
@@ -83,7 +83,7 @@ public class CompositeArtifactRepositoryFactory extends ArtifactRepositoryFactor
 					descriptorStream = jInStream;
 				}
 				CompositeRepositoryIO io = new CompositeRepositoryIO();
-				CompositeRepositoryState resultState = io.read(localFile.toURL(), descriptorStream, sub.newChild(100));
+				CompositeRepositoryState resultState = io.read(localFile.toURL(), descriptorStream, CompositeArtifactRepository.XML_REPO_TYPE, sub.newChild(100));
 
 				CompositeArtifactRepository result = new CompositeArtifactRepository(resultState);
 
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
index 88bcf20..43767eb 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,18 +10,29 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.persistence;
 
+import java.io.*;
 import java.net.URI;
 import java.util.*;
+import javax.xml.parsers.ParserConfigurationException;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO.CompositeRepositoryState;
+import org.eclipse.equinox.internal.provisional.p2.core.Version;
+import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
-import org.xml.sax.Attributes;
+import org.xml.sax.*;
 
-public abstract class CompositeParser extends XMLParser implements XMLConstants {
+/*
+ * Class used to read a composite repository.
+ */
+public class CompositeParser extends XMLParser implements XMLConstants {
 
-	public static final String REQUIRED_CAPABILITY_ELEMENT = "required"; //$NON-NLS-1$
-
-	public CompositeParser(BundleContext context, String bundleId) {
-		super(context, bundleId);
-	}
+	private static final Version CURRENT_VERSION = new Version(1, 0, 0);
+	static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(2, 0, 0), false);
+	private static final String REQUIRED_CAPABILITY_ELEMENT = "required"; //$NON-NLS-1$
+	private static final String REPOSITORY_ELEMENT = "repository"; //$NON-NLS-1$
+	String repositoryType;
+	private CompositeRepositoryState theState;
 
 	protected class ChildrenHandler extends AbstractHandler {
 		private ArrayList children;
@@ -79,4 +90,130 @@ public abstract class CompositeParser extends XMLParser implements XMLConstants
 				repos.add(currentRepo);
 		}
 	}
+
+	private final class RepositoryDocHandler extends DocHandler {
+
+		public RepositoryDocHandler(String rootName, RootHandler rootHandler) {
+			super(rootName, rootHandler);
+		}
+
+		public void processingInstruction(String target, String data) throws SAXException {
+			if (repositoryType.equals(target)) {
+				// TODO: should the root handler be constructed based on class
+				// 		 via an extension registry mechanism?
+				// String clazz = extractPIClass(data);
+				// TODO: version tolerance by extension
+				Version repositoryVersion = extractPIVersion(target, data);
+				if (!XML_TOLERANCE.isIncluded(repositoryVersion)) {
+					throw new SAXException(NLS.bind(Messages.io_IncompatibleVersion, repositoryVersion, XML_TOLERANCE));
+				}
+			}
+		}
+	}
+
+	/*
+	 * Handler for the "repository" attribute.
+	 */
+	private final class RepositoryHandler extends RootHandler {
+
+		private final String[] required = new String[] {NAME_ATTRIBUTE, TYPE_ATTRIBUTE, VERSION_ATTRIBUTE};
+		private final String[] optional = new String[] {DESCRIPTION_ATTRIBUTE, PROVIDER_ATTRIBUTE};
+		private PropertiesHandler propertiesHandler = null;
+		private ChildrenHandler childrenHandler = null;
+		private CompositeRepositoryState state;
+		private String[] attrValues = new String[required.length + optional.length];
+
+		public RepositoryHandler() {
+			super();
+		}
+
+		public CompositeRepositoryState getRepository() {
+			return state;
+		}
+
+		protected void handleRootAttributes(Attributes attributes) {
+			attrValues = parseAttributes(attributes, required, optional);
+			attrValues[2] = checkVersion(REPOSITORY_ELEMENT, VERSION_ATTRIBUTE, attrValues[2]).toString();
+		}
+
+		public void startElement(String name, Attributes attributes) {
+			if (PROPERTIES_ELEMENT.equals(name)) {
+				if (propertiesHandler == null) {
+					propertiesHandler = new PropertiesHandler(this, attributes);
+				} else {
+					duplicateElement(this, name, attributes);
+				}
+			} else if (CHILDREN_ELEMENT.equals(name)) {
+				if (childrenHandler == null) {
+					childrenHandler = new ChildrenHandler(this, attributes);
+				} else {
+					duplicateElement(this, name, attributes);
+				}
+			} else {
+				invalidElement(name, attributes);
+			}
+		}
+
+		/*
+		 * If we parsed valid XML then fill in our repository state object with the parsed data.
+		 */
+		protected void finished() {
+			if (isValidXML()) {
+				state = new CompositeRepositoryState();
+				state.Name = attrValues[0];
+				state.Type = attrValues[1];
+				state.Version = attrValues[2];
+				state.Description = attrValues[3];
+				state.Provider = attrValues[4];
+				state.Properties = (propertiesHandler == null ? new OrderedProperties(0) //
+						: propertiesHandler.getProperties());
+				state.Children = (childrenHandler == null ? new URI[0] //
+						: childrenHandler.getChildren());
+			}
+		}
+	}
+
+	public CompositeParser(BundleContext context, String bundleId, String type) {
+		super(context, bundleId);
+		this.repositoryType = type;
+	}
+
+	public void parse(File file) throws IOException {
+		parse(new FileInputStream(file));
+	}
+
+	public synchronized void parse(InputStream stream) throws IOException {
+		this.status = null;
+		try {
+			// TODO: currently not caching the parser since we make no assumptions
+			//		 or restrictions on concurrent parsing
+			getParser();
+			RepositoryHandler repositoryHandler = new RepositoryHandler();
+			xmlReader.setContentHandler(new RepositoryDocHandler(REPOSITORY_ELEMENT, repositoryHandler));
+			xmlReader.parse(new InputSource(stream));
+			if (isValidXML()) {
+				theState = repositoryHandler.getRepository();
+			}
+		} catch (SAXException e) {
+			throw new IOException(e.getMessage());
+		} catch (ParserConfigurationException e) {
+			throw new IOException(e.getMessage());
+		} finally {
+			stream.close();
+		}
+	}
+
+	public CompositeRepositoryState getRepositoryState() {
+		return theState;
+	}
+
+	//TODO what?
+	protected Object getRootObject() {
+		return null;
+	}
+
+	protected String getErrorMessage() {
+		return Messages.io_parseError;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
index a77de48..98849e5 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -13,21 +13,13 @@ package org.eclipse.equinox.internal.p2.persistence;
 import java.io.*;
 import java.net.URI;
 import java.net.URL;
-import java.util.ArrayList;
 import java.util.Map;
-import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.Activator;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
-import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
 import org.eclipse.osgi.util.NLS;
-import org.osgi.framework.BundleContext;
-import org.eclipse.equinox.internal.provisional.p2.core.Version;
-import org.xml.sax.*;
 
 /**
  * This class reads and writes composite repository metadata
@@ -52,12 +44,12 @@ public class CompositeRepositoryIO {
 	 * Writes the given repository to the stream.
 	 * This method performs buffering, and closes the stream when finished.
 	 */
-	public void write(ICompositeRepository repository, OutputStream output) {
+	public void write(ICompositeRepository repository, OutputStream output, String type) {
 		OutputStream bufferedOutput = null;
 		try {
 			try {
 				bufferedOutput = new BufferedOutputStream(output);
-				Writer repositoryWriter = new Writer(bufferedOutput);
+				CompositeWriter repositoryWriter = new CompositeWriter(bufferedOutput, type);
 				repositoryWriter.write(repository);
 			} finally {
 				if (bufferedOutput != null) {
@@ -76,12 +68,12 @@ public class CompositeRepositoryIO {
 	 * 
 	 * This method performs buffering, and closes the stream when finished.
 	 */
-	public CompositeRepositoryState read(URL location, InputStream input, IProgressMonitor monitor) throws ProvisionException {
+	public CompositeRepositoryState read(URL location, InputStream input, String type, IProgressMonitor monitor) throws ProvisionException {
 		BufferedInputStream bufferedInput = null;
 		try {
 			try {
 				bufferedInput = new BufferedInputStream(input);
-				Parser repositoryParser = new Parser(Activator.getContext(), Activator.ID);
+				CompositeParser repositoryParser = new CompositeParser(Activator.getContext(), Activator.ID, type);
 				repositoryParser.parse(input);
 				IStatus result = repositoryParser.getStatus();
 				switch (result.getSeverity()) {
@@ -106,178 +98,4 @@ public class CompositeRepositoryIO {
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, ioe));
 		}
 	}
-
-	private interface XMLConstants extends org.eclipse.equinox.internal.p2.persistence.XMLConstants {
-
-		// Constants defining the structure of the XML for a ICompositeRepository
-
-		// A format version number for composite repository XML.
-		public static final Version CURRENT_VERSION = new Version(1, 0, 0);
-		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(2, 0, 0), false);
-
-		// Constants for processing instructions
-		public static final String PI_REPOSITORY_TARGET = "artifactRepository"; //$NON-NLS-1$
-		public static XMLWriter.ProcessingInstruction[] PI_DEFAULTS = new XMLWriter.ProcessingInstruction[] {XMLWriter.ProcessingInstruction.makeClassVersionInstruction(PI_REPOSITORY_TARGET, ICompositeRepository.class, CURRENT_VERSION)};
-
-		// Constants for artifact repository elements
-		public static final String REPOSITORY_ELEMENT = "repository"; //$NON-NLS-1$
-	}
-
-	// XML writer for a ICompositeRepository
-	protected class Writer extends CompositeWriter implements XMLConstants {
-
-		public Writer(OutputStream output) throws IOException {
-			super(output, PI_DEFAULTS);
-		}
-
-		/**
-		 * Write the given composite repository to the output stream.
-		 */
-		public void write(IRepository repository) {
-			start(REPOSITORY_ELEMENT);
-			attribute(NAME_ATTRIBUTE, repository.getName());
-			attribute(TYPE_ATTRIBUTE, repository.getType());
-			attribute(VERSION_ATTRIBUTE, repository.getVersion());
-			attributeOptional(PROVIDER_ATTRIBUTE, repository.getProvider());
-			attributeOptional(DESCRIPTION_ATTRIBUTE, repository.getDescription()); // TODO: could be cdata?
-
-			writeProperties(repository.getProperties());
-
-			ArrayList children = ((ICompositeRepository) repository).getChildren();
-			writeChildren(children.iterator(), children.size());
-
-			end(REPOSITORY_ELEMENT);
-			flush();
-		}
-	}
-
-	/*
-	 * Parser for the contents of a ICompositeRepository,
-	 * as written by the Writer class.
-	 */
-	private class Parser extends CompositeParser implements XMLConstants {
-
-		private CompositeRepositoryState theState;
-
-		public Parser(BundleContext context, String bundleId) {
-			super(context, bundleId);
-		}
-
-		public void parse(File file) throws IOException {
-			parse(new FileInputStream(file));
-		}
-
-		public synchronized void parse(InputStream stream) throws IOException {
-			this.status = null;
-			try {
-				// TODO: currently not caching the parser since we make no assumptions
-				//		 or restrictions on concurrent parsing
-				getParser();
-				RepositoryHandler repositoryHandler = new RepositoryHandler();
-				xmlReader.setContentHandler(new RepositoryDocHandler(REPOSITORY_ELEMENT, repositoryHandler));
-				xmlReader.parse(new InputSource(stream));
-				if (isValidXML()) {
-					theState = repositoryHandler.getRepository();
-				}
-			} catch (SAXException e) {
-				throw new IOException(e.getMessage());
-			} catch (ParserConfigurationException e) {
-				throw new IOException(e.getMessage());
-			} finally {
-				stream.close();
-			}
-		}
-
-		public CompositeRepositoryState getRepositoryState() {
-			return theState;
-		}
-
-		//TODO what?
-		protected Object getRootObject() {
-			return null;
-		}
-
-		protected String getErrorMessage() {
-			return Messages.io_parseError;
-		}
-
-		private final class RepositoryDocHandler extends DocHandler {
-
-			public RepositoryDocHandler(String rootName, RootHandler rootHandler) {
-				super(rootName, rootHandler);
-			}
-
-			public void processingInstruction(String target, String data) throws SAXException {
-				if (PI_REPOSITORY_TARGET.equals(target)) {
-					// TODO: should the root handler be constructed based on class
-					// 		 via an extension registry mechanism?
-					// String clazz = extractPIClass(data);
-					// TODO: version tolerance by extension
-					Version repositoryVersion = extractPIVersion(target, data);
-					if (!XML_TOLERANCE.isIncluded(repositoryVersion)) {
-						throw new SAXException(NLS.bind(Messages.io_IncompatibleVersion, repositoryVersion, XML_TOLERANCE));
-					}
-				}
-			}
-		}
-
-		private final class RepositoryHandler extends RootHandler {
-
-			private final String[] required = new String[] {NAME_ATTRIBUTE, TYPE_ATTRIBUTE, VERSION_ATTRIBUTE};
-			private final String[] optional = new String[] {DESCRIPTION_ATTRIBUTE, PROVIDER_ATTRIBUTE};
-
-			private PropertiesHandler propertiesHandler = null;
-			private ChildrenHandler childrenHandler = null;
-
-			private CompositeRepositoryState state;
-
-			private String[] attrValues = new String[required.length + optional.length];
-
-			public RepositoryHandler() {
-				super();
-			}
-
-			public CompositeRepositoryState getRepository() {
-				return state;
-			}
-
-			protected void handleRootAttributes(Attributes attributes) {
-				attrValues = parseAttributes(attributes, required, optional);
-				attrValues[2] = checkVersion(REPOSITORY_ELEMENT, VERSION_ATTRIBUTE, attrValues[2]).toString();
-			}
-
-			public void startElement(String name, Attributes attributes) {
-				if (PROPERTIES_ELEMENT.equals(name)) {
-					if (propertiesHandler == null) {
-						propertiesHandler = new PropertiesHandler(this, attributes);
-					} else {
-						duplicateElement(this, name, attributes);
-					}
-				} else if (CHILDREN_ELEMENT.equals(name)) {
-					if (childrenHandler == null) {
-						childrenHandler = new ChildrenHandler(this, attributes);
-					} else {
-						duplicateElement(this, name, attributes);
-					}
-				} else {
-					invalidElement(name, attributes);
-				}
-			}
-
-			protected void finished() {
-				if (isValidXML()) {
-					state = new CompositeRepositoryState();
-					state.Name = attrValues[0];
-					state.Type = attrValues[1];
-					state.Version = attrValues[2];
-					state.Description = attrValues[3];
-					state.Provider = attrValues[4];
-					state.Properties = (propertiesHandler == null ? new OrderedProperties(0) //
-							: propertiesHandler.getProperties());
-					state.Children = (childrenHandler == null ? new URI[0] //
-							: childrenHandler.getChildren());
-				}
-			}
-		}
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
index fea5ca1..2e4488c 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -14,25 +14,34 @@ import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
 import java.util.Iterator;
+import java.util.List;
 import org.eclipse.core.runtime.URIUtil;
+import org.eclipse.equinox.internal.provisional.p2.core.Version;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository;
 
-public abstract class CompositeWriter extends XMLWriter implements XMLConstants {
+/*
+ * Class used to persist a composite repository.
+ */
+public class CompositeWriter extends XMLWriter implements XMLConstants {
 
-	public CompositeWriter(OutputStream output, ProcessingInstruction[] piElements) throws UnsupportedEncodingException {
-		super(output, piElements);
+	private static final String REPOSITORY_ELEMENT = "repository"; //$NON-NLS-1$
+	private static final Version CURRENT_VERSION = new Version(1, 0, 0);
+
+	public CompositeWriter(OutputStream output, String type) throws UnsupportedEncodingException {
+		super(output, new XMLWriter.ProcessingInstruction[] {XMLWriter.ProcessingInstruction.makeClassVersionInstruction(type, ICompositeRepository.class, CURRENT_VERSION)});
 		// TODO: add a processing instruction for the metadata version
 	}
 
 	/**
 	 * Writes a list of URIs referring to sub repositories
 	 */
-	protected void writeChildren(Iterator children, int size) {
-		if (size == 0)
+	protected void writeChildren(List children) {
+		if (children.size() == 0)
 			return;
 		start(CHILDREN_ELEMENT);
-		attribute(COLLECTION_SIZE_ATTRIBUTE, size);
-		while (children.hasNext())
-			writeChild((URI) children.next());
+		attribute(COLLECTION_SIZE_ATTRIBUTE, children.size());
+		for (Iterator iter = children.iterator(); iter.hasNext();)
+			writeChild((URI) iter.next());
 		end(CHILDREN_ELEMENT);
 	}
 
@@ -42,4 +51,21 @@ public abstract class CompositeWriter extends XMLWriter implements XMLConstants
 		attribute(LOCATION_ELEMENT, unencodedString);
 		end(CHILD_ELEMENT);
 	}
+
+	/**
+	 * Write the given composite repository to the output stream.
+	 */
+	public void write(ICompositeRepository repository) {
+		start(REPOSITORY_ELEMENT);
+		attribute(NAME_ATTRIBUTE, repository.getName());
+		attribute(TYPE_ATTRIBUTE, repository.getType());
+		attribute(VERSION_ATTRIBUTE, repository.getVersion());
+		attributeOptional(PROVIDER_ATTRIBUTE, repository.getProvider());
+		attributeOptional(DESCRIPTION_ATTRIBUTE, repository.getDescription()); // TODO: could be cdata?
+		writeProperties(repository.getProperties());
+		writeChildren(repository.getChildren());
+		end(REPOSITORY_ELEMENT);
+		flush();
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
index 63e3808..23bd7ce 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
@@ -33,6 +33,7 @@ import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.Abstr
 public class CompositeMetadataRepository extends AbstractMetadataRepository implements IMetadataRepository, ICompositeRepository {
 
 	static final public String REPOSITORY_TYPE = CompositeMetadataRepository.class.getName();
+	public static final String XML_REPO_TYPE = "metadataRepository"; //$NON-NLS-1$
 	static final private Integer REPOSITORY_VERSION = new Integer(1);
 	static final public String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 	static final private String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
@@ -198,7 +199,7 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 				output = jOutput;
 			}
 			super.setProperty(IRepository.PROP_TIMESTAMP, Long.toString(System.currentTimeMillis()));
-			new CompositeRepositoryIO().write(this, output);
+			new CompositeRepositoryIO().write(this, output, XML_REPO_TYPE);
 		} catch (IOException e) {
 			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_WRITE, "Error saving metadata repository: " + location, e)); //$NON-NLS-1$
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
index 682089d..3ddef1b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -115,7 +115,7 @@ public class CompositeMetadataRepositoryFactory extends MetadataRepositoryFactor
 				if (doLoad) {
 					InputStream descriptorStream = jarStream != null ? jarStream : inStream;
 					CompositeRepositoryIO io = new CompositeRepositoryIO();
-					CompositeRepositoryState resultState = io.read(localFile.toURL(), descriptorStream, sub.newChild(100));
+					CompositeRepositoryState resultState = io.read(localFile.toURL(), descriptorStream, CompositeMetadataRepository.XML_REPO_TYPE, sub.newChild(100));
 
 					CompositeMetadataRepository result = new CompositeMetadataRepository(resultState);
 

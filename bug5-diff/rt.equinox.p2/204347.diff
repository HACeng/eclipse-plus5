commit 3c7252051e75c9348ec83a73e3e405a9dcdea447
Author: Susan Franklin <sfranklin>
Date:   Wed Apr 9 17:52:06 2008 +0000

    AvailableIUGroup support for
    Bug 204347 - [prov] Extension to the PDE Target provisioner

0	110	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUPatternFilter.java
0	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
0	17	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
95	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java
29	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java
16	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
110	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUPatternFilter.java
31	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
0	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentListener.java
21	41	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUPatternFilter.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUPatternFilter.java
deleted file mode 100644
index 829266b..0000000
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUPatternFilter.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.sdk;
-
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElement;
-import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
-import org.eclipse.jface.viewers.Viewer;
-import org.eclipse.ui.dialogs.PatternFilter;
-
-/**
- * A class that handles filtering IU's based on a supplied
- * matching string.
- *  
- * @since 3.2
- *
- */
-public class AvailableIUPatternFilter extends PatternFilter {
-
-	boolean checkName, checkVersion, checkId = false;
-	String patternString;
-
-	/**
-	 * Create a new instance of a AvailableIUPatternFilter 
-	 */
-	public AvailableIUPatternFilter(IUColumnConfig[] columnConfig) {
-		super();
-		for (int i = 0; i < columnConfig.length; i++) {
-			int field = columnConfig[i].columnField;
-			if (field == IUColumnConfig.COLUMN_ID)
-				checkId = true;
-			else if (field == IUColumnConfig.COLUMN_NAME)
-				checkName = true;
-			else if (field == IUColumnConfig.COLUMN_VERSION)
-				checkVersion = true;
-		}
-
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.ui.internal.dialogs.PatternFilter#isElementSelectable(java.lang.Object)
-	 */
-	public boolean isElementSelectable(Object element) {
-		return element instanceof IUElement && !(element instanceof CategoryElement);
-	}
-
-	/*
-	 * Overridden to remember the pattern string for an optimization
-	 * in isParentMatch
-	 * (non-Javadoc)
-	 * @see org.eclipse.ui.dialogs.PatternFilter#setPattern(java.lang.String)
-	 */
-	public void setPattern(String patternString) {
-		super.setPattern(patternString);
-		this.patternString = patternString;
-	}
-
-	/*
-	 * Overridden to avoid getting children unless there is actually
-	 * a filter.
-	 * (non-Javadoc)
-	 * @see org.eclipse.ui.dialogs.PatternFilter#isParentMatch(org.eclipse.jface.viewers.Viewer, java.lang.Object)
-	 */
-	protected boolean isParentMatch(Viewer viewer, Object element) {
-		if (patternString == null || patternString.length() == 0)
-			return true;
-		return super.isParentMatch(viewer, element);
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.dialogs.PatternFilter#isElementMatch(org.eclipse.jface.viewers.Viewer, java.lang.Object)
-	 */
-	protected boolean isLeafMatch(Viewer viewer, Object element) {
-		if (element instanceof CategoryElement) {
-			return false;
-		}
-
-		String text = null;
-		if (element instanceof IUElement) {
-			IInstallableUnit iu = ((IUElement) element).getIU();
-			if (checkName) {
-				text = iu.getProperty(IInstallableUnit.PROP_NAME);
-				if (text != null && wordMatches(text))
-					return true;
-			}
-			if (checkId) {
-				text = iu.getId();
-				if (wordMatches(text)) {
-					return true;
-				}
-			}
-			if (checkVersion) {
-				text = iu.getVersion().toString();
-				if (wordMatches(text))
-					return true;
-			}
-		}
-		return false;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
index 9b29242..fd89bed 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
@@ -1,6 +1,5 @@
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.jobs.IJobChangeEvent;
 import org.eclipse.core.runtime.jobs.JobChangeAdapter;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
@@ -110,14 +109,6 @@ public class DeferredFetchFilteredTree extends FilteredTree {
 	public void contentProviderSet(final DeferredQueryContentProvider deferredProvider) {
 		this.contentProvider = deferredProvider;
 		deferredProvider.addListener(new DeferredQueryContentListener() {
-			public void fetchingDeferredChildren(Object parent) {
-				// Nothing to do
-			}
-
-			public void finishedFetchingDeferredChildren(Object parent, IStatus result) {
-				//Nothing to do
-			}
-
 			public void inputChanged(Viewer v, Object oldInput, Object newInput) {
 				if (newInput == null)
 					return;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
index 47393d9..d4d5bd5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
@@ -79,21 +79,4 @@ public abstract class RemoteQueriedElement extends QueriedElement implements IDe
 	protected boolean isSufficientForQuery(ElementQueryDescriptor queryDescriptor) {
 		return queryDescriptor.isComplete();
 	}
-
-	/**
-	 * Return a boolean indicating whether this element requires 
-	 * remote/deferred queries only on the first access of its
-	 * children, or on every access.  Elements that cache data or
-	 * rely on their model caching the data may only need to use
-	 * deferred queries the first time.  Elements that do not cache,
-	 * and whose models do not cache, may need to use deferred
-	 * queries on every access.
-	 * 
-	 * @return <code>true</code> if a deferred query is only required
-	 * on first access of children, <code>false</code> if deferred
-	 * query is required on all accesses.
-	 */
-	public boolean fetchOnFirstAccessOnly() {
-		return true;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java
new file mode 100644
index 0000000..ca2609e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java
@@ -0,0 +1,95 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.viewers;
+
+import org.eclipse.jface.viewers.AbstractTreeViewer;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.progress.*;
+
+/**
+ * DeferredQueryTreeContentManager is an extension of DeferredTreeContentManager
+ * that associates pending placeholders with their parent elements, so that
+ * clients know when a particular parent element is finished fetching
+ * its contents.
+ * 
+ * @since 3.4
+ *
+ */
+public class DeferredQueryTreeContentManager extends DeferredTreeContentManager {
+
+	class ElementPendingUpdateAdapter extends PendingUpdateAdapter {
+		Object element;
+
+		ElementPendingUpdateAdapter(Object element) {
+			super();
+			this.element = element;
+		}
+
+		public boolean isRemoved() {
+			return super.isRemoved();
+		}
+	}
+
+	Object elementRequested;
+	DeferredQueryTreeListener listener;
+
+	public DeferredQueryTreeContentManager(AbstractTreeViewer viewer) {
+		super(viewer);
+	}
+
+	/*
+	 * Overridden to keep track of the current request long enough
+	 * to put it in the pending update adapter.
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.progress.DeferredTreeContentManager#getChildren(java.lang.Object)
+	 */
+	public Object[] getChildren(final Object parent) {
+		elementRequested = parent;
+		return super.getChildren(parent);
+	}
+
+	/*
+	 * Overridden to signal the start of a fetch
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.progress.DeferredTreeContentManager#startFetchingDeferredChildren(java.lang.Object, org.eclipse.ui.progress.IDeferredWorkbenchAdapter, org.eclipse.ui.progress.PendingUpdateAdapter)
+	 */
+	protected void startFetchingDeferredChildren(final Object parent, final IDeferredWorkbenchAdapter adapter, final PendingUpdateAdapter placeholder) {
+		if (placeholder instanceof ElementPendingUpdateAdapter)
+			notifyListener(true, (ElementPendingUpdateAdapter) placeholder);
+		super.startFetchingDeferredChildren(parent, adapter, placeholder);
+	}
+
+	protected void runClearPlaceholderJob(final PendingUpdateAdapter placeholder) {
+		if (placeholder.isRemoved() || !PlatformUI.isWorkbenchRunning())
+			return;
+		if (placeholder instanceof ElementPendingUpdateAdapter)
+			notifyListener(false, (ElementPendingUpdateAdapter) placeholder);
+		super.runClearPlaceholderJob(placeholder);
+	}
+
+	protected PendingUpdateAdapter createPendingUpdateAdapter() {
+		return new ElementPendingUpdateAdapter(elementRequested);
+	}
+
+	public void setListener(DeferredQueryTreeListener listener) {
+		this.listener = listener;
+	}
+
+	private void notifyListener(boolean starting, ElementPendingUpdateAdapter placeholder) {
+		if (listener == null)
+			return;
+		if (starting)
+			listener.fetchingDeferredChildren(placeholder.element, placeholder);
+		else
+			listener.finishedFetchingDeferredChildren(placeholder.element, placeholder);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java
new file mode 100644
index 0000000..3d9647e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.viewers;
+
+import java.util.EventListener;
+
+/**
+ * A listening interface used to signal when fetching begins and
+ * ends.  Used by clients who wish to coordinate fetching with other
+ * capabilities of the viewer.
+ * 
+ * @since 3.4
+ *
+ */
+public interface DeferredQueryTreeListener extends EventListener {
+
+	public void fetchingDeferredChildren(Object parent, Object placeHolder);
+
+	public void finishedFetchingDeferredChildren(Object parent, Object placeHolder);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 18bac6e..5b8c6c1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -28,7 +28,6 @@ import org.eclipse.swt.events.DisposeEvent;
 import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.dialogs.PatternFilter;
 
 /**
  * An AvailableIUGroup is a reusable UI component that displays the
@@ -39,9 +38,12 @@ import org.eclipse.ui.dialogs.PatternFilter;
 public class AvailableIUGroup extends StructuredIUGroup {
 
 	QueryContext queryContext;
-	PatternFilter filter;
+	// We restrict the type of the filter used because PatternFilter does
+	// unnecessary accesses of children that cause problems with the deferred
+	// tree.
+	AvailableIUPatternFilter filter;
 	private IViewMenuProvider menuProvider;
-	private boolean useBold = false;;
+	private boolean useBold = false;
 	private IUDetailsLabelProvider labelProvider;
 	DeferredFetchFilteredTree filteredTree;
 	IUColumnConfig[] columnConfig;
@@ -74,26 +76,31 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 * including information about which repositories should be used.
 	 * @param queryContext the QueryContext describing additional information about how
 	 * the model should be traversed in this view.
-	 * @param filter the PatternFilter to use to filter the tree contents.  If <code>null</code>,
-	 * then there will be no filter.
+	 * @param filter the AvailableIUPatternFilter to use to filter the tree contents.  If <code>null</code>,
+	 * then a default will be used.
 	 * @param columnConfig the description of the columns that should be shown.  If <code>null</code>, a default
 	 * will be used.
 	 * @param menuProvider the IMenuProvider that fills the view menu.  If <code>null</code>,
 	 * then there is no view menu shown.
 	 */
-	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context, QueryContext queryContext, PatternFilter filter, IUColumnConfig[] columnConfig, IViewMenuProvider menuProvider) {
+	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context, QueryContext queryContext, AvailableIUPatternFilter filter, IUColumnConfig[] columnConfig, IViewMenuProvider menuProvider) {
 		super(parent, queryProvider, font, context);
 		this.queryContext = queryContext;
 		this.filter = filter;
 		this.menuProvider = menuProvider;
-		this.columnConfig = columnConfig;
+		if (columnConfig == null)
+			this.columnConfig = ProvUI.getIUColumnConfig();
+		else
+			this.columnConfig = columnConfig;
+		if (filter == null)
+			this.filter = new AvailableIUPatternFilter(this.columnConfig);
+		else
+			this.filter = filter;
 		createGroupComposite(parent);
 	}
 
 	protected StructuredViewer createViewer(Composite parent) {
 		// Table of available IU's
-		if (filter == null)
-			filter = new PatternFilter();
 		filteredTree = new DeferredFetchFilteredTree(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER, filter, menuProvider, parent.getDisplay());
 		final TreeViewer availableIUViewer = filteredTree.getViewer();
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUPatternFilter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUPatternFilter.java
new file mode 100644
index 0000000..61fad6c
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUPatternFilter.java
@@ -0,0 +1,110 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
+
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.CategoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.jface.viewers.Viewer;
+import org.eclipse.ui.dialogs.PatternFilter;
+
+/**
+ * A class that handles filtering IU's based on a supplied
+ * matching string.
+ *  
+ * @since 3.2
+ *
+ */
+public class AvailableIUPatternFilter extends PatternFilter {
+
+	boolean checkName, checkVersion, checkId = false;
+	String patternString;
+
+	/**
+	 * Create a new instance of a AvailableIUPatternFilter 
+	 */
+	public AvailableIUPatternFilter(IUColumnConfig[] columnConfig) {
+		super();
+		for (int i = 0; i < columnConfig.length; i++) {
+			int field = columnConfig[i].columnField;
+			if (field == IUColumnConfig.COLUMN_ID)
+				checkId = true;
+			else if (field == IUColumnConfig.COLUMN_NAME)
+				checkName = true;
+			else if (field == IUColumnConfig.COLUMN_VERSION)
+				checkVersion = true;
+		}
+
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.internal.dialogs.PatternFilter#isElementSelectable(java.lang.Object)
+	 */
+	public boolean isElementSelectable(Object element) {
+		return element instanceof IUElement && !(element instanceof CategoryElement);
+	}
+
+	/*
+	 * Overridden to remember the pattern string for an optimization
+	 * in isParentMatch
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.dialogs.PatternFilter#setPattern(java.lang.String)
+	 */
+	public void setPattern(String patternString) {
+		super.setPattern(patternString);
+		this.patternString = patternString;
+	}
+
+	/*
+	 * Overridden to avoid getting children unless there is actually
+	 * a filter.
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.dialogs.PatternFilter#isParentMatch(org.eclipse.jface.viewers.Viewer, java.lang.Object)
+	 */
+	protected boolean isParentMatch(Viewer viewer, Object element) {
+		if (patternString == null || patternString.length() == 0)
+			return true;
+		return super.isParentMatch(viewer, element);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.ui.dialogs.PatternFilter#isElementMatch(org.eclipse.jface.viewers.Viewer, java.lang.Object)
+	 */
+	protected boolean isLeafMatch(Viewer viewer, Object element) {
+		if (element instanceof CategoryElement) {
+			return false;
+		}
+
+		String text = null;
+		if (element instanceof IUElement) {
+			IInstallableUnit iu = ((IUElement) element).getIU();
+			if (checkName) {
+				text = iu.getProperty(IInstallableUnit.PROP_NAME);
+				if (text != null && wordMatches(text))
+					return true;
+			}
+			if (checkId) {
+				text = iu.getId();
+				if (wordMatches(text)) {
+					return true;
+				}
+			}
+			if (checkVersion) {
+				text = iu.getVersion().toString();
+				if (wordMatches(text))
+					return true;
+			}
+		}
+		return false;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
index 242a1bf..e238bbd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
@@ -89,8 +89,39 @@ public abstract class QueriedElement extends ProvElement {
 		return queryable;
 	}
 
+	/**
+	 * Return a boolean indicating whether the receiver
+	 * has enough information to get its queryable.  This is used in lieu
+	 * of {{@link #getQueryable()} when lazy initialization
+	 * of the queryable is not desired, and a client wishes
+	 * to know whether the queryable could be obtained.  Subclasses
+	 * that cache information needed to retrieve the queryable rather
+	 * than the queryable itself should
+	 * override this. 
+	 * 
+	 * @return <code>true</code> if the receiver has enough
+	 * information to retrieve its queryable, <code>false</code> 
+	 * if it does not.
+	 */
 	public boolean knowsQueryable() {
 		return queryable != null;
 	}
 
+	/**
+	 * Return a boolean indicating whether the receiver
+	 * actually has its queryable.  This is used in lieu
+	 * of {{@link #getQueryable()} when lazy initialization
+	 * of the queryable is not desired.  For example, when
+	 * working with an element whose queryable may be 
+	 * expensive to obtain, clients may check this before
+	 * actually getting the queryable.  Subclasses
+	 * should typically not need to override this.
+	 * 
+	 * @return <code>true</code> if the receiver has its
+	 * queryable, <code>false</code> if it does not yet.
+	 */
+	public boolean hasQueryable() {
+		return queryable != null;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentListener.java
index ea3a7cd..071d034 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentListener.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentListener.java
@@ -12,7 +12,6 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 
 import java.util.EventListener;
-import org.eclipse.core.runtime.IStatus;
 import org.eclipse.jface.viewers.Viewer;
 
 /**
@@ -25,8 +24,4 @@ import org.eclipse.jface.viewers.Viewer;
  */
 public interface DeferredQueryContentListener extends EventListener {
 	public void inputChanged(Viewer v, Object oldInput, Object newInput);
-
-	public void fetchingDeferredChildren(Object parent);
-
-	public void finishedFetchingDeferredChildren(Object parent, IStatus result);
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
index 0481465..607d49e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
@@ -14,14 +14,13 @@ package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 import java.util.HashMap;
 import java.util.HashSet;
 import org.eclipse.core.runtime.ListenerList;
-import org.eclipse.core.runtime.jobs.IJobChangeEvent;
-import org.eclipse.core.runtime.jobs.JobChangeAdapter;
 import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
+import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryTreeContentManager;
+import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryTreeListener;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
 import org.eclipse.jface.viewers.*;
-import org.eclipse.ui.progress.DeferredTreeContentManager;
 
 /**
  * Content provider that retrieves children asynchronously where
@@ -33,7 +32,7 @@ import org.eclipse.ui.progress.DeferredTreeContentManager;
  */
 public class DeferredQueryContentProvider implements ITreeContentProvider {
 
-	DeferredTreeContentManager manager;
+	DeferredQueryTreeContentManager manager;
 	IQueryProvider queryProvider;
 	Object currentInput;
 	HashMap alreadyQueried = new HashMap();
@@ -58,11 +57,22 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 		if (manager != null)
 			manager.cancel(oldInput);
 		if (v instanceof AbstractTreeViewer) {
-			manager = new DeferredTreeContentManager((AbstractTreeViewer) v);
+			manager = new DeferredQueryTreeContentManager((AbstractTreeViewer) v);
 			viewer = (AbstractTreeViewer) v;
+			manager.setListener(new DeferredQueryTreeListener() {
+
+				public void fetchingDeferredChildren(Object parent, Object placeholder) {
+					alreadyQueried.put(parent, placeholder);
+				}
+
+				public void finishedFetchingDeferredChildren(Object parent, Object placeholder) {
+					queryCompleted.add(parent);
+				}
+			});
 		} else
 			viewer = null;
 		alreadyQueried = new HashMap();
+		queryCompleted = new HashSet();
 		currentInput = newInput;
 		Object[] inputListeners = listeners.getListeners();
 		for (int i = 0; i < inputListeners.length; i++) {
@@ -106,47 +116,17 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 	public Object[] getChildren(final Object parent) {
 		if (parent instanceof RemoteQueriedElement) {
 			RemoteQueriedElement element = (RemoteQueriedElement) parent;
-			if (element.fetchOnFirstAccessOnly() && queryCompleted.contains(element))
+			// We rely on the assumption that the queryable is the most expensive
+			// thing to get vs. the query itself being expensive.
+			// (loading a repo vs. querying a repo afterward)
+			if (element.hasQueryable())
 				return element.getChildren(element);
 
 			if (manager != null && !synchronous) {
-				if (!alreadyQueried.containsKey(parent)) {
-					alreadyQueried.put(parent, null);
-					Object[] fetchListeners = listeners.getListeners();
-					for (int i = 0; i < fetchListeners.length; i++) {
-						((DeferredQueryContentListener) fetchListeners[i]).fetchingDeferredChildren(parent);
-					}
-					manager.addUpdateCompleteListener(new JobChangeAdapter() {
-						public void done(IJobChangeEvent event) {
-							if (event.getResult().isOK()) {
-								queryCompleted.add(parent);
-							}
-							Object[] finishedListeners = listeners.getListeners();
-							for (int i = 0; i < finishedListeners.length; i++) {
-								((DeferredQueryContentListener) finishedListeners[i]).finishedFetchingDeferredChildren(parent, event.getResult());
-							}
-
-						}
-					});
-					Object[] children = manager.getChildren(parent);
-					if (children != null) {
-						// This will be a placeholder to indicate 
-						// that the real children are being fetched
-						alreadyQueried.put(parent, children);
-						return children;
-					}
-				} else {
-					// We have already asked the manager, just bail out quickly here using the
-					// same placeholder as before
-					Object children = alreadyQueried.get(parent);
-					if (children == null)
-						return null;
-					return (Object[]) children;
-				}
+				return manager.getChildren(parent);
 			}
 		}
-		// Either we had no deferred manager or we are operating
-		// in synchronous mode
+		// Either it's not a remote element or we are in synchronous mode
 		if (parent instanceof ProvElement) {
 			return ((ProvElement) parent).getChildren(parent);
 		}

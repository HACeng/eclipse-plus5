commit e8c01594a0ee47e2a1c80508ce11faee6008a37b
Author: DJ Houghton <dj>
Date:   Thu Feb 3 19:52:12 2011 +0000

    Bug 330338 - [ui] Visualization/handling of patched versions in a composite repository

-	-	bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_disabled_patch_obj.gif
-	-	bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_patch_obj.gif
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
3	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIImages.java
15	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
6	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
12	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_disabled_patch_obj.gif b/bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_disabled_patch_obj.gif
new file mode 100644
index 0000000..196b83d
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_disabled_patch_obj.gif differ
diff --git a/bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_patch_obj.gif b/bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_patch_obj.gif
new file mode 100755
index 0000000..57fc499
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.ui/icons/obj/iu_patch_obj.gif differ
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
index 554e2e4..6341f41 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
@@ -108,6 +108,8 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		createImageDescriptor(ProvUIImages.IMG_IU, reg);
 		createImageDescriptor(ProvUIImages.IMG_DISABLED_IU, reg);
 		createImageDescriptor(ProvUIImages.IMG_UPDATED_IU, reg);
+		createImageDescriptor(ProvUIImages.IMG_PATCH_IU, reg);
+		createImageDescriptor(ProvUIImages.IMG_DISABLED_PATCH_IU, reg);
 		createImageDescriptor(ProvUIImages.IMG_CATEGORY, reg);
 		createImageDescriptor(ProvUIImages.IMG_PROFILE, reg);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL, reg);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIImages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIImages.java
index 40ab3fe..050ce6b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIImages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIImages.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- *  Copyright (c) 2007, 2009 IBM Corporation and others.
+ *  Copyright (c) 2007, 2011 IBM Corporation and others.
  *  All rights reserved. This program and the accompanying materials
  *  are made available under the terms of the Eclipse Public License v1.0
  *  which accompanies this distribution, and is available at
@@ -39,6 +39,8 @@ public class ProvUIImages {
 	public final static String IMG_IU = "obj/iu_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_DISABLED_IU = "obj/iu_disabled_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_UPDATED_IU = "obj/iu_update_obj.gif"; //$NON-NLS-1$
+	public final static String IMG_PATCH_IU = "obj/iu_patch_obj.gif"; //$NON-NLS-1$
+	public final static String IMG_DISABLED_PATCH_IU = "obj/iu_disabled_patch_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_PROFILE = "obj/profile_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_CATEGORY = "obj/category_obj.gif"; //$NON-NLS-1$
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index cccc181..5b4c7b3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- *  Copyright (c) 2007, 2010 IBM Corporation and others.
+ *  Copyright (c) 2007, 2011 IBM Corporation and others.
  *  All rights reserved. This program and the accompanying materials
  *  are made available under the terms of the Eclipse Public License v1.0
  *  which accompanies this distribution, and is available at
@@ -18,8 +18,8 @@ import org.eclipse.core.runtime.SubMonitor;
 import org.eclipse.equinox.internal.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IRequirement;
+import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.planner.IPlanner;
 import org.eclipse.equinox.p2.planner.IProfileChangeRequest;
 import org.eclipse.equinox.p2.repository.IRepository;
@@ -37,6 +37,7 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 	boolean shouldShowChildren;
 	boolean isInstalled = false;
 	boolean isUpdate = false;
+	boolean isPatch = false;
 
 	// Currently this variable is not settable due to the
 	// poor performance of sizing, but it is kept here for future improvement.
@@ -52,6 +53,7 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 		this.iu = iu;
 		this.profileID = profileID;
 		this.shouldShowChildren = showChildren;
+		this.isPatch = iu == null ? false : Boolean.parseBoolean(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
 	}
 
 	/*
@@ -62,6 +64,8 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 	protected String getImageId(Object obj) {
 		if (isUpdate)
 			return ProvUIImages.IMG_UPDATED_IU;
+		else if (isPatch)
+			return isInstalled ? ProvUIImages.IMG_DISABLED_PATCH_IU : ProvUIImages.IMG_PATCH_IU;
 		else if (isInstalled)
 			return ProvUIImages.IMG_DISABLED_IU;
 		return ProvUIImages.IMG_IU;
@@ -186,6 +190,14 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 		return isUpdate;
 	}
 
+	public void setIsPatch(boolean isPatch) {
+		this.isPatch = isPatch;
+	}
+
+	public boolean isPatch() {
+		return isPatch;
+	}
+
 	private ProvisioningContext getProvisioningContext() {
 		ProvisioningContext context = new ProvisioningContext(getProvisioningUI().getSession().getProvisioningAgent());
 		if (hasQueryable() && getQueryable() instanceof IRepository<?>) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
index d4e5072..d3113da 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2011 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -13,8 +13,8 @@ package org.eclipse.equinox.internal.p2.ui.model;
 import java.util.Collection;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.*;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IRequirement;
+import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 
 /**
  * Element wrapper class for installed IU's. Used instead of the plain IU when
@@ -26,11 +26,13 @@ public class InstalledIUElement extends QueriedElement implements IIUElement {
 
 	String profileId;
 	IInstallableUnit iu;
+	boolean isPatch = false;
 
 	public InstalledIUElement(Object parent, String profileId, IInstallableUnit iu) {
 		super(parent);
 		this.profileId = profileId;
 		this.iu = iu;
+		this.isPatch = iu == null ? false : Boolean.parseBoolean(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
 	}
 
 	/*
@@ -39,7 +41,7 @@ public class InstalledIUElement extends QueriedElement implements IIUElement {
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.ProvElement#getImageID(java.lang.Object)
 	 */
 	protected String getImageId(Object obj) {
-		return ProvUIImages.IMG_IU;
+		return isPatch ? ProvUIImages.IMG_PATCH_IU : ProvUIImages.IMG_IU;
 	}
 
 	public String getLabel(Object o) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
index 3c6ec29..90f7f7f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * Copyright (c) 2007, 2011 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.*;
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.query.*;
 
 /**
@@ -48,11 +49,13 @@ public class AvailableIUWrapper extends QueriedElementWrapper {
 		Object item = null;
 		boolean isUpdate = false;
 		boolean isInstalled = false;
+		boolean isPatch = false;
 
-		public InformationCache(Object item, boolean isUpdate, boolean isInstalled) {
+		public InformationCache(Object item, boolean isUpdate, boolean isInstalled, boolean isPatch) {
 			this.item = item;
 			this.isUpdate = isUpdate;
 			this.isInstalled = isInstalled;
+			this.isPatch = isPatch;
 		}
 	}
 
@@ -79,6 +82,7 @@ public class AvailableIUWrapper extends QueriedElementWrapper {
 	private InformationCache computeIUInformation(IInstallableUnit iu) {
 		boolean isUpdate = false;
 		boolean isInstalled = false;
+		boolean isPatch = iu == null ? false : Boolean.parseBoolean(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
 		if (profile != null && iu != null) {
 			IQueryResult<IInstallableUnit> queryResult = profile.query(QueryUtil.createIUQuery(iu.getId()), null);
 			Iterator<IInstallableUnit> iter = queryResult.iterator();
@@ -93,28 +97,31 @@ public class AvailableIUWrapper extends QueriedElementWrapper {
 				}
 			}
 		}
-		return new InformationCache(iu, isUpdate, isInstalled);
-
+		return new InformationCache(iu, isUpdate, isInstalled, isPatch);
 	}
 
 	protected Object wrap(Object item) {
 		IInstallableUnit iu = ProvUI.getAdapter(item, IInstallableUnit.class);
 		boolean isUpdate = false;
 		boolean isInstalled = false;
+		boolean isPatch = false;
 		if (cache != null && cache.item == item) {
 			// This cache should always be valide, since accept is called before transformItem
 			isUpdate = cache.isUpdate;
 			isInstalled = cache.isInstalled;
+			isPatch = cache.isPatch;
 		} else {
 			InformationCache iuInformation = computeIUInformation(iu);
 			isUpdate = iuInformation.isUpdate;
 			isInstalled = iuInformation.isInstalled;
+			isPatch = iuInformation.isPatch;
 		}
 		// subclass already made this an element, just set the install flag
 		if (item instanceof AvailableIUElement) {
 			AvailableIUElement element = (AvailableIUElement) item;
 			element.setIsInstalled(isInstalled);
 			element.setIsUpdate(isUpdate);
+			element.setIsPatch(isPatch);
 			return super.wrap(item);
 		}
 		// If it's not an IU or element, we have nothing to do here
@@ -130,6 +137,7 @@ public class AvailableIUWrapper extends QueriedElementWrapper {
 			AvailableIUElement availableElement = (AvailableIUElement) element;
 			availableElement.setIsInstalled(isInstalled);
 			availableElement.setIsUpdate(isUpdate);
+			availableElement.setIsPatch(isPatch);
 		}
 		return super.wrap(element);
 	}
commit eff323603f394cae2b72e22a7278c140c25b9538
Author: Andrew Niefer <aniefer>
Date:   Fri Feb 18 20:48:23 2011 +0000

    bug 330338 - remove use of 1.5 methods

1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index 5b4c7b3..96972fa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -53,7 +53,7 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 		this.iu = iu;
 		this.profileID = profileID;
 		this.shouldShowChildren = showChildren;
-		this.isPatch = iu == null ? false : Boolean.parseBoolean(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
+		this.isPatch = iu == null ? false : Boolean.valueOf(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
index d3113da..e251968 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/InstalledIUElement.java
@@ -32,7 +32,7 @@ public class InstalledIUElement extends QueriedElement implements IIUElement {
 		super(parent);
 		this.profileId = profileId;
 		this.iu = iu;
-		this.isPatch = iu == null ? false : Boolean.parseBoolean(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
+		this.isPatch = iu == null ? false : Boolean.valueOf(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
index 90f7f7f..1bc569d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
@@ -82,7 +82,7 @@ public class AvailableIUWrapper extends QueriedElementWrapper {
 	private InformationCache computeIUInformation(IInstallableUnit iu) {
 		boolean isUpdate = false;
 		boolean isInstalled = false;
-		boolean isPatch = iu == null ? false : Boolean.parseBoolean(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
+		boolean isPatch = iu == null ? false : Boolean.valueOf(iu.getProperty(InstallableUnitDescription.PROP_TYPE_PATCH));
 		if (profile != null && iu != null) {
 			IQueryResult<IInstallableUnit> queryResult = profile.query(QueryUtil.createIUQuery(iu.getId()), null);
 			Iterator<IInstallableUnit> iter = queryResult.iterator();

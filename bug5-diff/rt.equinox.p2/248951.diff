commit fb8c6a27e20f1b07e2a90243b75c24c6145c9078
Author: Andrew Niefer <aniefer>
Date:   Wed Feb 18 23:13:49 2009 +0000

    bug 248951 - repository load hints

10	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
7	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
32	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
9	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java
7	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
9	7	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/AbstractRepositoryManager.java
5	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
6	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileMetadataRepositoryFactory.java
1	1	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
9	3	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
1	1	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
9	3	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
2	2	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
9	4	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
10	3	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
30	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
9	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java
7	4	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/FailingMetadataRepositoryFactory.java
5	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileMetadataRepositoryTest.java
29	15	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
29	15	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
7	2	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
8	2	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index 1545eb0d..83dcb57 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -52,11 +52,11 @@ public class ArtifactRepositoryManager extends AbstractRepositoryManager impleme
 		return factory.create(location, name, type, properties);
 	}
 
-	protected IRepository factoryLoad(URI location, IExtension extension, SubMonitor monitor) throws ProvisionException {
+	protected IRepository factoryLoad(URI location, IExtension extension, int flags, SubMonitor monitor) throws ProvisionException {
 		ArtifactRepositoryFactory factory = (ArtifactRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
 		if (factory == null)
 			return null;
-		return factory.load(location, monitor.newChild(10));
+		return factory.load(location, flags, monitor.newChild(10));
 	}
 
 	protected String getBundleId() {
@@ -82,8 +82,15 @@ public class ArtifactRepositoryManager extends AbstractRepositoryManager impleme
 		return IRepository.TYPE_ARTIFACT;
 	}
 
+	/**
+	 * @deprecated see {@link #loadRepository(URI, int, IProgressMonitor)}
+	 */
 	public IArtifactRepository loadRepository(URI location, IProgressMonitor monitor) throws ProvisionException {
-		return (IArtifactRepository) loadRepository(location, monitor, null);
+		return loadRepository(location, 0, monitor);
+	}
+
+	public IArtifactRepository loadRepository(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		return (IArtifactRepository) loadRepository(location, monitor, null, flags);
 	}
 
 	public IArtifactRepository refreshRepository(URI location, IProgressMonitor monitor) throws ProvisionException {
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
index f521fa4..2c9336d 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
@@ -21,12 +21,13 @@ import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO;
 import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory;
 import org.eclipse.osgi.util.NLS;
 
 public class CompositeArtifactRepositoryFactory extends ArtifactRepositoryFactory {
 
-	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
+	public IArtifactRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
 		final String PROTOCOL_FILE = "file"; //$NON-NLS-1$
 		long time = 0;
 		final String debugMsg = "Restoring artifact repository "; //$NON-NLS-1$
@@ -49,6 +50,11 @@ public class CompositeArtifactRepositoryFactory extends ArtifactRepositoryFactor
 					compress = false;
 				}
 			} else {
+				//not local, return null if the caller wanted a modifiable repo
+				if ((flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0) {
+					return null;
+				}
+
 				//download to local temp file
 				localFile = File.createTempFile(CompositeArtifactRepository.CONTENT_FILENAME, CompositeArtifactRepository.XML_EXTENSION);
 				try {
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
index 7551214..9d9a8be 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
@@ -86,6 +86,7 @@ public interface IArtifactRepositoryManager extends IRepositoryManager {
 	 * load attempts.
 	 * </p>
 	 * 
+	 * @deprecated see {@link #loadRepository(URI, int, IProgressMonitor)}
 	 * @param location the location in which to look for a repository description
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
@@ -99,6 +100,37 @@ public interface IArtifactRepositoryManager extends IRepositoryManager {
 	public IArtifactRepository loadRepository(URI location, IProgressMonitor monitor) throws ProvisionException;
 
 	/**
+	 * Loads the repository at the given location.  The location is expected to contain 
+	 * data that describes a valid artifact repository of a known type.  If this manager
+	 * already knows a repository at the given location then that repository is returned.
+	 * <p>
+	 * The resulting repository is added to the list of repositories tracked by
+	 * the repository manager. Clients must make a subsequent call to {@link #removeRepository(URI)}
+	 * if they do not want the repository manager to remember the repository for subsequent
+	 * load attempts.
+	 * </p>
+	 * 
+	 * <p>
+	 * The flags passed in should be taken as a hint for the type of repository to load.  If
+	 * the manager will not load a repository that satisfies these hints, it can fail
+	 * fast.<br>
+	 * See {@link IRepositoryManager#REPOSITORY_HINT_MODIFIABLE}
+	 * </p>
+	 * @param location the location in which to look for a repository description
+	 * @param flags - flags to consider when loading
+	 * @param monitor a progress monitor, or <code>null</code> if progress
+	 *    reporting is not desired
+	 * @return a repository object for the given location
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>There is no existing repository at that location.</li>
+	 * <li>The repository at that location could not be read.</li>
+	 * </ul>
+	 * @see IRepositoryManager#REPOSITORY_HINT_MODIFIABLE
+	 */
+	public IArtifactRepository loadRepository(URI location, int flags, IProgressMonitor monitor) throws ProvisionException;
+
+	/**
 	 * Refreshes the repository corresponding to the given URL. This method discards
 	 * any cached state held by the repository manager and reloads the repository
 	 * contents. The provided repository location must already be known to the repository
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java
index 7fe4d63..1398703 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java
@@ -15,6 +15,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 
 /**
  * An artifact repository factory is responsible for creating and loading instances
@@ -53,8 +54,14 @@ public abstract class ArtifactRepositoryFactory {
 	 * repository of this type at the given location, and the repository manager is free
 	 * to try again with a different repository factory.
 	 * </p>
-	 * 
+	 * <p>
+	 * The flags passed in should be taken as a hint for the type of repository to load.  If
+	 * the factory knows it will not load a repository that satisfies these hints, it can fail
+	 * fast and return null.
+	 * @see IRepositoryManager#REPOSITORY_HINT_MODIFIABLE
+	 * </p>
 	 * @param location the location in which to look for a repository description
+	 * @param flags to consider while loading the repository
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 * @return a repository object for the given location
@@ -64,5 +71,5 @@ public abstract class ArtifactRepositoryFactory {
 	 * <li>The repository at that location could not be read.</li>
 	 * </ul>
 	 */
-	public abstract IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException;
+	public abstract IArtifactRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException;
 }
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
index bc9a943..ac1caa9 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
@@ -22,11 +22,12 @@ import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifact
 import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.osgi.util.NLS;
 
 public class SimpleArtifactRepositoryFactory extends ArtifactRepositoryFactory {
 
-	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
+	public IArtifactRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
 		final String PROTOCOL_FILE = "file"; //$NON-NLS-1$
 		long time = 0;
 		final String debugMsg = "Restoring artifact repository "; //$NON-NLS-1$
@@ -49,6 +50,11 @@ public class SimpleArtifactRepositoryFactory extends ArtifactRepositoryFactory {
 					compress = false;
 				}
 			} else {
+				//not local, return null if the caller wanted a modifiable repo
+				if ((flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0) {
+					return null;
+				}
+
 				//download to local temp file
 				localFile = File.createTempFile("artifacts", ".xml"); //$NON-NLS-1$ //$NON-NLS-2$
 				try {
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/AbstractRepositoryManager.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/AbstractRepositoryManager.java
index d14e944..eca6c27 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/AbstractRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/AbstractRepositoryManager.java
@@ -177,7 +177,7 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 		if (!removeRepository(location))
 			fail(location, ProvisionException.REPOSITORY_NOT_FOUND);
 		try {
-			IRepository result = loadRepository(location, monitor, null);
+			IRepository result = loadRepository(location, monitor, null, 0);
 			setEnabled(location, wasEnabled);
 			return result;
 		} catch (ProvisionException e) {
@@ -244,7 +244,7 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 			boolean loaded = false;
 			try {
 				//repository should not already exist
-				loadRepository(location, (IProgressMonitor) null, type);
+				loadRepository(location, (IProgressMonitor) null, type, 0);
 				loaded = true;
 			} catch (ProvisionException e) {
 				//expected - fall through and create the new repository
@@ -341,7 +341,7 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 	 * Loads and returns a repository using the given repository factory extension. Returns
 	 * null if no factory could be found associated with that extension.
 	 */
-	protected abstract IRepository factoryLoad(URI location, IExtension extension, SubMonitor monitor) throws ProvisionException;
+	protected abstract IRepository factoryLoad(URI location, IExtension extension, int flags, SubMonitor monitor) throws ProvisionException;
 
 	protected void fail(URI location, int code) throws ProvisionException {
 		String msg = null;
@@ -558,7 +558,7 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 		}
 	}
 
-	protected IRepository loadRepository(URI location, IProgressMonitor monitor, String type) throws ProvisionException {
+	protected IRepository loadRepository(URI location, IProgressMonitor monitor, String type, int flags) throws ProvisionException {
 		boolean added = false;
 		IRepository result = null;
 
@@ -579,7 +579,7 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 					if (sub.isCanceled())
 						throw new OperationCanceledException();
 					try {
-						result = loadRepository(location, suffixes[i], type, sub.newChild(100));
+						result = loadRepository(location, suffixes[i], type, flags, sub.newChild(100));
 					} catch (ProvisionException e) {
 						failure = e;
 						break;
@@ -614,13 +614,15 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 		return result;
 	}
 
-	private IRepository loadRepository(URI location, String suffix, String type, SubMonitor monitor) throws ProvisionException {
+	private IRepository loadRepository(URI location, String suffix, String type, int flags, SubMonitor monitor) throws ProvisionException {
 		IExtension[] providers = findMatchingRepositoryExtensions(suffix, type);
 		// Loop over the candidates and return the first one that successfully loads
 		monitor.beginTask("", providers.length * 10); //$NON-NLS-1$
 		for (int i = 0; i < providers.length; i++)
 			try {
-				return factoryLoad(location, providers[i], monitor);
+				IRepository repo = factoryLoad(location, providers[i], flags, monitor);
+				if (repo != null)
+					return repo;
 			} catch (ProvisionException e) {
 				if (e.getStatus().getCode() != ProvisionException.REPOSITORY_NOT_FOUND)
 					throw e;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
index 2f7ca38..6ad6765 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
@@ -55,6 +55,11 @@ public interface IRepositoryManager {
 	public static final int REPOSITORIES_SYSTEM = 1 << 0;
 
 	/**
+	 * Constant used to indicate that a repository should be modifiable
+	 */
+	public static final int REPOSITORY_HINT_MODIFIABLE = 1 << 0;
+
+	/**
 	 * Adds the repository at the given location to the list of repositories tracked by 
 	 * this repository manager.
 	 * <p>
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileMetadataRepositoryFactory.java
index 7fa6071..3eaa940 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileMetadataRepositoryFactory.java
@@ -14,6 +14,7 @@ import java.net.URI;
 import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
 
@@ -23,7 +24,11 @@ public class ProfileMetadataRepositoryFactory extends MetadataRepositoryFactory
 		return null;
 	}
 
-	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
+	public IMetadataRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		//return null if the caller wanted a modifiable repo
+		if ((flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0) {
+			return null;
+		}
 		return new ProfileMetadataRepository(location, monitor);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index 01e298b..a83d60d 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -64,7 +64,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 
 	void reload() {
 		try {
-			ExtensionLocationArtifactRepository repo = (ExtensionLocationArtifactRepository) new ExtensionLocationArtifactRepositoryFactory().load(getLocation(), null);
+			ExtensionLocationArtifactRepository repo = (ExtensionLocationArtifactRepository) new ExtensionLocationArtifactRepositoryFactory().load(getLocation(), 0, null);
 			artifactRepository = repo.artifactRepository;
 			base = repo.base;
 		} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
index 917225c..55b88dc 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.osgi.util.NLS;
@@ -38,7 +39,7 @@ public class ExtensionLocationArtifactRepositoryFactory extends ArtifactReposito
 		// where one already exists
 		boolean failed = false;
 		try {
-			new SimpleArtifactRepositoryFactory().load(repoLocation, null);
+			new SimpleArtifactRepositoryFactory().load(repoLocation, 0, null);
 			failed = true;
 		} catch (ProvisionException e) {
 			// expected
@@ -54,7 +55,12 @@ public class ExtensionLocationArtifactRepositoryFactory extends ArtifactReposito
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
+	public IArtifactRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		//return null if the caller wanted a modifiable repo
+		if ((flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0) {
+			return null;
+		}
+
 		// TODO proper progress monitoring
 		IStatus status = validate(location, null);
 		if (!status.isOK())
@@ -65,7 +71,7 @@ public class ExtensionLocationArtifactRepositoryFactory extends ArtifactReposito
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
 		// TODO proper progress monitoring
 		try {
-			IFileArtifactRepository repo = (IFileArtifactRepository) new SimpleArtifactRepositoryFactory().load(repoLocation, null);
+			IFileArtifactRepository repo = (IFileArtifactRepository) new SimpleArtifactRepositoryFactory().load(repoLocation, flags, null);
 			return new ExtensionLocationArtifactRepository(location, repo, monitor);
 		} catch (ProvisionException e) {
 			return create(location, Activator.getRepositoryName(location), ExtensionLocationArtifactRepository.TYPE, null);
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index 6978f22..bc8ceb2 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -63,7 +63,7 @@ public class ExtensionLocationMetadataRepository extends AbstractMetadataReposit
 
 	void reload() {
 		try {
-			ExtensionLocationMetadataRepository repo = (ExtensionLocationMetadataRepository) new ExtensionLocationMetadataRepositoryFactory().load(getLocation(), null);
+			ExtensionLocationMetadataRepository repo = (ExtensionLocationMetadataRepository) new ExtensionLocationMetadataRepositoryFactory().load(getLocation(), 0, null);
 			metadataRepository = repo.metadataRepository;
 			base = repo.base;
 		} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
index 27f1a01..77e3ad0 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
@@ -14,6 +14,7 @@ import java.net.URI;
 import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
@@ -37,7 +38,7 @@ public class ExtensionLocationMetadataRepositoryFactory extends MetadataReposito
 		// where one already exists
 		boolean failed = false;
 		try {
-			new SimpleMetadataRepositoryFactory().load(repoLocation, null);
+			new SimpleMetadataRepositoryFactory().load(repoLocation, 0, null);
 			failed = true;
 		} catch (ProvisionException e) {
 			// expected
@@ -53,7 +54,12 @@ public class ExtensionLocationMetadataRepositoryFactory extends MetadataReposito
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
+	public IMetadataRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		//return null if the caller wanted a modifiable repo
+		if ((flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0) {
+			return null;
+		}
+
 		// TODO proper progress monitoring
 		IStatus status = validate(location, null);
 		if (!status.isOK())
@@ -64,7 +70,7 @@ public class ExtensionLocationMetadataRepositoryFactory extends MetadataReposito
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
 		// TODO proper progress monitoring
 		try {
-			IMetadataRepository repository = new SimpleMetadataRepositoryFactory().load(repoLocation, null);
+			IMetadataRepository repository = new SimpleMetadataRepositoryFactory().load(repoLocation, flags, null);
 			return new ExtensionLocationMetadataRepository(location, repository, monitor);
 		} catch (ProvisionException e) {
 			return create(location, Activator.getRepositoryName(location), ExtensionLocationMetadataRepository.TYPE, null);
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
index ec57665..a2c4349 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
@@ -73,11 +73,11 @@ public class SiteListener extends DirectoryChangeListener {
 			if (metadataRepository == null) {
 				artifactRepository.reload();
 				ExtensionLocationMetadataRepositoryFactory factory = new ExtensionLocationMetadataRepositoryFactory();
-				metadataRepository = (ExtensionLocationMetadataRepository) factory.load(artifactRepository.getLocation(), null);
+				metadataRepository = (ExtensionLocationMetadataRepository) factory.load(artifactRepository.getLocation(), 0, null);
 			} else if (artifactRepository == null) {
 				metadataRepository.reload();
 				ExtensionLocationArtifactRepositoryFactory factory = new ExtensionLocationArtifactRepositoryFactory();
-				artifactRepository = (ExtensionLocationArtifactRepository) factory.load(metadataRepository.getLocation(), null);
+				artifactRepository = (ExtensionLocationArtifactRepository) factory.load(metadataRepository.getLocation(), 0, null);
 			}
 		} catch (ProvisionException e) {
 			// TODO need proper error handling here.  What should we do if there is a failure
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
index a066ba7..c5bb6d5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO;
 import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
 import org.eclipse.osgi.util.NLS;
@@ -72,7 +73,7 @@ public class CompositeMetadataRepositoryFactory extends MetadataRepositoryFactor
 	 */
 	public IStatus validate(URI location, IProgressMonitor monitor) {
 		try {
-			validateAndLoad(location, false, monitor);
+			validateAndLoad(location, false, 0, monitor);
 		} catch (ProvisionException e) {
 			return e.getStatus();
 		}
@@ -82,11 +83,11 @@ public class CompositeMetadataRepositoryFactory extends MetadataRepositoryFactor
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
-		return validateAndLoad(location, true, monitor);
+	public IMetadataRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		return validateAndLoad(location, true, flags, monitor);
 	}
 
-	protected IMetadataRepository validateAndLoad(URI location, boolean doLoad, IProgressMonitor monitor) throws ProvisionException {
+	protected IMetadataRepository validateAndLoad(URI location, boolean doLoad, int flags, IProgressMonitor monitor) throws ProvisionException {
 		long time = 0;
 		final String debugMsg = "Validating and loading metadata repository "; //$NON-NLS-1$
 		if (Tracing.DEBUG_METADATA_PARSING) {
@@ -95,6 +96,10 @@ public class CompositeMetadataRepositoryFactory extends MetadataRepositoryFactor
 		}
 		SubMonitor sub = SubMonitor.convert(monitor, 400);
 		try {
+			//non local repos are not modifiable
+			if (!PROTOCOL_FILE.equals(location.getScheme()) && (flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0)
+				return null;
+
 			File localFile = getLocalFile(location, sub.newChild(300));
 			InputStream inStream = new BufferedInputStream(new FileInputStream(localFile));
 			JarInputStream jarStream = null;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index 84a743c..6ba9f82 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -47,11 +47,11 @@ public class MetadataRepositoryManager extends AbstractRepositoryManager impleme
 		return factory.create(location, name, type, properties);
 	}
 
-	protected IRepository factoryLoad(URI location, IExtension extension, SubMonitor monitor) throws ProvisionException {
+	protected IRepository factoryLoad(URI location, IExtension extension, int flags, SubMonitor monitor) throws ProvisionException {
 		MetadataRepositoryFactory factory = (MetadataRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
 		if (factory == null)
 			return null;
-		return factory.load(location, monitor.newChild(10));
+		return factory.load(location, flags, monitor.newChild(10));
 	}
 
 	protected String getBundleId() {
@@ -81,8 +81,15 @@ public class MetadataRepositoryManager extends AbstractRepositoryManager impleme
 		return IRepository.TYPE_METADATA;
 	}
 
+	/**
+	 * @deprecated see {@link #loadRepository(URI, int, IProgressMonitor)}
+	 */
 	public IMetadataRepository loadRepository(URI location, IProgressMonitor monitor) throws ProvisionException {
-		return (IMetadataRepository) loadRepository(location, monitor, null);
+		return loadRepository(location, 0, monitor);
+	}
+
+	public IMetadataRepository loadRepository(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		return (IMetadataRepository) loadRepository(location, monitor, null, flags);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
index aaef4e5..e2d2ff5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
@@ -81,10 +81,40 @@ public interface IMetadataRepositoryManager extends IRepositoryManager, IQueryab
 	 * <li>There is no existing repository at that location.</li>
 	 * <li>The repository at that location could not be read.</li>
 	 * </ul>
+	 * @deprecated see {@link #loadRepository(URI, int, IProgressMonitor)}
 	 */
 	public IMetadataRepository loadRepository(URI location, IProgressMonitor monitor) throws ProvisionException;
 
 	/**
+	 * Loads a repository corresponding to the given URL.  If a repository has
+	 * previously been loaded at the given location, the same cached repository
+	 * may be returned.
+	 * <p>
+	 * The resulting repository is added to the list of repositories tracked by
+	 * the repository manager. Clients must make a subsequent call to {@link #removeRepository(URI)}
+	 * if they do not want the repository manager to remember the repository for subsequent
+	 * load attempts.
+	 * </p>
+	 * <p>
+	 * The flags passed in should be taken as a hint for the type of repository to load.  If
+	 * the manager will not load a repository that satisfies these hints, it can fail
+	 * fast.<br>
+	 * See {@link IRepositoryManager#REPOSITORY_HINT_MODIFIABLE}
+	 * </p>
+	 * @param location The location of the repository to load
+	 * @param flags - flags to consider when loading the repository
+	 * @param monitor a progress monitor, or <code>null</code> if progress
+	 *    reporting is not desired
+	 * @return The loaded metadata repository
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>There is no existing repository at that location.</li>
+	 * <li>The repository at that location could not be read.</li>
+	 * </ul>
+	 */
+	public IMetadataRepository loadRepository(URI location, int flags, IProgressMonitor montiro) throws ProvisionException;
+
+	/**
 	 * Refreshes the repository corresponding to the given URL. This method discards
 	 * any cached state held by the repository manager and reloads the repository
 	 * contents. The provided repository location must already be known to the repository
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java
index f3cb0b1..40a5f0a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java
@@ -15,6 +15,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 
 /**
@@ -53,8 +54,14 @@ public abstract class MetadataRepositoryFactory {
 	 * repository of this type at the given location, and the repository manager is free
 	 * to try again with a different repository factory.
 	 * </p>
-	 * 
+	 * <p>
+	 * The flags passed in should be taken as a hint for the type of repository to load.  If
+	 * the factory knows it will not load a repository that satisfies these hints, it can fail
+	 * fast and return null.<br>
+	 * See {@link IRepositoryManager#REPOSITORY_HINT_MODIFIABLE}
+	 * </p>
 	 * @param location The location of the repository to load
+	 * @param flags to consider while loading the repository
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 * @return The loaded metadata repository
@@ -64,7 +71,7 @@ public abstract class MetadataRepositoryFactory {
 	 * <li>The repository at that location could not be read.</li>
 	 * </ul>
 	 */
-	public abstract IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException;
+	public abstract IMetadataRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException;
 
 	/**
 	 * Validates a candidate repository URL and returns a status indicating the
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
index 9457ee3..bbbbb4c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
@@ -19,6 +19,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.internal.p2.metadata.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.osgi.util.NLS;
 
@@ -71,7 +72,7 @@ public class SimpleMetadataRepositoryFactory extends MetadataRepositoryFactory {
 	 */
 	public IStatus validate(URI location, IProgressMonitor monitor) {
 		try {
-			validateAndLoad(location, false, monitor);
+			validateAndLoad(location, false, 0, monitor);
 		} catch (ProvisionException e) {
 			return e.getStatus();
 		}
@@ -81,11 +82,11 @@ public class SimpleMetadataRepositoryFactory extends MetadataRepositoryFactory {
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
-		return validateAndLoad(location, true, monitor);
+	public IMetadataRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		return validateAndLoad(location, true, flags, monitor);
 	}
 
-	protected IMetadataRepository validateAndLoad(URI location, boolean doLoad, IProgressMonitor monitor) throws ProvisionException {
+	protected IMetadataRepository validateAndLoad(URI location, boolean doLoad, int flags, IProgressMonitor monitor) throws ProvisionException {
 		long time = 0;
 		final String debugMsg = "Validating and loading metadata repository "; //$NON-NLS-1$
 		if (Tracing.DEBUG_METADATA_PARSING) {
@@ -114,6 +115,8 @@ public class SimpleMetadataRepositoryFactory extends MetadataRepositoryFactory {
 				if (doLoad) {
 					InputStream descriptorStream = jarStream != null ? jarStream : inStream;
 					IMetadataRepository result = new MetadataRepositoryIO().read(localFile.toURL(), descriptorStream, sub.newChild(100));
+					if (result != null && (flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0 && !result.isModifiable())
+						return null;
 					if (result instanceof LocalMetadataRepository)
 						((LocalMetadataRepository) result).initializeAfterLoad(location);
 					if (result instanceof URLMetadataRepository)
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/FailingMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/FailingMetadataRepositoryFactory.java
index de96eac..6cd4803 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/FailingMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/FailingMetadataRepositoryFactory.java
@@ -28,7 +28,7 @@ public class FailingMetadataRepositoryFactory extends MetadataRepositoryFactory
 	}
 
 	@Override
-	public IMetadataRepository load(URI location, IProgressMonitor monitor) {
+	public IMetadataRepository load(URI location, int flags, IProgressMonitor monitor) {
 		throw new RuntimeException("Exception thrown deliberately as part of test");
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
index f368deb..a4c8de9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -157,7 +158,10 @@ public class SimpleArtifactRepositoryTest extends AbstractProvisioningTest {
 		location = new File(getTempFolder(), getUniqueString()).toURI();
 		factory.create(location, "test type", null, null);
 		try {
-			factory.load(location, new NullProgressMonitor());
+			//bug 248951, ask for a modifiable repo
+			IRepository repo = factory.load(location, IRepositoryManager.REPOSITORY_HINT_MODIFIABLE, new NullProgressMonitor());
+			assertNotNull(repo);
+			assertTrue(repo.isModifiable());
 		} catch (ProvisionException e) {
 			fail("2.0", e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileMetadataRepositoryTest.java
index a3e003e..7b22601 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileMetadataRepositoryTest.java
@@ -75,7 +75,7 @@ public class ProfileMetadataRepositoryTest extends AbstractProvisioningTest {
 		ProfileMetadataRepositoryFactory factory = new ProfileMetadataRepositoryFactory();
 		ProfileMetadataRepository repo = null;
 		try {
-			repo = (ProfileMetadataRepository) factory.load(simpleProfileFolder.toURI(), getMonitor());
+			repo = (ProfileMetadataRepository) factory.load(simpleProfileFolder.toURI(), 0, getMonitor());
 		} catch (ProvisionException e1) {
 			fail();
 		}
@@ -106,7 +106,7 @@ public class ProfileMetadataRepositoryTest extends AbstractProvisioningTest {
 		ProfileMetadataRepositoryFactory factory = new ProfileMetadataRepositoryFactory();
 		ProfileMetadataRepository repo = null;
 		try {
-			repo = (ProfileMetadataRepository) factory.load(timeStampedProfile.toURI(), getMonitor());
+			repo = (ProfileMetadataRepository) factory.load(timeStampedProfile.toURI(), 0, getMonitor());
 		} catch (ProvisionException e1) {
 			fail();
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
index d70829f..40537af 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
@@ -17,6 +17,7 @@ import org.eclipse.core.runtime.FileLocator;
 import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 
@@ -52,7 +53,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 	public void testNonFileURL() {
 		try {
 			URI nonFileURL = new URI("http://www.eclipse.org");
-			factory.load(nonFileURL, getMonitor());
+			factory.load(nonFileURL, 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -65,7 +66,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		File directory = new File(tempDirectory, "nonexistent");
 		delete(directory);
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -76,7 +77,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		File file = new File(tempDirectory, "exists.file");
 		try {
 			file.createNewFile();
-			factory.load(file.toURI(), getMonitor());
+			factory.load(file.toURI(), 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -91,7 +92,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
 				return;
@@ -105,7 +106,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(directory, "plugins").mkdir();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1", e);
 		}
@@ -116,7 +117,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		directory.mkdirs();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1", e);
 		}
@@ -127,7 +128,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		directory.mkdirs();
 		new File(directory, "plugins").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1", e);
 		}
@@ -141,7 +142,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1", e);
 		}
@@ -155,7 +156,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
 				return;
@@ -169,7 +170,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), directory);
 		URI location = directory.toURI();
 		try {
-			IArtifactRepository repo = factory.load(location, getMonitor());
+			IArtifactRepository repo = factory.load(location, 0, getMonitor());
 			if (repo.getArtifactKeys().length != 2)
 				fail("2.1");
 		} catch (ProvisionException ex) {
@@ -185,7 +186,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/features"), features);
 		URI location = directory.toURI();
 		try {
-			IArtifactRepository repo = factory.load(location, getMonitor());
+			IArtifactRepository repo = factory.load(location, 0, getMonitor());
 			if (repo.getArtifactKeys().length != 1)
 				fail("2.1");
 		} catch (ProvisionException ex) {
@@ -201,7 +202,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/plugins"), plugins);
 		URI location = directory.toURI();
 		try {
-			IArtifactRepository repo = factory.load(location, getMonitor());
+			IArtifactRepository repo = factory.load(location, 0, getMonitor());
 			if (repo.getArtifactKeys().length != 1)
 				fail("2.1");
 		} catch (ProvisionException ex) {
@@ -215,7 +216,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		File eclipseDirectory = new File(directory, "eclipse");
 		copy("1.1", getTestData("1.1", "/testData/extensionlocation"), eclipseDirectory);
 		try {
-			IArtifactRepository repo = factory.load(directory.toURI(), getMonitor());
+			IArtifactRepository repo = factory.load(directory.toURI(), 0, getMonitor());
 			if (repo.getArtifactKeys().length != 2)
 				fail("1.0");
 		} catch (ProvisionException e) {
@@ -223,10 +224,23 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		}
 	}
 
+	public void testEclipseBaseModifiableRepository() {
+		File directory = new File(tempDirectory, "exists");
+		directory.mkdirs();
+		File eclipseDirectory = new File(directory, "eclipse");
+		copy("1.1", getTestData("1.1", "/testData/extensionlocation"), eclipseDirectory);
+		try {
+			IArtifactRepository repo = factory.load(directory.toURI(), IRepositoryManager.REPOSITORY_HINT_MODIFIABLE, getMonitor());
+			assertNull("1.0", repo);
+		} catch (ProvisionException e) {
+			fail("0.5", e);
+		}
+	}
+
 	public void testUpdateSiteXMLURL() {
 		File site = getTestData("0.1", "/testData/updatesite/site");
 		try {
-			factory.load(site.toURI(), getMonitor());
+			factory.load(site.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
 				return;
@@ -237,7 +251,7 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 	public void testXXXSiteXXXXMLURL() {
 		File site = getTestData("0.1", "/testData/updatesite/xxxsitexxx");
 		try {
-			factory.load(site.toURI(), getMonitor());
+			factory.load(site.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
 				return;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
index 4a9e3bd..bf4a023 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
@@ -15,6 +15,7 @@ import java.io.IOException;
 import java.net.*;
 import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
@@ -46,7 +47,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 	public void testNonFileURL() {
 		try {
 			URI nonFileURL = new URI("http://www.eclipse.org");
-			factory.load(nonFileURL, getMonitor());
+			factory.load(nonFileURL, 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -59,7 +60,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		File directory = new File(tempDirectory, "nonexistent");
 		delete(directory);
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -70,7 +71,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		File file = new File(tempDirectory, "exists.file");
 		try {
 			file.createNewFile();
-			factory.load(file.toURI(), getMonitor());
+			factory.load(file.toURI(), 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -85,7 +86,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -98,7 +99,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(directory, "plugins").mkdir();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1");
 		}
@@ -109,7 +110,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		directory.mkdirs();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1");
 		}
@@ -120,7 +121,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		directory.mkdirs();
 		new File(directory, "plugins").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1");
 		}
@@ -134,7 +135,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			fail("0.1");
 		}
@@ -148,7 +149,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURI(), getMonitor());
+			factory.load(directory.toURI(), 0, getMonitor());
 			fail("0.1");
 		} catch (ProvisionException e) {
 			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
@@ -161,7 +162,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), directory);
 		URI location = directory.toURI();
 		try {
-			IMetadataRepository repo = factory.load(location, getMonitor());
+			IMetadataRepository repo = factory.load(location, 0, getMonitor());
 			if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 3)
 				fail("2.99");
 		} catch (ProvisionException ex) {
@@ -177,7 +178,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/features"), features);
 		URI location = directory.toURI();
 		try {
-			IMetadataRepository repo = factory.load(location, getMonitor());
+			IMetadataRepository repo = factory.load(location, 0, getMonitor());
 			if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 2)
 				fail("3.0");
 		} catch (ProvisionException ex) {
@@ -193,7 +194,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/plugins"), plugins);
 		URI location = directory.toURI();
 		try {
-			IMetadataRepository repo = factory.load(location, getMonitor());
+			IMetadataRepository repo = factory.load(location, 0, getMonitor());
 			if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 1)
 				fail("3.0");
 		} catch (ProvisionException ex) {
@@ -207,7 +208,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		File eclipseDirectory = new File(directory, "eclipse");
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), eclipseDirectory);
 		try {
-			IMetadataRepository repo = factory.load(directory.toURI(), getMonitor());
+			IMetadataRepository repo = factory.load(directory.toURI(), 0, getMonitor());
 			if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 3)
 				fail("3.0");
 		} catch (ProvisionException e) {
@@ -215,10 +216,23 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		}
 	}
 
+	public void testEclipseBaseModifiableRepository() {
+		File directory = new File(tempDirectory, "exists");
+		directory.mkdirs();
+		File eclipseDirectory = new File(directory, "eclipse");
+		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), eclipseDirectory);
+		try {
+			IMetadataRepository repo = factory.load(directory.toURI(), IRepositoryManager.REPOSITORY_HINT_MODIFIABLE, getMonitor());
+			assertNull("3.0", repo);
+		} catch (ProvisionException e) {
+			fail("2.0");
+		}
+	}
+
 	public void testUpdateSiteXMLURL() {
 		File site = getTestData("0.1", "/testData/updatesite/site");
 		try {
-			factory.load(site.toURI(), getMonitor());
+			factory.load(site.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
 				return;
@@ -229,7 +243,7 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 	public void testXXXSiteXXXXMLURL() {
 		File site = getTestData("0.1", "/testData/updatesite/xxxsitexxx");
 		try {
-			factory.load(site.toURI(), getMonitor());
+			factory.load(site.toURI(), 0, getMonitor());
 		} catch (ProvisionException e) {
 			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
 				return;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
index 5f74148..321334a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
@@ -117,13 +117,13 @@ public class MetadataRepositoryManagerTest extends AbstractProvisioningTest {
 
 		factory = new SimpleMetadataRepositoryFactory();
 		try {
-			factory.load(location, new NullProgressMonitor());
+			factory.load(location, 0, new NullProgressMonitor());
 		} catch (ProvisionException e) {
 			assertEquals(ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
 		}
 		factory = new UpdateSiteMetadataRepositoryFactory();
 		try {
-			factory.load(location, new NullProgressMonitor());
+			factory.load(location, 0, new NullProgressMonitor());
 		} catch (ProvisionException e) {
 			assertEquals(ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
 		}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
index 0e84267..7a0f7cd 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.p2.updatesite.UpdateSite;
 import org.eclipse.equinox.internal.p2.updatesite.metadata.UpdateSiteMetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
@@ -40,7 +41,11 @@ public class UpdateSiteArtifactRepositoryFactory extends ArtifactRepositoryFacto
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
+	public IArtifactRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		//return null if the caller wanted a modifiable repo
+		if ((flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0) {
+			return null;
+		}
 		IArtifactRepository repository = loadRepository(location, monitor);
 		initializeRepository(repository, location, monitor);
 		return new UpdateSiteArtifactRepository(location, repository);
@@ -50,7 +55,7 @@ public class UpdateSiteArtifactRepositoryFactory extends ArtifactRepositoryFacto
 		URI localRepositoryURL = UpdateSiteMetadataRepositoryFactory.getLocalRepositoryLocation(location);
 		SimpleArtifactRepositoryFactory factory = new SimpleArtifactRepositoryFactory();
 		try {
-			return factory.load(localRepositoryURL, monitor);
+			return factory.load(localRepositoryURL, 0, monitor);
 		} catch (ProvisionException e) {
 			//fall through and create a new repository
 		}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
index fc52a70..b56e57f 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
@@ -18,6 +18,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.updatesite.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
@@ -49,7 +50,12 @@ public class UpdateSiteMetadataRepositoryFactory extends MetadataRepositoryFacto
 		return Status.OK_STATUS;
 	}
 
-	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
+	public IMetadataRepository load(URI location, int flags, IProgressMonitor monitor) throws ProvisionException {
+		//return null if the caller wanted a modifiable repo
+		if ((flags & IRepositoryManager.REPOSITORY_HINT_MODIFIABLE) > 0) {
+			return null;
+		}
+
 		IMetadataRepository repository = loadRepository(location, monitor);
 		initializeRepository(repository, location, monitor);
 		return new UpdateSiteMetadataRepository(location, repository);
@@ -59,7 +65,7 @@ public class UpdateSiteMetadataRepositoryFactory extends MetadataRepositoryFacto
 		URI localRepositoryURL = getLocalRepositoryLocation(location);
 		SimpleMetadataRepositoryFactory factory = new SimpleMetadataRepositoryFactory();
 		try {
-			return factory.load(localRepositoryURL, monitor);
+			return factory.load(localRepositoryURL, 0, monitor);
 		} catch (ProvisionException e) {
 			//fall through and create a new repository
 		}
commit b1e7859cbec06dbf331596d033d9e815694183dc
Author: John Arthorne <johna>
Date:   Thu Feb 19 16:31:09 2009 +0000

    Bug 248951 Simplify API usage for repository creation/load

4	7	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
5	3	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
5	6	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
index 9d9a8be..334df0e 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -86,7 +86,6 @@ public interface IArtifactRepositoryManager extends IRepositoryManager {
 	 * load attempts.
 	 * </p>
 	 * 
-	 * @deprecated see {@link #loadRepository(URI, int, IProgressMonitor)}
 	 * @param location the location in which to look for a repository description
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
@@ -109,15 +108,13 @@ public interface IArtifactRepositoryManager extends IRepositoryManager {
 	 * if they do not want the repository manager to remember the repository for subsequent
 	 * load attempts.
 	 * </p>
-	 * 
 	 * <p>
 	 * The flags passed in should be taken as a hint for the type of repository to load.  If
-	 * the manager will not load a repository that satisfies these hints, it can fail
-	 * fast.<br>
-	 * See {@link IRepositoryManager#REPOSITORY_HINT_MODIFIABLE}
+	 * the manager cannot load a repository that satisfies these hints, it can fail fast.
 	 * </p>
 	 * @param location the location in which to look for a repository description
-	 * @param flags - flags to consider when loading
+	 * @param flags - bit-wise or of flags to consider when loading the repository
+	 *  (currently only {@link IRepositoryManager#REPOSITORY_HINT_MODIFIABLE} is supported)
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 * @return a repository object for the given location
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
index 6ad6765..16adfbc 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepositoryManager.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -41,7 +41,7 @@ public interface IRepositoryManager {
 	public static final int REPOSITORIES_LOCAL = 1 << 2;
 
 	/**
-	 * Constant used to indicate that non-system repositories are of interest
+	 * Constant used to indicate that non-system repositories are of interest.
 	 * @see IRepository#PROP_SYSTEM
 	 * @see #getKnownRepositories(int)
 	 */
@@ -55,7 +55,9 @@ public interface IRepositoryManager {
 	public static final int REPOSITORIES_SYSTEM = 1 << 0;
 
 	/**
-	 * Constant used to indicate that a repository should be modifiable
+	 * Constant used to indicate that a repository manager should only load the
+	 * repository if the repository is modifiable.
+	 * @see IRepository#isModifiable()
 	 */
 	public static final int REPOSITORY_HINT_MODIFIABLE = 1 << 0;
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
index ae10dad..8bc7a15 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -81,7 +81,6 @@ public interface IMetadataRepositoryManager extends IRepositoryManager, IQueryab
 	 * <li>There is no existing repository at that location.</li>
 	 * <li>The repository at that location could not be read.</li>
 	 * </ul>
-	 * @deprecated see {@link #loadRepository(URI, int, IProgressMonitor)}
 	 */
 	public IMetadataRepository loadRepository(URI location, IProgressMonitor monitor) throws ProvisionException;
 
@@ -97,12 +96,11 @@ public interface IMetadataRepositoryManager extends IRepositoryManager, IQueryab
 	 * </p>
 	 * <p>
 	 * The flags passed in should be taken as a hint for the type of repository to load.  If
-	 * the manager will not load a repository that satisfies these hints, it can fail
-	 * fast.<br>
-	 * See {@link IRepositoryManager#REPOSITORY_HINT_MODIFIABLE}
+	 * the manager cannot load a repository that satisfies these hints, it can fail fast.
 	 * </p>
 	 * @param location The location of the repository to load
-	 * @param flags - flags to consider when loading the repository
+	 * @param flags - bit-wise or of flags to consider when loading the repository
+	 *  (currently only {@link IRepositoryManager#REPOSITORY_HINT_MODIFIABLE} is supported)
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 * @return The loaded metadata repository
@@ -111,6 +109,7 @@ public interface IMetadataRepositoryManager extends IRepositoryManager, IQueryab
 	 * <li>There is no existing repository at that location.</li>
 	 * <li>The repository at that location could not be read.</li>
 	 * </ul>
+	 * @see IRepositoryManager#REPOSITORY_HINT_MODIFIABLE
 	 */
 	public IMetadataRepository loadRepository(URI location, int flags, IProgressMonitor monitor) throws ProvisionException;
 

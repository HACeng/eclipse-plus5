commit d2849e43ca1de59be0ae5f95bee0830808f42a5b
Author: Susan Franklin <sfranklin>
Date:   Wed Jul 29 21:27:18 2009 +0000

    Bug 273668 - [ui] IUColumnConfig is not clear on the column width units

1	1	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
4	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
6	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
3	84	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
12	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
12	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RevertProfilePage.java
143	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUComparator.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index 04439a3..4d173e6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -4,7 +4,7 @@ Bundle-Name: %bundleName
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Bundle-SymbolicName: org.eclipse.equinox.p2.ui;singleton:=true
-Bundle-Version: 1.0.200.qualifier
+Bundle-Version: 1.1.0.qualifier
 Bundle-Activator: org.eclipse.equinox.internal.p2.ui.ProvUIActivator
 Import-Package: com.ibm.icu.text,
  org.eclipse.equinox.internal.p2.core.helpers,
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
index 4d46c43..90d29f1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
@@ -36,7 +36,7 @@ public class AvailableIUPatternFilter extends PatternFilter {
 	public AvailableIUPatternFilter(IUColumnConfig[] columnConfig) {
 		super();
 		for (int i = 0; i < columnConfig.length; i++) {
-			int field = columnConfig[i].columnField;
+			int field = columnConfig[i].getColumnType();
 			if (field == IUColumnConfig.COLUMN_ID)
 				checkId = true;
 			else if (field == IUColumnConfig.COLUMN_NAME)
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index 76286b9..5abc0cf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -107,8 +107,8 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		int filterConstant = AvailableIUGroup.AVAILABLE_NONE;
 		if (policy.getRepositoryManipulator() == null)
 			filterConstant = AvailableIUGroup.AVAILABLE_ALL;
-		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
-		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_PRIMARY_COLUMN_WIDTH + 15);
+		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_COLUMN_WIDTH);
 
 		getColumnWidthsFromSettings();
 		availableIUGroup = new AvailableIUGroup(policy, sashForm, JFaceResources.getDialogFont(), manager, queryContext, new IUColumnConfig[] {nameColumn, versionColumn}, filterConstant);
@@ -391,9 +391,9 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		if (section != null) {
 			try {
 				if (section.get(NAME_COLUMN_WIDTH) != null)
-					nameColumn.columnWidth = section.getInt(NAME_COLUMN_WIDTH);
+					nameColumn.setWidthInPixels(section.getInt(NAME_COLUMN_WIDTH));
 				if (section.get(VERSION_COLUMN_WIDTH) != null)
-					versionColumn.columnWidth = section.getInt(VERSION_COLUMN_WIDTH);
+					versionColumn.setWidthInPixels(section.getInt(VERSION_COLUMN_WIDTH));
 			} catch (NumberFormatException e) {
 				// Ignore if there actually was a value that didn't parse.  
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
index b547b45..7867624 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
@@ -17,14 +17,17 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
  * 
  * This interface is not intended to be implemented
  * 
+ * @noimplement This interface is not intended to be implemented by clients.
+ * @noextend This interface is not intended to be extended by clients.
  * @since 3.5
  */
 public interface ILayoutConstants {
 	public static final int DEFAULT_DESCRIPTION_HEIGHT = 4;
 	public static final int MINIMUM_DESCRIPTION_HEIGHT = 1;
 	public static final int DEFAULT_SITEDETAILS_HEIGHT = 2;
+	public static final int DEFAULT_PRIMARY_COLUMN_WIDTH = 60;
 	public static final int DEFAULT_COLUMN_WIDTH = 40;
-	public static final int DEFAULT_SMALL_COLUMN_WIDTH = 10;
+	public static final int DEFAULT_SMALL_COLUMN_WIDTH = 20;
 	public static final int DEFAULT_TABLE_HEIGHT = 10;
 	public static final int DEFAULT_TABLE_WIDTH = 80;
 	public static final int[] IUS_TO_DETAILS_WEIGHTS = new int[] {80, 20};
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
index ee285d5..609b6db 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
@@ -96,8 +96,8 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 		for (int i = 0; i < columns.length; i++) {
 			TreeColumn tc = new TreeColumn(tree, SWT.LEFT, i);
 			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(columns[i].getWidth());
+			tc.setText(columns[i].getColumnTitle());
+			tc.setWidth(columns[i].getWidthInPixels(tree));
 		}
 
 		treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
index f96d3d9..1fd3b1e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
@@ -220,11 +220,11 @@ public abstract class ResolutionStatusPage extends ProvisioningWizardPage {
 		if (section != null) {
 			try {
 				if (section.get(NAME_COLUMN_WIDTH) != null)
-					getNameColumn().columnWidth = section.getInt(NAME_COLUMN_WIDTH);
+					getNameColumn().setWidthInPixels(section.getInt(NAME_COLUMN_WIDTH));
 				if (section.get(VERSION_COLUMN_WIDTH) != null)
-					getVersionColumn().columnWidth = section.getInt(VERSION_COLUMN_WIDTH);
+					getVersionColumn().setWidthInPixels(section.getInt(VERSION_COLUMN_WIDTH));
 				if (section.get(ID_COLUMN_WIDTH) != null)
-					getIdColumn().columnWidth = section.getInt(ID_COLUMN_WIDTH);
+					getIdColumn().setWidthInPixels(section.getInt(ID_COLUMN_WIDTH));
 			} catch (NumberFormatException e) {
 				// Ignore if there actually was a value that didn't parse.  
 			}
@@ -250,9 +250,9 @@ public abstract class ResolutionStatusPage extends ProvisioningWizardPage {
 	protected IUColumnConfig[] getColumnConfig() {
 		// We intentionally use the IU's id as one of the columns, because
 		// resolution errors are reported by ID.
-		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
-		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH));
-		idColumn = new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_PRIMARY_COLUMN_WIDTH);
+		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH);
+		idColumn = new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, ILayoutConstants.DEFAULT_COLUMN_WIDTH);
 		getColumnWidthsFromSettings();
 		return new IUColumnConfig[] {nameColumn, versionColumn, idColumn};
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index 0d34798..91ce7ab 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -94,8 +94,8 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		for (int i = 0; i < columns.length; i++) {
 			TableColumn tc = new TableColumn(table, SWT.LEFT, i);
 			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(columns[i].getWidth());
+			tc.setText(columns[i].getColumnTitle());
+			tc.setWidth(columns[i].getWidthInPixels(table));
 		}
 
 		tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
index 8de9534..35bb5d8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -58,7 +58,7 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 		else
 			this.columnConfig = columnConfig;
 		for (int i = 0; i < this.columnConfig.length; i++)
-			if (this.columnConfig[i].columnField == IUColumnConfig.COLUMN_ID) {
+			if (this.columnConfig[i].getColumnType() == IUColumnConfig.COLUMN_ID) {
 				showingId = true;
 				break;
 			}
@@ -76,7 +76,7 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 	public String getColumnText(Object element, int columnIndex) {
 		int columnContent = IUColumnConfig.COLUMN_ID;
 		if (columnIndex < columnConfig.length) {
-			columnContent = columnConfig[columnIndex].columnField;
+			columnContent = columnConfig[columnIndex].getColumnType();
 		}
 
 		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
index c7502af..3b9f8f4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
@@ -11,15 +11,15 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui;
 
-import java.lang.reflect.InvocationTargetException;
 import java.net.URI;
 import java.util.*;
 import org.eclipse.core.commands.*;
 import org.eclipse.core.commands.common.NotDefinedException;
-import org.eclipse.core.commands.operations.*;
+import org.eclipse.core.commands.operations.ObjectUndoContext;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.dialogs.ILayoutConstants;
 import org.eclipse.equinox.internal.p2.ui.dialogs.RepositoryNameAndLocationDialog;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.repository.IRepository;
@@ -29,8 +29,6 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryManipulator;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
 import org.eclipse.jface.dialogs.MessageDialog;
-import org.eclipse.jface.dialogs.ProgressMonitorDialog;
-import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.window.Window;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
@@ -59,8 +57,6 @@ public class ProvUI {
 	public static final String REVERT_COMMAND_TOOLTIP = ProvUIMessages.RevertIUCommandTooltip;
 
 	static ObjectUndoContext provisioningUndoContext;
-	private static final int DEFAULT_COLUMN_WIDTH = 200;
-	private static IUColumnConfig[] iuColumnConfig = new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, DEFAULT_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, DEFAULT_COLUMN_WIDTH)};
 
 	/**
 	 * List<URI> of repositories that have already been reported to the user as not found.
@@ -192,11 +188,8 @@ public class ProvUI {
 	}
 
 	public static IUColumnConfig[] getIUColumnConfig() {
-		return iuColumnConfig;
-	}
+		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_PRIMARY_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_COLUMN_WIDTH)};
 
-	public static void setIUColumnConfig(IUColumnConfig[] columnConfig) {
-		iuColumnConfig = columnConfig;
 	}
 
 	public static Object getAdapter(Object object, Class adapterType) {
@@ -270,80 +263,6 @@ public class ProvUI {
 		return null;
 	}
 
-	static IOperationApprover getOperationApprover() {
-		return new IOperationApprover() {
-			public IStatus proceedUndoing(final IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
-				final IStatus[] status = new IStatus[1];
-				status[0] = Status.OK_STATUS;
-				if (operation.hasContext(provisioningUndoContext) && operation instanceof IAdvancedUndoableOperation) {
-					final IRunnableWithProgress runnable = new IRunnableWithProgress() {
-						public void run(IProgressMonitor monitor) {
-							try {
-								status[0] = ((IAdvancedUndoableOperation) operation).computeUndoableStatus(monitor);
-								if (!status[0].isOK()) {
-									ProvUI.reportStatus(status[0], StatusManager.SHOW | StatusManager.LOG);
-								}
-							} catch (ExecutionException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
-							}
-						}
-					};
-					PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
-						public void run() {
-							try {
-								new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell()).run(true, true, runnable);
-							} catch (InterruptedException e) {
-								// don't report thread interruption
-							} catch (InvocationTargetException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
-							}
-						}
-					});
-
-				}
-				return status[0];
-			}
-
-			public IStatus proceedRedoing(final IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
-				final IStatus[] status = new IStatus[1];
-				status[0] = Status.OK_STATUS;
-				if (operation.hasContext(provisioningUndoContext) && operation instanceof IAdvancedUndoableOperation) {
-					final IRunnableWithProgress runnable = new IRunnableWithProgress() {
-						public void run(IProgressMonitor monitor) {
-							try {
-								status[0] = ((IAdvancedUndoableOperation) operation).computeRedoableStatus(monitor);
-								if (!status[0].isOK()) {
-									ProvUI.reportStatus(status[0], StatusManager.SHOW);
-								}
-							} catch (ExecutionException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
-							}
-						}
-					};
-					PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
-						public void run() {
-							try {
-								new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell()).run(true, true, runnable);
-							} catch (InterruptedException e) {
-								// don't report thread interruption
-							} catch (InvocationTargetException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
-							}
-						}
-					});
-
-				}
-				return status[0];
-			}
-
-		};
-
-	}
-
 	public static void addProvisioningListener(ProvUIProvisioningListener listener) {
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
index f8feb00..18aee0d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
@@ -183,7 +183,7 @@ public class AcceptLicensesWizardPage extends WizardPage {
 
 		});
 		gd = new GridData(GridData.FILL_BOTH);
-		gd.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH + ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH);
+		gd.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_PRIMARY_COLUMN_WIDTH);
 		gd.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
 		iuViewer.getControl().setLayoutData(gd);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 8b65ee2..0afb6c7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -23,8 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.repository.RepositoryEvent;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
-import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
@@ -94,7 +93,14 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 * @param parent the parent composite for the group
 	 */
 	public AvailableIUGroup(final Composite parent) {
-		this(Policy.getDefault(), parent, parent.getFont(), null, null, ProvUI.getIUColumnConfig(), AVAILABLE_ALL);
+		this(Policy.getDefault(), parent, parent.getFont(), null, null, getDefaultColumnConfig(), AVAILABLE_ALL);
+	}
+
+	private static IUColumnConfig[] getDefaultColumnConfig() {
+		// increase primary column width because we might be nesting names under categories and require more space than a flat list
+		IUColumnConfig nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_PRIMARY_COLUMN_WIDTH + 15);
+		IUColumnConfig versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_COLUMN_WIDTH);
+		return new IUColumnConfig[] {nameColumn, versionColumn};
 	}
 
 	/**
@@ -170,7 +176,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		// after content has been retrieved.
 		filteredTree.contentProviderSet(contentProvider);
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY) {
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, ProvUIProvisioningListener.PROV_EVENT_METADATA_REPOSITORY) {
 			protected void repositoryAdded(final RepositoryEvent event) {
 				// Only make the repo visible if the UI triggered this event.
 				// This allows us to ignore the addition of system repositories, as
@@ -213,8 +219,8 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		for (int i = 0; i < cols.length; i++) {
 			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
 			tc.setResizable(true);
-			tc.setText(cols[i].columnTitle);
-			tc.setWidth(cols[i].getWidth());
+			tc.setText(cols[i].getColumnTitle());
+			tc.setWidth(cols[i].getWidthInPixels(tree));
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
index 4ffe332..6be850b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
@@ -15,6 +15,7 @@ import org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup;
 import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryContentProvider;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
@@ -74,7 +75,7 @@ public class InstalledIUGroup extends StructuredIUGroup {
 		// Input last.
 		installedIUViewer.setInput(getInput());
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE);
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUViewer, ProvUIProvisioningListener.PROV_EVENT_IU | ProvUIProvisioningListener.PROV_EVENT_PROFILE);
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
 		installedIUViewer.getControl().addDisposeListener(new DisposeListener() {
 			public void widgetDisposed(DisposeEvent e) {
@@ -91,8 +92,8 @@ public class InstalledIUGroup extends StructuredIUGroup {
 		for (int i = 0; i < columns.length; i++) {
 			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
 			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(columns[i].defaultColumnWidth));
+			tc.setText(columns[i].getColumnTitle());
+			tc.setWidth(columns[i].getWidthInPixels(tree));
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
index cffd86e..30b51c5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
@@ -42,8 +42,6 @@ import org.eclipse.ui.statushandlers.StatusManager;
  */
 public class InstalledSoftwarePage extends InstallationPage implements ICopyable {
 
-	private static final int DEFAULT_WIDTH = 300;
-	private static final int DEFAULT_COLUMN_WIDTH = 150;
 	private static final int UPDATE_ID = IDialogConstants.CLIENT_ID;
 	private static final int UNINSTALL_ID = IDialogConstants.CLIENT_ID + 1;
 	private static final int PROPERTIES_ID = IDialogConstants.CLIENT_ID + 2;
@@ -76,7 +74,8 @@ public class InstalledSoftwarePage extends InstallationPage implements ICopyable
 
 		Composite composite = new Composite(parent, SWT.NONE);
 		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
-		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
+		int width = getDefaultWidth(composite);
+		gd.widthHint = width;
 		composite.setLayoutData(gd);
 		GridLayout layout = new GridLayout();
 		layout.marginWidth = 0;
@@ -93,7 +92,7 @@ public class InstalledSoftwarePage extends InstallationPage implements ICopyable
 
 		gd = new GridData(SWT.FILL, SWT.FILL, true, false);
 		gd.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_DESCRIPTION_HEIGHT);
-		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
+		gd.widthHint = width;
 
 		detailsArea = new Text(composite, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY | SWT.WRAP);
 		detailsArea.setBackground(detailsArea.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
@@ -199,9 +198,16 @@ public class InstalledSoftwarePage extends InstallationPage implements ICopyable
 	}
 
 	private IUColumnConfig[] getColumnConfig() {
-		int pixels = convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH);
-		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, pixels / 3), new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, pixels * 2 / 3)};
+		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_PRIMARY_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, ILayoutConstants.DEFAULT_COLUMN_WIDTH)};
+	}
 
+	private int getDefaultWidth(Control control) {
+		IUColumnConfig[] columns = getColumnConfig();
+		int totalWidth = 0;
+		for (int i = 0; i < columns.length; i++) {
+			totalWidth += columns[i].getWidthInPixels(control);
+		}
+		return totalWidth + 20; // buffer for surrounding composites
 	}
 
 	public void copyToClipboard(Control activeControl) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
index e35a851..6221248 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
@@ -369,9 +369,9 @@ public class RepositoryManipulationPage extends PreferencePage implements IWorkb
 				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH));
 				tc.setAlignment(SWT.CENTER);
 			} else if (i == RepositoryDetailsLabelProvider.COL_NAME) {
-				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH) * 2 / 3);
-			} else {
 				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+			} else {
+				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_PRIMARY_COLUMN_WIDTH));
 			}
 			tc.addSelectionListener(new SelectionListener() {
 				public void widgetDefaultSelected(SelectionEvent e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RevertProfilePage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RevertProfilePage.java
index 998ba1e..90726a7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RevertProfilePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RevertProfilePage.java
@@ -48,7 +48,6 @@ import org.eclipse.ui.statushandlers.StatusManager;
 public class RevertProfilePage extends InstallationPage implements ICopyable {
 
 	private static final int REVERT_ID = IDialogConstants.CLIENT_ID;
-	private static final int DEFAULT_COLUMN_WIDTH = 150;
 	TableViewer configsViewer;
 	TreeViewer configContentsViewer;
 	IUDetailsLabelProvider labelProvider;
@@ -227,8 +226,8 @@ public class RevertProfilePage extends InstallationPage implements ICopyable {
 		for (int i = 0; i < columns.length; i++) {
 			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
 			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH));
+			tc.setText(columns[i].getColumnTitle());
+			tc.setWidth(columns[i].getWidthInPixels(tree));
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
index fe30b15..9629b5a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
@@ -11,32 +11,162 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.swt.graphics.FontMetrics;
+import org.eclipse.swt.graphics.GC;
+import org.eclipse.swt.widgets.Control;
+
 /**
- * Data structure describing a column to be shown in an IU view.  
+ * An IUColumnConfig describes a column in a viewer that is showing 
+ * information about an IIInstallableUnit.  
  * 
  * @since 3.4
  */
 public class IUColumnConfig {
+	/**
+	 * Constant indicating that the column represents an IInstallableUnit's id
+	 */
 	public final static int COLUMN_ID = 0;
+
+	/**
+	 * Constant indicating that the column represents an IInstallableUnit's name
+	 */
 	public final static int COLUMN_NAME = 1;
+
+	/**
+	 * Constant indicating that the column represents an IInstallableUnit's version
+	 */
 	public final static int COLUMN_VERSION = 2;
+
+	/**
+	 * Constant indicating that the column represents an IInstallableUnit's size
+	 */
 	public final static int COLUMN_SIZE = 3;
 
-	public String columnTitle;
-	public int columnField;
-	public int defaultColumnWidth;
-	public int columnWidth;
+	private String columnTitle;
+	private int columnType;
+	private int columnWidth;
+	private int columnWidthInPixels;
+
+	/**
+	 * Create an IUColumnConfig describing a column with the specified title, type, and
+	 * default width.
+	 * 
+	 * @param title the title that should appear for the column
+	 * @param columnType the type of column represented.  The type may be used to determine
+	 * appropriate size or formatting of the column's content.
+	 * @param columnWidthInChars the width (in characters) that should be used for the column if no 
+	 * other width is specified by the client.
+	 */
 
-	public IUColumnConfig(String title, int columnField, int defaultColumnWidth) {
+	public IUColumnConfig(String title, int columnType, int columnWidthInChars) {
 		this.columnTitle = title;
-		this.columnField = columnField;
-		this.defaultColumnWidth = defaultColumnWidth;
-		this.columnWidth = -1;
+		this.columnType = columnType;
+		this.columnWidth = columnWidthInChars;
+		this.columnWidthInPixels = -1;
+	}
+
+	/**
+	 * Return the title of the column.
+	 * @return the title that should be used for the column.
+	 * 
+	 * @since 3.6
+	 */
+	public String getColumnTitle() {
+		return columnTitle;
+	}
+
+	/**
+	 * Set the title of the column
+	 * @param title the String that should be used when the column's title is shown
+	 * 
+	 * @since 3.6
+	 */
+	public void setColumnTitle(String title) {
+		this.columnTitle = title;
+	}
+
+	/**
+	 * Return the width of the column in character width units
+	 * @return the width (in characters) of the column
+	 * 
+	 * @since 3.6
+	 */
+	public int getWidthInChars() {
+		return columnWidth;
+	}
+
+	/**
+	 * Set the width of the column in character width units
+	 * @param columnWidth the width (in characters) of the column
+	 * 
+	 * @since 3.6
+	 */
+	public void setWidthInChars(int columnWidth) {
+		this.columnWidth = columnWidth;
+	}
+
+	/**
+	 * Get the width in pixels of this column when displayed in the specified
+	 * control.  If a specific width in pixels has already been specified by a client,
+	 * that width is used.  Otherwise, the value is computed based on the character
+	 * width specified for the column.
+	 * @param control
+	 * @return the width in pixels that should be used for the column
+	 * 
+	 * @since 3.6
+	 * 
+	 * @see #setWidthInPixels(int)
+	 */
+	public int getWidthInPixels(Control control) {
+		if (columnWidthInPixels >= 0)
+			return columnWidthInPixels;
+
+		GC gc = new GC(control);
+		FontMetrics fm = gc.getFontMetrics();
+		columnWidthInPixels = Dialog.convertWidthInCharsToPixels(fm, columnWidth);
+		return columnWidthInPixels;
+	}
+
+	/**
+	 * Set the width in pixels that should be used for this column.  This width overrides
+	 * any character width that has been specified.  This method is useful when the column width
+	 * is determined by user action.
+	 * 
+	 * @param width
+	 * 
+	 * @since 3.6
+	 */
+	public void setWidthInPixels(int width) {
+		this.columnWidthInPixels = width;
+	}
+
+	/**
+	 * Return the type of column.
+	 * @return an Integer constant specifying the type of data being shown in the column.
+	 * 
+	 * @since 3.6
+	 * @see #COLUMN_ID
+	 * @see #COLUMN_NAME
+	 * @see #COLUMN_SIZE
+	 * @see #COLUMN_VERSION
+	 */
+	public int getColumnType() {
+		return columnType;
 	}
 
-	public int getWidth() {
-		if (columnWidth >= 0)
-			return columnWidth;
-		return defaultColumnWidth;
+	/**
+	 * Set the type of column.
+	 * @param type an Integer constant specifying the type of data being shown in the column.
+	 * 
+	 * @since 3.6
+	 * 
+	 * @see #COLUMN_ID
+	 * @see #COLUMN_NAME
+	 * @see #COLUMN_SIZE
+	 * @see #COLUMN_VERSION
+	 */
+	public void setColumnType(int type) {
+		this.columnType = type;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUComparator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUComparator.java
index 4546fc6..ca04786 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUComparator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUComparator.java
@@ -36,7 +36,7 @@ public class IUComparator extends ViewerComparator {
 	 */
 	public void useColumnConfig(IUColumnConfig[] columnConfig) {
 		for (int i = 0; i < columnConfig.length; i++)
-			if (columnConfig[i].columnField == IUColumnConfig.COLUMN_ID) {
+			if (columnConfig[i].getColumnType() == IUColumnConfig.COLUMN_ID) {
 				showingId = true;
 				break;
 			}

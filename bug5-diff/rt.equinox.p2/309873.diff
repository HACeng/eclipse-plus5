commit f87dc37c1844e17dcfb54bb97b5f2aabef1af068
Author: spingel <>
Date:   Tue Apr 20 22:45:50 2010 +0000

    bug 309873 - [discovery] allow arbitrary tags to be specified in bundle catalogs

1	1	bundles/org.eclipse.equinox.p2.discovery.compatibility/schema/connectorDiscovery.exsd
6	0	bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
40	4	bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/ConnectorDiscoveryExtensionReader.java
1	1	bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/RemoteBundleDiscoveryStrategy.java
1	0	bundles/org.eclipse.equinox.p2.discovery/src/org/eclipse/equinox/internal/p2/discovery/AbstractDiscoveryStrategy.java
16	2	bundles/org.eclipse.equinox.p2.tests.discovery/plugin.xml
1	1	bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/AllDiscoveryTests.java
12	2	bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/BundleDiscoveryStrategyTest.java
1	0	bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/RemoteBundleDiscoveryStrategyTest.java
5	0	bundles/org.eclipse.equinox.p2.ui.discovery/plugin.xml
23	2	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/commands/ShowBundleCatalogCommandHandler.java
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/schema/connectorDiscovery.exsd b/bundles/org.eclipse.equinox.p2.discovery.compatibility/schema/connectorDiscovery.exsd
index e3db6e6..73f19d0 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/schema/connectorDiscovery.exsd
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/schema/connectorDiscovery.exsd
@@ -62,7 +62,7 @@
             <element ref="overview" minOccurs="0" maxOccurs="1"/>
             <element ref="iu" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
-         <attribute name="kind" type="string" use="required">
+         <attribute name="kind" type="string">
             <annotation>
                <documentation>
                   must be a comma-delimited list of the following values: &apos;document&apos;, &apos;task&apos;, &apos;vcs&apos;
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
index 912d399..2629e4b 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
@@ -24,6 +24,10 @@ import org.osgi.framework.Bundle;
  */
 public class BundleDiscoveryStrategy extends AbstractDiscoveryStrategy {
 
+	public BundleDiscoveryStrategy() {
+		// constructor
+	}
+
 	@Override
 	public void performDiscovery(IProgressMonitor monitor) throws CoreException {
 		if (items == null || categories == null) {
@@ -79,6 +83,8 @@ public class BundleDiscoveryStrategy extends AbstractDiscoveryStrategy {
 				}
 				monitor.worked(1);
 			}
+
+			tags.addAll(extensionReader.getTags());
 		} finally {
 			monitor.done();
 		}
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/ConnectorDiscoveryExtensionReader.java b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/ConnectorDiscoveryExtensionReader.java
index 2ee7e25..84afa69 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/ConnectorDiscoveryExtensionReader.java
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/ConnectorDiscoveryExtensionReader.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2009 Task top Technologies and others.
+ * Copyright (c) 2009 Tasktop Technologies and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.discovery.compatibility;
 
+import java.util.*;
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.equinox.internal.p2.discovery.model.*;
 
@@ -45,7 +46,13 @@ public class ConnectorDiscoveryExtensionReader {
 
 	public static Tag VCS = new Tag("vcs", Messages.ConnectorDiscoveryExtensionReader_Version_Control); //$NON-NLS-1$
 
-	public static final Tag[] TAGS = new Tag[] {DOCUMENT, TASK, VCS};
+	public static final Tag[] DEFAULT_TAGS = new Tag[] {DOCUMENT, TASK, VCS};
+
+	private Map<String, Tag> tagById = new HashMap<String, Tag>();
+
+	public ConnectorDiscoveryExtensionReader() {
+		// constructor
+	}
 
 	/**
 	 * return the enum constant whose {@link Tag#getValue() value} is the same as the given value.
@@ -60,7 +67,7 @@ public class ConnectorDiscoveryExtensionReader {
 		if (value == null) {
 			return null;
 		}
-		for (Tag tag : TAGS) {
+		for (Tag tag : DEFAULT_TAGS) {
 			if (tag.getValue().equals(value)) {
 				return tag;
 			}
@@ -68,6 +75,32 @@ public class ConnectorDiscoveryExtensionReader {
 		throw new IllegalArgumentException(value);
 	}
 
+	public Set<Tag> getTags() {
+		return new HashSet<Tag>(tagById.values());
+	}
+
+	private Tag getTag(String id) {
+		if (id == null) {
+			return null;
+		}
+		// first, look for known tag
+		Tag result = tagById.get(id);
+		if (result != null) {
+			return result;
+		}
+		// second, search default tags
+		for (Tag tag : DEFAULT_TAGS) {
+			if (tag.getValue().equals(id)) {
+				tagById.put(id, tag);
+				return tag;
+			}
+		}
+		// third, create new tag
+		result = new Tag(id, id);
+		tagById.put(id, result);
+		return result;
+	}
+
 	public CatalogItem readConnectorDescriptor(IConfigurationElement element) throws ValidationException {
 		return readConnectorDescriptor(element, CatalogItem.class);
 	}
@@ -85,7 +118,10 @@ public class ConnectorDiscoveryExtensionReader {
 			if (kinds != null) {
 				String[] akinds = kinds.split("\\s*,\\s*"); //$NON-NLS-1$
 				for (String kind : akinds) {
-					connectorDescriptor.addTag(fromValue(kind));
+					Tag tag = getTag(kind);
+					if (tag != null) {
+						connectorDescriptor.addTag(tag);
+					}
 				}
 			}
 		} catch (IllegalArgumentException e) {
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/RemoteBundleDiscoveryStrategy.java b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/RemoteBundleDiscoveryStrategy.java
index 427ba89..ddafba1 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/RemoteBundleDiscoveryStrategy.java
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/RemoteBundleDiscoveryStrategy.java
@@ -42,7 +42,7 @@ public class RemoteBundleDiscoveryStrategy extends BundleDiscoveryStrategy {
 
 	@Override
 	public void performDiscovery(IProgressMonitor monitor) throws CoreException {
-		if (items == null || categories == null || directoryUrl == null) {
+		if (items == null || categories == null || directoryUrl == null || tags == null) {
 			throw new IllegalStateException();
 		}
 		if (registryStrategy != null) {
diff --git a/bundles/org.eclipse.equinox.p2.discovery/src/org/eclipse/equinox/internal/p2/discovery/AbstractDiscoveryStrategy.java b/bundles/org.eclipse.equinox.p2.discovery/src/org/eclipse/equinox/internal/p2/discovery/AbstractDiscoveryStrategy.java
index ded3e4e..e45cf86 100644
--- a/bundles/org.eclipse.equinox.p2.discovery/src/org/eclipse/equinox/internal/p2/discovery/AbstractDiscoveryStrategy.java
+++ b/bundles/org.eclipse.equinox.p2.discovery/src/org/eclipse/equinox/internal/p2/discovery/AbstractDiscoveryStrategy.java
@@ -33,6 +33,7 @@ public abstract class AbstractDiscoveryStrategy {
 	protected List<Tag> tags;
 
 	public void dispose() {
+		// ignore
 	}
 
 	public List<CatalogCategory> getCategories() {
diff --git a/bundles/org.eclipse.equinox.p2.tests.discovery/plugin.xml b/bundles/org.eclipse.equinox.p2.tests.discovery/plugin.xml
index 06a344d..61fed3b 100644
--- a/bundles/org.eclipse.equinox.p2.tests.discovery/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.tests.discovery/plugin.xml
@@ -30,7 +30,7 @@
       </connectorDescriptor>
       <connectorDescriptor
             categoryId="org.eclipse.mylyn.discovery.tests.connectorCategory1"
-            description="Trac Connector"
+            description="Connector with id org.eclipse.mylyn.discovery.test1"
             id="org.eclipse.mylyn.discovery.test1"
             kind="task"
             license="License"
@@ -40,7 +40,7 @@
       </connectorDescriptor>
       <connectorDescriptor
             categoryId="org.eclipse.mylyn.discovery.tests.connectorCategory1"
-            description="Trac Connector"
+            description="Connector with id org.eclipse.mylyn.discovery.2tests"
             id="org.eclipse.mylyn.discovery.2tests"
             kind="task"
             license="License"
@@ -62,6 +62,16 @@
             %certification.description
          </description>
       </certification>
+      <connectorDescriptor
+            categoryId="org.eclipse.mylyn.discovery.tests.connectorCategory1"
+            description="Tagged as Custom"
+            id="org.eclipse.mylyn.discovery.test.tagged"
+            kind="Custom"
+            license="License"
+            name="Tagged Connector"
+            provider="Eclipse Mylyn"
+            siteUrl="http://localhost/discovery/">
+      </connectorDescriptor>
    </extension>
    <extension
          point="org.eclipse.ui.menus">
@@ -75,6 +85,10 @@
                   name="org.eclipse.equinox.p2.ui.discovery.commands.DirectoryParameter"
                   value="http://www.eclipse.org/mylyn/discovery/directory-3.3.xml">
             </parameter>
+            <parameter
+                  name="org.eclipse.equinox.p2.ui.discovery.commands.TagsParameter"
+                  value="document=Documents,task=Tasks,vcs=Version Control">
+            </parameter>
          </command>
          <command
                commandId="org.eclipse.equinox.p2.ui.discovery.commands.ShowRepositoryCatalog"
diff --git a/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/AllDiscoveryTests.java b/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/AllDiscoveryTests.java
index f7295c4..a010395 100644
--- a/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/AllDiscoveryTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/AllDiscoveryTests.java
@@ -21,7 +21,7 @@ import org.eclipse.equinox.p2.discovery.tests.core.*;
 public class AllDiscoveryTests {
 
 	public static Test suite() {
-		TestSuite suite = new TestSuite("Tests for org.eclipse.mylyn.discovery"); //$NON-NLS-1$
+		TestSuite suite = new TestSuite("Tests for org.eclipse.equinox.p2.discovery.tests"); //$NON-NLS-1$
 		suite.addTestSuite(ConnectorDiscoveryTest.class);
 		suite.addTestSuite(DirectoryParserTest.class);
 		suite.addTestSuite(BundleDiscoveryStrategyTest.class);
diff --git a/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/BundleDiscoveryStrategyTest.java b/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/BundleDiscoveryStrategyTest.java
index cc130de..7364fd1 100644
--- a/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/BundleDiscoveryStrategyTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/BundleDiscoveryStrategyTest.java
@@ -11,8 +11,7 @@
 
 package org.eclipse.equinox.p2.discovery.tests.core;
 
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
 import junit.framework.TestCase;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.NullProgressMonitor;
@@ -33,6 +32,8 @@ public class BundleDiscoveryStrategyTest extends TestCase {
 
 	private final List<Certification> certifications = new ArrayList<Certification>();
 
+	private final List<Tag> tags = new ArrayList();
+
 	@Override
 	protected void setUp() throws Exception {
 		super.setUp();
@@ -41,6 +42,7 @@ public class BundleDiscoveryStrategyTest extends TestCase {
 		discoveryStrategy.setCategories(categories);
 		discoveryStrategy.setItems(connectors);
 		discoveryStrategy.setCertifications(certifications);
+		discoveryStrategy.setTags(tags);
 	}
 
 	public void testDiscovery() throws CoreException {
@@ -56,6 +58,14 @@ public class BundleDiscoveryStrategyTest extends TestCase {
 		assertNotNull(certification);
 	}
 
+	public void testCustomTag() throws CoreException {
+		discoveryStrategy.performDiscovery(new NullProgressMonitor());
+
+		CatalogItem connector = findConnectorById("org.eclipse.mylyn.discovery.test.tagged");
+		assertEquals(new HashSet<Tag>(Arrays.asList(new Tag("Custom", "Custom"))), connector.getTags());
+		assertEquals(Arrays.asList(new Tag("task", "Tasks"), new Tag("Custom", "Custom")), discoveryStrategy.getTags());
+	}
+
 	public void testDiscoveryNoCategoriesPolicy() throws CoreException {
 		discoveryStrategy.setPolicy(new Policy(false));
 		discoveryStrategy.performDiscovery(new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/RemoteBundleDiscoveryStrategyTest.java b/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/RemoteBundleDiscoveryStrategyTest.java
index 06482af..8082177 100644
--- a/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/RemoteBundleDiscoveryStrategyTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.discovery/src/org/eclipse/equinox/p2/discovery/tests/core/RemoteBundleDiscoveryStrategyTest.java
@@ -35,6 +35,7 @@ public class RemoteBundleDiscoveryStrategyTest extends TestCase {
 		discoveryStrategy.setCategories(new ArrayList<CatalogCategory>());
 		discoveryStrategy.setItems(new ArrayList<CatalogItem>());
 		discoveryStrategy.setCertifications(new ArrayList<Certification>());
+		discoveryStrategy.setTags(new ArrayList<Tag>());
 	}
 
 	public void testPerformDiscovery() throws CoreException, IOException {
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/plugin.xml b/bundles/org.eclipse.equinox.p2.ui.discovery/plugin.xml
index fa33794..0622068 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/plugin.xml
@@ -21,6 +21,11 @@
                name="Directory URL"
                optional="true">
          </commandParameter>
+         <commandParameter
+               id="org.eclipse.equinox.p2.ui.discovery.commands.TagsParameter"
+               name="Tags"
+               optional="true">
+         </commandParameter>
       </command>
       <command
             id="org.eclipse.equinox.p2.ui.discovery.commands.ShowRepositoryCatalog"
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/commands/ShowBundleCatalogCommandHandler.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/commands/ShowBundleCatalogCommandHandler.java
index 4655027..570bf29 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/commands/ShowBundleCatalogCommandHandler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/commands/ShowBundleCatalogCommandHandler.java
@@ -10,12 +10,14 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.discovery.commands;
 
+import java.util.*;
 import org.eclipse.core.commands.AbstractHandler;
 import org.eclipse.core.commands.ExecutionEvent;
 import org.eclipse.equinox.internal.p2.discovery.Catalog;
 import org.eclipse.equinox.internal.p2.discovery.DiscoveryCore;
 import org.eclipse.equinox.internal.p2.discovery.compatibility.BundleDiscoveryStrategy;
 import org.eclipse.equinox.internal.p2.discovery.compatibility.RemoteBundleDiscoveryStrategy;
+import org.eclipse.equinox.internal.p2.discovery.model.Tag;
 import org.eclipse.equinox.internal.p2.ui.discovery.util.WorkbenchUtil;
 import org.eclipse.equinox.internal.p2.ui.discovery.wizards.CatalogConfiguration;
 import org.eclipse.equinox.internal.p2.ui.discovery.wizards.DiscoveryWizard;
@@ -30,7 +32,25 @@ public class ShowBundleCatalogCommandHandler extends AbstractHandler {
 
 	private static final String ID_PARAMETER_DIRECTORY = "org.eclipse.equinox.p2.ui.discovery.commands.DirectoryParameter"; //$NON-NLS-1$
 
+	private static final String ID_PARAMETER_TAGS = "org.eclipse.equinox.p2.ui.discovery.commands.TagsParameter"; //$NON-NLS-1$
+
 	public Object execute(ExecutionEvent event) {
+		Set<Tag> tags = new LinkedHashSet<Tag>();
+		String tagString = event.getParameter(ID_PARAMETER_TAGS);
+		if (tagString != null) {
+			String[] tagIds = tagString.split("\\s*,\\s*"); //$NON-NLS-1$
+			for (String id : tagIds) {
+				String[] text = id.split("=", 2); //$NON-NLS-1$
+				Tag tag;
+				if (text.length > 1) {
+					tag = new Tag(text[0], text[1]);
+				} else {
+					tag = new Tag(id, id);
+				}
+				tags.add(tag);
+			}
+		}
+
 		Catalog catalog = new Catalog();
 
 		// look for descriptors from installed bundles
@@ -46,10 +66,11 @@ public class ShowBundleCatalogCommandHandler extends AbstractHandler {
 
 		catalog.setEnvironment(DiscoveryCore.createEnvironment());
 		catalog.setVerifyUpdateSiteAvailability(true);
+		catalog.setTags(new ArrayList<Tag>(tags));
 
 		CatalogConfiguration configuration = new CatalogConfiguration();
-		configuration.setShowTagFilter(catalog.getTags().size() > 0);
-		configuration.setSelectedTags(catalog.getTags());
+		configuration.setShowTagFilter(tags.size() > 0);
+		configuration.setSelectedTags(tags);
 
 		DiscoveryWizard wizard = new DiscoveryWizard(catalog, configuration);
 		WizardDialog dialog = new WizardDialog(WorkbenchUtil.getShell(), wizard);

commit 347ec35768b80514d967b24fe831a674c1d84476
Author: John Arthorne <johna>
Date:   Fri Oct 12 20:47:36 2007 +0000

    Bug 206202 First pass cleanup of equinox impl of framework admin

86	11	bundles/org.eclipse.equinox.frameworkadmin.equinox/.settings/org.eclipse.jdt.core.prefs
1	2	bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
15	4	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Activator.java
0	7	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EclipseLauncherImpl.java
16	213	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxBundlesState.java
0	40	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxConstants.java
1	9	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFrameworkAdminFactoryImpl.java
1	1	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwAdminImpl.java
18	35	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwConfigFileParser.java
25	44	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxManipulatorImpl.java
2	6	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Log.java
54	0	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/EclipseVersion.java
10	98	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/FileUtils.java
0	198	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/AlienStateReader.java
0	58	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleHelper.java
0	128	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleSearch.java
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/.settings/org.eclipse.jdt.core.prefs b/bundles/org.eclipse.equinox.frameworkadmin.equinox/.settings/org.eclipse.jdt.core.prefs
index 3f0d9a5..8658089 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/.settings/org.eclipse.jdt.core.prefs
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/.settings/org.eclipse.jdt.core.prefs
@@ -1,14 +1,87 @@
-#Sun Jul 15 17:12:26 EDT 2007
+#Fri Oct 12 16:18:58 EDT 2007
 eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.1
+org.eclipse.jdt.core.builder.cleanOutputFolder=clean
+org.eclipse.jdt.core.builder.duplicateResourceTask=warning
+org.eclipse.jdt.core.builder.invalidClasspath=abort
+org.eclipse.jdt.core.builder.resourceCopyExclusionFilter=*.launch
+org.eclipse.jdt.core.circularClasspath=error
+org.eclipse.jdt.core.classpath.exclusionPatterns=enabled
+org.eclipse.jdt.core.classpath.multipleOutputLocations=enabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=disabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.2
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.3
+org.eclipse.jdt.core.compiler.compliance=1.4
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=ignore
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=ignore
+org.eclipse.jdt.core.compiler.doc.comment.support=enabled
+org.eclipse.jdt.core.compiler.maxProblemPerUnit=1000
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=warning
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=enabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=warning
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=enabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=warning
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=ignore
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=ignore
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=warning
+org.eclipse.jdt.core.compiler.problem.invalidJavadoc=error
+org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility=private
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=warning
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingJavadocComments=ignore
+org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding=enabled
+org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility=public
+org.eclipse.jdt.core.compiler.problem.missingJavadocTags=ignore
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding=enabled
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility=public
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=warning
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=warning
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=warning
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unsafeTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=enabled
+org.eclipse.jdt.core.compiler.problem.unusedImport=error
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=enabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=error
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
 org.eclipse.jdt.core.compiler.source=1.3
 org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
@@ -56,13 +129,13 @@ org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
 org.eclipse.jdt.core.formatter.comment.format_block_comments=false
-org.eclipse.jdt.core.formatter.comment.format_header=true
+org.eclipse.jdt.core.formatter.comment.format_header=false
 org.eclipse.jdt.core.formatter.comment.format_html=true
 org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=false
 org.eclipse.jdt.core.formatter.comment.format_line_comments=false
 org.eclipse.jdt.core.formatter.comment.format_source_code=true
 org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=false
 org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
 org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
 org.eclipse.jdt.core.formatter.comment.line_length=80
@@ -255,12 +328,14 @@ org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
 org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
 org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
 org.eclipse.jdt.core.formatter.lineSplit=800
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=true
-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false
 org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
 org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1
 org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=false
 org.eclipse.jdt.core.formatter.tabulation.char=tab
 org.eclipse.jdt.core.formatter.tabulation.size=4
 org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true
+org.eclipse.jdt.core.incompatibleJDKLevel=ignore
+org.eclipse.jdt.core.incompleteClasspath=error
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
index e8f858e..13b37cc 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
@@ -23,6 +23,5 @@ Import-Package: org.eclipse.core.runtime.adaptor,
  org.osgi.service.startlevel;version="1.0.0",
  org.osgi.util.tracker;version="1.3.2"
 Export-Package: org.eclipse.equinox.frameworkadmin.equinox.internal;x-internal:=true,
- org.eclipse.equinox.frameworkadmin.equinox.internal.utils;x-internal:=true,
- org.eclipse.equinox.frameworkadmin.equinox.internal.utils.state;x-internal:=true
+ org.eclipse.equinox.frameworkadmin.equinox.internal.utils;x-internal:=true
 Require-Bundle: org.eclipse.equinox.common
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Activator.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Activator.java
index c163891..3c6e165 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Activator.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Activator.java
@@ -12,9 +12,7 @@ import java.util.Dictionary;
 import java.util.Hashtable;
 import org.eclipse.equinox.frameworkadmin.FrameworkAdmin;
 import org.eclipse.equinox.frameworkadmin.Manipulator;
-import org.eclipse.equinox.frameworkadmin.equinox.internal.utils.state.BundleHelper;
 import org.osgi.framework.*;
-import org.osgi.util.tracker.ServiceTracker;
 
 /**
  * This bundle provides the {@link FrameworkAdmin} implementation for Felix.
@@ -58,6 +56,20 @@ public class Activator implements BundleActivator {
 		registrationFA = context.registerService(FrameworkAdmin.class.getName(), fwAdmin, props);
 	}
 
+	/**
+	 * TODO: These services are never disposed.
+	 */
+	public static Object acquireService(String serviceName) {
+		//be tolerant of concurrent shutdown
+		BundleContext theContext = context;
+		if (theContext == null)
+			return null;
+		ServiceReference reference = theContext.getServiceReference(serviceName);
+		if (reference == null)
+			return null;
+		return theContext.getService(reference);
+	}
+
 	/*
 	 * (non-Javadoc)
 	 * 
@@ -65,7 +77,6 @@ public class Activator implements BundleActivator {
 	 */
 	public void start(BundleContext bundleContext) throws Exception {
 		Activator.context = bundleContext;
-		BundleHelper.start(bundleContext);
 		Log.init(bundleContext);
 		registerFwAdmin();
 	}
@@ -81,6 +92,6 @@ public class Activator implements BundleActivator {
 			registrationFA.unregister();
 		if (fwAdmin != null)
 			fwAdmin.deactivate();
-		BundleHelper.stop(bundleContext);
+		Log.dispose();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EclipseLauncherImpl.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EclipseLauncherImpl.java
index a7b0959..6f93246 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EclipseLauncherImpl.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EclipseLauncherImpl.java
@@ -12,7 +12,6 @@ import java.io.File;
 import java.io.IOException;
 import java.util.LinkedList;
 import java.util.List;
-
 import org.eclipse.equinox.frameworkadmin.*;
 import org.eclipse.equinox.internal.frameworkadmin.utils.SimpleBundlesState;
 import org.eclipse.equinox.internal.frameworkadmin.utils.Utils;
@@ -68,7 +67,6 @@ public class EclipseLauncherImpl {
 		//		if (cwd == null)
 		//			cwd = fwJar.;
 		Utils.checkAbsoluteDir(cwd, "cwd");
-		//		this.launcherCInfo.cwd = cwd;
 
 		List cmdList = new LinkedList();
 		if (launcherData.getJvm() != null)
@@ -83,11 +81,6 @@ public class EclipseLauncherImpl {
 		cmdList.add("-jar");
 		cmdList.add(Utils.getRelativePath(launcherData.getFwJar(), cwd));
 
-		//		cmdList.add(EquinoxConstants.OPTION_CONSOLE);
-		//		cmdList.add("9000");
-		//		cmdList.add(EquinoxConstants.OPTION_INSTANCE);
-		//		cmdList.add("C:\\ws");
-
 		EquinoxManipulatorImpl.checkConsistencyOfFwConfigLocAndFwPersistentDataLoc(launcherData);//checkConsistency(this.launcherCInfo.fwConfigFile, this.launcherCInfo.fwInstancePrivateArea);
 		cmdList.add(EquinoxConstants.OPTION_CONFIGURATION);
 		cmdList.add(Utils.getRelativePath(launcherData.getFwPersistentDataLocation(), cwd));
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxBundlesState.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxBundlesState.java
index 3faa47e..f74f48f 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxBundlesState.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxBundlesState.java
@@ -15,7 +15,6 @@ import java.util.*;
 import org.eclipse.core.runtime.internal.adaptor.EclipseEnvironmentInfo;
 import org.eclipse.equinox.frameworkadmin.*;
 import org.eclipse.equinox.frameworkadmin.equinox.internal.utils.FileUtils;
-import org.eclipse.equinox.frameworkadmin.equinox.internal.utils.state.BundleHelper;
 import org.eclipse.equinox.internal.frameworkadmin.utils.SimpleBundlesState;
 import org.eclipse.equinox.internal.frameworkadmin.utils.Utils;
 import org.eclipse.osgi.framework.internal.core.FrameworkProperties;
@@ -23,47 +22,6 @@ import org.eclipse.osgi.service.resolver.*;
 import org.osgi.framework.*;
 import org.osgi.service.log.LogService;
 
-class EclipseVersion implements Comparable {
-	int major = 0;
-	int minor = 0;
-	int service = 0;
-	String qualifier = null;
-
-	EclipseVersion(String version) {
-		StringTokenizer tok = new StringTokenizer(version, "."); //$NON-NLS-1$
-		if (!tok.hasMoreTokens())
-			return;
-		this.major = Integer.parseInt(tok.nextToken());
-		if (!tok.hasMoreTokens())
-			return;
-		this.minor = Integer.parseInt(tok.nextToken());
-		if (!tok.hasMoreTokens())
-			return;
-		this.service = Integer.parseInt(tok.nextToken());
-		if (!tok.hasMoreTokens())
-			return;
-		this.qualifier = tok.nextToken();
-	}
-
-	public int compareTo(Object obj) {
-		EclipseVersion target = (EclipseVersion) obj;
-		if (target.major > this.major)
-			return -1;
-		if (target.major < this.major)
-			return 1;
-		if (target.minor > this.minor)
-			return -1;
-		if (target.minor < this.minor)
-			return 1;
-		if (target.service > this.service)
-			return -1;
-		if (target.service < this.service)
-			return 1;
-		return 0;
-	}
-
-}
-
 public class EquinoxBundlesState implements BundlesState {
 	static final long DEFAULT_TIMESTAMP = 0L;
 	private static final boolean DEBUG = false;
@@ -72,15 +30,9 @@ public class EquinoxBundlesState implements BundlesState {
 	private static final String INTERNAL_AMD64 = "amd64"; //$NON-NLS-1$
 	private static final String INTERNAL_ARCH_I386 = "i386"; //$NON-NLS-1$
 	public static final String[] PROPS = {"osgi.os", "osgi.ws", "osgi.nl", "osgi.arch", Constants.FRAMEWORK_SYSTEMPACKAGES, "osgi.resolverMode", Constants.FRAMEWORK_EXECUTIONENVIRONMENT, "osgi.resolveOptional", "osgi.genericAliases"};
-	private static final int MAX_COUNT_LOOP = 10;
-	private static final long PERIOD_TO_SLEEP = 10000;// in msec.
 
 	static boolean checkFullySupported() {
-		try {
-			BundleHelper.getDefault();
-		} catch (Exception e) {
-			return false;
-		}
+		//TODO - This was previously doing a bogus check by attempting to instantiate a particular class - it's not clear what this is trying to do
 		return true;
 	}
 
@@ -157,23 +109,12 @@ public class EquinoxBundlesState implements BundlesState {
 		return maxId;
 	}
 
-	public static String getStateString(State state) {
-		BundleDescription[] descriptions = state.getBundles();
-		StringBuffer sb = new StringBuffer();
-		sb.append("# state=\n");
-		for (int i = 0; i < descriptions.length; i++)
-			sb.append("# " + descriptions[i].toString() + "\n");
-		return sb.toString();
-	}
-
 	private static File getSystemBundleBySearching(LauncherData launcherData) {
 		File pluginsDir;
 		if (launcherData.getLauncher() == null) {
 			if (launcherData.getHome() == null)
 				return null;
-			else {
-				pluginsDir = new File(launcherData.getHome(), "plugins");
-			}
+			pluginsDir = new File(launcherData.getHome(), "plugins");
 		} else {
 			pluginsDir = new File(launcherData.getLauncher().getParentFile(), "plugins");
 		}
@@ -295,40 +236,6 @@ public class EquinoxBundlesState implements BundlesState {
 
 	State state = null;
 
-	// EquinoxBundlesState(BundleContext context, EquinoxFwAdminImpl fwAdmin,
-	// Manipulator manipulator) {
-	// this(context, fwAdmin, manipulator, true);
-	// // this.context = context;
-	// // this.fwAdmin = fwAdmin;
-	// // // copy manipulator object for avoiding modifying the parameters of
-	// the manipulator.
-	// // this.manipulator = fwAdmin.getManipulator();
-	// // this.manipulator.setConfigData(manipulator.getConfigData());
-	// // this.manipulator.setLauncherData(manipulator.getLauncherData());
-	// // initialize();
-	// }
-
-	// EquinoxBundlesState(BundleContext context, EquinoxFwAdminImpl fwAdmin,
-	// Manipulator manipulator, boolean useFwPersistentData, boolean runtime) {
-	// super();
-	// if (DEBUG)
-	// System.out.println("\nEquinoxBundlesState():useFwPersistentData=" +
-	// useFwPersistentData + ",runtime=" + runtime);
-	// this.context = context;
-	// this.fwAdmin = fwAdmin;
-	// // copy manipulator object for avoiding modifying the parameters of the
-	// manipulator.
-	// this.manipulator = fwAdmin.getManipulator();
-	// if (runtime) {
-	// this.manipulator.setLauncherData(manipulator.getLauncherData());
-	// this.initializeRuntime();
-	// } else {
-	// this.manipulator.setConfigData(manipulator.getConfigData());
-	// this.manipulator.setLauncherData(manipulator.getLauncherData());
-	// initialize(useFwPersistentData);
-	// }
-	// }
-
 	/**
 	 * If useFwPersistentData flag equals false, this constructor will not take
 	 * a framework persistent data into account. Otherwise, it will.
@@ -422,9 +329,9 @@ public class EquinoxBundlesState implements BundlesState {
 			for (int i = 0; i < bInfos.length; i++)
 				configData.addBundle(bInfos[i]);
 		} else {
-//			if (this.getFwJar() == null) {
+			//			if (this.getFwJar() == null) {
 			this.setFwJar(fwJar);
-//			}
+			//			}
 		}
 
 		// composeState(bInfos, properties, null);
@@ -472,18 +379,16 @@ public class EquinoxBundlesState implements BundlesState {
 			// and I removed it because it was causing various problems. See in previous revision
 			this.manipulator.getConfigData().setBundles(infos);
 			return false;
-		} else {
-			// return false;
-			state = soFactory.createState(true);
-			flagNewState = true;
-			cachedInstalledBundles = new BundleDescription[0];
-			if (props == null) {
-				this.manipulator.getConfigData().setBundles(infos);
-				return false;
-			}
-			setPlatformPropertiesToState(props);
-			setPlatformProperties(state);
 		}
+		state = soFactory.createState(true);
+		flagNewState = true;
+		cachedInstalledBundles = new BundleDescription[0];
+		if (props == null) {
+			this.manipulator.getConfigData().setBundles(infos);
+			return false;
+		}
+		setPlatformPropertiesToState(props);
+		setPlatformProperties(state);
 
 		// remove initial bundle which were installed but not listed in
 		// fwConfigFileBInfos.
@@ -616,34 +521,9 @@ public class EquinoxBundlesState implements BundlesState {
 		return result;
 	}
 
-	public BundleInfo[] convertState(State state) {
-		return convertState(state.getBundles());
-	}
-
-	/**
-	 * return platform properties which is used for the running framework.
-	 * 
-	 * @return platform properties which is used for the running framework.
-	 */
-	private Properties getCurrentPlatformProperties() {
-		Properties props = new Properties();
-		for (int i = 0; i < PROPS.length; i++) {
-			String value = context.getProperty(PROPS[i]);
-			System.out.println("(" + PROPS[i] + "," + value + ")");
-			if (value != null) {
-				props.setProperty(PROPS[i], value);
-			}
-		}
-		return props;
-	}
-
 	public BundleInfo[] getExpectedState() throws FrameworkAdminRuntimeException {
 		SimpleBundlesState.checkAvailability(fwAdmin);
-		return convertState(state);
-	}
-
-	public File getFwJar() {
-		return manipulator.getLauncherData().getFwJar();
+		return convertState(state.getBundles());
 	}
 
 	Properties getPlatformProperties() {
@@ -701,7 +581,7 @@ public class EquinoxBundlesState implements BundlesState {
 
 	public String[] getUnsatisfiedConstraints(BundleInfo bInfo) {
 		BundleDescription description = state.getBundleByLocation(bInfo.getLocation());
-		PlatformAdmin platformAdmin = (PlatformAdmin) BundleHelper.getDefault().acquireService(PlatformAdmin.class.getName());
+		PlatformAdmin platformAdmin = (PlatformAdmin) Activator.acquireService(PlatformAdmin.class.getName());
 		StateHelper helper = platformAdmin.getStateHelper();
 		VersionConstraint[] constraints = helper.getUnsatisfiedConstraints(description);
 		String[] ret = new String[constraints.length];
@@ -710,69 +590,6 @@ public class EquinoxBundlesState implements BundlesState {
 		return ret;
 	}
 
-	// private void initializeRuntime() {
-	// ServiceReference reference =
-	// context.getServiceReference(StartLevel.class.getName());
-	// StartLevel startLevel = (StartLevel) context.getService(reference);
-	// // boolean flag =
-	// startLevel.isBundlePersistentlyStarted(context.getBundle(0));
-	// System.out.println("\ninitlializeRuntime()");
-	//
-	// Bundle[] bundles = context.getBundles();
-	// List bundlesList = new LinkedList();
-	// for (int i = 0; i < bundles.length; i++) {
-	// System.out.println(" bundles[" + i + "].getBundleId()=" +
-	// bundles[i].getBundleId());
-	// if (bundles[i].getBundleId() == 0) {// SystemBundle
-	// LauncherData launcherData = manipulator.getLauncherData();
-	// File fwJar = getFwJar(launcherData);
-	// String location = null;
-	// try {
-	// location = fwJar.toURL().toExternalForm();
-	// } catch (MalformedURLException e) {
-	// // TODO Auto-generated catch block
-	// e.printStackTrace();
-	// }
-	// bundlesList.add(new BundleInfo(location,
-	// startLevel.getBundleStartLevel(bundles[i]),
-	// startLevel.isBundlePersistentlyStarted(bundles[i]),
-	// bundles[i].getBundleId()));
-	// break;
-	// }
-	// }
-	// for (int i = 0; i < bundles.length; i++) {
-	// if (bundles[i].getBundleId() != 0) {// except SystemBundle
-	// // System.out.println("Bundle["+"] is marked as started or not:" + flag);
-	// bundlesList.add(new
-	// BundleInfo(FileUtils.getRealLocation(bundles[i].getLocation()),
-	// startLevel.getBundleStartLevel(bundles[i]),
-	// startLevel.isBundlePersistentlyStarted(bundles[i]),
-	// bundles[i].getBundleId()));
-	// }
-	// }
-	// setStateObjectFactory();
-	// state = soFactory.createState(true);
-	// this.platfromProperties = this.getCurrentPlatformProperties();
-	// state.setPlatformProperties(platfromProperties);
-	//
-	// BundleInfo[] bInfos = Utils.getBundleInfosFromList(bundlesList);
-	// for (int j = 0; j < bInfos.length; j++) {
-	// if (DEBUG)
-	// Log.log(LogService.LOG_DEBUG, this, "composeExpectedState()", "bInfos[" +
-	// j + "]=" + bInfos[j]);
-	// try {
-	// this.installBundle(bInfos[j]);
-	// //System.out.println("install bInfos[" + j + "]=" + bInfos[j]);
-	// } catch (RuntimeException e) {
-	// Log.log(LogService.LOG_ERROR, this, "composeExpectedState()",
-	// "BundleInfo:" + bInfos[j], e);
-	// e.printStackTrace();
-	// throw e;
-	// }
-	// }
-	// resolve(true);
-	// }
-
 	private void initialize(boolean useFwPersistentData) {
 		LauncherData launcherData = manipulator.getLauncherData();
 		ConfigData configData = manipulator.getConfigData();
@@ -895,19 +712,6 @@ public class EquinoxBundlesState implements BundlesState {
 			Utils.printoutProperties(System.out, "PlatformProperties[0]", platfromProperties);
 	}
 
-	// public BundleHelper getBundleHelper() {
-	// BundleHelper helper = BundleHelper.getDefault();
-	// if (helper == null) {
-	// helper = new BundleHelper();
-	// try {
-	// helper.start(context);
-	// } catch (Exception e) {
-	// Log.log(LogService.LOG_WARNING, this, "setStateObjectFactory()", e);
-	// }
-	// }
-	// return helper;
-	// }
-
 	/**
 	 * set platfromProperties required to compose state object into
 	 * platformProperties of this state.
@@ -932,8 +736,7 @@ public class EquinoxBundlesState implements BundlesState {
 	private void setStateObjectFactory() {
 		if (soFactory != null)
 			return;
-		BundleHelper helper = BundleHelper.getDefault();// getBundleHelper();
-		PlatformAdmin platformAdmin = (PlatformAdmin) helper.acquireService(PlatformAdmin.class.getName());
+		PlatformAdmin platformAdmin = (PlatformAdmin) Activator.acquireService(PlatformAdmin.class.getName());
 		// PlatformAdmin platformAdmin = (PlatformAdmin)
 		// heBundleHelper.getDefault().acquireService(PlatformAdmin.class.getName());
 		soFactory = platformAdmin.getFactory();
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxConstants.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxConstants.java
index 359fa1c..bc77d05 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxConstants.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxConstants.java
@@ -21,67 +21,27 @@ public class EquinoxConstants {
 	public final static String FW_SYMBOLIC_NAME = "org.eclipse.osgi"; //$NON-NLS-1$
 	public static final String DEFAULT_CONFIGURATION = "configuration"; //$NON-NLS-1$
 	public static final String CONFIG_INI = "config.ini"; //$NON-NLS-1$
-	final static String PROP_INITIAL = "osgi.clean"; //$NON-NLS-1$
 
 	public final static String FW_VERSION = "3.3"; //$NON-NLS-1$
 	public final static String FW_NAME = "Equinox"; //$NON-NLS-1$
 	public final static String LAUNCHER_VERSION = "3.2"; //$NON-NLS-1$
 	public final static String LAUNCHER_NAME = "Eclipse.exe"; //$NON-NLS-1$
 
-	public static final String AOL = "aol"; //$NON-NLS-1$
-
 	public static final String OPTION_CONFIGURATION = "-configuration"; //$NON-NLS-1$
 	public static final String OPTION_FW = "-framework"; //$NON-NLS-1$
 	public static final String OPTION_VM = "-vm"; //$NON-NLS-1$
 	public static final String OPTION_VMARGS = "-vmargs"; //$NON-NLS-1$
-	public static final String OPTION_INSTANCE = "-data"; //$NON-NLS-1$
-	public static final String OPTION_INSTALL = "-install"; //$NON-NLS-1$
-	public static final String OPTION_CONSOLE = "-console"; //$NON-NLS-1$
-	public static final String CONSOLE_PORT_VALUE = "9000"; //$NON-NLS-1$
 	public static final String OPTION_CLEAN = "-clean"; //$NON-NLS-1$
 	public static final String OPTION_STARTUP = "-startup"; //$NON-NLS-1$
 
-	//	private static final String CONSOLE_LOG = "-consoleLog"; //$NON-NLS-1$
-	//	private static final String DEBUG = "-debug"; //$NON-NLS-1$
-	//	private static final String INITIALIZE = "-initialize"; //$NON-NLS-1$
-	//	private static final String DEV = "-dev"; //$NON-NLS-1$
-	//	private static final String WS = "-ws"; //$NON-NLS-1$
-	//	private static final String OS = "-os"; //$NON-NLS-1$
-	//	private static final String ARCH = "-arch"; //$NON-NLS-1$
-	//	private static final String NL = "-nl"; //$NON-NLS-1$	
-	//	private static final String CONFIGURATION = "-configuration"; //$NON-NLS-1$	
-	//	private static final String USER = "-user"; //$NON-NLS-1$
-	//	private static final String NOEXIT = "-noExit"; //$NON-NLS-1$
-	//
-	//	// this is more of an Eclipse argument but this OSGi implementation stores its 
-	//	// metadata alongside Eclipse's.
-	//	private static final String OPTION_DATA = "-data"; //$NON-NLS-1$
-
 	// System properties
 	public static final String PROP_BUNDLES = "osgi.bundles"; //$NON-NLS-1$
 	public static final String PROP_BUNDLES_STARTLEVEL = "osgi.bundles.defaultStartLevel"; //$NON-NLS-1$ //The start level used to install the bundles
-	public static final String PROP_EXTENSIONS = "osgi.framework.extensions"; //$NON-NLS-1$
 	public static final String PROP_INITIAL_STARTLEVEL = "osgi.startLevel"; //$NON-NLS-1$ //The start level when the fwl start
-	public static final String PROP_DEBUG = "osgi.debug"; //$NON-NLS-1$
-	public static final String PROP_DEV = "osgi.dev"; //$NON-NLS-1$
-	public static final String PROP_CLEAN = "osgi.clean"; //$NON-NLS-1$
 	public static final String PROP_INSTALL = "osgi.install"; //$NON-NLS-1$
-	public static final String PROP_CONSOLE = "osgi.console"; //$NON-NLS-1$
-	public static final String PROP_CONSOLE_CLASS = "osgi.consoleClass"; //$NON-NLS-1$
-	public static final String PROP_CHECK_CONFIG = "osgi.checkConfiguration"; //$NON-NLS-1$
-	public static final String PROP_OS = "osgi.os"; //$NON-NLS-1$
-	public static final String PROP_WS = "osgi.ws"; //$NON-NLS-1$
-	public static final String PROP_NL = "osgi.nl"; //$NON-NLS-1$
-	public static final String PROP_ARCH = "osgi.arch"; //$NON-NLS-1$
-	public static final String PROP_ADAPTOR = "osgi.adaptor"; //$NON-NLS-1$
-	public static final String PROP_SYSPATH = "osgi.syspath"; //$NON-NLS-1$
-
-	public static final String PROP_CONFIGURATION_AREA = "osgi.configuration.area"; //$NON-NLS-1$
 	public static final String PROP_ECLIPSE_COMMANDS = "eclipse.commands"; //$NON-NLS-1$
 	public static final String PROP_OSGI_FW = "osgi.framework"; //$NON-NLS-1$
-
 	public static final String PROP_BUNDLES_EXTRADATA = "osgi.bundles.extraData"; //$NON-NLS-1$
-
 	public static final String PROP_LAUNCHER_PATH = "osgi.launcherPath"; //$NON-NLS-1$
 	public static final String PROP_LAUNCHER_NAME = "osgi.launcherIni"; //$NON-NLS-1$
 
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFrameworkAdminFactoryImpl.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFrameworkAdminFactoryImpl.java
index af74934..95d688e 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFrameworkAdminFactoryImpl.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFrameworkAdminFactoryImpl.java
@@ -16,15 +16,7 @@ public class EquinoxFrameworkAdminFactoryImpl extends FrameworkAdminFactory {
 	public FrameworkAdmin createFrameworkAdmin() throws InstantiationException, IllegalAccessException, ClassNotFoundException {
 		String className = System.getProperty(ConfiguratorManipulatorFactory.SYSTEM_PROPERTY_KEY);
 		if (className == null)
-			return new EquinoxFwAdminImpl();;
+			return new EquinoxFwAdminImpl();
 		return new EquinoxFwAdminImpl(className);
 	}
-	//	public FrameworkAdmin createFrameworkAdmin() throws InstantiationException, IllegalAccessException, ClassNotFoundException {
-	//		return new EquinoxFwAdminImpl();;
-	//		
-	//	}
-
-	//	public FrameworkAdmin createFrameworkAdmin(String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
-	//		return new EquinoxFwAdminImpl(className);
-	//	}
 }
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwAdminImpl.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwAdminImpl.java
index bb36125..8b831b3 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwAdminImpl.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwAdminImpl.java
@@ -11,10 +11,10 @@ package org.eclipse.equinox.frameworkadmin.equinox.internal;
 import java.io.File;
 import java.io.IOException;
 import java.util.Dictionary;
-
 import org.eclipse.equinox.configuratormanipulator.ConfiguratorManipulator;
 import org.eclipse.equinox.configuratormanipulator.ConfiguratorManipulatorFactory;
 import org.eclipse.equinox.frameworkadmin.*;
+import org.eclipse.equinox.frameworkadmin.equinox.internal.utils.EclipseVersion;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
 
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwConfigFileParser.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwConfigFileParser.java
index 9097ee9..8b5a39a 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwConfigFileParser.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxFwConfigFileParser.java
@@ -31,14 +31,11 @@ public class EquinoxFwConfigFileParser {
 	KEY_OSGI_FRAMEWORK, //
 			KEY_ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR_CONFIGURL, //
 			KEY_ECLIPSE_PROV_DATA_AREA};
-	private static final String[] URL_ARRAYS = new String[] {KEY_OSGI_BUNDLES, KEY_OSGI_BUNDLES_EXTRA_DATA};
 
 	private static boolean DEBUG = false;
-	private final BundleContext context;
 	private static String USE_REFERENCE_STRING = null;
 
 	public EquinoxFwConfigFileParser(BundleContext context) {
-		this.context = context;
 		if (context != null)
 			USE_REFERENCE_STRING = context.getProperty(EquinoxConstants.PROP_KEY_USE_REFERENCE);
 
@@ -105,11 +102,11 @@ public class EquinoxFwConfigFileParser {
 			// TODO I just added this "if" stmt because we were seeing an extra slash
 			// appearing in the resulting URL. was this the right thing to do? the indexes 
 			// seem off in the loop below. (I'm on linux if that makes a difference)
-//			if (!fwJarSt.startsWith("file:")) {
-//				if (fwJarSt.length() > 5 && fwJarSt.charAt(4) != '/') {
-//					fwJarSt = "file:/" + fwJarUrl.getFile();
-//				}
-//			}
+			//			if (!fwJarSt.startsWith("file:")) {
+			//				if (fwJarSt.length() > 5 && fwJarSt.charAt(4) != '/') {
+			//					fwJarSt = "file:/" + fwJarUrl.getFile();
+			//				}
+			//			}
 			props.setProperty(EquinoxConstants.PROP_OSGI_FW, fwJarSt /* fwJar.getAbsolutePath() */);
 		}
 
@@ -148,12 +145,10 @@ public class EquinoxFwConfigFileParser {
 	}
 
 	private static boolean getMarkedAsStartedFormat(String msg, String original) {
-		//boolean ret = false;
 		if (msg == null)
 			return false;
 		msg = msg.trim();
 		if (msg.equals("start")) {
-			//ret = true;
 			return true;
 		}
 		if (!msg.equals(""))
@@ -180,23 +175,22 @@ public class EquinoxFwConfigFileParser {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
-//			location = location.substring("file:".length());
-//			if (!location.startsWith("/"))
-//				location = "/" + location;
-//			//		if (fwJarSt != null)
-//			//			if (fwJarSt.equals(location))
-//			//				continue;
-//			location = Utils.replaceAll(location, File.separator, "/");
-//			//String jarName = location.substring(location.lastIndexOf("/") + 1);
-//			//		if (jarName.startsWith(EquinoxConstants.FW_JAR_PLUGIN_NAME))
-//			//			continue;
-//			bInfo.setLocation("file:" + location);
-//		}
+		//			location = location.substring("file:".length());
+		//			if (!location.startsWith("/"))
+		//				location = "/" + location;
+		//			//		if (fwJarSt != null)
+		//			//			if (fwJarSt.equals(location))
+		//			//				continue;
+		//			location = Utils.replaceAll(location, File.separator, "/");
+		//			//String jarName = location.substring(location.lastIndexOf("/") + 1);
+		//			//		if (jarName.startsWith(EquinoxConstants.FW_JAR_PLUGIN_NAME))
+		//			//			continue;
+		//			bInfo.setLocation("file:" + location);
+		//		}
 	}
 
 	/**
 	 * @param value
-	 * @throws ManipulatorException
 	 */
 	private static void setInstallingBundles(Manipulator manipulator, String value) throws NumberFormatException {
 		ConfigData configData = manipulator.getConfigData();
@@ -231,26 +225,16 @@ public class EquinoxFwConfigFileParser {
 				int indexJ = slAndFlag.indexOf(":");
 				if (indexJ == -1) {
 					markedAsStarted = getMarkedAsStartedFormat(slAndFlag, token);
-					// 3 or start
-					//					try {
-					//startLevel = Integer.parseInt(slAndFlag);
 					configData.addBundle(new BundleInfo(location, markedAsStarted));
 					continue;
-					//					} catch (NumberFormatException nfe) {
-					//						throw new ManipulatorException("Invalid Format of bInfoStrings[" + i + "]=" + bInfoStrings[i], nfe, ManipulatorException.OTHERS);
-					//					}
 				} else if (indexJ == 0) {
 					markedAsStarted = getMarkedAsStartedFormat(slAndFlag.substring(indexJ + ":".length()), token);
 					configData.addBundle(new BundleInfo(location, startLevel, markedAsStarted));
 					continue;
 				}
-				//				try {
 				startLevel = Integer.parseInt(slAndFlag.substring(0, indexJ));
 				markedAsStarted = getMarkedAsStartedFormat(slAndFlag.substring(indexJ + ":".length()), bInfoStrings[i]);
 				configData.addBundle(new BundleInfo(location, startLevel, markedAsStarted));
-				//				} catch (NumberFormatException nfe) {
-				//					throw new ManipulatorException("Invalid Format of bInfoStrings[" + i + "]=" + bInfoStrings[i], nfe, ManipulatorException.OTHERS);
-				//				}
 			}
 		}
 	}
@@ -270,7 +254,7 @@ public class EquinoxFwConfigFileParser {
 	/**
 	 * inputFile must be not a directory but a file.
 	 * 
-	 * @param configData
+	 * @param manipulator
 	 * @param inputFile
 	 * @throws IOException
 	 */
@@ -461,7 +445,6 @@ public class EquinoxFwConfigFileParser {
 			try {
 				out.flush();
 				out.close();
-				//				Log.log(LogService.LOG_INFO, "out is closed successfully.");
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxManipulatorImpl.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxManipulatorImpl.java
index ab83e45..c7d0250 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxManipulatorImpl.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/EquinoxManipulatorImpl.java
@@ -17,7 +17,6 @@ import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.configuratormanipulator.ConfiguratorManipulator;
 import org.eclipse.equinox.frameworkadmin.*;
 import org.eclipse.equinox.frameworkadmin.equinox.internal.utils.FileUtils;
-import org.eclipse.equinox.frameworkadmin.equinox.internal.utils.state.BundleHelper;
 import org.eclipse.equinox.internal.frameworkadmin.utils.SimpleBundlesState;
 import org.eclipse.equinox.internal.frameworkadmin.utils.Utils;
 import org.eclipse.osgi.service.datalocation.Location;
@@ -28,10 +27,6 @@ import org.osgi.util.tracker.ServiceTracker;
 
 public class EquinoxManipulatorImpl implements Manipulator {
 	private static final long DEFAULT_LASTMODIFIED = 0L;
-	public static final String FW_NAME = "Equinox";
-	public static final String FW_VERSION = "3.3M5";
-	public static final String LAUNCHER_NAME = "Eclipse.exe";
-	public static final String LAUNCHER_VERSION = "3.2";
 	private static final boolean LOG_ILLEGALSTATEEXCEPTION = false;
 	private static final String COMMA = ","; //$NON-NLS-1$
 	private static final String FILE_PROTOCOL = "file:"; //$NON-NLS-1$
@@ -95,7 +90,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 		if (dotLocation != -1)
 			launcherName = launcherName.substring(0, dotLocation);
 		File result = new File(launcher.getParent() + File.separator + launcherName + EquinoxConstants.INI_EXTENSION);
-//		launcherData.setLauncherConfigLocation(result);
+		//		launcherData.setLauncherConfigLocation(result);
 		return result;
 	}
 
@@ -153,7 +148,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 		return configData;
 	}
 
-	public BundleInfo[] getExpectedState() throws IllegalArgumentException, IOException, FrameworkAdminRuntimeException {
+	public BundleInfo[] getExpectedState() throws IllegalArgumentException, FrameworkAdminRuntimeException {
 		//Log.log(LogService.LOG_DEBUG, this, "getExpectedState()", "BEGIN");
 		SimpleBundlesState.checkAvailability(fwAdmin);
 
@@ -314,9 +309,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 		}
 
 		// update initialBundleStartLevel
-		BundleHelper helper = BundleHelper.getDefault();//getBundleHelper();
-		StartLevel slAdmin = (StartLevel) helper.acquireService(StartLevel.class.getName());
-
+		StartLevel slAdmin = (StartLevel) Activator.acquireService(StartLevel.class.getName());
 		int initialBSL = configData.getInitialBundleStartLevel();
 		if (initialBSL != slAdmin.getInitialBundleStartLevel())
 			configData.setInitialBundleStartLevel(slAdmin.getInitialBundleStartLevel());
@@ -417,22 +410,22 @@ public class EquinoxManipulatorImpl implements Manipulator {
 
 		checkConsistencyOfFwConfigLocAndFwPersistentDataLoc(launcherData);
 
-//		//if (context != null)
-//		setConfiguratorManipulator();
-//
-//		BundleInfo[] newBInfos = null;
-//		if (configuratorManipulator != null) { // Optimize BundleInfo[] 
-//			try {
-//				newBInfos = configuratorManipulator.save(this, backup);
-//			} catch (IllegalStateException e) {
-//				// TODO Auto-generated catch block
-//				if (LOG_ILLEGALSTATEEXCEPTION)
-//					Log.log(LogService.LOG_WARNING, this, "save()", e);
-//				newBInfos = configData.getBundles();
-//			}
-//		} else {
-//			newBInfos = configData.getBundles();
-//		}
+		//		//if (context != null)
+		//		setConfiguratorManipulator();
+		//
+		//		BundleInfo[] newBInfos = null;
+		//		if (configuratorManipulator != null) { // Optimize BundleInfo[] 
+		//			try {
+		//				newBInfos = configuratorManipulator.save(this, backup);
+		//			} catch (IllegalStateException e) {
+		//				// TODO Auto-generated catch block
+		//				if (LOG_ILLEGALSTATEEXCEPTION)
+		//					Log.log(LogService.LOG_WARNING, this, "save()", e);
+		//				newBInfos = configData.getBundles();
+		//			}
+		//		} else {
+		//			newBInfos = configData.getBundles();
+		//		}
 
 		if (!stateIsEmpty) {
 			// Save FwConfigFile
@@ -556,12 +549,12 @@ public class EquinoxManipulatorImpl implements Manipulator {
 	}
 
 	private void updateAccordingToExpectedState(BundlesState bundlesState) {
-//		File newFwJar = EquinoxBundlesState.getFwJar(launcherData, configData);
-//		if (bundlesState instanceof EquinoxBundlesState)
-//			((EquinoxBundlesState) bundlesState).setFwJar(newFwJar);
-//
-//		if (launcherData.getFwJar() == null && newFwJar != null)
-//			launcherData.setFwJar(newFwJar);
+		//		File newFwJar = EquinoxBundlesState.getFwJar(launcherData, configData);
+		//		if (bundlesState instanceof EquinoxBundlesState)
+		//			((EquinoxBundlesState) bundlesState).setFwJar(newFwJar);
+		//
+		//		if (launcherData.getFwJar() == null && newFwJar != null)
+		//			launcherData.setFwJar(newFwJar);
 		BundleInfo[] newBundleInfos = bundlesState.getExpectedState();
 		configData.setBundles(newBundleInfos);
 	}
@@ -610,18 +603,6 @@ public class EquinoxManipulatorImpl implements Manipulator {
 		return urlString.substring(0, index) + urlString.substring(common);
 	}
 
-	public static String makeArrayRelative(String array, URL rootURL) {
-		StringBuffer buffer = new StringBuffer();
-		for (StringTokenizer tokenizer = new StringTokenizer(array, COMMA); tokenizer.hasMoreTokens();) {
-			String token = tokenizer.nextToken();
-			String relative = makeRelative(token, rootURL);
-			buffer.append(relative);
-			if (tokenizer.hasMoreTokens())
-				buffer.append(',');
-		}
-		return buffer.toString();
-	}
-
 	public static String makeArrayAbsolute(String array, URL rootURL) {
 		StringBuffer buffer = new StringBuffer();
 		for (StringTokenizer tokenizer = new StringTokenizer(array, COMMA); tokenizer.hasMoreTokens();) {
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Log.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Log.java
index 8581c75..548c02d 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Log.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/Log.java
@@ -20,12 +20,12 @@ public class Log {
 	static private ServiceTracker logTracker;
 	static private boolean useLog = false;
 
-	static void dispose() {
+	public static void dispose() {
 		if (logTracker != null) {
 			logTracker.close();
 		}
 		logTracker = null;
-	};
+	}
 
 	public static void init(BundleContext bc) {
 		logTracker = new ServiceTracker(bc, LogService.class.getName(), null);
@@ -80,10 +80,6 @@ public class Log {
 		log(level, null, null, message, null);
 	}
 
-	public static void log(int level, String method, String message) {
-		log(level, null, method, message, null);
-	}
-
 	public static void log(int level, String message, Throwable e) {
 		log(level, null, null, message, e);
 	}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/EclipseVersion.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/EclipseVersion.java
new file mode 100644
index 0000000..7c0a4c5
--- /dev/null
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/EclipseVersion.java
@@ -0,0 +1,54 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.frameworkadmin.equinox.internal.utils;
+
+import java.util.StringTokenizer;
+
+public class EclipseVersion implements Comparable {
+	int major = 0;
+	int minor = 0;
+	int service = 0;
+	String qualifier = null;
+
+	public EclipseVersion(String version) {
+		StringTokenizer tok = new StringTokenizer(version, ".");
+		if (!tok.hasMoreTokens())
+			return;
+		this.major = Integer.parseInt(tok.nextToken());
+		if (!tok.hasMoreTokens())
+			return;
+		this.minor = Integer.parseInt(tok.nextToken());
+		if (!tok.hasMoreTokens())
+			return;
+		this.service = Integer.parseInt(tok.nextToken());
+		if (!tok.hasMoreTokens())
+			return;
+		this.qualifier = tok.nextToken();
+	}
+
+	public int compareTo(Object obj) {
+		EclipseVersion target = (EclipseVersion) obj;
+		if (target.major > this.major)
+			return -1;
+		if (target.major < this.major)
+			return 1;
+		if (target.minor > this.minor)
+			return -1;
+		if (target.minor < this.minor)
+			return 1;
+		if (target.service > this.service)
+			return -1;
+		if (target.service < this.service)
+			return 1;
+		return 0;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/FileUtils.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/FileUtils.java
index 16d492b..7b2f914 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/FileUtils.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/FileUtils.java
@@ -8,15 +8,12 @@
  ******************************************************************************/
 package org.eclipse.equinox.frameworkadmin.equinox.internal.utils;
 
-import java.io.*;
+import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.StringTokenizer;
-
 import org.eclipse.equinox.frameworkadmin.LauncherData;
 import org.eclipse.equinox.frameworkadmin.Manipulator;
 import org.eclipse.equinox.frameworkadmin.equinox.internal.EquinoxConstants;
-import org.eclipse.equinox.internal.frameworkadmin.utils.Utils;
 
 public class FileUtils {
 
@@ -68,60 +65,18 @@ public class FileUtils {
 			ret = location.substring("initial@".length());
 
 		if (ret == location)
-			if (useEclipse)
-				return FileUtils.getEclipseRealLocation(manipulator, location);
-			else
-				return location;
+			return useEclipse ? FileUtils.getEclipseRealLocation(manipulator, location) : location;
 		return getRealLocation(manipulator, ret, useEclipse);
 	}
 
-	public static boolean copy(File source, File target) throws IOException {
-		//try {
-		target.getParentFile().mkdirs();
-		target.createNewFile();
-		transferStreams(new FileInputStream(source), new FileOutputStream(target));
-		//		} catch (FileNotFoundException e) {
-		//			e.printStackTrace();
-		//			return false;
-		//		} catch (IOException e) {
-		//			e.printStackTrace();
-		//			return false;
-		//		}
-		return true;
-	}
-
-	/**
-	 * Transfers all available bytes from the given input stream to the given
-	 * output stream. Regardless of failure, this method closes both streams.
-	 * 
-	 * @param source
-	 * @param destination
-	 * @throws IOException
-	 */
-	public static void transferStreams(InputStream source, OutputStream destination) throws IOException {
-		source = new BufferedInputStream(source);
-		destination = new BufferedOutputStream(destination);
-		try {
-			byte[] buffer = new byte[8192];
-			while (true) {
-				int bytesRead = -1;
-				if ((bytesRead = source.read(buffer)) == -1)
-					break;
-				destination.write(buffer, 0, bytesRead);
-			}
-		} finally {
-			try {
-				source.close();
-			} catch (IOException e) {
-				e.printStackTrace();
-				// ignore
-			}
-			try {
-				destination.close();
-			} catch (IOException e) {
-				e.printStackTrace();// ignore
-			}
+	private static String replaceAll(String st, String oldSt, String newSt) {
+		if (oldSt.equals(newSt))
+			return st;
+		int index = -1;
+		while ((index = st.indexOf(oldSt)) != -1) {
+			st = st.substring(0, index) + newSt + st.substring(index + oldSt.length());
 		}
+		return st;
 	}
 
 	/**
@@ -134,7 +89,7 @@ public class FileUtils {
 	 */
 	private static String getEclipseNamingVersion(URL url, final String pluginName, boolean isFile) {
 		String location = url.getFile();
-		location = Utils.replaceAll(location, File.separator, "/");
+		location = replaceAll(location, File.separator, "/");
 		String filename = null;
 		if (location.indexOf(":") == -1)
 			filename = location;
@@ -142,7 +97,6 @@ public class FileUtils {
 			filename = location.substring(location.lastIndexOf(":") + 1);
 
 		// filename must be "jarName"_"version".jar
-		//System.out.println("filename=" + filename);
 		if (isFile) {
 			if (!filename.endsWith(".jar"))
 				return null;
@@ -154,7 +108,6 @@ public class FileUtils {
 
 		if (filename.indexOf("/") != -1)
 			filename = filename.substring(filename.lastIndexOf("/") + 1);
-		//System.out.println("filename=" + filename);
 
 		if (!filename.startsWith(pluginName))
 			return null;
@@ -193,44 +146,3 @@ public class FileUtils {
 		return (ret == null ? null : ret.toExternalForm());
 	}
 }
-
-class EclipseVersion implements Comparable {
-	int major = 0;
-	int minor = 0;
-	int service = 0;
-	String qualifier = null;
-
-	EclipseVersion(String version) {
-		StringTokenizer tok = new StringTokenizer(version, ".");
-		if (!tok.hasMoreTokens())
-			return;
-		this.major = Integer.parseInt(tok.nextToken());
-		if (!tok.hasMoreTokens())
-			return;
-		this.minor = Integer.parseInt(tok.nextToken());
-		if (!tok.hasMoreTokens())
-			return;
-		this.service = Integer.parseInt(tok.nextToken());
-		if (!tok.hasMoreTokens())
-			return;
-		this.qualifier = tok.nextToken();
-	}
-
-	public int compareTo(Object obj) {
-		EclipseVersion target = (EclipseVersion) obj;
-		if (target.major > this.major)
-			return -1;
-		if (target.major < this.major)
-			return 1;
-		if (target.minor > this.minor)
-			return -1;
-		if (target.minor < this.minor)
-			return 1;
-		if (target.service > this.service)
-			return -1;
-		if (target.service < this.service)
-			return 1;
-		return 0;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/AlienStateReader.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/AlienStateReader.java
deleted file mode 100644
index e2ee7b4..0000000
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/AlienStateReader.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.frameworkadmin.equinox.internal.utils.state;
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.core.runtime.adaptor.LocationManager;
-import org.eclipse.equinox.frameworkadmin.equinox.internal.Log;
-import org.eclipse.equinox.frameworkadmin.equinox.internal.utils.FileUtils;
-import org.eclipse.osgi.framework.adaptor.FrameworkAdaptor;
-import org.eclipse.osgi.service.resolver.*;
-import org.eclipse.osgi.storagemanager.StorageManager;
-import org.osgi.service.log.LogService;
-
-public class AlienStateReader {
-	private StorageManager storageManager;
-	private File configuration;
-	private File parentConfiguration;
-	private State state;
-	private final static boolean DEBUG = false;
-
-	public AlienStateReader(File configuration, File parentConfiguration) {
-		this.configuration = configuration;
-		//this.configuration = new File(configuration.getParentFile(),"configuration2");
-		this.parentConfiguration = parentConfiguration;
-
-	}
-
-	private File copyStateToTempLocation(File[] toCopy) throws IOException {
-		File temp = BundleHelper.getDefault().getDataFile("aliens");
-		File[] list = temp.listFiles();
-		if (list != null)
-			for (int i = 0; i < list.length; i++) {
-				if (!list[i].delete())
-					return null;
-			}
-		FileUtils.copy(toCopy[0], new File(temp, LocationManager.STATE_FILE));
-		FileUtils.copy(toCopy[1], new File(temp, LocationManager.LAZY_FILE));
-		return temp;
-	}
-
-	//	private File findStateBaseDir() {
-	//		//TODO Need to do some cleanup with respect to constants coming from the fwk
-	//		storageManager = initStorageManager(new File(configuration, FrameworkAdaptor.FRAMEWORK_SYMBOLICNAME), "none", false); //TODO Here we proabaly want to lock?
-	//		File stateFile = null;
-	//		File lazyFile = null;
-	//		try {
-	//			stateFile = storageManager.lookup(LocationManager.STATE_FILE, false);
-	//			lazyFile = storageManager.lookup(LocationManager.LAZY_FILE, false);
-	//		} catch (IOException ex) {
-	//			//TODO I don't think there is much we can do in the this case.
-	//		}
-	//		if (DEBUG) {
-	//			Log.log(LogService.LOG_DEBUG, this, "findStateFiles()", "stateFile=" + stateFile);
-	//			Log.log(LogService.LOG_DEBUG, this, "findStateFiles()", "lazyFile=" + lazyFile);
-	//		}
-	//		if (stateFile == null || lazyFile == null || !stateFile.getParentFile().equals(lazyFile.getParentFile()))
-	//			return null;
-	//		return stateFile.getParentFile();
-	//
-	//		//		//if it does not exist, try to read it from the parent
-	//		//		if (stateFile == null || !stateFile.isFile()) { // NOTE this check is redundant since it
-	//		//			// is done in StateManager, however it
-	//		//			// is more convenient to have it here
-	//		//			if (parentConfiguration != null) {
-	//		//				try {
-	//		//					File stateLocationDir = new File(parentConfiguration, FrameworkAdaptor.FRAMEWORK_SYMBOLICNAME);
-	//		//					storageManager = initStorageManager(stateLocationDir, "none", true); //$NON-NLS-1$);
-	//		//					stateFile = storageManager.lookup(LocationManager.STATE_FILE, false);
-	//		//					lazyFile = storageManager.lookup(LocationManager.LAZY_FILE, false);
-	//		//				} catch (IOException ex) {
-	//		//					Log.log(LogService.LOG_DEBUG, this, "findStateFiles()", "Error reading state file ", ex);
-	//		//
-	//		//					stateFile = null;
-	//		//					lazyFile = null;
-	//		//				}
-	//		//			}
-	//		//		}
-	//		//		return new File[] {stateFile, lazyFile};
-	//	}
-
-	//	private File findStateFilesCopy() {
-	//		File[] toCopy = this.findStateFiles();
-	//		File temp = BundleHelper.getDefault().getDataFile("aliens");
-	//		System.out.println("temp=" + temp);
-	//		System.out.println("toCopy[0]=" + toCopy[0]);
-	//		System.out.println("toCopy[1]=" + toCopy[1]);
-	//		if (toCopy[0] == null || toCopy[1] == null)
-	//			return null;
-	//		FileUtils.copy(toCopy[0], new File(temp, LocationManager.STATE_FILE));
-	//		FileUtils.copy(toCopy[1], new File(temp, LocationManager.LAZY_FILE));
-	//		storageManager.close();
-	//		return temp;
-	//	}
-
-	private File[] findStateFiles() {
-		//TODO Need to do some cleanup with respect to constants coming from the fwk
-		storageManager = initStorageManager(new File(configuration, FrameworkAdaptor.FRAMEWORK_SYMBOLICNAME), "java.io", false); //TODO Here we proabaly want to lock?
-		//storageManager = initStorageManager(new File(configuration, FrameworkAdaptor.FRAMEWORK_SYMBOLICNAME), "none", false); //TODO Here we proabaly want to lock?
-		File stateFile = null;
-		File lazyFile = null;
-		try {
-			stateFile = storageManager.lookup(LocationManager.STATE_FILE, false);
-			lazyFile = storageManager.lookup(LocationManager.LAZY_FILE, false);
-		} catch (IOException e) {
-			//TODO I don't think there is much we can do in the this case.
-			e.printStackTrace();
-			Log.log(LogService.LOG_WARNING, this, "findStateFiles()", "Fail to readState", e);
-		}
-		//		if (DEBUG) {
-		//			Log.log(LogService.LOG_DEBUG, this, "findStateFiles()", "stateFile=" + stateFile);
-		//			Log.log(LogService.LOG_DEBUG, this, "findStateFiles()", "lazyFile=" + lazyFile);
-		//		}
-		//if it does not exist, try to read it from the parent
-		if (stateFile == null || !stateFile.isFile()) { // NOTE this check is redundant since it
-			// is done in StateManager, however it
-			// is more convenient to have it here
-			if (parentConfiguration != null) {
-				try {
-					File stateLocationDir = new File(parentConfiguration, FrameworkAdaptor.FRAMEWORK_SYMBOLICNAME);
-					storageManager = initStorageManager(stateLocationDir, "none", true); //$NON-NLS-1$);
-					stateFile = storageManager.lookup(LocationManager.STATE_FILE, false);
-					lazyFile = storageManager.lookup(LocationManager.LAZY_FILE, false);
-				} catch (IOException ex) {
-					Log.log(LogService.LOG_DEBUG, this, "findStateFiles()", "Error reading state file ", ex);
-
-					stateFile = null;
-					lazyFile = null;
-				}
-			}
-		}
-		return new File[] {stateFile, lazyFile};
-	}
-
-	public BundleDescription[] getBundleDescriptions() throws IOException {
-		if (readState() == null)
-			return new BundleDescription[0];
-		return state.getBundles();
-	}
-
-	public State readState() throws IOException {
-		PlatformAdmin platformAdmin = (PlatformAdmin) BundleHelper.getDefault().acquireService(PlatformAdmin.class.getName());
-		if (platformAdmin == null)
-			return null;
-
-		try {
-			File[] stateFiles = findStateFiles();
-			if (stateFiles[0] == null || stateFiles[1] == null)
-				return null;
-			File targetLocation = copyStateToTempLocation(stateFiles);
-			//		System.out.println("targetLocation=" + targetLocation);
-			//			try {
-			state = platformAdmin.getFactory().readState(targetLocation);
-			Resolver resolver = platformAdmin.getResolver();
-			state.setResolver(resolver);
-			//			} catch (IOException e) {
-			//				e.printStackTrace();
-			//				Log.log(LogService.LOG_WARNING, this, "getBundleDescriptions()", "Fail to readState", e);
-			//			}
-		} finally {
-			//in any case we need to close the storage manager
-			if (storageManager != null)
-				storageManager.close();
-		}
-		return state;
-	}
-
-	public State getState() {
-		return state;
-	}
-
-	private StorageManager initStorageManager(File baseDir, String lockMode, boolean readOnly) {
-		if (DEBUG)
-			Log.log(LogService.LOG_DEBUG, this, "initStorageManager()", "baseDir=" + baseDir + ";lockMode=" + lockMode + ";readOnly=" + readOnly);
-		StorageManager manager = new StorageManager(baseDir, lockMode, readOnly);
-		try {
-			manager.open(!readOnly);
-		} catch (IOException ex) {
-			//TODO Need to see what we want to do here
-			Log.log(LogService.LOG_ERROR, this, "initStorageManager()", "Error reading framework metadata: ", ex);
-			//			if (Debug.DEBUG && Debug.DEBUG_GENERAL) {
-			//				Debug.println("Error reading framework metadata: " + ex.getMessage()); //$NON-NLS-1$
-			//				Debug.printStackTrace(ex);
-			//			}
-			//			String message = NLS.bind(EclipseAdaptorMsg.ECLIPSE_STARTUP_FILEMANAGER_OPEN_ERROR, ex.getMessage());
-			//			FrameworkLogEntry logEntry = new FrameworkLogEntry(FrameworkAdaptor.FRAMEWORK_SYMBOLICNAME, FrameworkLogEntry.ERROR, 0, message, 0, ex, null);
-			//			getFrameworkLog().log(logEntry);
-		}
-		return manager;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleHelper.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleHelper.java
deleted file mode 100644
index 93c7962..0000000
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleHelper.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.frameworkadmin.equinox.internal.utils.state;
-
-import java.io.File;
-
-import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceReference;
-
-public class BundleHelper {//implements BundleActivator {
-	private static BundleHelper defaultInstance;
-
-	public static BundleHelper getDefault() {
-		if (defaultInstance == null)
-			defaultInstance = new BundleHelper();
-		return defaultInstance;
-	}
-
-	static void shutdown() {
-		if (defaultInstance != null) {
-			defaultInstance.context = null;
-			defaultInstance = null;
-		}
-	}
-
-	private static BundleContext context;
-
-	private BundleHelper() throws RuntimeException {
-		if (defaultInstance != null)
-			throw new RuntimeException("Can not instantiate bundle helper"); //$NON-NLS-1$
-		defaultInstance = this;
-	}
-
-	public Object acquireService(String serviceName) {
-		ServiceReference reference = context.getServiceReference(serviceName);
-		if (reference == null)
-			return null;
-		return context.getService(reference);
-	}
-
-	public File getDataFile(String fileName) {
-		return context.getDataFile(fileName);
-	}
-
-	public static void start(BundleContext context) throws Exception {
-		BundleHelper.context = context;
-	}
-
-	public static void stop(BundleContext context) throws Exception {
-		shutdown();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleSearch.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleSearch.java
deleted file mode 100644
index 4e760f1..0000000
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/frameworkadmin/equinox/internal/utils/state/BundleSearch.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.frameworkadmin.equinox.internal.utils.state;
-
-import java.io.File;
-import java.io.IOException;
-import java.net.*;
-
-import org.osgi.framework.Version;
-
-public class BundleSearch {
-	private static final String REFERENCE_PROTOCOL = "reference"; //$NON-NLS-1$
-	private static final String FILE_SCHEME = "file:"; //$NON-NLS-1$
-
-	/**
-	 * Searches for the given target directory immediately under
-	 * the given start location.  If one is found then this location is returned; 
-	 * otherwise an exception is thrown.
-	 * 
-	 * @return the location where target directory was found
-	 * @param start the location to begin searching
-	 */
-	private static String searchFor(final String target, String start) {
-		String[] candidates = new File(start).list();
-		if (candidates == null)
-			return null;
-		File result = null;
-		Version maxVersion = null;
-		for (int i = 0; i < candidates.length; i++) {
-			File candidate = new File(start, candidates[i]);
-			if (!candidate.getName().equals(target) && !candidate.getName().startsWith(target + "_")) //$NON-NLS-1$
-				continue;
-			String name = candidate.getName();
-			if (name.endsWith(".jar"))
-				name = name.substring(0, name.length() - 4);
-
-			String version = ""; //$NON-NLS-1$ // Note: directory with version suffix is always > than directory without version suffix
-			int index = name.indexOf('_');
-			if (index != -1)
-				version = name.substring(index + 1);
-
-			try {
-				Version currentVersion = new Version(version);
-				if (maxVersion == null) {
-					result = candidate;
-					maxVersion = currentVersion;
-				} else {
-					if (currentVersion.compareTo(maxVersion) < 0) {
-						result = candidate;
-						maxVersion = currentVersion;
-					}
-				}
-			} catch (IllegalArgumentException e) {
-				result = candidate;
-			}
-		}
-		if (result == null)
-			return null;
-		return result.getAbsolutePath().replace(File.separatorChar, '/') + (result.isDirectory() ? "/" : ""); //$NON-NLS-1$
-	}
-
-	public static URL searchForBundle(String name, String parent) throws MalformedURLException {
-		URL url = null;
-		File fileLocation = null;
-		boolean reference = false;
-		if (parent != null) {
-			try {
-				new URL(name);
-				url = new URL(new File(parent).toURL(), name);
-			} catch (MalformedURLException e) {
-				// TODO this is legacy support for non-URL names.  It should be removed eventually.
-				// if name was not a URL then construct one.  
-				// Assume it should be a reference and htat it is relative.  This support need not 
-				// be robust as it is temporary..
-				File child = new File(name);
-				fileLocation = child.isAbsolute() ? child : new File(parent, name);
-				url = new URL(REFERENCE_PROTOCOL, null, fileLocation.toURL().toExternalForm());
-				reference = true;
-			}
-		}
-
-		// if the name was a URL then see if it is relative.  If so, insert syspath.
-		if (!reference) {
-			URL baseURL = url;
-			// if it is a reference URL then strip off the reference: and set base to the file:...
-			if (url.getProtocol().equals(REFERENCE_PROTOCOL)) {
-				reference = true;
-				String baseSpec = url.getFile();
-				if (baseSpec.startsWith(FILE_SCHEME)) {
-					File child = new File(baseSpec.substring(5));
-					baseURL = child.isAbsolute() ? child.toURL() : new File(parent, child.getPath()).toURL();
-				} else
-					baseURL = new URL(baseSpec);
-			}
-
-			fileLocation = new File(baseURL.getFile());
-			// if the location is relative, prefix it with the parent
-			if (!fileLocation.isAbsolute())
-				fileLocation = new File(parent, fileLocation.toString());
-		}
-		// If the result is a reference then search for the real result and 
-		// reconstruct the answer.
-		if (reference) {
-			String result = searchFor(fileLocation.getName(), new File(fileLocation.getParent()).getAbsolutePath());
-			if (result != null)
-				url = new URL(REFERENCE_PROTOCOL, null, FILE_SCHEME + result);
-			else
-				return null;
-		}
-
-		// finally we have something worth trying	
-		try {
-			URLConnection result = url.openConnection();
-			result.connect();
-			return url;
-		} catch (IOException e) {
-			//			int i = location.lastIndexOf('_');
-			//			return i == -1? location : location.substring(0, i);
-			return null;
-		}
-	}
-}

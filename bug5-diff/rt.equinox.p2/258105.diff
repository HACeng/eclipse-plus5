commit 636462cf781252f6664a4eed4cfc51b0b6703f20
Author: Susan Franklin <sfranklin>
Date:   Mon Mar 23 21:50:34 2009 +0000

    Bug 258105 - [ui] Provide explanation if when filtering causes empty available info

-	-	bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif b/bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif
new file mode 100644
index 0000000..8e054d0
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif differ
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
index 651d685..6dd46f2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
@@ -174,6 +174,7 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		createImageDescriptor(ProvUIImages.IMG_TOOL_UPDATE_PROBLEMS, reg);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_CLOSE, reg);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_CLOSE_HOT, reg);
+		createImageDescriptor(ProvUIImages.IMG_WARNING, reg);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL, reg);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_REVERT, reg);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_UNINSTALL, reg);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
index aa6578d..d4f637b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
@@ -40,6 +40,7 @@ public class ProvUIImages {
 	public final static String IMG_UPDATED_IU = "obj/iu_update_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_PROFILE = "obj/profile_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_CATEGORY = "obj/category_obj.gif"; //$NON-NLS-1$
+	public final static String IMG_WARNING = "obj/element_warning_obj.gif"; //$NON-NLS-1$
 	// tools
 	public final static String IMG_TOOL_UPDATE = "tool/update.gif"; //$NON-NLS-1$
 	public final static String IMG_TOOL_UPDATE_PROBLEMS = "tool/update_problems.gif"; //$NON-NLS-1$
commit 50c59de9ef69c1ae296cb2fbcb94c46ce974b81e
Author: Susan Franklin <sfranklin>
Date:   Tue Mar 24 20:48:54 2009 +0000

    Bug 258105 - [ui] Provide explanation if when filtering causes empty available info

1	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
15	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
1	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
-	-	bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif
0	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
11	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
16	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
11	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
68	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/EmptyElementExplanation.java
9	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
1	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
60	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
6	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
4	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java
8	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
0	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
43	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
10	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
14	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ColocatedRepositoryManipulator.java
20	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
16	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryManipulator.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
index 1f35ea5..27c159f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
@@ -25,6 +25,7 @@ public class ProvAdminUIMessages extends NLS {
 		NLS.initializeMessages(BUNDLE_NAME, ProvAdminUIMessages.class);
 	}
 	public static String AddArtifactRepositoryDialog_DuplicateURL;
+	public static String AddArtifactRepositoryDialog_ManipulateRepositoryInstruction;
 	public static String AddArtifactRepositoryDialog_OperationLabel;
 	public static String AddProfileDialog_Title;
 	public static String AddMetadataRepositoryDialog_OperationLabel;
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
index be1d9b7..c452a59 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
@@ -94,6 +94,21 @@ public class AddArtifactRepositoryDialog extends AddRepositoryDialog {
 			}
 		}
 
+		/* (non-Javadoc)
+		 * @see org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryManipulator#getManipulatorInstructionString()
+		 */
+		public String getManipulatorInstructionString() {
+			// We don't have a manipulator
+			return null;
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryManipulator#getSiteNotFoundCorrectionString()
+		 */
+		public String getRepositoryNotFoundInstructionString() {
+			return ProvAdminUIMessages.AddArtifactRepositoryDialog_ManipulateRepositoryInstruction;
+		}
+
 	}
 
 	RepositoryManipulator manipulator;
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
index 6d2546e..ee6d78a 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
@@ -19,6 +19,7 @@ AddProfileDialog_Title=Add Profile
 AddProfileDialog_OperationLabel=Add Profile
 AddMetadataRepositoryDialog_OperationLabel=Add Metadata Repository
 AddArtifactRepositoryDialog_DuplicateURL=Duplicate URL
+AddArtifactRepositoryDialog_ManipulateRepositoryInstruction=You can add and remove artifact repositories in the Artifact Repositories view.
 AddArtifactRepositoryDialog_OperationLabel=Add Artifact Repository
 MetadataRepositoriesView_AddRepositoryLabel=Add repository...
 MetadataRepositoriesView_AddRepositoryTooltip=Add a new metadata repository
diff --git a/bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif b/bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif
deleted file mode 100644
index 8e054d0..0000000
Binary files a/bundles/org.eclipse.equinox.p2.ui/icons/obj/element_warning_obj.gif and /dev/null differ
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
index 6dd46f2..651d685 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
@@ -174,7 +174,6 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		createImageDescriptor(ProvUIImages.IMG_TOOL_UPDATE_PROBLEMS, reg);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_CLOSE, reg);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_CLOSE_HOT, reg);
-		createImageDescriptor(ProvUIImages.IMG_WARNING, reg);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL, reg);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_REVERT, reg);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_UNINSTALL, reg);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index a8834fe..006a79f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -161,6 +161,10 @@ public class ProvUIMessages extends NLS {
 	public static String AddRepositoryDialog_Title;
 	public static String AvailableIUElement_ProfileNotFound;
 	public static String AvailableIUGroup_LoadingRepository;
+	public static String AvailableIUGroup_NoSitesConfiguredDescription;
+	public static String AvailableIUGroup_NoSitesConfiguredExplanation;
+	public static String ColocatedRepositoryManipulator_NoContentExplanation;
+	public static String AvailableIUGroup_NoSitesExplanation;
 	public static String AvailableIUsPage_AddButton;
 	public static String AvailableIUsPage_AllSites;
 	public static String AvailableIUsPage_Description;
@@ -177,6 +181,8 @@ public class ProvUIMessages extends NLS {
 	public static String AvailableIUsPage_SelectASite;
 	public static String AvailableIUsPage_ShowLatestVersions;
 	public static String AvailableIUsPage_Title;
+	public static String AvailableIUWrapper_AllAreInstalled;
+	public static String IUViewQueryContext_AllAreInstalledDescription;
 	public static String DefaultQueryProvider_ErrorRetrievingProfile;
 	public static String DeferredFetchFilteredTree_RetrievingList;
 	public static String ElementUtils_UpdateJobTitle;
@@ -219,6 +225,11 @@ public class ProvUIMessages extends NLS {
 	public static String ProvUIActivator_ExceptionDuringProfileChange;
 	public static String ProvUILicenseManager_ParsingError;
 	public static String OptionalPlatformRestartMessage;
+	public static String IUViewQueryContext_NoCategorizedItemsDescription;
+	public static String QueriedElementWrapper_NoCategorizedItemsExplanation;
+	public static String QueriedElementWrapper_NoItemsExplanation;
+	public static String QueriedElementWrapper_SiteNotFound;
+	public static String ColocatedRepositoryManipulator_SiteNotFoundDescription;
 	public static String QueryableArtifactRepositoryManager_RepositoryQueryProgress;
 	public static String QueryableMetadataRepositoryManager_LoadRepositoryProgress;
 	public static String QueryableMetadataRepositoryManager_MultipleRepositoriesNotFound;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index 8e2c594..81de4a1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -18,6 +18,7 @@ import java.net.URISyntaxException;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
+import org.eclipse.equinox.internal.p2.ui.model.EmptyElementExplanation;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.*;
@@ -366,8 +367,10 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		queryContext.setShowLatestVersionsOnly(showLatestVersionsCheckbox.getSelection());
 		if (hideInstalledCheckbox.getSelection())
 			queryContext.hideAlreadyInstalled(profileId);
-		else
+		else {
 			queryContext.showAlreadyInstalled();
+			queryContext.setInstalledProfileId(profileId);
+		}
 		if (useCategoriesCheckbox.getSelection())
 			queryContext.setViewType(IUViewQueryContext.AVAILABLE_VIEW_BY_CATEGORY);
 		else
@@ -412,7 +415,7 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		hideInstalledCheckbox.setSelection(queryContext.getHideAlreadyInstalled());
 		showLatestVersionsCheckbox.setSelection(queryContext.getShowLatestVersionsOnly());
 		useCategoriesCheckbox.setSelection(queryContext.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_BY_CATEGORY);
-		availableIUGroup.updateTreeColumns();
+		availableIUGroup.updateAvailableViewState();
 		if (initialSelections != null)
 			availableIUGroup.setChecked(initialSelections);
 
@@ -514,6 +517,17 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 	}
 
 	void updateDetails() {
+		// First look for an empty explanation.
+		Object[] elements = ((IStructuredSelection) availableIUGroup.getStructuredViewer().getSelection()).toArray();
+		if (elements.length == 1 && elements[0] instanceof EmptyElementExplanation) {
+			String description = ((EmptyElementExplanation) elements[0]).getDescription();
+			if (description != null) {
+				detailsArea.setText(description);
+				return;
+			}
+		}
+
+		// Now look for IU's
 		IInstallableUnit[] selected = getSelectedIUs();
 		if (selected.length == 1) {
 			StringBuffer result = new StringBuffer();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 3dbe874..9ed1f56 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -196,6 +196,10 @@ Would you like to restart now?
 ApplyProfileChangesDialog_ApplyChanges=Apply Changes
 AvailableIUElement_ProfileNotFound=Could not find profile to use for size computation.
 AvailableIUGroup_LoadingRepository=Loading {0}
+AvailableIUGroup_NoSitesConfiguredDescription=This product was not configured with any software sites.  Contact your systems administrator.
+AvailableIUGroup_NoSitesConfiguredExplanation=There are no software sites available.
+ColocatedRepositoryManipulator_NoContentExplanation=You may select a site in the combo box at the top.  You may also type or paste a site name into the combo box and press Enter.  You may also drag a site URL into the combo box or software list.
+AvailableIUGroup_NoSitesExplanation=There is no site selected.
 AvailableIUsPage_AddButton=&Add...
 AvailableIUsPage_AllSites=--All Available Sites--
 AvailableIUsPage_Description=Check the items that you wish to install
@@ -213,6 +217,8 @@ AvailableIUsPage_ResolveAllCheckbox=&Contact all update sites during install to
 AvailableIUsPage_SelectASite=Select a site or enter the location of a site.
 AvailableIUsPage_ShowLatestVersions=Show only the &latest versions of available software
 AvailableIUsPage_Title=Available Software
+AvailableIUWrapper_AllAreInstalled=All items are installed
+IUViewQueryContext_AllAreInstalledDescription=You can uncheck the 'Hide items that are already installed' check box to see all items.
 DefaultQueryProvider_ErrorRetrievingProfile=Error retrieving profile {0}
 DeferredFetchFilteredTree_RetrievingList=Retrieving List
 ElementUtils_UpdateJobTitle=Updating Repository Information
@@ -220,6 +226,11 @@ Label_Profiles=All Software Profiles
 Label_Repositories=Known Repositories
 MetadataRepositoryElement_NotFound=This repository is currently not available.
 MetadataRepositoryElement_RepositoryLoadError=Error loading repository {0}
+IUViewQueryContext_NoCategorizedItemsDescription=You can uncheck the 'Group items by category' check box to see items without categories.
+QueriedElementWrapper_NoCategorizedItemsExplanation=There are no categorized items
+QueriedElementWrapper_NoItemsExplanation=There are no items available
+QueriedElementWrapper_SiteNotFound=Could not find {0}
+ColocatedRepositoryManipulator_SiteNotFoundDescription=The site's location may be entered incorrectly, or the site might be offline.  You can correct the location in the 'Available Software Sites' preferences by removing the site and adding it with the proper location.  If the site name appears to be correct, you can test the connection in the 'Available Software Sites' preferences.  The site may be unreachable, or you may have a problem with your network connection.
 QueryableArtifactRepositoryManager_RepositoryQueryProgress=Getting artifact repositories
 QueryableMetadataRepositoryManager_LoadRepositoryProgress=Contacting {0}
 QueryableMetadataRepositoryManager_MultipleRepositoriesNotFound=Some repositories could not be found.  Check the details.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/EmptyElementExplanation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/EmptyElementExplanation.java
new file mode 100644
index 0000000..eab74a0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/EmptyElementExplanation.java
@@ -0,0 +1,68 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.model;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.jface.dialogs.Dialog;
+
+/**
+ * Element class representing an explanation for no children appearing
+ * beneath an element.
+ * 
+ * @since 3.5
+ */
+public class EmptyElementExplanation extends ProvElement {
+
+	String explanation;
+	int severity;
+	String description;
+
+	/**
+	 * Create an empty element explanation
+	 * @param parent the parent of this element
+	 * @param severity the severity of the explanation {@link IStatus.INFO}, 
+	 * @param explanation
+	 */
+	public EmptyElementExplanation(Object parent, int severity, String explanation, String description) {
+		super(parent);
+		this.explanation = explanation;
+		this.severity = severity;
+		this.description = description;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.ProvElement#getImageID(java.lang.Object)
+	 */
+	protected String getImageId(Object obj) {
+		if (severity == IStatus.ERROR)
+			return Dialog.DLG_IMG_MESSAGE_ERROR;
+		if (severity == IStatus.WARNING)
+			return Dialog.DLG_IMG_MESSAGE_WARNING;
+		return Dialog.DLG_IMG_MESSAGE_INFO;
+	}
+
+	public String getLabel(Object o) {
+		return explanation;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getChildren(java.lang.Object)
+	 */
+	public Object[] getChildren(Object o) {
+		return new Object[0];
+	}
+
+	public String getDescription() {
+		return description;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
index 804b96b..c03f2ca 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
@@ -15,6 +15,7 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.ui.model.IWorkbenchAdapter;
 import org.eclipse.ui.progress.IDeferredWorkbenchAdapter;
@@ -66,7 +67,10 @@ public abstract class ProvElement implements IWorkbenchAdapter, IAdaptable {
 		if (id == null) {
 			return null;
 		}
-		return ProvUIImages.getImageDescriptor(id);
+		ImageDescriptor desc = ProvUIImages.getImageDescriptor(id);
+		if (desc == null)
+			desc = JFaceResources.getImageRegistry().getDescriptor(id);
+		return desc;
 	}
 
 	/**
@@ -83,7 +87,10 @@ public abstract class ProvElement implements IWorkbenchAdapter, IAdaptable {
 		if (id == null) {
 			return null;
 		}
-		return ProvUIImages.getImage(id);
+		Image img = ProvUIImages.getImage(id);
+		if (img == null)
+			img = JFaceResources.getImageRegistry().get(id);
+		return img;
 	}
 
 	protected void handleException(Exception e, String message) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
index 2abcc07..08f149a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
@@ -89,7 +89,7 @@ public abstract class QueriedElement extends ProvElement {
 		if (getQueryProvider() == null)
 			return new Object[0];
 		ElementQueryDescriptor queryDescriptor = getQueryProvider().getQueryDescriptor(this);
-		if (queryDescriptor == null || !isSufficientForQuery(queryDescriptor))
+		if (queryDescriptor == null)
 			return new Object[0];
 		Collection results = queryDescriptor.performQuery(monitor);
 		cachedChildren = Collections.unmodifiableCollection(results);
@@ -148,17 +148,6 @@ public abstract class QueriedElement extends ProvElement {
 		return queryable != null;
 	}
 
-	/**
-	 * Return whether the query descriptor is sufficient for this element to complete the query.
-	 * The default implementation requires the descriptor to be complete.  Subclasses may override.
-	 * 
-	 * @param queryDescriptor the query descriptor in question
-	 * @return <code>true</code> if the descriptor is sufficient, <code>false</code> if it is not.
-	 */
-	protected boolean isSufficientForQuery(ElementQueryDescriptor queryDescriptor) {
-		return queryDescriptor.isComplete();
-	}
-
 	public Object[] getCachedChildren() {
 		return cachedChildren.toArray();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
index 3ceed37..0024a84 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
@@ -11,8 +11,18 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.model;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.URIUtil;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.ElementWrapper;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.osgi.util.NLS;
 
 /**
  * A wrapper that assigns a query provider and the queryable
@@ -25,6 +35,9 @@ public abstract class QueriedElementWrapper extends ElementWrapper {
 
 	protected IQueryable queryable;
 	protected Object parent;
+	protected String emptyExplanationString;
+	protected int emptyExplanationSeverity;
+	protected String emptyExplanationDescription;
 
 	public QueriedElementWrapper(IQueryable queryable, Object parent) {
 		this.queryable = queryable;
@@ -43,4 +56,51 @@ public abstract class QueriedElementWrapper extends ElementWrapper {
 		}
 		return item;
 	}
+
+	public Collection getElements(Collector collector) {
+		// Any previously stored explanations are not valid.
+		emptyExplanationString = null;
+		emptyExplanationSeverity = IStatus.INFO;
+		emptyExplanationDescription = null;
+		if (collector.isEmpty()) {
+			// Before we are even filtering out items, there is nothing in the collection.
+			// All we can do is look for the most common reasons and guess.
+			if (parent instanceof MetadataRepositoryElement) {
+				MetadataRepositoryElement repo = (MetadataRepositoryElement) parent;
+				if (ProvUI.hasNotFoundStatusBeenReported(repo.getLocation())) {
+					String description = null;
+					if (Policy.getDefault().getRepositoryManipulator() != null)
+						description = Policy.getDefault().getRepositoryManipulator().getRepositoryNotFoundInstructionString();
+					return emptyExplanation(IStatus.ERROR, NLS.bind(ProvUIMessages.QueriedElementWrapper_SiteNotFound, URIUtil.toUnencodedString(repo.getLocation())), description);
+				}
+			}
+			if (parent instanceof QueriedElement) {
+				QueriedElement element = (QueriedElement) parent;
+				IUViewQueryContext context = element.getQueryContext();
+				if (context == null)
+					context = element.getPolicy().getQueryContext();
+				if (context != null && context.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_BY_CATEGORY && context.getUseCategories()) {
+					return emptyExplanation(IStatus.INFO, ProvUIMessages.QueriedElementWrapper_NoCategorizedItemsExplanation, context.getUsingCategoriesDescription());
+				}
+				return emptyExplanation(IStatus.INFO, ProvUIMessages.QueriedElementWrapper_NoItemsExplanation, null);
+			}
+		}
+		Collection elements = super.getElements(collector);
+		// We had elements but now they have been filtered out.  Hopefully
+		// we can explain this.
+		if (elements.isEmpty()) {
+			if (emptyExplanationString != null)
+				return emptyExplanation(emptyExplanationSeverity, emptyExplanationString, emptyExplanationDescription);
+			// We filtered out content but never explained it.  Ideally this doesn't happen if
+			// all wrappers explain any filtering.
+			return emptyExplanation(emptyExplanationSeverity, ProvUIMessages.QueriedElementWrapper_NoItemsExplanation, null);
+		}
+		return elements;
+	}
+
+	Collection emptyExplanation(int severity, String explanationString, String explanationDescription) {
+		ArrayList collection = new ArrayList(1);
+		collection.add(new EmptyElementExplanation(parent, severity, explanationString, explanationDescription));
+		return collection;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
index 1f462f0..30489f6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
@@ -11,7 +11,10 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.query;
 
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+
 import java.util.Iterator;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -64,6 +67,9 @@ public class AvailableIUWrapper extends QueriedElementWrapper {
 
 		// if we are hiding, hide anything that is the same iu or older
 		if (hideInstalledIUs && cache.isInstalled && !cache.isUpdate) {
+			emptyExplanationString = ProvUIMessages.AvailableIUWrapper_AllAreInstalled;
+			emptyExplanationSeverity = IStatus.INFO;
+			emptyExplanationDescription = ProvUIMessages.IUViewQueryContext_AllAreInstalledDescription;
 			return false;
 		}
 		return true;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java
index f931df2..9f742b3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java
@@ -60,9 +60,11 @@ public class CategoryElementWrapper extends QueriedElementWrapper {
 	}
 
 	public Collection getElements(Collector collector) {
-		super.getElements(collector);
+		if (collector.isEmpty())
+			return super.getElements(collector);
+		Collection results = super.getElements(collector);
 		cleanList();
-		return getCollection();
+		return results;
 	}
 
 	protected Object wrap(Object item) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
index d73c2a2..2a2f390 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
@@ -48,16 +48,19 @@ public class ElementQueryDescriptor {
 		this.wrapper = wrapper;
 	}
 
-	public boolean isComplete() {
-		return query != null && collector != null && queryable != null;
-	}
-
 	/**
 	 * Performs the query returning a collection of results.
 	 * @param monitor
 	 */
 	public Collection performQuery(IProgressMonitor monitor) {
-		Collector results = this.queryable.query(this.query, this.collector, monitor);
+		Collector results = this.collector;
+		// If the query is completely described, perform it
+		if (query != null && collector != null && queryable != null)
+			results = this.queryable.query(this.query, this.collector, monitor);
+		else if (results == null)
+			results = new Collector();
+		// Let the wrapper analyze the results, even if we didn't perform the query.
+		// This allows the wrapper to modify the results with explanations.
 		if (wrapper != null)
 			return wrapper.getElements(results);
 		return results.toCollection();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
index d4f637b..aa6578d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUIImages.java
@@ -40,7 +40,6 @@ public class ProvUIImages {
 	public final static String IMG_UPDATED_IU = "obj/iu_update_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_PROFILE = "obj/profile_obj.gif"; //$NON-NLS-1$
 	public final static String IMG_CATEGORY = "obj/category_obj.gif"; //$NON-NLS-1$
-	public final static String IMG_WARNING = "obj/element_warning_obj.gif"; //$NON-NLS-1$
 	// tools
 	public final static String IMG_TOOL_UPDATE = "tool/update.gif"; //$NON-NLS-1$
 	public final static String IMG_TOOL_UPDATE_PROBLEMS = "tool/update_problems.gif"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 1756586..1396d55 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -11,12 +11,13 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import java.net.URI;
+import java.util.ArrayList;
 import java.util.HashSet;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
-import org.eclipse.equinox.internal.p2.ui.model.MetadataRepositoryElement;
+import org.eclipse.equinox.internal.p2.ui.model.*;
 import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryContentProvider;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -158,9 +159,6 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		// after content has been retrieved.
 		filteredTree.contentProviderSet(contentProvider);
 
-		// Input last.
-		availableIUViewer.setInput(getNewInput());
-
 		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY) {
 			protected void repositoryAdded(final RepositoryEvent event) {
 				// Only make the repo visible if the UI triggered this event.
@@ -181,7 +179,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 				if (workbench.isClosing())
 					return;
 				if (tree != null && !tree.isDisposed()) {
-					treeViewer.setInput(getNewInput());
+					updateAvailableViewState();
 				}
 
 			}
@@ -193,6 +191,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 				ProvUIActivator.getDefault().removeProvisioningListener(listener);
 			}
 		});
+		updateAvailableViewState();
 		return availableIUViewer;
 	}
 
@@ -211,9 +210,32 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	Object getNewInput() {
 		if (repositoryFilter != null) {
 			return new MetadataRepositoryElement(queryContext, getPolicy(), repositoryFilter, true);
-		} else if (filterConstant == AVAILABLE_NONE)
-			return new Object();
-		else {
+		} else if (filterConstant == AVAILABLE_NONE) {
+			// Dummy object that explains empty site list
+			return new ProvElement(null) {
+				public Object[] getChildren(Object o) {
+					String description;
+					String name;
+					int severity;
+					if (getPolicy().getRepositoryManipulator() == null) {
+						// shouldn't get here ideally.  No sites and no way to add.
+						severity = IStatus.ERROR;
+						name = ProvUIMessages.AvailableIUGroup_NoSitesConfiguredExplanation;
+						description = ProvUIMessages.AvailableIUGroup_NoSitesConfiguredDescription;
+					} else {
+						severity = IStatus.INFO;
+						name = ProvUIMessages.AvailableIUGroup_NoSitesExplanation;
+						description = ProvUIMessages.ColocatedRepositoryManipulator_NoContentExplanation;
+					}
+					return new Object[] {new EmptyElementExplanation(null, severity, name, description)};
+				}
+
+				public String getLabel(Object o) {
+					// Label not needed for input
+					return null;
+				}
+			};
+		} else {
 			queryableManager.setQueryContext(queryContext);
 			return new MetadataRepositories(queryContext, getPolicy(), queryableManager);
 		}
@@ -255,9 +277,14 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		return super.getSelectedIUs();
 	}
 
-	// overridden for visibility
+	// overridden to weed out non-IU elements, such as repositories or empty explanations
 	public Object[] getSelectedIUElements() {
-		return super.getSelectedIUElements();
+		Object[] elements = ((IStructuredSelection) viewer.getSelection()).toArray();
+		ArrayList list = new ArrayList(elements.length);
+		for (int i = 0; i < elements.length; i++)
+			if (ElementUtils.getIU(elements[i]) != null)
+				list.add(elements[i]);
+		return list.toArray();
 	}
 
 	public CheckboxTreeViewer getCheckboxTreeViewer() {
@@ -294,6 +321,10 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 * Make the repository with the specified location visible in the viewer.
 	 */
 	void makeRepositoryVisible(final URI location) {
+		// If we are viewing by anything other than site, there is no specific way
+		// to make a repo visible. 
+		if (!(queryContext.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_BY_REPO))
+			return;
 		// First reset the input so that the new repo shows up
 		display.asyncExec(new Runnable() {
 			public void run() {
@@ -303,7 +334,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 				if (workbench.isClosing())
 					return;
 				if (tree != null && !tree.isDisposed()) {
-					treeViewer.setInput(getNewInput());
+					updateAvailableViewState();
 				}
 			}
 		});
@@ -377,7 +408,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		});
 	}
 
-	public void updateTreeColumns() {
+	void updateTreeColumns() {
 		if (getTree() == null || getTree().isDisposed())
 			return;
 		TreeColumn[] columns = getTree().getColumns();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
index ea66a0e..32d67f6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulationPage.java
@@ -780,6 +780,16 @@ public class RepositoryManipulationPage extends PreferencePage implements IWorkb
 					return true;
 				}
 
+				public String getManipulatorInstructionString() {
+					// we are the manipulator
+					return null;
+				}
+
+				public String getRepositoryNotFoundInstructionString() {
+					// we are in the manipulator, no further instructions
+					return null;
+				}
+
 			};
 		return localCacheRepoManipulator;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ColocatedRepositoryManipulator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ColocatedRepositoryManipulator.java
index ee1cd36..bff2194 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ColocatedRepositoryManipulator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ColocatedRepositoryManipulator.java
@@ -149,4 +149,18 @@ public class ColocatedRepositoryManipulator extends RepositoryManipulator {
 
 	}
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryManipulator#getSiteNotFoundCorrectionString()
+	 */
+	public String getRepositoryNotFoundInstructionString() {
+		return ProvUIMessages.ColocatedRepositoryManipulator_SiteNotFoundDescription;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryManipulator#getManipulatorInstructionString()
+	 */
+	public String getManipulatorInstructionString() {
+		return ProvUIMessages.ColocatedRepositoryManipulator_NoContentExplanation;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
index 8e8118f..9e29b50 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.policy;
 
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 
@@ -55,6 +56,9 @@ public class IUViewQueryContext {
 	// Installed view settings
 	private String visibleInstalledIUProperty = IInstallableUnit.PROP_PROFILE_ROOT_IU;
 
+	private String hidingInstalledDescription = ProvUIMessages.IUViewQueryContext_AllAreInstalledDescription;
+	private String groupingCategoriesDescription = ProvUIMessages.IUViewQueryContext_NoCategorizedItemsDescription;
+
 	public IUViewQueryContext(int viewType) {
 		this.view = viewType;
 	}
@@ -168,4 +172,20 @@ public class IUViewQueryContext {
 	public void setShowProvisioningPlanChildren(boolean showChildren) {
 		showProvisioningPlanChildren = showChildren;
 	}
+
+	public String getHidingInstalledDescription() {
+		return hidingInstalledDescription;
+	}
+
+	public void setHidingInstalledDescription(String description) {
+		hidingInstalledDescription = description;
+	}
+
+	public String getUsingCategoriesDescription() {
+		return groupingCategoriesDescription;
+	}
+
+	public void setUsingCategoriesDescription(String description) {
+		groupingCategoriesDescription = description;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryManipulator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryManipulator.java
index a00ee42..895e25f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryManipulator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/RepositoryManipulator.java
@@ -81,4 +81,20 @@ public abstract class RepositoryManipulator {
 	 */
 
 	public abstract RepositoryLocationValidator getRepositoryLocationValidator(Shell shell);
+
+	/**
+	 * Return a string giving the user further instruction when a site was found.  This
+	 * is a textual description that can tell the user why a site might be empty, or
+	 * telling the user to use the manipulator (ie, go to the preferences page).
+	 */
+	public abstract String getRepositoryNotFoundInstructionString();
+
+	/**
+	 * Return a string giving the user further instruction about how to manipulate
+	 * repositories.  The {@link #getManipulatorLinkLabel()} and {@link #getManipulatorButtonLabel()}
+	 * are used to label the link and/or button used to launch the UI for adding and removing
+	 * repositories.  This string is a textual description (without a link) suggesting ways
+	 * that a user might manipulate repositories.
+	 */
+	public abstract String getManipulatorInstructionString();
 }
commit c9b81b37dea7290deb14700d85451ae0c50d42d5
Author: Susan Franklin <sfranklin>
Date:   Wed Mar 25 23:03:11 2009 +0000

    Bug 258105 - [ui] Provide explanation if when filtering causes empty available info

11	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
index 0024a84..6b6a654 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
@@ -11,8 +11,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.model;
 
-import java.util.ArrayList;
-import java.util.Collection;
+import java.util.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.URIUtil;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
@@ -64,7 +63,9 @@ public abstract class QueriedElementWrapper extends ElementWrapper {
 		emptyExplanationDescription = null;
 		if (collector.isEmpty()) {
 			// Before we are even filtering out items, there is nothing in the collection.
-			// All we can do is look for the most common reasons and guess.
+			// All we can do is look for the most common reasons and guess.  If the collection
+			// is empty and the parent is an IU, then being empty is not a big deal, it means
+			// we are in drilldown.
 			if (parent instanceof MetadataRepositoryElement) {
 				MetadataRepositoryElement repo = (MetadataRepositoryElement) parent;
 				if (ProvUI.hasNotFoundStatusBeenReported(repo.getLocation())) {
@@ -79,11 +80,15 @@ public abstract class QueriedElementWrapper extends ElementWrapper {
 				IUViewQueryContext context = element.getQueryContext();
 				if (context == null)
 					context = element.getPolicy().getQueryContext();
-				if (context != null && context.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_BY_CATEGORY && context.getUseCategories()) {
-					return emptyExplanation(IStatus.INFO, ProvUIMessages.QueriedElementWrapper_NoCategorizedItemsExplanation, context.getUsingCategoriesDescription());
+				if (!(parent instanceof IIUElement)) {
+					if (context != null && context.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_BY_CATEGORY && context.getUseCategories()) {
+						return emptyExplanation(IStatus.INFO, ProvUIMessages.QueriedElementWrapper_NoCategorizedItemsExplanation, context.getUsingCategoriesDescription());
+					}
+					return emptyExplanation(IStatus.INFO, ProvUIMessages.QueriedElementWrapper_NoItemsExplanation, null);
 				}
-				return emptyExplanation(IStatus.INFO, ProvUIMessages.QueriedElementWrapper_NoItemsExplanation, null);
 			}
+			// It is empty, but the parent is an IU, so this could be a drilldown.
+			return Collections.EMPTY_LIST;
 		}
 		Collection elements = super.getElements(collector);
 		// We had elements but now they have been filtered out.  Hopefully

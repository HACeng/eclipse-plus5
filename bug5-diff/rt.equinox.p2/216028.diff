commit 7bd65dbfc9043c5ef857603c0485d3ad3b3e4103
Author: Susan Franklin <sfranklin>
Date:   Mon Apr 7 22:53:55 2008 +0000

    Bug 216028 - [ui] Available IU view enhancements

6	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
29	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryAction.java
48	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java
14	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
22	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
49	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java
0	223	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
400	58	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
13	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
9	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
10	25	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CachedQueryElement.java
0	10	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
21	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
106	10	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
24	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IViewMenuProvider.java
9	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
0	397	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateAndInstallGroup.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUVersionsElement.java
2	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
12	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
20	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
30	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryContext.java
83	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index ecee68b..7752e9f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -26,6 +26,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveMetadataRepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.action.IMenuManager;
 import org.eclipse.jface.action.Separator;
@@ -56,7 +57,11 @@ public class MetadataRepositoriesView extends RepositoriesView {
 	protected Object getInput() {
 		MetadataRepositories input = new MetadataRepositories();
 		input.setQueryProvider(ProvAdminUIActivator.getDefault().getQueryProvider());
-		input.setQueryType(IQueryProvider.METADATA_REPOS);
+		input.setQueryContext(new QueryContext() {
+			public int getQueryType() {
+				return IQueryProvider.METADATA_REPOS;
+			}
+		});
 		return input;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryAction.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryAction.java
new file mode 100644
index 0000000..fb3465d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryAction.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.ProvisioningAction;
+import org.eclipse.jface.viewers.ISelectionProvider;
+import org.eclipse.swt.widgets.Shell;
+
+public class AddColocatedRepositoryAction extends ProvisioningAction {
+
+	public AddColocatedRepositoryAction(ISelectionProvider selectionProvider, Shell shell) {
+		super("Add Site...", selectionProvider, shell);
+		setToolTipText("Add a site used to access the available software");
+	}
+
+	public void run() {
+		new AddColocatedRepositoryDialog(getShell(), IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM).open();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java
new file mode 100644
index 0000000..21cfdb0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java
@@ -0,0 +1,48 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
+
+/**
+ * AvailableIUViewQueryContext defines the different ways
+ * available IUs can be viewed in the SDK UI.
+ */
+public class AvailableIUViewQueryContext extends QueryContext {
+	public static final int VIEW_BY_CATEGORY = 1;
+	public static final int VIEW_BY_REPO = 2;
+	public static final int VIEW_FLAT = 3;
+
+	// Default to repo as this provides the fastest information
+	private int view = VIEW_BY_REPO;
+
+	public AvailableIUViewQueryContext(int viewType) {
+		this.view = viewType;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext#getQueryType()
+	 */
+	public int getQueryType() {
+		if (view == VIEW_BY_REPO)
+			return IQueryProvider.METADATA_REPOS;
+		return IQueryProvider.AVAILABLE_IUS;
+	}
+
+	public int getViewType() {
+		return view;
+	}
+
+	public void setViewType(int viewType) {
+		view = viewType;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index 807c097..5b8d1c8 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -56,15 +56,27 @@ public class ProvSDKMessages extends NLS {
 	public static String RepositoryManipulationDialog_RemoveButton;
 	public static String RepositoryManipulationDialog_RemoveOperationLabel;
 	public static String RepositoryManipulationDialog_UpdateSitesDialogTitle;
+	public static String UpdateAndInstallDialog_AccessibilityFilterDescription;
+	public static String UpdateAndInstallDialog_AddSiteButtonText;
 	public static String UpdateAndInstallDialog_AddSiteOperationlabel;
-	public static String UpdateAndInstallDialog_AvailableFeatures;
-	public static String UpdateAndInstallDialog_InstalledFeatures;
+	public static String UpdateAndInstallDialog_AvailableSoftware;
+	public static String UpdateAndInstallDialog_InstalledSoftware;
+
 	public static String UpdateAndInstallDialog_ManageSites;
 	public static String UpdateAndInstallDialog_AlertCheckbox;
 	public static String UpdateAndInstallDialog_PrefLink;
+	public static String UpdateAndInstallDialog_RemoveSiteButtonText;
 	public static String UpdateAndInstallDialog_RemoveSiteOperationLabel;
 	public static String UpdateAndInstallDialog_RevertActionLabel;
 	public static String UpdateAndInstallDialog_Title;
+	public static String UpdateAndInstallDialog_TypeFilterText;
+	public static String UpdateAndInstallDialog_Properties;
+	public static String UpdateAndInstallDialog_Refresh;
+
+	public static String UpdateAndInstallDialog_ViewByCategory;
+	public static String UpdateAndInstallDialog_ViewByMenuToolTip;
+	public static String UpdateAndInstallDialog_ViewByName;
+	public static String UpdateAndInstallDialog_ViewBySite;
 	public static String UpdateHandler_CannotLaunchUI;
 	public static String UpdateHandler_SDKUpdateUIMessageTitle;
 	public static String SchedulerStartup_day;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index 67ee15c..d8ca283 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -58,24 +58,46 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 					}
 				});
 			case IQueryProvider.AVAILABLE_IUS :
+
+				// Showing children of a rollback element
 				if (element instanceof RollbackRepositoryElement) {
 					Query profileIdQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfileId());
 					Query rollbackIUQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_PROFILE, Boolean.toString(true));
 					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), new RollbackIUCollector(this, ((RollbackRepositoryElement) element).getQueryable()));
 				}
+
 				Query groupQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_GROUP, Boolean.TRUE.toString());
 				Query categoryQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_CATEGORY, Boolean.toString(true));
+
+				// Showing child IU's of some repositories
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
 					if (metaRepos.getMetadataRepositories() != null)
 						queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
 					else
 						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+
+					if (metaRepos.getQueryContext() != null && metaRepos.getQueryContext() instanceof AvailableIUViewQueryContext) {
+						AvailableIUViewQueryContext context = (AvailableIUViewQueryContext) metaRepos.getQueryContext();
+						if (context.getViewType() == AvailableIUViewQueryContext.VIEW_FLAT) {
+							Collector collector;
+							if (showLatest)
+								collector = new LatestIUVersionElementCollector(this, queryable, true);
+							else
+								collector = new AvailableIUCollector(this, queryable, true);
+							return new ElementQueryDescriptor(queryable, groupQuery, collector);
+						}
+					}
+					// If there is no query context, assume by category
 					return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, true));
 				}
+
+				// Showing children of a repository
 				if (element instanceof MetadataRepositoryElement) {
 					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), true));
 				}
+
+				// Showing children of categories
 				// Must do this one before CategoryElement since it's a subclass
 				if (element instanceof UncategorizedCategoryElement) {
 					// Will have to look at all categories and groups and from there, figure out what's left
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index 4c78303..b2371e7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -37,7 +37,7 @@ import org.osgi.framework.ServiceReference;
  */
 public class ProvSDKUIActivator extends AbstractUIPlugin {
 
-	public static final boolean ANY_PROFILE = false;
+	public static final boolean ANY_PROFILE = true;
 	private static final String DEFAULT_PROFILE_ID = "DefaultProfile"; //$NON-NLS-1$
 	private static final String LICENSE_STORAGE = "licenses.xml"; //$NON-NLS-1$
 	private static ProvSDKUIActivator plugin;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java
new file mode 100644
index 0000000..db31590
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java
@@ -0,0 +1,49 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.ProvisioningAction;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveColocatedRepositoryOperation;
+import org.eclipse.jface.viewers.ISelectionProvider;
+import org.eclipse.jface.viewers.IStructuredSelection;
+import org.eclipse.swt.widgets.Shell;
+
+public class RemoveColocatedRepositoryAction extends ProvisioningAction {
+
+	public RemoveColocatedRepositoryAction(ISelectionProvider selectionProvider, Shell shell) {
+		super("Remove site...", selectionProvider, shell);
+		setToolTipText("Remove one or more sites used to access the available software");
+	}
+
+	public void run() {
+		RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvSDKMessages.RepositoryManipulationDialog_RemoveOperationLabel, getSelectedURLs(getStructuredSelection().toArray()));
+		ProvisioningOperationRunner.run(op, getShell());
+	}
+
+	private URL[] getSelectedURLs(Object[] selectionArray) {
+		List urls = new ArrayList();
+		for (int i = 0; i < selectionArray.length; i++) {
+			if (selectionArray[i] instanceof MetadataRepositoryElement)
+				urls.add(((MetadataRepositoryElement) selectionArray[i]).getLocation());
+		}
+		return (URL[]) urls.toArray(new URL[urls.size()]);
+	}
+
+	public void selectionChanged(IStructuredSelection selection) {
+		setEnabled(getSelectedURLs(selection.toArray()).length > 0);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
deleted file mode 100644
index 5309fb1..0000000
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
+++ /dev/null
@@ -1,223 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.sdk;
-
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.RepositoryManipulatorDropTarget;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositoryElement;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveColocatedRepositoryOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
-import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
-import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.dialogs.*;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.viewers.IStructuredSelection;
-import org.eclipse.jface.viewers.TableViewer;
-import org.eclipse.jface.window.SameShellProvider;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.dnd.*;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
-import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.dialogs.PropertyDialogAction;
-
-/**
- * Dialog that allows users to update, add, or remove repositories.
- * 
- * @since 3.4
- */
-public class RepositoryManipulationDialog extends TrayDialog {
-
-	private final static int WIDTH_IN_DLUS = 480;
-	private final static int HEIGHT_IN_DLUS = 240;
-	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
-
-	StructuredViewerProvisioningListener listener;
-	TableViewer repositoryViewer;
-	IRepositoryManipulator manipulator;
-
-	/**
-	 * Create an instance of this Dialog.
-	 * 
-	 */
-	public RepositoryManipulationDialog(Shell shell, IRepositoryManipulator manipulator) {
-		super(shell);
-		this.manipulator = manipulator;
-	}
-
-	protected void configureShell(Shell shell) {
-		shell.setText(ProvSDKMessages.RepositoryManipulationDialog_UpdateSitesDialogTitle);
-		super.configureShell(shell);
-	}
-
-	protected Control createDialogArea(Composite parent) {
-		Composite composite = new Composite(parent, SWT.NONE);
-		composite.setLayoutData(new GridData(GridData.FILL_BOTH));
-
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 2;
-		layout.marginWidth = convertHorizontalDLUsToPixels(2);
-		layout.marginHeight = convertVerticalDLUsToPixels(2);
-
-		composite.setLayout(layout);
-
-		// Table of available repositories
-		repositoryViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		setTableColumns(repositoryViewer.getTable());
-		repositoryViewer.setContentProvider(new RepositoryContentProvider(ProvSDKUIActivator.getDefault().getQueryProvider()));
-		repositoryViewer.setLabelProvider(new ProvElementLabelProvider());
-
-		// Input last
-		repositoryViewer.setInput(getInput());
-
-		DropTarget target = new DropTarget(repositoryViewer.getControl(), DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);
-		target.setTransfer(new Transfer[] {URLTransfer.getInstance(), FileTransfer.getInstance()});
-		target.addDropListener(new RepositoryManipulatorDropTarget(manipulator, repositoryViewer.getControl()));
-
-		GridData data = new GridData(GridData.FILL_BOTH);
-		data.grabExcessHorizontalSpace = true;
-		data.grabExcessVerticalSpace = true;
-		data.widthHint = convertHorizontalDLUsToPixels(WIDTH_IN_DLUS);
-		data.heightHint = convertVerticalDLUsToPixels(HEIGHT_IN_DLUS);
-		repositoryViewer.getControl().setLayoutData(data);
-
-		// Vertical buttons
-		Composite verticalButtonBar = (Composite) createVerticalButtonBar(composite);
-		data = new GridData(GridData.FILL_VERTICAL);
-		verticalButtonBar.setLayoutData(data);
-		listener = new StructuredViewerProvisioningListener(repositoryViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, ProvSDKUIActivator.getDefault().getQueryProvider());
-		ProvUI.addProvisioningListener(listener);
-		composite.addDisposeListener(new DisposeListener() {
-			public void widgetDisposed(DisposeEvent event) {
-				ProvUI.removeProvisioningListener(listener);
-			}
-		});
-		Dialog.applyDialogFont(composite);
-		return composite;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see org.eclipse.jface.dialogs.Dialog#isResizable()
-	 */
-	protected boolean isResizable() {
-		return true;
-	}
-
-	private Button createVerticalButton(Composite parent, String label, boolean defaultButton) {
-		Button button = new Button(parent, SWT.PUSH);
-		button.setText(label);
-
-		GridData data = setVerticalButtonLayoutData(button);
-		data.horizontalAlignment = GridData.FILL;
-
-		button.addListener(SWT.Selection, new Listener() {
-			public void handleEvent(Event event) {
-				verticalButtonPressed(event);
-			}
-		});
-		button.setToolTipText(label);
-		if (defaultButton) {
-			Shell shell = parent.getShell();
-			if (shell != null) {
-				shell.setDefaultButton(button);
-			}
-		}
-		return button;
-	}
-
-	void verticalButtonPressed(Event event) {
-		Object data = event.widget.getData(BUTTONACTION);
-		if (data == null || !(data instanceof IAction)) {
-			return;
-		}
-		IAction action = (IAction) data;
-		action.runWithEvent(event);
-	}
-
-	private GridData setVerticalButtonLayoutData(Button button) {
-		GridData data = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
-		int widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);
-		Point minSize = button.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);
-		data.widthHint = Math.max(widthHint, minSize.x);
-		button.setLayoutData(data);
-		return data;
-	}
-
-	private void setTableColumns(Table table) {
-		table.setHeaderVisible(true);
-		String[] columnHeaders = {ProvSDKMessages.RepositoryManipulationDialog_NameColumnHeader, ProvSDKMessages.RepositoryManipulationDialog_LocationColumnHeader};
-		for (int i = 0; i < columnHeaders.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.NONE, i);
-			tc.setResizable(true);
-			tc.setText(columnHeaders[i]);
-			tc.setWidth(convertHorizontalDLUsToPixels(IDialogConstants.ENTRY_FIELD_WIDTH));
-		}
-	}
-
-	private Control createVerticalButtonBar(Composite parent) {
-		// Create composite.
-		Composite composite = new Composite(parent, SWT.NULL);
-
-		// create a layout with spacing and margins appropriate for the font
-		// size.
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 1;
-		layout.marginWidth = 5;
-		layout.marginHeight = 0;
-		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
-		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
-		composite.setLayout(layout);
-
-		// Add the buttons to the button bar.
-		Button button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_PropertiesButton, false);
-		button.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), repositoryViewer));
-		button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_AddButton, false);
-		button.setData(BUTTONACTION, new Action() {
-			public void runWithEvent(Event event) {
-				new AddColocatedRepositoryDialog(getShell(), IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM).open();
-			}
-		});
-		button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_RemoveButton, false);
-		button.setData(BUTTONACTION, new Action() {
-			public void runWithEvent(Event event) {
-				Object[] selection = ((IStructuredSelection) repositoryViewer.getSelection()).toArray();
-				List urls = new ArrayList();
-				for (int i = 0; i < selection.length; i++) {
-					if (selection[i] instanceof MetadataRepositoryElement)
-						urls.add(((MetadataRepositoryElement) selection[i]).getLocation());
-				}
-				if (urls.size() > 0) {
-					RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvSDKMessages.RepositoryManipulationDialog_RemoveOperationLabel, (URL[]) urls.toArray(new URL[urls.size()]));
-					ProvisioningOperationRunner.run(op, getShell());
-				}
-			}
-		});
-		return composite;
-	}
-
-	private Object getInput() {
-		MetadataRepositories input = new MetadataRepositories();
-		input.setQueryProvider(ProvSDKUIActivator.getDefault().getQueryProvider());
-		input.setQueryType(IQueryProvider.METADATA_REPOS);
-		return input;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 5f09417..70f99da 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -10,16 +10,22 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
+import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.equinox.internal.p2.ui.sdk.externalFiles.MetadataGeneratingURLValidator;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.ui.IProfileChooser;
 import org.eclipse.equinox.internal.provisional.p2.ui.IRepositoryManipulator;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.URLValidator;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.UpdateAndInstallGroup;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.sdk.ProvPolicies;
+import org.eclipse.equinox.internal.provisional.p2.ui.sdk.RepositoryManipulationDialog;
+import org.eclipse.jface.action.*;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.preference.IPreferenceStore;
@@ -27,26 +33,65 @@ import org.eclipse.jface.preference.PreferenceDialog;
 import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.jface.util.IPropertyChangeListener;
 import org.eclipse.jface.util.PropertyChangeEvent;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.jface.window.SameShellProvider;
+import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.dnd.*;
 import org.eclipse.swt.events.*;
-import org.eclipse.swt.graphics.FontMetrics;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.dialogs.PreferencesUtil;
+import org.eclipse.ui.dialogs.PropertyDialogAction;
 
 /**
  * Dialog that allows users to update their installed IU's or find new ones.
  * 
  * @since 3.4
  */
-public class UpdateAndInstallDialog extends TrayDialog {
-
+public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvider {
+	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
+	private static final int DEFAULT_HEIGHT = 240;
+	private static final int DEFAULT_WIDTH = 300;
+	private static final int INDEX_INSTALLED = 0;
+	private static final int INDEX_AVAILABLE = 1;
 	private static final String DIALOG_SETTINGS_SECTION = "UpdateAndInstallDialog"; //$NON-NLS-1$
 	private static final String SELECTED_TAB_SETTING = "SelectedTab"; //$NON-NLS-1$
+	private static final String AVAILABLE_VIEW_TYPE = "AvailableViewType"; //$NON-NLS-1$
+	static final String INITIAL_TEXT = ProvSDKMessages.UpdateAndInstallDialog_TypeFilterText;
+
 	String profileId;
-	UpdateAndInstallGroup group;
+	AvailableIUViewQueryContext queryContext;
+	TabFolder tabFolder;
+	AvailableIUGroup availableIUGroup;
+	InstalledIUGroup installedIUGroup;
+	IRepositoryManipulator repositoryManipulator;
+	ChangeViewAction viewByRepo, viewFlat, viewCategory;
+	Button installedPropButton, availablePropButton, installButton, uninstallButton, updateButton, manipulateRepoButton, addRepoButton, removeRepoButton;
+
+	private class ChangeViewAction extends Action {
+		int viewType;
+
+		ChangeViewAction(String text, int viewType) {
+			super(text, IAction.AS_RADIO_BUTTON);
+			this.viewType = viewType;
+			setChecked(this.viewType == queryContext.getViewType());
+		}
+
+		/*
+		 * (non-Javadoc)
+		 * 
+		 * @see org.eclipse.jface.action.IAction#run()
+		 */
+		public void run() {
+			if (this.viewType != queryContext.getViewType()) {
+				queryContext.setViewType(viewType);
+				updateAvailableViewState();
+			}
+		}
+	}
 
 	/**
 	 * Create an instance of this Dialog.
@@ -73,10 +118,10 @@ public class UpdateAndInstallDialog extends TrayDialog {
 		comp.setLayoutData(gd);
 
 		gc.setFont(JFaceResources.getDialogFont());
-		FontMetrics fontMetrics = gc.getFontMetrics();
 		gc.dispose();
 
-		group = new UpdateAndInstallGroup(comp, profileId, ProvSDKMessages.UpdateAndInstallDialog_InstalledFeatures, ProvSDKMessages.UpdateAndInstallDialog_AvailableFeatures, getRepositoryManipulator(), getProfileChooser(), ProvPolicies.getDefault(), fontMetrics);
+		createTabFolder(comp);
+
 		final Button checkBox = new Button(comp, SWT.CHECK);
 		final IPreferenceStore store = ProvSDKUIActivator.getDefault().getPreferenceStore();
 		checkBox.setText(ProvSDKMessages.UpdateAndInstallDialog_AlertCheckbox);
@@ -92,7 +137,7 @@ public class UpdateAndInstallDialog extends TrayDialog {
 				if (event.getProperty().equals(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED))
 					checkBox.setSelection(store.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED));
 				if (event.getProperty().equals(PreferenceConstants.PREF_SHOW_LATEST_VERSION))
-					group.getAvailableIUGroup().getStructuredViewer().refresh();
+					availableIUGroup.getStructuredViewer().refresh();
 			}
 		};
 		store.addPropertyChangeListener(preferenceListener);
@@ -114,11 +159,39 @@ public class UpdateAndInstallDialog extends TrayDialog {
 			}
 		});
 		updatePrefsLink.setText(ProvSDKMessages.UpdateAndInstallDialog_PrefLink);
-		readDialogSettings();
 		Dialog.applyDialogFont(comp);
 		return comp;
 	}
 
+	private void createTabFolder(Composite parent) {
+
+		// tab folder
+		tabFolder = new TabFolder(parent, SWT.NONE);
+
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
+		gd.heightHint = convertVerticalDLUsToPixels(DEFAULT_HEIGHT);
+		gd.grabExcessHorizontalSpace = true;
+		gd.grabExcessVerticalSpace = true;
+		tabFolder.setLayoutData(gd);
+
+		// Installed and Available tabs
+		TabItem installedTab = new TabItem(tabFolder, SWT.NONE);
+		installedTab.setText(ProvSDKMessages.UpdateAndInstallDialog_InstalledSoftware);
+
+		TabItem availableTab = new TabItem(tabFolder, SWT.NONE);
+		availableTab.setText(ProvSDKMessages.UpdateAndInstallDialog_AvailableSoftware);
+
+		// Reading the settings will also initialize the query context, so do this before
+		// creating the individual pages, which consult the context.
+		readDialogSettings();
+
+		// Now create the actual pages.
+		installedTab.setControl(createInstalledIUsPage(tabFolder));
+		availableTab.setControl(createAvailableIUsPage(tabFolder));
+
+		setDropTarget(tabFolder);
+	}
+
 	/*
 	 * (non-Javadoc)
 	 * 
@@ -129,89 +202,327 @@ public class UpdateAndInstallDialog extends TrayDialog {
 	}
 
 	private IRepositoryManipulator getRepositoryManipulator() {
-		return new IRepositoryManipulator() {
-			public String getManipulatorLabel() {
-				return ProvSDKMessages.UpdateAndInstallDialog_ManageSites;
+		if (repositoryManipulator == null)
+			repositoryManipulator = new IRepositoryManipulator() {
+				public String getManipulatorLabel() {
+					return ProvSDKMessages.UpdateAndInstallDialog_ManageSites;
+
+				}
+
+				public boolean manipulateRepositories(Shell shell) {
+					new RepositoryManipulationDialog(shell, this).open();
+					return true;
+				}
 
+				public ProvisioningOperation getAddOperation(URL repoURL) {
+					return new AddColocatedRepositoryOperation(getAddOperationLabel(), repoURL);
+				}
+
+				public String getAddOperationLabel() {
+					return ProvSDKMessages.UpdateAndInstallDialog_AddSiteOperationlabel;
+				}
+
+				public URL[] getKnownRepositories() {
+					try {
+						return ProvisioningUtil.getMetadataRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
+					} catch (ProvisionException e) {
+						return new URL[0];
+					}
+				}
+
+				public ProvisioningOperation getRemoveOperation(URL[] reposToRemove) {
+					return new RemoveColocatedRepositoryOperation(getRemoveOperationLabel(), reposToRemove);
+				}
+
+				public String getRemoveOperationLabel() {
+					return ProvSDKMessages.UpdateAndInstallDialog_RemoveSiteOperationLabel;
+				}
+
+				public URLValidator getURLValidator(Shell shell) {
+					MetadataGeneratingURLValidator validator = new MetadataGeneratingURLValidator();
+					validator.setShell(shell);
+					return validator;
+				}
+			};
+		return repositoryManipulator;
+	}
+
+	private Control createAvailableIUsPage(Composite parent) {
+		Composite composite = new Composite(parent, SWT.NONE);
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
+		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
+		composite.setLayoutData(gd);
+		setDropTarget(composite);
+
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 2;
+		layout.marginWidth = 0;
+		layout.marginHeight = 0;
+		composite.setLayout(layout);
+
+		// Now the available group 
+		availableIUGroup = new AvailableIUGroup(composite, ProvSDKUIActivator.getDefault().getQueryProvider(), JFaceResources.getDialogFont(), new ProvisioningContext(), queryContext, new AvailableIUPatternFilter(ProvUI.getIUColumnConfig()), ProvUI.getIUColumnConfig(), this);
+
+		// Vertical buttons
+		Composite vButtonBar = (Composite) createAvailableIUsVerticalButtonBar(composite);
+		GridData data = new GridData(GridData.FILL_VERTICAL);
+		vButtonBar.setLayoutData(data);
+
+		// Must be done after buttons are created so that the buttons can
+		// register and receive their selection notifications before us.
+		availableIUGroup.getStructuredViewer().addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				validateAvailableIUButtons();
 			}
+		});
+		availableIUGroup.setUseBoldFontForFilteredItems(queryContext.getViewType() != AvailableIUViewQueryContext.VIEW_FLAT);
+		setDropTarget(availableIUGroup.getStructuredViewer().getControl());
 
-			public boolean manipulateRepositories(Shell shell) {
-				new RepositoryManipulationDialog(shell, this).open();
-				return true;
+		validateAvailableIUButtons();
+		return composite;
+	}
+
+	public void fillViewMenu(IMenuManager viewMenu) {
+		viewByRepo = new ChangeViewAction(ProvSDKMessages.UpdateAndInstallDialog_ViewBySite, AvailableIUViewQueryContext.VIEW_BY_REPO);
+		viewMenu.add(viewByRepo);
+		viewCategory = new ChangeViewAction(ProvSDKMessages.UpdateAndInstallDialog_ViewByCategory, AvailableIUViewQueryContext.VIEW_BY_CATEGORY);
+		viewMenu.add(viewCategory);
+		viewFlat = new ChangeViewAction(ProvSDKMessages.UpdateAndInstallDialog_ViewByName, AvailableIUViewQueryContext.VIEW_FLAT);
+		viewMenu.add(viewFlat);
+	}
+
+	private Control createAvailableIUsVerticalButtonBar(Composite parent) {
+		// Create composite.
+		Composite composite = new Composite(parent, SWT.NULL);
+
+		// create a layout with spacing and margins appropriate for the font
+		// size.
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 1;
+		layout.marginWidth = 5;
+		layout.marginHeight = 0;
+		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
+		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
+		composite.setLayout(layout);
+
+		// Add the buttons to the button bar.
+		installButton = createVerticalButton(composite, ProvUI.INSTALL_COMMAND_LABEL, false);
+		installButton.setData(BUTTONACTION, new InstallAction(availableIUGroup.getStructuredViewer(), profileId, null, ProvPolicies.getDefault(), getShell()));
+		availablePropButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_Properties, false);
+		availablePropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), availableIUGroup.getStructuredViewer()));
+		manipulateRepoButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_ManageSites, false);
+		manipulateRepoButton.setData(BUTTONACTION, new Action() {
+			public void runWithEvent(Event event) {
+				getRepositoryManipulator().manipulateRepositories(getShell());
 			}
+		});
+		addRepoButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_AddSiteButtonText, false);
+		addRepoButton.setData(BUTTONACTION, new AddColocatedRepositoryAction(availableIUGroup.getStructuredViewer(), getShell()));
+		removeRepoButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_RemoveSiteButtonText, false);
+		removeRepoButton.setData(BUTTONACTION, new RemoveColocatedRepositoryAction(availableIUGroup.getStructuredViewer(), getShell()));
+		return composite;
+	}
+
+	void updateAvailableViewState() {
+		Composite parent = availableIUGroup.getComposite().getParent();
+		parent.setRedraw(false);
+		validateAvailableIUButtons();
+		availableIUGroup.setUseBoldFontForFilteredItems(queryContext.getViewType() != AvailableIUViewQueryContext.VIEW_FLAT);
+		// This triggers the viewer refresh
+		availableIUGroup.setQueryContext(queryContext);
+
+		parent.layout(true);
+		parent.setRedraw(true);
+	}
+
+	void validateAvailableIUButtons() {
+		// This relies on the actions themselves receiving the selection changed
+		// listener before we do, since we use their state to enable the buttons
+		updateEnablement(installButton);
+		updateEnablement(availablePropButton);
+		updateEnablement(manipulateRepoButton);
+		updateEnablement(addRepoButton);
+		updateEnablement(removeRepoButton);
+		boolean showRepos = queryContext.getViewType() == AvailableIUViewQueryContext.VIEW_BY_REPO;
+		manipulateRepoButton.setVisible(!showRepos);
+		addRepoButton.setVisible(showRepos);
+		removeRepoButton.setVisible(showRepos);
+	}
+
+	private Control createInstalledIUsPage(Composite parent) {
+
+		Composite composite = new Composite(parent, SWT.NONE);
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
+		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
+		composite.setLayoutData(gd);
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 2;
+		layout.marginWidth = 0;
+		layout.marginHeight = 0;
+		composite.setLayout(layout);
 
-			public ProvisioningOperation getAddOperation(URL repoURL) {
-				return new AddColocatedRepositoryOperation(getAddOperationLabel(), repoURL);
+		// Table of installed IU's
+		installedIUGroup = new InstalledIUGroup(composite, ProvSDKUIActivator.getDefault().getQueryProvider(), JFaceResources.getDialogFont(), new ProvisioningContext(), profileId);
+
+		// Vertical buttons
+		Composite vButtonBar = (Composite) createInstalledIUsVerticalButtonBar(composite, ProvSDKUIActivator.getDefault().getQueryProvider());
+		GridData data = new GridData(GridData.FILL_VERTICAL);
+		vButtonBar.setLayoutData(data);
+
+		// Must be done after buttons are created so that the buttons can
+		// register and receive their selection notifications before us.
+		installedIUGroup.getStructuredViewer().addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				validateInstalledIUButtons(event.getSelection());
 			}
+		});
+
+		setDropTarget(installedIUGroup.getStructuredViewer().getControl());
+
+		validateInstalledIUButtons(installedIUGroup.getStructuredViewer().getSelection());
+		return composite;
+	}
+
+	private Control createInstalledIUsVerticalButtonBar(Composite parent, IQueryProvider queryProvider) {
+		// Create composite.
+		Composite composite = new Composite(parent, SWT.NULL);
 
-			public String getAddOperationLabel() {
-				return ProvSDKMessages.UpdateAndInstallDialog_AddSiteOperationlabel;
+		// create a layout with spacing and margins appropriate for the font
+		// size.
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 1;
+		layout.marginWidth = 5;
+		layout.marginHeight = 0;
+		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
+		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
+		composite.setLayout(layout);
+
+		// Add the buttons to the button bar.
+		uninstallButton = createVerticalButton(composite, ProvUI.UNINSTALL_COMMAND_LABEL, false);
+		uninstallButton.setData(BUTTONACTION, new UninstallAction(installedIUGroup.getStructuredViewer(), profileId, null, ProvPolicies.getDefault(), parent.getShell()));
+		updateButton = createVerticalButton(composite, ProvUI.UPDATE_COMMAND_LABEL, false);
+		// For update only, we want it to check for all updates if there is nothing selected
+		updateButton.setData(BUTTONACTION, new UpdateAction(new ISelectionProvider() {
+			public void addSelectionChangedListener(ISelectionChangedListener listener) {
+				installedIUGroup.getStructuredViewer().addSelectionChangedListener(listener);
 			}
 
-			public URL[] getKnownRepositories() {
-				try {
-					return ProvisioningUtil.getMetadataRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
-				} catch (ProvisionException e) {
-					return new URL[0];
+			public ISelection getSelection() {
+				StructuredViewer viewer = installedIUGroup.getStructuredViewer();
+				ISelection selection = viewer.getSelection();
+				if (selection.isEmpty()) {
+					final Object[] all = ((IStructuredContentProvider) installedIUGroup.getStructuredViewer().getContentProvider()).getElements(viewer.getInput());
+					return new StructuredSelection(all);
 				}
+				return selection;
 			}
 
-			public ProvisioningOperation getRemoveOperation(URL[] reposToRemove) {
-				return new RemoveColocatedRepositoryOperation(getRemoveOperationLabel(), reposToRemove);
+			public void removeSelectionChangedListener(ISelectionChangedListener listener) {
+				installedIUGroup.getStructuredViewer().removeSelectionChangedListener(listener);
 			}
 
-			public String getRemoveOperationLabel() {
-				return ProvSDKMessages.UpdateAndInstallDialog_RemoveSiteOperationLabel;
+			public void setSelection(ISelection selection) {
+				installedIUGroup.getStructuredViewer().setSelection(selection);
 			}
+		}, profileId, null, ProvPolicies.getDefault(), parent.getShell()));
 
-			public URLValidator getURLValidator(Shell shell) {
-				MetadataGeneratingURLValidator validator = new MetadataGeneratingURLValidator();
-				validator.setShell(shell);
-				return validator;
-			}
-		};
-	}
+		installedPropButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_Properties, false);
+		installedPropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), installedIUGroup.getStructuredViewer()));
 
-	private IProfileChooser getProfileChooser() {
 		// temporarily disabled.
 		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=224180
-		return null;
-		/*
-		return new IProfileChooser() {
-			public String getLabel() {
-				return ProvSDKMessages.UpdateAndInstallDialog_RevertActionLabel;
+		if (false) {
+			Button revert = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_RevertActionLabel, false);
+			revert.setData(BUTTONACTION, new Action() {
+				public void runWithEvent(Event event) {
+					RevertWizard wizard = new RevertWizard(profileId, ProvSDKUIActivator.getDefault().getQueryProvider());
+					WizardDialog dialog = new WizardDialog(getShell(), wizard);
+					dialog.create();
+					dialog.getShell().setSize(600, 500);
+				}
+			});
+		}
+		return composite;
+	}
 
-			}
+	void validateInstalledIUButtons(ISelection selection) {
+		// Note that this relies on the actions getting the selection notification
+		// before we do, since we rely on the action enablement to update
+		// the buttons.  This should be ok since the buttons
+		// hook the listener on create.
+		updateEnablement(installedPropButton);
+		updateEnablement(uninstallButton);
+		updateEnablement(updateButton);
+	}
 
-			public String getProfileId(Shell shell) {
-				RevertWizard wizard = new RevertWizard(profileId, ProvSDKUIActivator.getDefault().getQueryProvider());
-				WizardDialog dialog = new WizardDialog(shell, wizard);
-				dialog.create();
-				dialog.getShell().setSize(600, 500);
-				if (dialog.open() == Window.OK)
-					return profileId;
-				return null;
+	private void updateEnablement(Button button) {
+		IAction action = getButtonAction(button);
+		if (action != null) {
+			button.setEnabled(action.isEnabled());
+		}
+	}
+
+	private Button createVerticalButton(Composite parent, String label, boolean defaultButton) {
+		Button button = new Button(parent, SWT.PUSH);
+		button.setText(label);
+
+		setButtonLayoutData(button);
+		Object data = button.getLayoutData();
+		if (data instanceof GridData)
+			((GridData) data).horizontalAlignment = GridData.FILL;
+
+		button.addListener(SWT.Selection, new Listener() {
+			public void handleEvent(Event event) {
+				verticalButtonPressed(event);
 			}
-		};
-		*/
+		});
+		button.setToolTipText(label);
+		if (defaultButton) {
+			Shell shell = parent.getShell();
+			if (shell != null) {
+				shell.setDefaultButton(button);
+			}
+		}
+		return button;
+	}
+
+	void verticalButtonPressed(Event event) {
+		IAction action = getButtonAction(event.widget);
+		if (action != null) {
+			action.runWithEvent(event);
+		}
+	}
+
+	private IAction getButtonAction(Widget widget) {
+		Object data = widget.getData(BUTTONACTION);
+		if (data == null || !(data instanceof IAction)) {
+			return null;
+		}
+		return (IAction) data;
 	}
 
 	private void readDialogSettings() {
 		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
 		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
 		if (section != null) {
-			if (group != null && !group.getTabFolder().isDisposed()) {
+			if (tabFolder != null && !tabFolder.isDisposed()) {
 				int tab = 0;
 				if (section.get(SELECTED_TAB_SETTING) != null)
 					tab = section.getInt(SELECTED_TAB_SETTING);
-				group.getTabFolder().setSelection(tab);
+				tabFolder.setSelection(tab);
+
+				int viewType = AvailableIUViewQueryContext.VIEW_BY_CATEGORY;
+				if (section.get(AVAILABLE_VIEW_TYPE) != null)
+					viewType = section.getInt(AVAILABLE_VIEW_TYPE);
+				queryContext = new AvailableIUViewQueryContext(viewType);
 			}
 		}
 	}
 
 	private void saveDialogSettings() {
-		if (!group.getTabFolder().isDisposed()) {
-			getDialogBoundsSettings().put(SELECTED_TAB_SETTING, group.getTabFolder().getSelectionIndex());
+		if (!tabFolder.isDisposed()) {
+			getDialogBoundsSettings().put(SELECTED_TAB_SETTING, tabFolder.getSelectionIndex());
+			getDialogBoundsSettings().put(AVAILABLE_VIEW_TYPE, queryContext.getViewType());
 		}
 	}
 
@@ -242,4 +553,35 @@ public class UpdateAndInstallDialog extends TrayDialog {
 		super.buttonPressed(buttonId);
 	}
 
+	private void setDropTarget(Control control) {
+		DropTarget target = new DropTarget(control, DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);
+		target.setTransfer(new Transfer[] {URLTransfer.getInstance(), FileTransfer.getInstance()});
+		target.addDropListener(new RepositoryManipulatorDropTarget(getRepositoryManipulator(), control) {
+			protected boolean dropTargetIsValid(DropTargetEvent event) {
+				if (URLTransfer.getInstance().isSupportedType(event.currentDataType)) {
+					// If we are on available features page or tab, all drops are good.
+					if (tabFolder.getSelectionIndex() == INDEX_AVAILABLE)
+						return super.dropTargetIsValid(event);
+					// This is not working
+					// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=222120
+					if (tabFolder.getItem(INDEX_AVAILABLE) == event.item)
+						return super.dropTargetIsValid(event);
+					if (tabFolder.getSelectionIndex() == INDEX_INSTALLED) {
+						String path = (String) URLTransfer.getInstance().nativeToJava(event.currentDataType);
+						if (path != null) {
+							URL url = null;
+							try {
+								url = new URL(path);
+							} catch (MalformedURLException e) {
+								return false;
+							}
+							if (url != null && URLValidator.isFileURL(url))
+								return true;
+						}
+					}
+				}
+				return super.dropTargetIsValid(event);
+			}
+		});
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 2fc657e..3da5fd8 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -32,15 +32,26 @@ ExternalFilesPreferencePage_GenerateRepoAlways=&Generate the information necessa
 ExternalFilesPreferencePage_GenerateRepoNever=&Report the unrecognized directory as an error
 ExternalFilesPreferencePage_GenerateRepoPrompt=&Ask me if the information should be generated
 ExternalFilesPreferencePage_RepoGenerationGroup=When I add an unrecognized directory as an update site
-UpdateAndInstallDialog_InstalledFeatures=&Installed Features
+UpdateAndInstallDialog_InstalledSoftware=&Installed Software
+UpdateAndInstallDialog_AccessibilityFilterDescription={0} {1} item showing
+UpdateAndInstallDialog_AddSiteButtonText=&Add Site...
 UpdateAndInstallDialog_AddSiteOperationlabel=Add Site
-UpdateAndInstallDialog_AvailableFeatures=&Available Features
+UpdateAndInstallDialog_AvailableSoftware=&Available Software
 UpdateAndInstallDialog_AlertCheckbox=Automatically check for updates and alert me when they are found
 UpdateAndInstallDialog_PrefLink=Specify the update schedule and other <a>Update Preferences</a>
 UpdateAndInstallDialog_Title=Software Updates and Add-ons
+UpdateAndInstallDialog_TypeFilterText=Type filter text
 UpdateAndInstallDialog_ManageSites=&Manage sites...
+UpdateAndInstallDialog_RemoveSiteButtonText=&Remove Site...
 UpdateAndInstallDialog_RemoveSiteOperationLabel=Remove Site
 UpdateAndInstallDialog_RevertActionLabel=&Revert configuration...
+UpdateAndInstallDialog_Properties=&Properties...
+UpdateAndInstallDialog_Refresh=&Refresh
+UpdateAndInstallDialog_ViewByCategory=&Category
+UpdateAndInstallDialog_ViewByMenuToolTip=View by
+UpdateAndInstallDialog_ViewByName=&Name
+UpdateAndInstallDialog_ViewBySite=&Site
+
 UpdateHandler_CannotLaunchUI=Cannot launch the Update UI.  This installation has not been configured properly for Software Updates.
 UpdateHandler_SDKUpdateUIMessageTitle=Software Updates
 RepositoryManipulationDialog_ErrorRetrievingSites=Error trying to retrieve the list of sites.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 888ad19..37d0939 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -138,6 +138,7 @@ public class ProvUIMessages extends NLS {
 	public static String AvailableIUContentProvider_JobName;
 	public static String AvailableIUContentProvider_PlaceholderLabel;
 	public static String AvailableIUElement_ProfileNotFound;
+	public static String AvailableIUGroup_ViewByToolTipText;
 	public static String Label_Profiles;
 	public static String Label_Repositories;
 	public static String MetadataRepositoryElement_RepositoryLoadError;
@@ -175,10 +176,8 @@ public class ProvUIMessages extends NLS {
 	public static String RevertProfileWizardPage_ErrorRetrievingHistory;
 
 	// Operations
-	public static String UpdateAndInstallGroup_Properties;
 	public static String UpdateAndInstallSelectionDialog_DeselectAllLabel;
 	public static String UpdateAndInstallSelectionDialog_SelectAllLabel;
-	public static String UpdateAndInstallGroup_Refresh;
 	public static String URLValidator_UnrecognizedURL;
 	public static String UpdateManagerCompatibility_UnableToOpenFindAndInstall;
 	public static String UpdateManagerCompatibility_UnableToOpenManageConfiguration;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index 75eb294..4d8cfe6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -113,7 +113,7 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		contentProvider = new StaticContentProvider(list.toArray());
 		listViewer.setContentProvider(contentProvider);
 		listViewer.setInput(new Object());
-		listViewer.setLabelProvider(new IUDetailsLabelProvider(getColumnConfig(), getShell()));
+		listViewer.setLabelProvider(new IUDetailsLabelProvider(null, getColumnConfig(), getShell()));
 		setInitialCheckState();
 		// If the initial provisioning plan was already calculated,
 		// no need to repeat it until the user changes selections
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
index 12f05ae..ddc3d76 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
@@ -24,6 +24,7 @@ import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Shell;
 
 /**
  * A StructuredIUGroup is a reusable UI component that displays a
@@ -48,9 +49,8 @@ public abstract class StructuredIUGroup {
 	 * @param font The font to use for calculating pixel sizes.  This font is
 	 * not managed by the receiver.
 	 * @param context the ProvisioningContext describing the context for provisioning.
-
 	 */
-	public StructuredIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context) {
+	protected StructuredIUGroup(Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context) {
 		this.queryProvider = queryProvider;
 		this.context = context;
 		// Set up a fontmetrics for calculations
@@ -80,15 +80,19 @@ public abstract class StructuredIUGroup {
 
 	protected abstract StructuredViewer createViewer(Composite parent);
 
-	public Composite getComposite() {
+	protected Composite getComposite() {
 		return composite;
 	}
 
-	public StructuredViewer getStructuredViewer() {
+	protected Shell getShell() {
+		return composite.getShell();
+	}
+
+	protected StructuredViewer getStructuredViewer() {
 		return viewer;
 	}
 
-	public IInstallableUnit[] getSelectedIUs() {
+	protected IInstallableUnit[] getSelectedIUs() {
 		List elements = ((IStructuredSelection) viewer.getSelection()).toList();
 		List iusList = new ArrayList(elements.size());
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index fca183f..d7bd99e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -108,7 +108,6 @@ AddRepositoryDialog_DuplicateURL=Duplicate URL
 AddRepositoryDialog_InvalidURL=The provided URL is not valid
 AddRepositoryDialog_URLValidationError=Unexpected failure while validating the location.
 
-UpdateAndInstallGroup_Properties=&Properties...
 UpdateAndInstallSelectionDialog_DeselectAllLabel=&Deselect All
 UpdateAndInstallSelectionDialog_SelectAllLabel=&Select All
 UpdateAction_ExceptionDuringUpdateCheck=Error encountered while checking for updates.
@@ -117,7 +116,6 @@ UpdateAction_UpdatesAvailableMessage=Review and confirm that the checked updates
 UpdateDialog_AssemblingUpdatesProgress=Assembling updates
 UpdateAction_UpdatesAvailableTitle=Available Updates
 UpdateOperation_NothingToUpdate=There is nothing to update.
-UpdateAndInstallGroup_Refresh=&Refresh
 URLValidator_UnrecognizedURL=The URL {0} is not recognized.
 UpdateManagerCompatibility_UnableToOpenFindAndInstall=Unable to open the Update Manager Find and Install Wizard.
 UpdateManagerCompatibility_UnableToOpenManageConfiguration=Unable to open the Update Manager Configuration Manager.
@@ -146,6 +144,7 @@ AvailableIUContentProvider_FailureRetrievingContents={0} is not available.
 AvailableIUContentProvider_JobName=Fetching contents for {0}
 AvailableIUContentProvider_PlaceholderLabel=Retrieving contents of {0}...
 AvailableIUElement_ProfileNotFound=Could not find profile to use for size computation.
+AvailableIUGroup_ViewByToolTipText=View by
 Label_Profiles=All Software Profiles
 Label_Repositories=Known Repositories
 MetadataRepositoryElement_RepositoryLoadError=Error loading repository {0}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CachedQueryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CachedQueryElement.java
index 7c5078e..e5be30f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CachedQueryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CachedQueryElement.java
@@ -10,44 +10,29 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.model;
 
-import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
 
 /**
  * Element wrapper class for an element who obtains its 
- * children via a query, but caches its results in order
- * to accurately report the presence of children.  Should be
- * used when accurate child reporting is more critical than the
- * space used by the cache.
+ * children via a query, but caches its results.  
  * 
  * @since 3.4
  */
-public abstract class CachedQueryElement extends RemoteQueriedElement {
+public abstract class CachedQueryElement extends QueriedElement {
 
 	Object[] cachedChildren;
 
-	/*
-	 * Overridden to cache the children so that we can more
-	 * quickly and accurately report whether other versions
-	 * are available.
-	 * 
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
-		if (cachedChildren == null)
-			cachedChildren = super.fetchChildren(o, monitor);
-		return cachedChildren;
+	protected CachedQueryElement() {
+		super(null);
 	}
 
 	/*
-	 * Overridden to give a more accurate answer since often there
-	 * are no children.
-	 * 
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement#isContainer()
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#getChildren(java.lang.Object)
 	 */
-	public boolean isContainer() {
-		return fetchChildren(this, null).length > 0;
+	public Object[] getChildren(Object parent) {
+		if (cachedChildren == null)
+			cachedChildren = super.getChildren(parent);
+		return cachedChildren;
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
index d8fe18f..ac84252 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProvElement.java
@@ -97,14 +97,4 @@ public abstract class ProvElement implements IWorkbenchAdapter, IAdaptable {
 		}
 		return children.length > 0;
 	}
-
-	/**
-	 * Return true if labels should indicate that the element
-	 * is busy retrieving its contents.
-	 * @return <code>true</code> if the element is currently retrieving information
-	 * about itself, and <code>false</code> if it is not.
-	 */
-	public boolean isBusy() {
-		return false;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
index bd086dc..47393d9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
@@ -26,6 +26,10 @@ import org.eclipse.ui.progress.IElementCollector;
  */
 public abstract class RemoteQueriedElement extends QueriedElement implements IDeferredWorkbenchAdapter {
 
+	protected RemoteQueriedElement() {
+		super(null);
+	}
+
 	public Object getParent(Object o) {
 		return null;
 	}
@@ -75,4 +79,21 @@ public abstract class RemoteQueriedElement extends QueriedElement implements IDe
 	protected boolean isSufficientForQuery(ElementQueryDescriptor queryDescriptor) {
 		return queryDescriptor.isComplete();
 	}
+
+	/**
+	 * Return a boolean indicating whether this element requires 
+	 * remote/deferred queries only on the first access of its
+	 * children, or on every access.  Elements that cache data or
+	 * rely on their model caching the data may only need to use
+	 * deferred queries the first time.  Elements that do not cache,
+	 * and whose models do not cache, may need to use deferred
+	 * queries on every access.
+	 * 
+	 * @return <code>true</code> if a deferred query is only required
+	 * on first access of children, <code>false</code> if deferred
+	 * query is required on all accesses.
+	 */
+	public boolean fetchOnFirstAccessOnly() {
+		return true;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index b3c7cd4..18bac6e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.internal.p2.ui.dialogs.DeferredFetchFilteredTree;
 import org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
@@ -18,6 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.viewers.StructuredViewer;
 import org.eclipse.jface.viewers.TreeViewer;
@@ -26,6 +28,7 @@ import org.eclipse.swt.events.DisposeEvent;
 import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.dialogs.PatternFilter;
 
 /**
  * An AvailableIUGroup is a reusable UI component that displays the
@@ -35,8 +38,17 @@ import org.eclipse.swt.widgets.*;
  */
 public class AvailableIUGroup extends StructuredIUGroup {
 
+	QueryContext queryContext;
+	PatternFilter filter;
+	private IViewMenuProvider menuProvider;
+	private boolean useBold = false;;
+	private IUDetailsLabelProvider labelProvider;
+	DeferredFetchFilteredTree filteredTree;
+	IUColumnConfig[] columnConfig;
+
 	/**
-	 * Create a group that represents the available IU's.
+	 * Create a group that represents the available IU's but does not use any of the
+	 * view menu or filtering capabilities.
 	 * 
 	 * @param parent the parent composite for the group
 	 * @param queryProvider the query provider that defines the queries used
@@ -47,15 +59,46 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 * including information about which repositories should be used.
 	 */
 	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context) {
+		this(parent, queryProvider, font, context, null, null, ProvUI.getIUColumnConfig(), null);
+	}
+
+	/**
+	 * Create a group that represents the available IU's.
+	 * 
+	 * @param parent the parent composite for the group
+	 * @param queryProvider the query provider that defines the queries used
+	 * to retrieve elements in the viewer.
+	 * @param font The font to use for calculating pixel sizes.  This font is
+	 * not managed by the receiver.
+	 * @param context the ProvisioningContext describing the context for provisioning,
+	 * including information about which repositories should be used.
+	 * @param queryContext the QueryContext describing additional information about how
+	 * the model should be traversed in this view.
+	 * @param filter the PatternFilter to use to filter the tree contents.  If <code>null</code>,
+	 * then there will be no filter.
+	 * @param columnConfig the description of the columns that should be shown.  If <code>null</code>, a default
+	 * will be used.
+	 * @param menuProvider the IMenuProvider that fills the view menu.  If <code>null</code>,
+	 * then there is no view menu shown.
+	 */
+	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context, QueryContext queryContext, PatternFilter filter, IUColumnConfig[] columnConfig, IViewMenuProvider menuProvider) {
 		super(parent, queryProvider, font, context);
-		this.createGroupComposite(parent);
+		this.queryContext = queryContext;
+		this.filter = filter;
+		this.menuProvider = menuProvider;
+		this.columnConfig = columnConfig;
+		createGroupComposite(parent);
 	}
 
 	protected StructuredViewer createViewer(Composite parent) {
 		// Table of available IU's
-		final TreeViewer availableIUViewer = new TreeViewer(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		if (filter == null)
+			filter = new PatternFilter();
+		filteredTree = new DeferredFetchFilteredTree(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER, filter, menuProvider, parent.getDisplay());
+		final TreeViewer availableIUViewer = filteredTree.getViewer();
 
-		final IUDetailsLabelProvider labelProvider = new IUDetailsLabelProvider();
+		labelProvider = new IUDetailsLabelProvider(filteredTree, columnConfig, getShell());
+		labelProvider.setUseBoldFontForFilteredItems(useBold);
 		labelProvider.setToolTipProperty(IInstallableUnit.PROP_DESCRIPTION);
 
 		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
@@ -63,12 +106,18 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		availableIUViewer.setComparer(new ProvElementComparer());
 
 		// Now the content provider.
-		availableIUViewer.setContentProvider(new DeferredQueryContentProvider(getQueryProvider()));
+		DeferredQueryContentProvider contentProvider = new DeferredQueryContentProvider(getQueryProvider());
+		availableIUViewer.setContentProvider(contentProvider);
 
 		// Now the presentation, columns before label provider.
 		setTreeColumns(availableIUViewer.getTree());
 		availableIUViewer.setLabelProvider(labelProvider);
 
+		// Notify the filtered tree so that it can hook listeners on the
+		// content provider.  This is needed so that filtering is only allowed
+		// after content has been retrieved.
+		filteredTree.contentProviderSet(contentProvider);
+
 		// Input last.
 		availableIUViewer.setInput(getInput());
 
@@ -84,25 +133,72 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	}
 
 	private void setTreeColumns(Tree tree) {
-		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
 		tree.setHeaderVisible(true);
 
-		for (int i = 0; i < columns.length; i++) {
+		for (int i = 0; i < columnConfig.length; i++) {
 			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
 			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(columns[i].defaultColumnWidth));
+			tc.setText(columnConfig[i].columnTitle);
+			tc.setWidth(convertHorizontalDLUsToPixels(columnConfig[i].defaultColumnWidth));
 		}
 	}
 
 	Object getInput() {
 		MetadataRepositories input = new MetadataRepositories(getProvisioningContext().getMetadataRepositories());
-		input.setQueryType(IQueryProvider.AVAILABLE_IUS);
+		input.setQueryContext(queryContext);
 		input.setQueryProvider(getQueryProvider());
 		return input;
 	}
 
+	/**
+	 * Set the query context to be used to traverse the model in this view.  If the viewer has
+	 * already been created, reset the input with the new information.
+	 * @param context the query context
+	 */
+	public void setQueryContext(QueryContext context) {
+		this.queryContext = context;
+		if (getStructuredViewer() != null)
+			getStructuredViewer().setInput(getInput());
+	}
+
+	/**
+	 * Set a boolean indicating whether a bold font should be used when
+	 * showing filtered items.  This method does not refresh the tree or 
+	 * labels, so that must be done explicitly by the caller.
+	 * @param useBoldFont
+	 */
+	public void setUseBoldFontForFilteredItems(boolean useBoldFont) {
+		if (labelProvider != null)
+			labelProvider.setUseBoldFontForFilteredItems(useBoldFont);
+	}
+
+	/**
+	 * Return the composite that contains the controls in this group.
+	 * @return the composite
+	 */
+	public Composite getComposite() {
+		return super.getComposite();
+	}
+
+	/**
+	 * Get the viewer used to represent the available IU's
+	 * @return the viewer
+	 */
 	public StructuredViewer getStructuredViewer() {
 		return super.getStructuredViewer();
 	}
+
+	/**
+	 * Get the selected IU's
+	 * @return the array of selected IU's
+	 */
+	public IInstallableUnit[] getSelectedIUs() {
+		return super.getSelectedIUs();
+	}
+
+	public Tree getTree() {
+		if (getStructuredViewer() == null)
+			return null;
+		return ((TreeViewer) getStructuredViewer()).getTree();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IViewMenuProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IViewMenuProvider.java
new file mode 100644
index 0000000..1c12634
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IViewMenuProvider.java
@@ -0,0 +1,24 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
+
+import org.eclipse.jface.action.IMenuManager;
+
+/**
+ * 
+ * IViewMenuProvider is used to fill a view menu in dialog groups that support them.
+ * @since 3.4
+ *
+ */
+public interface IViewMenuProvider {
+	public void fillViewMenu(IMenuManager viewMenu);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
index 6c7e974..1c128e1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
@@ -42,18 +42,17 @@ public class InstalledIUGroup extends StructuredIUGroup {
 	 * @param parent the parent composite for the group
 	 * @param queryProvider the query provider that defines the queries used
 	 * to retrieve elements in the viewer.
-	 * @param profileId the id of the profile whose content is being shown.
 	 * @param font The font to use for calculating pixel sizes.  This font is
 	 * not managed by the receiver.
 	 * @param context the ProvisioningContext describing the context for provisioning,
 	 * including information about which repositories should be used.
-
+	 * @param profileId the id of the profile whose content is being shown.
 	 */
 	public InstalledIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context, String profileId) {
 		// This will evolve into a provisioning context
 		super(parent, queryProvider, font, context);
 		this.profileId = profileId;
-		this.createGroupComposite(parent);
+		createGroupComposite(parent);
 	}
 
 	protected StructuredViewer createViewer(Composite parent) {
@@ -101,4 +100,11 @@ public class InstalledIUGroup extends StructuredIUGroup {
 		element.setQueryProvider(getQueryProvider());
 		return element;
 	}
+
+	/**
+	 * Get the viewer used to represent the installed IU's
+	 */
+	public StructuredViewer getStructuredViewer() {
+		return super.getStructuredViewer();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateAndInstallGroup.java
deleted file mode 100644
index d1aefc6..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ /dev/null
@@ -1,397 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
-
-import java.net.MalformedURLException;
-import java.net.URL;
-import org.eclipse.core.runtime.Assert;
-import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.actions.PropertyDialogAction;
-import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
-import org.eclipse.equinox.internal.provisional.p2.ui.IProfileChooser;
-import org.eclipse.equinox.internal.provisional.p2.ui.IRepositoryManipulator;
-import org.eclipse.equinox.internal.provisional.p2.ui.actions.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policies;
-import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.dialogs.IDialogConstants;
-import org.eclipse.jface.resource.JFaceResources;
-import org.eclipse.jface.viewers.*;
-import org.eclipse.jface.window.SameShellProvider;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.dnd.*;
-import org.eclipse.swt.graphics.FontMetrics;
-import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.*;
-
-/**
- * Dialog group that shows installed IU's and allows user to update or search
- * for new ones.
- * 
- * @since 3.4
- */
-public class UpdateAndInstallGroup {
-
-	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
-	private static final int DEFAULT_HEIGHT = 240;
-	private static final int DEFAULT_WIDTH = 300;
-	private static final int INDEX_INSTALLED = 0;
-	private static final int INDEX_AVAILABLE = 1;
-	TabFolder tabFolder;
-	AvailableIUGroup availableIUGroup;
-	InstalledIUGroup installedIUGroup;
-	String profileId;
-	IProfileChooser profileChooser;
-	IRepositoryManipulator repositoryManipulator;
-	Policies policies;
-	private FontMetrics fm;
-	Button installedPropButton, availablePropButton, installButton, uninstallButton, updateButton;
-
-	/**
-	 * Create an instance of this group.
-	 * 
-	 */
-	public UpdateAndInstallGroup(Composite parent, String profileId, String installedString, String availableString, IRepositoryManipulator repositoryManipulator, IProfileChooser profileChooser, Policies policies, FontMetrics fm) {
-
-		this.profileId = profileId;
-		this.profileChooser = profileChooser;
-		this.repositoryManipulator = repositoryManipulator;
-		Assert.isNotNull(policies);
-		this.policies = policies;
-
-		// tab folder
-		tabFolder = new TabFolder(parent, SWT.NONE);
-
-		Assert.isNotNull(fm);
-		this.fm = fm;
-		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
-		gd.heightHint = convertVerticalDLUsToPixels(DEFAULT_HEIGHT);
-		gd.grabExcessHorizontalSpace = true;
-		gd.grabExcessVerticalSpace = true;
-		tabFolder.setLayoutData(gd);
-
-		// Installed IU's
-		TabItem installedTab = new TabItem(tabFolder, SWT.NONE);
-		installedTab.setText(installedString);
-		installedTab.setControl(createInstalledIUsPage(tabFolder, policies.getQueryProvider()));
-
-		// Find IU's
-		TabItem availableTab = new TabItem(tabFolder, SWT.NONE);
-		availableTab.setText(availableString);
-		availableTab.setControl(createAvailableIUsPage(tabFolder, policies.getQueryProvider()));
-
-		setDropTarget(tabFolder);
-	}
-
-	public TabFolder getTabFolder() {
-		return tabFolder;
-	}
-
-	private Control createAvailableIUsPage(Composite parent, IQueryProvider queryProvider) {
-		Composite composite = new Composite(parent, SWT.NONE);
-		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
-		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
-		composite.setLayoutData(gd);
-		setDropTarget(composite);
-
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 2;
-		layout.marginWidth = 0;
-		layout.marginHeight = 0;
-		composite.setLayout(layout);
-
-		availableIUGroup = new AvailableIUGroup(composite, queryProvider, JFaceResources.getDialogFont(), new ProvisioningContext());
-
-		// Vertical buttons
-		Composite buttonBar = (Composite) createAvailableIUsVerticalButtonBar(composite);
-		GridData data = new GridData(GridData.FILL_VERTICAL);
-		buttonBar.setLayoutData(data);
-
-		// Must be done after buttons are created so that the buttons can
-		// register and receive their selection notifications before us.
-		availableIUGroup.getStructuredViewer().addSelectionChangedListener(new ISelectionChangedListener() {
-			public void selectionChanged(SelectionChangedEvent event) {
-				validateAvailableIUButtons(event.getSelection());
-			}
-		});
-
-		setDropTarget(availableIUGroup.getStructuredViewer().getControl());
-
-		validateAvailableIUButtons(availableIUGroup.getStructuredViewer().getSelection());
-		return composite;
-	}
-
-	private Control createAvailableIUsVerticalButtonBar(Composite parent) {
-		// Create composite.
-		Composite composite = new Composite(parent, SWT.NULL);
-
-		// create a layout with spacing and margins appropriate for the font
-		// size.
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 1;
-		layout.marginWidth = 5;
-		layout.marginHeight = 0;
-		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
-		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
-		composite.setLayout(layout);
-
-		// Add the buttons to the button bar.
-		availablePropButton = createVerticalButton(composite, ProvUIMessages.UpdateAndInstallGroup_Properties, false);
-		availablePropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), availableIUGroup.getStructuredViewer()));
-		installButton = createVerticalButton(composite, ProvUIMessages.InstallIUCommandLabel, false);
-		installButton.setData(BUTTONACTION, new InstallAction(availableIUGroup.getStructuredViewer(), profileId, null, policies, parent.getShell()));
-		if (repositoryManipulator != null) {
-			Button repoButton = createVerticalButton(composite, repositoryManipulator.getManipulatorLabel(), false);
-			repoButton.setData(BUTTONACTION, new Action() {
-				public void runWithEvent(Event event) {
-					repositoryManipulator.manipulateRepositories(getTabFolder().getShell());
-				}
-			});
-
-		}
-		return composite;
-	}
-
-	void validateAvailableIUButtons(ISelection selection) {
-		// This relies on the actions themselves receiving the selection changed
-		// listener before we do, since we use their state to enable the buttons
-		updateEnablement(availablePropButton);
-		updateEnablement(installButton);
-	}
-
-	private Control createInstalledIUsPage(Composite parent, IQueryProvider queryProvider) {
-
-		Composite composite = new Composite(parent, SWT.NONE);
-		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
-		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
-		composite.setLayoutData(gd);
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 2;
-		layout.marginWidth = 0;
-		layout.marginHeight = 0;
-		composite.setLayout(layout);
-
-		// Table of installed IU's
-		installedIUGroup = new InstalledIUGroup(composite, queryProvider, JFaceResources.getDialogFont(), new ProvisioningContext(), profileId);
-
-		// Vertical buttons
-		Composite buttonBar = (Composite) createInstalledIUsVerticalButtonBar(composite, queryProvider);
-		GridData data = new GridData(GridData.FILL_VERTICAL);
-		buttonBar.setLayoutData(data);
-
-		// Must be done after buttons are created so that the buttons can
-		// register and receive their selection notifications before us.
-		installedIUGroup.getStructuredViewer().addSelectionChangedListener(new ISelectionChangedListener() {
-			public void selectionChanged(SelectionChangedEvent event) {
-				validateInstalledIUButtons(event.getSelection());
-			}
-		});
-
-		setDropTarget(installedIUGroup.getStructuredViewer().getControl());
-
-		validateInstalledIUButtons(installedIUGroup.getStructuredViewer().getSelection());
-		return composite;
-	}
-
-	private Control createInstalledIUsVerticalButtonBar(Composite parent, IQueryProvider queryProvider) {
-		// Create composite.
-		Composite composite = new Composite(parent, SWT.NULL);
-
-		// create a layout with spacing and margins appropriate for the font
-		// size.
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 1;
-		layout.marginWidth = 5;
-		layout.marginHeight = 0;
-		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
-		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
-		composite.setLayout(layout);
-
-		// Add the buttons to the button bar.
-		installedPropButton = createVerticalButton(composite, ProvUIMessages.UpdateAndInstallGroup_Properties, false);
-		installedPropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), installedIUGroup.getStructuredViewer()));
-		uninstallButton = createVerticalButton(composite, ProvUIMessages.UninstallIUCommandLabel, false);
-		uninstallButton.setData(BUTTONACTION, new UninstallAction(installedIUGroup.getStructuredViewer(), profileId, null, policies, parent.getShell()));
-		updateButton = createVerticalButton(composite, ProvUIMessages.UpdateIUCommandLabel, false);
-		// For update only, we want it to check for all updates if there is nothing selected
-		updateButton.setData(BUTTONACTION, new UpdateAction(new ISelectionProvider() {
-			public void addSelectionChangedListener(ISelectionChangedListener listener) {
-				installedIUGroup.getStructuredViewer().addSelectionChangedListener(listener);
-			}
-
-			public ISelection getSelection() {
-				StructuredViewer viewer = installedIUGroup.getStructuredViewer();
-				ISelection selection = viewer.getSelection();
-				if (selection.isEmpty()) {
-					final Object[] all = ((IStructuredContentProvider) installedIUGroup.getStructuredViewer().getContentProvider()).getElements(viewer.getInput());
-					return new StructuredSelection(all);
-				}
-				return selection;
-			}
-
-			public void removeSelectionChangedListener(ISelectionChangedListener listener) {
-				installedIUGroup.getStructuredViewer().removeSelectionChangedListener(listener);
-			}
-
-			public void setSelection(ISelection selection) {
-				installedIUGroup.getStructuredViewer().setSelection(selection);
-			}
-		}, profileId, null, policies, parent.getShell()));
-		if (profileChooser != null) {
-			Button profileButton = createVerticalButton(composite, profileChooser.getLabel(), false);
-			profileButton.setData(BUTTONACTION, new Action() {
-				public void runWithEvent(Event event) {
-					String chosenProfileId = profileChooser.getProfileId(tabFolder.getShell());
-					// A client resetting the profile may cause a shutdown of the running
-					// system.  Guard for this case by checking whether the viewer is still
-					// alive.
-					if (chosenProfileId != null && chosenProfileId != profileId) {
-						profileId = chosenProfileId;
-						Control control = installedIUGroup.getStructuredViewer().getControl();
-						if (control != null && !control.isDisposed()) {
-							installedIUGroup.getStructuredViewer().setInput(new ProfileElement(profileId));
-						}
-					}
-				}
-			});
-		}
-		return composite;
-	}
-
-	void validateInstalledIUButtons(ISelection selection) {
-		// Note that this relies on the actions getting the selection notification
-		// before we do, since we rely on the action enablement to update
-		// the buttons.  This should be ok since the buttons
-		// hook the listener on create.
-		updateEnablement(installedPropButton);
-		updateEnablement(uninstallButton);
-		updateEnablement(updateButton);
-	}
-
-	private void updateEnablement(Button button) {
-		IAction action = getButtonAction(button);
-		if (action != null) {
-			button.setEnabled(action.isEnabled());
-		}
-	}
-
-	private Button createVerticalButton(Composite parent, String label, boolean defaultButton) {
-		Button button = new Button(parent, SWT.PUSH);
-		button.setText(label);
-
-		GridData data = setButtonLayoutData(button);
-		data.horizontalAlignment = GridData.FILL;
-
-		button.addListener(SWT.Selection, new Listener() {
-			public void handleEvent(Event event) {
-				verticalButtonPressed(event);
-			}
-		});
-		button.setToolTipText(label);
-		if (defaultButton) {
-			Shell shell = parent.getShell();
-			if (shell != null) {
-				shell.setDefaultButton(button);
-			}
-		}
-		return button;
-	}
-
-	void verticalButtonPressed(Event event) {
-		IAction action = getButtonAction(event.widget);
-		if (action != null) {
-			action.runWithEvent(event);
-		}
-	}
-
-	private IAction getButtonAction(Widget widget) {
-		Object data = widget.getData(BUTTONACTION);
-		if (data == null || !(data instanceof IAction)) {
-			return null;
-		}
-		return (IAction) data;
-	}
-
-	private GridData setButtonLayoutData(Button button) {
-		GridData data = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
-		int widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);
-		Point minSize = button.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);
-		data.widthHint = Math.max(widthHint, minSize.x);
-		button.setLayoutData(data);
-		return data;
-	}
-
-	private int convertHorizontalDLUsToPixels(int dlus) {
-		// shouldn't happen
-		if (fm == null) {
-			return 0;
-		}
-		return Dialog.convertHorizontalDLUsToPixels(fm, dlus);
-	}
-
-	private int convertVerticalDLUsToPixels(int dlus) {
-		// shouldn't happen
-		if (fm == null) {
-			return 0;
-		}
-		return Dialog.convertVerticalDLUsToPixels(fm, dlus);
-	}
-
-	public AvailableIUGroup getAvailableIUGroup() {
-		return availableIUGroup;
-	}
-
-	public InstalledIUGroup getInstalledIUGroup() {
-		return installedIUGroup;
-	}
-
-	private void setDropTarget(final Control control) {
-		// Don't bother hooking drag/drop if we won't know
-		// what to do with it.
-		if (repositoryManipulator == null)
-			return;
-
-		DropTarget target = new DropTarget(control, DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);
-		target.setTransfer(new Transfer[] {URLTransfer.getInstance(), FileTransfer.getInstance()});
-		target.addDropListener(new RepositoryManipulatorDropTarget(repositoryManipulator, control) {
-			protected boolean dropTargetIsValid(DropTargetEvent event) {
-				if (URLTransfer.getInstance().isSupportedType(event.currentDataType)) {
-					// If we are on available features page or tab, all drops are good.
-					if (tabFolder.getSelectionIndex() == UpdateAndInstallGroup.INDEX_AVAILABLE)
-						return super.dropTargetIsValid(event);
-					// This is not working
-					// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=222120
-					if (tabFolder.getItem(INDEX_AVAILABLE) == event.item)
-						return super.dropTargetIsValid(event);
-					if (tabFolder.getSelectionIndex() == UpdateAndInstallGroup.INDEX_INSTALLED) {
-						String path = (String) URLTransfer.getInstance().nativeToJava(event.currentDataType);
-						if (path != null) {
-							URL url = null;
-							try {
-								url = new URL(path);
-							} catch (MalformedURLException e) {
-								return false;
-							}
-							if (url != null && URLValidator.isFileURL(url))
-								return true;
-						}
-					}
-				}
-				return super.dropTargetIsValid(event);
-			}
-		});
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
index 3d71310..7624963 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
@@ -25,7 +25,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescript
  */
 public class ArtifactRepositories extends RemoteQueriedElement {
 
-	protected int getQueryType() {
+	protected int getDefaultQueryType() {
 		return IQueryProvider.ARTIFACT_REPOS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
index 6670755..dd5aad7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
@@ -53,7 +53,7 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 		return super.getAdapter(adapter);
 	}
 
-	protected int getQueryType() {
+	protected int getDefaultQueryType() {
 		return IQueryProvider.AVAILABLE_IUS;
 	}
 
@@ -96,5 +96,4 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 		}
 		return (RequiredCapability[]) capabilities.toArray(new RequiredCapability[capabilities.size()]);
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUVersionsElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUVersionsElement.java
index cf1eb51..a8f27ca 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUVersionsElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUVersionsElement.java
@@ -51,7 +51,7 @@ public class IUVersionsElement extends CachedQueryElement implements IUElement {
 		this.iu = iu;
 	}
 
-	protected int getQueryType() {
+	protected int getDefaultQueryType() {
 		return IQueryProvider.AVAILABLE_IUS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
index 320ebd1..55f4f97 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
@@ -29,7 +29,6 @@ import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescript
 public class MetadataRepositories extends RemoteQueriedElement {
 
 	private URL[] metadataRepositories = null;
-	private int queryType = IQueryProvider.METADATA_REPOS;
 
 	public MetadataRepositories() {
 		super();
@@ -39,16 +38,8 @@ public class MetadataRepositories extends RemoteQueriedElement {
 		this.metadataRepositories = metadataRepositories;
 	}
 
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#getQueryType()
-	 */
-	protected int getQueryType() {
-		return queryType;
-	}
-
-	public void setQueryType(int queryType) {
-		this.queryType = queryType;
+	protected int getDefaultQueryType() {
+		return IQueryProvider.METADATA_REPOS;
 	}
 
 	/**
@@ -80,5 +71,4 @@ public class MetadataRepositories extends RemoteQueriedElement {
 	protected boolean isSufficientForQuery(ElementQueryDescriptor queryDescriptor) {
 		return queryDescriptor.collector != null && queryDescriptor.queryable != null;
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
index 9ddb94e..10c702d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
@@ -49,7 +49,7 @@ public class MetadataRepositoryElement extends RemoteQueriedElement implements R
 		return ProvUIImages.IMG_METADATA_REPOSITORY;
 	}
 
-	protected int getQueryType() {
+	protected int getDefaultQueryType() {
 		return IQueryProvider.AVAILABLE_IUS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
index 49900e2..aae1bf8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
@@ -47,7 +47,7 @@ public class ProfileElement extends RemoteQueriedElement {
 		return profileId;
 	}
 
-	protected int getQueryType() {
+	protected int getDefaultQueryType() {
 		return IQueryProvider.INSTALLED_IUS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
index 90bc7fa..cce06f2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
@@ -24,6 +24,10 @@ import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
  */
 public class Profiles extends QueriedElement {
 
+	public Profiles() {
+		super(null);
+	}
+
 	/*
 	 * (non-Javadoc)
 	 * 
@@ -45,4 +49,12 @@ public class Profiles extends QueriedElement {
 		return ProvUIMessages.Label_Profiles;
 	}
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#getDefaultQueryType()
+	 */
+	protected int getDefaultQueryType() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
index 2cfbae1..242a1bf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
@@ -25,6 +25,11 @@ public abstract class QueriedElement extends ProvElement {
 
 	IQueryProvider queryProvider;
 	protected IQueryable queryable;
+	protected QueryContext queryContext = null;
+
+	protected QueriedElement(QueryContext queryContext) {
+		this.queryContext = queryContext;
+	}
 
 	public Object[] getChildren(Object o) {
 		if (queryProvider == null)
@@ -52,7 +57,13 @@ public abstract class QueriedElement extends ProvElement {
 		return null;
 	}
 
-	protected abstract int getQueryType();
+	protected abstract int getDefaultQueryType();
+
+	protected int getQueryType() {
+		if (queryContext == null)
+			return getDefaultQueryType();
+		return queryContext.getQueryType();
+	}
 
 	public void setQueryProvider(IQueryProvider queryProvider) {
 		this.queryProvider = queryProvider;
@@ -66,6 +77,14 @@ public abstract class QueriedElement extends ProvElement {
 		this.queryable = queryable;
 	}
 
+	public QueryContext getQueryContext() {
+		return queryContext;
+	}
+
+	public void setQueryContext(QueryContext context) {
+		queryContext = context;
+	}
+
 	public IQueryable getQueryable() {
 		return queryable;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryContext.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryContext.java
new file mode 100644
index 0000000..fe0eabf
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryContext.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui.query;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+
+/**
+ * A class that can be used to provide additional context for
+ * selecting the appropriate query to be used for a particular 
+ * UI element.  Typically an {@link IQueryProvider} uses this
+ * object to determine any specific filtering or grouping that
+ * should occur for a query.  Views can associate this context
+ * with a model element to affect the traversal of the model.
+ * 
+ * @since 3.4
+ *
+ */
+public abstract class QueryContext {
+
+	public abstract int getQueryType();
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
index 70020a4..0481465 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
@@ -11,7 +11,13 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 
+import java.util.HashMap;
+import java.util.HashSet;
+import org.eclipse.core.runtime.ListenerList;
+import org.eclipse.core.runtime.jobs.IJobChangeEvent;
+import org.eclipse.core.runtime.jobs.JobChangeAdapter;
 import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
 import org.eclipse.jface.viewers.*;
@@ -29,17 +35,40 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 
 	DeferredTreeContentManager manager;
 	IQueryProvider queryProvider;
+	Object currentInput;
+	HashMap alreadyQueried = new HashMap();
+	HashSet queryCompleted = new HashSet();
+	AbstractTreeViewer viewer = null;
+	ListenerList listeners = new ListenerList();
+	boolean synchronous = false;
 
 	public DeferredQueryContentProvider(IQueryProvider queryProvider) {
 		this.queryProvider = queryProvider;
 	}
 
+	public void addListener(DeferredQueryContentListener listener) {
+		listeners.add(listener);
+	}
+
+	public void removeListener(DeferredQueryContentListener listener) {
+		listeners.remove(listener);
+	}
+
 	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
 		if (manager != null)
 			manager.cancel(oldInput);
 		if (v instanceof AbstractTreeViewer) {
 			manager = new DeferredTreeContentManager((AbstractTreeViewer) v);
+			viewer = (AbstractTreeViewer) v;
+		} else
+			viewer = null;
+		alreadyQueried = new HashMap();
+		currentInput = newInput;
+		Object[] inputListeners = listeners.getListeners();
+		for (int i = 0; i < inputListeners.length; i++) {
+			((DeferredQueryContentListener) inputListeners[i]).inputChanged(v, oldInput, newInput);
 		}
+
 	}
 
 	public Object[] getElements(Object input) {
@@ -52,7 +81,9 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 	}
 
 	public void dispose() {
-		// Nothing to do
+		if (manager != null) {
+			manager.cancel(currentInput);
+		}
 	}
 
 	public Object getParent(Object child) {
@@ -73,19 +104,62 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 	}
 
 	public Object[] getChildren(final Object parent) {
-		if (manager != null) {
-			Object[] children = manager.getChildren(parent);
-			if (children != null) {
-				// This will be a placeholder to indicate 
-				// that the real children are being fetched
-				return children;
+		if (parent instanceof RemoteQueriedElement) {
+			RemoteQueriedElement element = (RemoteQueriedElement) parent;
+			if (element.fetchOnFirstAccessOnly() && queryCompleted.contains(element))
+				return element.getChildren(element);
+
+			if (manager != null && !synchronous) {
+				if (!alreadyQueried.containsKey(parent)) {
+					alreadyQueried.put(parent, null);
+					Object[] fetchListeners = listeners.getListeners();
+					for (int i = 0; i < fetchListeners.length; i++) {
+						((DeferredQueryContentListener) fetchListeners[i]).fetchingDeferredChildren(parent);
+					}
+					manager.addUpdateCompleteListener(new JobChangeAdapter() {
+						public void done(IJobChangeEvent event) {
+							if (event.getResult().isOK()) {
+								queryCompleted.add(parent);
+							}
+							Object[] finishedListeners = listeners.getListeners();
+							for (int i = 0; i < finishedListeners.length; i++) {
+								((DeferredQueryContentListener) finishedListeners[i]).finishedFetchingDeferredChildren(parent, event.getResult());
+							}
+
+						}
+					});
+					Object[] children = manager.getChildren(parent);
+					if (children != null) {
+						// This will be a placeholder to indicate 
+						// that the real children are being fetched
+						alreadyQueried.put(parent, children);
+						return children;
+					}
+				} else {
+					// We have already asked the manager, just bail out quickly here using the
+					// same placeholder as before
+					Object children = alreadyQueried.get(parent);
+					if (children == null)
+						return null;
+					return (Object[]) children;
+				}
 			}
 		}
-		// We don't have a deferred content manager or else it could
-		// not retrieve deferred content.
+		// Either we had no deferred manager or we are operating
+		// in synchronous mode
 		if (parent instanceof ProvElement) {
 			return ((ProvElement) parent).getChildren(parent);
 		}
 		return null;
 	}
+
+	public void setSynchronous(boolean sync) {
+		if (sync == true && manager != null)
+			manager.cancel(currentInput);
+		this.synchronous = sync;
+	}
+
+	public boolean getSynchronous() {
+		return synchronous;
+	}
 }
commit 9749e7ffa46035c66f78cd2b917447bb964b4d0b
Author: Susan Franklin <sfranklin>
Date:   Thu Apr 17 04:28:46 2008 +0000

    Bug 216028 - [ui] Available IU view enhancements

1	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
64	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
123	33	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index d8ca283..200c8ad 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -153,6 +153,7 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 						queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
 					else
 						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+					metaRepos.setQueryable(queryable);
 				} else
 					queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
 				return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 1488dcd..fab028d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -16,24 +16,27 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.DeferredFetchFilteredTree;
 import org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.RefreshMetadataRepositoriesOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
-import org.eclipse.jface.viewers.StructuredViewer;
-import org.eclipse.jface.viewers.TreeViewer;
+import org.eclipse.jface.viewers.*;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.DisposeEvent;
 import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.IWorkbench;
+import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
@@ -52,6 +55,8 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	private IViewMenuProvider menuProvider;
 	private boolean useBold = false;
 	private IUDetailsLabelProvider labelProvider;
+	private Display display;
+	boolean ignoreEvent = false;
 	DeferredFetchFilteredTree filteredTree;
 	IUColumnConfig[] columnConfig;
 	private int refreshRepoFlags = IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM;
@@ -93,6 +98,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 */
 	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context, QueryContext queryContext, AvailableIUPatternFilter filter, IUColumnConfig[] columnConfig, IViewMenuProvider menuProvider) {
 		super(parent, queryProvider, font, context);
+		this.display = parent.getDisplay();
 		this.queryContext = queryContext;
 		this.filter = filter;
 		this.menuProvider = menuProvider;
@@ -136,7 +142,19 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		// Input last.
 		availableIUViewer.setInput(getInput());
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, getQueryProvider());
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, getQueryProvider()) {
+			protected void repositoryAdded(final RepositoryEvent event) {
+				if (ignoreEvent) {
+					ignoreEvent = false;
+					return;
+				}
+				makeRepositoryVisible(event.getRepositoryLocation());
+			}
+
+			protected void repositoryDiscovered(RepositoryEvent event) {
+				ignoreEvent = true;
+			}
+		};
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
 
 		availableIUViewer.getControl().addDisposeListener(new DisposeListener() {
@@ -235,4 +253,45 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		// Calling this will create a new input and refresh the viewer
 		setQueryContext(queryContext);
 	}
+
+	/*
+	 * Make the repository with the specified location visible in the viewer.
+	 */
+	void makeRepositoryVisible(final URL location) {
+		// We rely on the fact that repository addition happens
+		// in a job.  We would get burned by this assumption if other
+		// code adds repositories in the UI thread.
+		// For now we assume that loading the repo while receiving
+		// the add event won't block the UI.  Do this
+		// first before expanding.
+		try {
+			ProvisioningUtil.loadMetadataRepository(location, null);
+		} catch (ProvisionException e) {
+			// ignore because we were doing this "for free." 
+			return;
+		}
+		display.asyncExec(new Runnable() {
+			public void run() {
+				final TreeViewer viewer = filteredTree.getViewer();
+				IWorkbench workbench = PlatformUI.getWorkbench();
+				if (workbench.isClosing())
+					return;
+				viewer.refresh();
+				final Tree tree = viewer.getTree();
+				if (tree != null && !tree.isDisposed()) {
+					TreeItem[] items = tree.getItems();
+					for (int i = 0; i < items.length; i++) {
+						if (items[i].getData() instanceof RepositoryElement) {
+							URL url = ((RepositoryElement) items[i].getData()).getLocation();
+							if (url.toExternalForm().equals(location.toExternalForm())) {
+								viewer.expandToLevel(items[i].getData(), AbstractTreeViewer.ALL_LEVELS);
+								tree.select(items[i]);
+								return;
+							}
+						}
+					}
+				}
+			}
+		});
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
index 511ac72..a79219d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
@@ -26,7 +26,10 @@ import org.eclipse.ui.PlatformUI;
 
 /**
  * ProvisioningListener which updates a structured viewer based on
- * provisioning changes
+ * provisioning changes.  Provides default behavior which refreshes particular
+ * model elements or the entire viewer based on the nature of the change and the
+ * changes that the client is interested in.  Subclasses typically only need
+ * override when there is additional, specialized behavior required.
  * 
  * @since 3.4
  */
@@ -53,52 +56,139 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 		if (o instanceof ProfileEvent && (((eventTypes & PROV_EVENT_IU) == PROV_EVENT_IU) || ((eventTypes & PROV_EVENT_PROFILE) == PROV_EVENT_PROFILE))) {
 			ProfileEvent event = (ProfileEvent) o;
 			if (event.getReason() == ProfileEvent.CHANGED) {
-				final String profileId = event.getProfileId();
-				display.asyncExec(new Runnable() {
-					public void run() {
-						if (viewer.getControl().isDisposed())
-							return;
-						// We want to refresh the affected profile, so we
-						// construct a profile element on this profile.
-						ProfileElement element = new ProfileElement(profileId);
-						element.setQueryProvider(queryProvider);
-						viewer.refresh(element);
-					}
-				});
-			} else {
-				display.asyncExec(new Runnable() {
-					public void run() {
-						if (viewer.getControl().isDisposed())
-							return;
-						refreshAll();
-					}
-				});
+				profileChanged(event.getProfileId());
+			} else if (event.getReason() == ProfileEvent.ADDED) {
+				profileAdded(event.getProfileId());
+			} else if (event.getReason() == ProfileEvent.REMOVED) {
+				profileRemoved(event.getProfileId());
 			}
 		} else if (o instanceof RepositoryEvent) {
 			RepositoryEvent event = (RepositoryEvent) o;
 			// Do not refresh unless this is the type of repo that we are interested in
 			if ((event.getRepositoryType() == IRepository.TYPE_METADATA && (eventTypes & PROV_EVENT_METADATA_REPOSITORY) == PROV_EVENT_METADATA_REPOSITORY) || (event.getRepositoryType() == IRepository.TYPE_ARTIFACT && (eventTypes & PROV_EVENT_ARTIFACT_REPOSITORY) == PROV_EVENT_ARTIFACT_REPOSITORY)) {
-				if (event.getKind() == RepositoryEvent.ADDED || event.getKind() == RepositoryEvent.REMOVED) {
-					display.asyncExec(new Runnable() {
-						public void run() {
-							IWorkbench workbench = PlatformUI.getWorkbench();
-							if (workbench.isClosing())
-								return;
-							Control control = viewer.getControl();
-							if (control != null && !control.isDisposed())
-								refreshAll();
-						}
-					});
+				if (event.getKind() == RepositoryEvent.ADDED) {
+					repositoryAdded(event);
+				} else if (event.getKind() == RepositoryEvent.REMOVED) {
+					repositoryRemoved(event);
+
+				} else if (event.getKind() == RepositoryEvent.DISCOVERED) {
+					repositoryDiscovered(event);
+				} else if (event.getKind() == RepositoryEvent.CHANGED) {
+					repositoryChanged(event);
 				}
 			}
 		}
+	}
 
+	/**
+	 * A repository has been added.  The default behavior is to
+	 * refresh the viewer.  Subclasses may override.  May be called
+	 * from a non-UI thread.
+	 * 
+	 * @param event the RepositoryEvent describing the details
+	 */
+	protected void repositoryAdded(RepositoryEvent event) {
+		asyncRefresh();
+	}
+
+	/**
+	 * A repository has been removed.  The default behavior is to
+	 * refresh the viewer.  Subclasses may override.  May be called
+	 * from a non-UI thread.
+	 * 
+	 * @param event the RepositoryEvent describing the details
+	 */
+	protected void repositoryRemoved(RepositoryEvent event) {
+		asyncRefresh();
+	}
+
+	/**
+	 * A repository has been discovered.  Subclasses may override.  May be called
+	 * from a non-UI thread.
+	 * 
+	 * @param event the RepositoryEvent describing the details
+	 */
+	protected void repositoryDiscovered(RepositoryEvent event) {
+		// Do nothing for now
+	}
+
+	/**
+	 * A repository has changed.  Subclasses may override.  May be called
+	 * from a non-UI thread.
+	 * 
+	 * @param event the RepositoryEvent describing the details
+	 */
+	protected void repositoryChanged(RepositoryEvent event) {
+		// Do nothing for now.  When this event is actually used in
+		// the core, we may want to refresh particular elements the way
+		// we currently refresh a profile element.
+	}
+
+	/**
+	 * The specified profile has changed.  The default behavior is to refresh the viewer
+	 * with a profile element of the matching id.  Subclasses may override.  May be called
+	 * from a non-UI thread.
+	 * 
+	 * @param profileId the id of the profile that changed.
+	 */
+	protected void profileChanged(final String profileId) {
+		display.asyncExec(new Runnable() {
+			public void run() {
+				IWorkbench workbench = PlatformUI.getWorkbench();
+				if (workbench.isClosing())
+					return;
+
+				if (viewer.getControl().isDisposed())
+					return;
+				// We want to refresh the affected profile, so we
+				// construct a profile element on this profile.
+				ProfileElement element = new ProfileElement(profileId);
+				element.setQueryProvider(queryProvider);
+				viewer.refresh(element);
+			}
+		});
+	}
+
+	/**
+	 * The specified profile has been added.  The default behavior is to fully
+	 * refresh the associated viewer. Subclasses may override.  May be called
+	 * from a non-UI thread.
+	 * 
+	 * @param profileId the id of the profile that has been added.
+	 */
+	protected void profileAdded(final String profileId) {
+		asyncRefresh();
+	}
+
+	/**
+	 * The specified profile has been removed.  The default behavior is to fully
+	 * refresh the associated viewer. Subclasses may override.  May be called
+	 * from a non-UI thread.
+	 * 
+	 * @param profileId the id of the profile that has been removed.
+	 */
+	protected void profileRemoved(final String profileId) {
+		asyncRefresh();
+	}
+
+	private void asyncRefresh() {
+		display.asyncExec(new Runnable() {
+			public void run() {
+				IWorkbench workbench = PlatformUI.getWorkbench();
+				if (workbench.isClosing())
+					return;
+				Control control = viewer.getControl();
+				if (control != null && !control.isDisposed())
+					refreshAll();
+			}
+		});
 	}
 
 	/**
 	 * Refresh the entire structure of the viewer.  Subclasses may
 	 * override to ensure that any caching done in content providers or
-	 * model elements is refreshed before the viewer is refreshed.
+	 * model elements is refreshed before the viewer is refreshed.  This will 
+	 * always be called from the UI thread.
 	 */
 	protected void refreshAll() {
 		viewer.refresh();
commit 635b57801b76669d4f948eb482df2954792007bf
Author: Susan Franklin <sfranklin>
Date:   Fri Apr 18 15:12:03 2008 +0000

    Bug 216028 - [ui] Available IU view enhancements
    Filtering out installed content and version handling

27	20	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
0	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
33	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java
2	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
56	22	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
126	22	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
2	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
17	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
13	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
1	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
6	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/QueriedElementCollector.java
26	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
0	35	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/IUProfilePropertyQuery.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionElementCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/OtherIUVersionsCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/ProfileElementCollector.java
13	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/RollbackIUCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java
21	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index 29e01bf..7d8ba80 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -14,6 +14,7 @@ import java.net.URL;
 import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.director.IUProfilePropertyQuery;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
@@ -46,6 +47,12 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 
 	public ElementQueryDescriptor getQueryDescriptor(Object element, int queryType) {
 		IQueryable queryable;
+		QueryContext queryContext = null;
+		// We don't currently use the query context to alter the query, but as soon as we do, we'll
+		// want to make sure it gets passed through to the appropriate elements.  So
+		// we do that now.
+		if (element instanceof QueriedElement)
+			queryContext = ((QueriedElement) element).getQueryContext();
 		IPreferenceStore store = ProvAdminUIActivator.getDefault().getPreferenceStore();
 		boolean showGroupsOnly = store.getBoolean(PreferenceConstants.PREF_SHOW_GROUPS_ONLY);
 		boolean hideSystem = store.getBoolean(PreferenceConstants.PREF_HIDE_SYSTEM_REPOS);
@@ -71,22 +78,22 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 				// Is it a rollback repository?
 				if (element instanceof RollbackRepositoryElement) {
 					Query profileQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfileId());
-					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), profileQuery, new AvailableIUCollector(this, ((RollbackRepositoryElement) element).getQueryable(), false));
+					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), profileQuery, new AvailableIUCollector(this, ((RollbackRepositoryElement) element).getQueryable(), queryContext, false));
 				}
 				// It is a regular repository.
 				// What should we show as a child of a repository?
 				if (element instanceof MetadataRepositoryElement) {
 					if (useCategories)
 						// We are using categories, group into categories first.
-						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), true));
+						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), queryContext, true));
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
-						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), groupQuery, showLatest ? new LatestIUVersionElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false) : new AvailableIUCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
+						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), groupQuery, showLatest ? new LatestIUVersionElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), queryContext, false) : new AvailableIUCollector(this, ((MetadataRepositoryElement) element).getQueryable(), queryContext, false));
 					if (showLatest)
 						// We are not querying groups, but we are showing the latest version only
-						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), allQuery, new LatestIUVersionElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
+						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), allQuery, new LatestIUVersionElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), queryContext, false));
 					// Show 'em all!
-					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), allQuery, new AvailableIUCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
+					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), allQuery, new AvailableIUCollector(this, ((MetadataRepositoryElement) element).getQueryable(), queryContext, false));
 				}
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
@@ -96,15 +103,15 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
 					if (useCategories)
 						// We are using categories, group into categories first.
-						return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, true));
+						return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, queryContext, true));
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
-						return new ElementQueryDescriptor(queryable, groupQuery, showLatest ? new LatestIUVersionElementCollector(this, queryable, false) : new AvailableIUCollector(this, queryable, false));
+						return new ElementQueryDescriptor(queryable, groupQuery, showLatest ? new LatestIUVersionElementCollector(this, queryable, queryContext, false) : new AvailableIUCollector(this, queryable, queryContext, false));
 					if (showLatest)
 						// We are not querying groups, but we are showing the latest version only
-						return new ElementQueryDescriptor(queryable, allQuery, new LatestIUVersionElementCollector(this, queryable, false));
+						return new ElementQueryDescriptor(queryable, allQuery, new LatestIUVersionElementCollector(this, queryable, queryContext, false));
 					// Show 'em all!
-					return new ElementQueryDescriptor(queryable, allQuery, new AvailableIUCollector(this, queryable, false));
+					return new ElementQueryDescriptor(queryable, allQuery, new AvailableIUCollector(this, queryable, queryContext, false));
 				}
 				// Things have been grouped by category, now what?
 				// Handle uncategorized elements first
@@ -115,25 +122,25 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 					if (showGroupsOnly)
 						firstPassQuery = new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false);
 					queryable = ((UncategorizedCategoryElement) element).getQueryable();
-					Collector collector = showLatest ? new LatestIUVersionElementCollector(this, queryable, false) : new AvailableIUCollector(this, queryable, false);
-					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(this, queryable, collector));
+					Collector collector = showLatest ? new LatestIUVersionElementCollector(this, queryable, queryContext, false) : new AvailableIUCollector(this, queryable, queryContext, false);
+					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(this, queryable, queryContext, collector));
 
 				}
 				if (element instanceof CategoryElement) {
 					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getRequirements());
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
-						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true) : new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true));
+						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), queryContext, true) : new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), queryContext, true));
 					if (showLatest)
 						// We are not querying groups, but we are showing the latest version only
-						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), membersOfCategoryQuery, new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true));
+						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), membersOfCategoryQuery, new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), queryContext, true));
 					// Show 'em all!
-					return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), membersOfCategoryQuery, new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true));
+					return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), membersOfCategoryQuery, new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), queryContext, true));
 				}
 				// We've already collapsed all versions, show the rest
 				if (element instanceof IUVersionsElement) {
 					IInstallableUnit iu = ((IUVersionsElement) element).getIU();
-					return new ElementQueryDescriptor(((IUVersionsElement) element).getQueryable(), new InstallableUnitQuery(iu.getId()), new OtherIUVersionsCollector(iu, this, ((IUVersionsElement) element).getQueryable()));
+					return new ElementQueryDescriptor(((IUVersionsElement) element).getQueryable(), new InstallableUnitQuery(iu.getId()), new OtherIUVersionsCollector(iu, this, ((IUVersionsElement) element).getQueryable(), queryContext));
 				}
 			case IQueryProvider.AVAILABLE_UPDATES :
 				profile = (IProfile) ProvUI.getAdapter(element, IProfile.class);
@@ -154,7 +161,7 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 					return null;
 				QueryableUpdates updateQueryable = new QueryableUpdates(toUpdate);
 				if (showLatest)
-					collector = new LatestIUVersionCollector(this, updateQueryable, useCategories);
+					collector = new LatestIUVersionCollector(this, updateQueryable, queryContext, useCategories);
 				else
 					collector = new Collector();
 				return new ElementQueryDescriptor(updateQueryable, allQuery, collector);
@@ -165,8 +172,8 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 				else
 					query = allQuery;
 				if (showGroupsOnly)
-					return new ElementQueryDescriptor(profile, new CompoundQuery(new Query[] {groupQuery, query}, true), new InstalledIUCollector(this, profile));
-				return new ElementQueryDescriptor(profile, query, new InstalledIUCollector(this, profile));
+					return new ElementQueryDescriptor(profile, new CompoundQuery(new Query[] {groupQuery, query}, true), new InstalledIUCollector(this, profile, queryContext));
+				return new ElementQueryDescriptor(profile, query, new InstalledIUCollector(this, profile, queryContext));
 			case IQueryProvider.METADATA_REPOS :
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
@@ -176,14 +183,14 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 						queryable = new QueryableMetadataRepositoryManager(hideSystem ? IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM : IMetadataRepositoryManager.REPOSITORIES_ALL);
 				} else
 					queryable = new QueryableMetadataRepositoryManager(hideSystem ? IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM : IMetadataRepositoryManager.REPOSITORIES_ALL);
-				return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this));
+				return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this, queryContext));
 			case IQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
 				return new ElementQueryDescriptor(queryable, new Query() {
 					public boolean isMatch(Object candidate) {
 						return ProvUI.getAdapter(candidate, IProfile.class) != null;
 					}
-				}, new ProfileElementCollector(this, null));
+				}, new ProfileElementCollector(this, null, queryContext));
 			default :
 				return null;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
index c61ce03..f7e2c2f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
@@ -154,7 +154,6 @@ abstract class ProvView extends ViewPart {
 	protected void addListeners() {
 		IPreferenceStore store = ProvAdminUIActivator.getDefault().getPreferenceStore();
 		preferenceListener = new IPropertyChangeListener() {
-
 			public void propertyChange(PropertyChangeEvent event) {
 				if (getVisualProperties().contains(event.getProperty())) {
 					ProvView.this.refreshAll();
@@ -163,7 +162,6 @@ abstract class ProvView extends ViewPart {
 
 		};
 		store.addPropertyChangeListener(preferenceListener);
-
 	}
 
 	protected void removeListeners() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java
index 21cfdb0..024867c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AvailableIUViewQueryContext.java
@@ -24,6 +24,14 @@ public class AvailableIUViewQueryContext extends QueryContext {
 
 	// Default to repo as this provides the fastest information
 	private int view = VIEW_BY_REPO;
+	// Whether to show latest versions only, defaults to
+	// true.  Clients typically use a pref setting or dialog
+	// setting to initialize
+	private boolean showLatestVersionsOnly = true;
+	// Whether to hide things that are already installed
+	// Defaults to false since we wouldn't know what profile to use
+	private boolean hideAlreadyInstalled = false;
+	private String profileId = null;
 
 	public AvailableIUViewQueryContext(int viewType) {
 		this.view = viewType;
@@ -45,4 +53,29 @@ public class AvailableIUViewQueryContext extends QueryContext {
 	public void setViewType(int viewType) {
 		view = viewType;
 	}
+
+	public boolean getShowLatestVersionsOnly() {
+		return showLatestVersionsOnly;
+	}
+
+	public void setShowLatestVersionsOnly(boolean showLatest) {
+		showLatestVersionsOnly = showLatest;
+	}
+
+	public void hideAlreadyInstalled(String installedProfileId) {
+		profileId = installedProfileId;
+		hideAlreadyInstalled = true;
+	}
+
+	public void showAlreadyInstalled() {
+		hideAlreadyInstalled = false;
+	}
+
+	public boolean getHideAlreadyInstalled() {
+		return hideAlreadyInstalled;
+	}
+
+	public String getInstalledProfileId() {
+		return profileId;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index f964d8d..83dcbf8 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -65,6 +65,8 @@ public class ProvSDKMessages extends NLS {
 	public static String UpdateAndInstallDialog_Title;
 	public static String UpdateAndInstallDialog_Properties;
 	public static String UpdateAndInstallDialog_Refresh;
+	public static String UpdateAndInstallDialog_ShowAlreadyInstalledItems;
+	public static String UpdateAndInstallDialog_ShowLatestVersionsOnly;
 	public static String UpdateAndInstallDialog_ViewByCategory;
 	public static String UpdateAndInstallDialog_ViewByName;
 	public static String UpdateAndInstallDialog_ViewBySite;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index 200c8ad..bd826e1 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -46,6 +46,9 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 
 	public ElementQueryDescriptor getQueryDescriptor(Object element, int queryType) {
 		IQueryable queryable;
+		QueryContext queryContext = null;
+		if (element instanceof QueriedElement)
+			queryContext = ((QueriedElement) element).getQueryContext();
 		boolean showLatest = ProvSDKUIActivator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION);
 		switch (queryType) {
 			case IQueryProvider.ARTIFACT_REPOS :
@@ -58,12 +61,38 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 					}
 				});
 			case IQueryProvider.AVAILABLE_IUS :
+				// Things get more complicated if the user wants to filter out installed items. 
+				// This involves setting up a secondary query for installed content that the various
+				// collectors will use to reject content.  We can't use a compound query because the
+				// queryables are different (profile for installed content, repo for available content)
+				AvailableIUViewQueryContext availableViewQueryContext = null;
+				AvailableIUCollector availableIUCollector;
+				boolean hideInstalled = false;
+				ElementQueryDescriptor installedQueryDescriptor = null;
+				if (queryContext instanceof AvailableIUViewQueryContext) {
+					availableViewQueryContext = (AvailableIUViewQueryContext) ((QueriedElement) element).getQueryContext();
+					showLatest = availableViewQueryContext.getShowLatestVersionsOnly();
+					hideInstalled = availableViewQueryContext.getHideAlreadyInstalled();
+					String profileId = availableViewQueryContext.getInstalledProfileId();
+					if (hideInstalled && profileId != null) {
+						try {
+							IProfile profile = ProvisioningUtil.getProfile(profileId);
+							installedQueryDescriptor = new ElementQueryDescriptor(profile, new IUProfilePropertyByIdQuery(profile.getProfileId(), IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new Collector());
+						} catch (ProvisionException e) {
+							// just bail out, we won't try to query the installed
+							installedQueryDescriptor = null;
+						}
+					}
+				}
 
 				// Showing children of a rollback element
 				if (element instanceof RollbackRepositoryElement) {
 					Query profileIdQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfileId());
 					Query rollbackIUQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_PROFILE, Boolean.toString(true));
-					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), new RollbackIUCollector(this, ((RollbackRepositoryElement) element).getQueryable()));
+					availableIUCollector = new RollbackIUCollector(this, ((RollbackRepositoryElement) element).getQueryable(), queryContext);
+					if (hideInstalled && installedQueryDescriptor != null)
+						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
+					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), availableIUCollector);
 				}
 
 				Query groupQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_GROUP, Boolean.TRUE.toString());
@@ -77,24 +106,26 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 					else
 						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
 
-					if (metaRepos.getQueryContext() != null && metaRepos.getQueryContext() instanceof AvailableIUViewQueryContext) {
-						AvailableIUViewQueryContext context = (AvailableIUViewQueryContext) metaRepos.getQueryContext();
-						if (context.getViewType() == AvailableIUViewQueryContext.VIEW_FLAT) {
-							Collector collector;
+					if (availableViewQueryContext != null) {
+						if (availableViewQueryContext.getViewType() == AvailableIUViewQueryContext.VIEW_FLAT) {
+							AvailableIUCollector collector;
 							if (showLatest)
-								collector = new LatestIUVersionElementCollector(this, queryable, true);
+								collector = new LatestIUVersionElementCollector(this, queryable, queryContext, true);
 							else
-								collector = new AvailableIUCollector(this, queryable, true);
+								collector = new AvailableIUCollector(this, queryable, queryContext, true);
+							if (hideInstalled && installedQueryDescriptor != null)
+								collector.hideInstalledIUs(installedQueryDescriptor);
 							return new ElementQueryDescriptor(queryable, groupQuery, collector);
 						}
 					}
-					// If there is no query context, assume by category
-					return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, true));
+					// Assume category view if it wasn't flat or if there was no query context at all.
+					// Installed content not a concern for collecting categories
+					return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, queryContext, true));
 				}
 
-				// Showing children of a repository
+				// Showing children of a repository.  We always show categories, no concern for filtering installed content
 				if (element instanceof MetadataRepositoryElement) {
-					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), true));
+					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), queryContext, true));
 				}
 
 				// Showing children of categories
@@ -103,18 +134,21 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 					// Will have to look at all categories and groups and from there, figure out what's left
 					Query firstPassQuery = new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false);
 					queryable = ((UncategorizedCategoryElement) element).getQueryable();
-					Collector collector = showLatest ? new LatestIUVersionElementCollector(this, queryable, false) : new AvailableIUCollector(this, queryable, false);
-					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(this, queryable, collector));
+					availableIUCollector = showLatest ? new LatestIUVersionElementCollector(this, queryable, queryContext, false) : new AvailableIUCollector(this, queryable, queryContext, false);
+					if (hideInstalled && installedQueryDescriptor != null)
+						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
+					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(this, queryable, queryContext, availableIUCollector));
 
 				}
 				if (element instanceof CategoryElement) {
 					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getRequirements());
-					Collector collector;
 					if (showLatest)
-						collector = new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true);
+						availableIUCollector = new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), queryContext, true);
 					else
-						collector = new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true);
-					return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), collector);
+						availableIUCollector = new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), queryContext, true);
+					if (hideInstalled && installedQueryDescriptor != null)
+						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
+					return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), availableIUCollector);
 				}
 				// If we are showing only the latest version, we never represent other versions as children.
 				if (element instanceof IUVersionsElement) {
@@ -125,7 +159,7 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 				IInstallableUnit[] toUpdate;
 				Collector collector;
 				if (profile != null) {
-					collector = profile.query(new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new Collector(), null);
+					collector = profile.query(new IUProfilePropertyByIdQuery(profile.getProfileId(), IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new Collector(), null);
 					toUpdate = (IInstallableUnit[]) collector.toArray(IInstallableUnit.class);
 				} else if (element instanceof UpdateEvent) {
 					try {
@@ -139,13 +173,13 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 					return null;
 				QueryableUpdates updateQueryable = new QueryableUpdates(toUpdate);
 				if (showLatest)
-					collector = new LatestIUVersionCollector(this, updateQueryable, true);
+					collector = new LatestIUVersionCollector(this, updateQueryable, queryContext, true);
 				else
 					collector = new Collector();
 				return new ElementQueryDescriptor(updateQueryable, allQuery, collector);
 			case IQueryProvider.INSTALLED_IUS :
 				profile = (IProfile) ProvUI.getAdapter(element, IProfile.class);
-				return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new InstalledIUCollector(this, profile));
+				return new ElementQueryDescriptor(profile, new IUProfilePropertyByIdQuery(profile.getProfileId(), IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new InstalledIUCollector(this, profile, queryContext));
 			case IQueryProvider.METADATA_REPOS :
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
@@ -156,14 +190,14 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 					metaRepos.setQueryable(queryable);
 				} else
 					queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
-				return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this));
+				return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this, queryContext));
 			case IQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
 				return new ElementQueryDescriptor(queryable, new Query() {
 					public boolean isMatch(Object candidate) {
 						return ProvUI.getAdapter(candidate, IProfile.class) != null;
 					}
-				}, new ProfileElementCollector(this, null));
+				}, new ProfileElementCollector(this, null, queryContext));
 			default :
 				return null;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index b067547..989d64f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -25,6 +25,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.sdk.ProvPolicies;
 import org.eclipse.equinox.internal.provisional.p2.ui.sdk.RepositoryManipulationDialog;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.*;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
@@ -56,12 +57,16 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
 	private static final int DEFAULT_HEIGHT = 240;
 	private static final int DEFAULT_WIDTH = 300;
+	private static final int CHAR_INDENT = 5;
+	private static final int VERTICAL_MARGIN_DLU = 2;
 	private static final int DEFAULT_VIEW_TYPE = AvailableIUViewQueryContext.VIEW_BY_REPO;
 	private static final int INDEX_INSTALLED = 0;
 	private static final int INDEX_AVAILABLE = 1;
 	private static final String DIALOG_SETTINGS_SECTION = "UpdateAndInstallDialog"; //$NON-NLS-1$
 	private static final String SELECTED_TAB_SETTING = "SelectedTab"; //$NON-NLS-1$
 	private static final String AVAILABLE_VIEW_TYPE = "AvailableViewType"; //$NON-NLS-1$
+	private static final String SHOW_LATEST_VERSIONS_ONLY = "ShowLatestVersionsOnly"; //$NON-NLS-1$
+	private static final String HIDE_INSTALLED_IUS = "HideInstalledContent"; //$NON-NLS-1$
 
 	String profileId;
 	Display display;
@@ -72,10 +77,12 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 	IRepositoryManipulator repositoryManipulator;
 	ChangeViewAction viewByRepo, viewFlat, viewCategory;
 	Button installedPropButton, availablePropButton, installButton, uninstallButton, updateButton, revertButton, manipulateRepoButton, addRepoButton, removeRepoButton;
+	Button showInstalledCheckbox, showLatestVersionsCheckbox;
 	ProgressIndicator progressIndicator;
 	Label progressLabel;
 	IPropertyChangeListener preferenceListener;
 	IJobChangeListener progressListener;
+	StructuredViewerProvisioningListener profileListener;
 
 	private class ChangeViewAction extends Action {
 		int viewType;
@@ -156,10 +163,18 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		});
 		updatePrefsLink.setText(ProvSDKMessages.UpdateAndInstallDialog_PrefLink);
 		createProgressArea(comp);
+		initializeWidgetState();
 		Dialog.applyDialogFont(comp);
 		return comp;
 	}
 
+	private void initializeWidgetState() {
+		// Set widgets according to query context
+		showInstalledCheckbox.setSelection(!queryContext.getHideAlreadyInstalled());
+		showLatestVersionsCheckbox.setSelection(queryContext.getShowLatestVersionsOnly());
+
+	}
+
 	private void createTabFolder(Composite parent) {
 
 		// tab folder
@@ -309,7 +324,10 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		GridLayout layout = new GridLayout();
 		layout.numColumns = 2;
 		layout.marginWidth = 0;
-		layout.marginHeight = 0;
+		layout.marginTop = 0;
+		// breathing room underneath last checkboxes
+		layout.marginBottom = convertVerticalDLUsToPixels(VERTICAL_MARGIN_DLU);
+
 		composite.setLayout(layout);
 
 		// Now the available group 
@@ -318,6 +336,7 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		// Vertical buttons
 		Composite vButtonBar = (Composite) createAvailableIUsVerticalButtonBar(composite);
 		GridData data = new GridData(GridData.FILL_VERTICAL);
+		data.verticalIndent = convertVerticalDLUsToPixels(IDialogConstants.BUTTON_BAR_HEIGHT);
 		vButtonBar.setLayoutData(data);
 
 		// Must be done after buttons are created so that the buttons can
@@ -327,9 +346,69 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 				validateAvailableIUButtons();
 			}
 		});
+
+		// We might need to adjust the content of this viewer according to installation
+		// changes.  We want to be very selective about refreshing.
+		profileListener = new StructuredViewerProvisioningListener(availableIUGroup.getStructuredViewer(), StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, ProvSDKUIActivator.getDefault().getQueryProvider()) {
+			protected void profileAdded(String id) {
+				// do nothing
+			}
+
+			protected void profileRemoved(String id) {
+				// do nothing
+			}
+
+			protected void profileChanged(String id) {
+				if (id.equals(profileId)) {
+					display.asyncExec(new Runnable() {
+						public void run() {
+							if (isClosing())
+								return;
+							if (!showInstalledCheckbox.getSelection())
+								refreshAll();
+						}
+					});
+				}
+			}
+		};
+		ProvUI.addProvisioningListener(profileListener);
+
 		availableIUGroup.setUseBoldFontForFilteredItems(queryContext.getViewType() != AvailableIUViewQueryContext.VIEW_FLAT);
 		setDropTarget(availableIUGroup.getStructuredViewer().getControl());
 
+		gd = new GridData(SWT.FILL, SWT.FILL, true, false);
+		gd.horizontalSpan = 2;
+		gd.horizontalIndent = convertWidthInCharsToPixels(CHAR_INDENT);
+		gd.verticalIndent = convertVerticalDLUsToPixels(VERTICAL_MARGIN_DLU);
+		showLatestVersionsCheckbox = new Button(composite, SWT.CHECK);
+		showLatestVersionsCheckbox.setText(ProvSDKMessages.UpdateAndInstallDialog_ShowLatestVersionsOnly);
+		showLatestVersionsCheckbox.addSelectionListener(new SelectionListener() {
+			public void widgetDefaultSelected(SelectionEvent e) {
+				updateAvailableViewState();
+			}
+
+			public void widgetSelected(SelectionEvent e) {
+				updateAvailableViewState();
+			}
+		});
+		showLatestVersionsCheckbox.setLayoutData(gd);
+
+		showInstalledCheckbox = new Button(composite, SWT.CHECK);
+		showInstalledCheckbox.setText(ProvSDKMessages.UpdateAndInstallDialog_ShowAlreadyInstalledItems);
+		showInstalledCheckbox.addSelectionListener(new SelectionListener() {
+			public void widgetDefaultSelected(SelectionEvent e) {
+				updateAvailableViewState();
+			}
+
+			public void widgetSelected(SelectionEvent e) {
+				updateAvailableViewState();
+			}
+		});
+		gd = new GridData(SWT.FILL, SWT.FILL, true, false);
+		gd.horizontalSpan = 2;
+		gd.horizontalIndent = convertWidthInCharsToPixels(CHAR_INDENT);
+		showInstalledCheckbox.setLayoutData(gd);
+
 		validateAvailableIUButtons();
 		return composite;
 	}
@@ -395,9 +474,12 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		parent.setRedraw(false);
 		validateAvailableIUButtons();
 		availableIUGroup.setUseBoldFontForFilteredItems(queryContext.getViewType() != AvailableIUViewQueryContext.VIEW_FLAT);
-		// This triggers the viewer refresh
+		queryContext.setShowLatestVersionsOnly(showLatestVersionsCheckbox.getSelection());
+		if (showInstalledCheckbox.getSelection())
+			queryContext.showAlreadyInstalled();
+		else
+			queryContext.hideAlreadyInstalled(profileId);
 		availableIUGroup.setQueryContext(queryContext);
-
 		parent.layout(true);
 		parent.setRedraw(true);
 	}
@@ -434,6 +516,7 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		// Vertical buttons
 		Composite vButtonBar = (Composite) createInstalledIUsVerticalButtonBar(composite, ProvSDKUIActivator.getDefault().getQueryProvider());
 		GridData data = new GridData(GridData.FILL_VERTICAL);
+		data.verticalIndent = convertVerticalDLUsToPixels(IDialogConstants.BUTTON_BAR_HEIGHT);
 		vButtonBar.setLayoutData(data);
 
 		// Must be done after buttons are created so that the buttons can
@@ -587,29 +670,44 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 	}
 
 	private void readDialogSettings() {
+		if (tabFolder == null || tabFolder.isDisposed())
+			return;
+
+		// Initialize the query context using defaults and pref values
+		queryContext = new AvailableIUViewQueryContext(DEFAULT_VIEW_TYPE);
+		IPreferenceStore store = ProvSDKUIActivator.getDefault().getPreferenceStore();
+		queryContext.setShowLatestVersionsOnly(store.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
+		queryContext.hideAlreadyInstalled(profileId);
+
+		// Now refine it based on the dialog settings
 		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
 		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
 		if (section != null) {
-			if (tabFolder != null && !tabFolder.isDisposed()) {
-				int tab = 0;
-				if (section.get(SELECTED_TAB_SETTING) != null)
-					tab = section.getInt(SELECTED_TAB_SETTING);
-				tabFolder.setSelection(tab);
-
-				int viewType = DEFAULT_VIEW_TYPE;
-				try {
-					if (section.get(AVAILABLE_VIEW_TYPE) != null)
-						viewType = section.getInt(AVAILABLE_VIEW_TYPE);
-					queryContext = new AvailableIUViewQueryContext(viewType);
-				} catch (NumberFormatException e) {
-					// Ignore if there actually was a value that didn't parse.  
-					// We'll get a default query context below.
-				}
+			// Default selected tab
+			int tab = 0;
+			if (section.get(SELECTED_TAB_SETTING) != null)
+				tab = section.getInt(SELECTED_TAB_SETTING);
+			tabFolder.setSelection(tab);
+
+			// View by...
+			try {
+				if (section.get(AVAILABLE_VIEW_TYPE) != null)
+					queryContext.setViewType(section.getInt(AVAILABLE_VIEW_TYPE));
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+				// We'll get a default query context below.
 			}
-		}
-		// If we did not find a setting for the query context, use a default
-		if (queryContext == null) {
-			queryContext = new AvailableIUViewQueryContext(DEFAULT_VIEW_TYPE);
+
+			// Show latest versions
+			if (section.get(SHOW_LATEST_VERSIONS_ONLY) != null)
+				queryContext.setShowLatestVersionsOnly(section.getBoolean(SHOW_LATEST_VERSIONS_ONLY));
+
+			// Hide installed content
+			boolean hideContent = section.getBoolean(HIDE_INSTALLED_IUS);
+			if (hideContent)
+				queryContext.hideAlreadyInstalled(profileId);
+			else
+				queryContext.showAlreadyInstalled();
 		}
 	}
 
@@ -617,6 +715,8 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		if (!tabFolder.isDisposed()) {
 			getDialogBoundsSettings().put(SELECTED_TAB_SETTING, tabFolder.getSelectionIndex());
 			getDialogBoundsSettings().put(AVAILABLE_VIEW_TYPE, queryContext.getViewType());
+			getDialogBoundsSettings().put(SHOW_LATEST_VERSIONS_ONLY, showLatestVersionsCheckbox.getSelection());
+			getDialogBoundsSettings().put(HIDE_INSTALLED_IUS, !showInstalledCheckbox.getSelection());
 		}
 	}
 
@@ -688,6 +788,10 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 			ProvisioningOperationRunner.removeJobChangeListener(progressListener);
 			progressListener = null;
 		}
+		if (profileListener != null) {
+			ProvUI.removeProvisioningListener(profileListener);
+			profileListener = null;
+		}
 
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 3754457..4a6fea6 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -40,6 +40,8 @@ UpdateAndInstallDialog_RemoveSiteOperationLabel=Remove Site
 UpdateAndInstallDialog_RevertActionLabel=&Revert configuration...
 UpdateAndInstallDialog_Properties=&Properties...
 UpdateAndInstallDialog_Refresh=&Refresh
+UpdateAndInstallDialog_ShowAlreadyInstalledItems=Incl&ude items that have already been installed
+UpdateAndInstallDialog_ShowLatestVersionsOnly=Show only the &latest versions of available software
 UpdateAndInstallDialog_ViewByCategory=&Category
 UpdateAndInstallDialog_ViewByName=&Name
 UpdateAndInstallDialog_ViewBySite=&Site
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index fab028d..71e3538 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -27,6 +27,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories
 import org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.viewers.*;
@@ -140,7 +141,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		filteredTree.contentProviderSet(contentProvider);
 
 		// Input last.
-		availableIUViewer.setInput(getInput());
+		availableIUViewer.setInput(getNewInput());
 
 		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, getQueryProvider()) {
 			protected void repositoryAdded(final RepositoryEvent event) {
@@ -176,7 +177,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		}
 	}
 
-	Object getInput() {
+	Object getNewInput() {
 		MetadataRepositories input = new MetadataRepositories(getProvisioningContext().getMetadataRepositories());
 		input.setQueryContext(queryContext);
 		input.setQueryProvider(getQueryProvider());
@@ -184,14 +185,20 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	}
 
 	/**
-	 * Set the query context to be used to traverse the model in this view.  If the viewer has
-	 * already been created, reset the input with the new information.
-	 * @param context the query context
+	 * Set the query context to be used to traverse the model in this view.
+	 * If the viewer has been created and the input element honors the query
+	 * context, refresh the viewer.
 	 */
 	public void setQueryContext(QueryContext context) {
 		this.queryContext = context;
-		if (getStructuredViewer() != null)
-			getStructuredViewer().setInput(getInput());
+		if (getStructuredViewer() == null)
+			return;
+
+		Object input = getStructuredViewer().getInput();
+		if (input instanceof QueriedElement) {
+			((QueriedElement) input).setQueryContext(context);
+			getStructuredViewer().refresh();
+		}
 	}
 
 	public void setRepositoryRefreshFlags(int flags) {
@@ -250,8 +257,9 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		else
 			op = new RefreshMetadataRepositoriesOperation(ProvUIMessages.AvailableIUGroup_RefreshOperationLabel, urls);
 		ProvisioningOperationRunner.schedule(op, getShell(), StatusManager.SHOW | StatusManager.LOG);
-		// Calling this will create a new input and refresh the viewer
-		setQueryContext(queryContext);
+		StructuredViewer v = getStructuredViewer();
+		if (v != null && !v.getControl().isDisposed())
+			v.setInput(getNewInput());
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
index 55f4f97..0edf082 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
@@ -38,6 +38,19 @@ public class MetadataRepositories extends RemoteQueriedElement {
 		this.metadataRepositories = metadataRepositories;
 	}
 
+	/*
+	 * Overridden to check the query context.  We might
+	 * be showing repositories, or we might be flattening the 
+	 * view to some other element
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#getQueryType()
+	 */
+	protected int getQueryType() {
+		if (queryContext == null)
+			return getDefaultQueryType();
+		return queryContext.getQueryType();
+	}
+
 	protected int getDefaultQueryType() {
 		return IQueryProvider.METADATA_REPOS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
index cce06f2..36499e4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
@@ -37,10 +37,6 @@ public class Profiles extends QueriedElement {
 		return null;
 	}
 
-	protected int getQueryType() {
-		return IQueryProvider.PROFILES;
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
@@ -53,8 +49,7 @@ public class Profiles extends QueriedElement {
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#getDefaultQueryType()
 	 */
 	protected int getDefaultQueryType() {
-		// TODO Auto-generated method stub
-		return 0;
+		return IQueryProvider.PROFILES;
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/QueriedElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/QueriedElementCollector.java
index 70bc6b9..e442dfe 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/QueriedElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/QueriedElementCollector.java
@@ -14,6 +14,7 @@ import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
 
 /**
  * Collector that assigns a query provider and the queryable
@@ -26,10 +27,12 @@ public class QueriedElementCollector extends Collector {
 
 	protected IQueryProvider queryProvider;
 	protected IQueryable queryable;
+	protected QueryContext queryContext;
 
-	public QueriedElementCollector(IQueryProvider queryProvider, IQueryable queryable) {
+	public QueriedElementCollector(IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext) {
 		this.queryProvider = queryProvider;
 		this.queryable = queryable;
+		this.queryContext = queryContext;
 	}
 
 	/**
@@ -46,6 +49,8 @@ public class QueriedElementCollector extends Collector {
 			if (!element.knowsQueryable()) {
 				element.setQueryable(queryable);
 			}
+			if (element.getQueryContext() == null)
+				element.setQueryContext(queryContext);
 		}
 		return super.accept(match);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
index fa7a620..e859e08 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
@@ -10,9 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.query;
 
+import java.util.Collection;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.CategoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.QueriedElementCollector;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
@@ -26,12 +28,20 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 public class AvailableIUCollector extends QueriedElementCollector {
 
 	private boolean makeCategories;
+	private ElementQueryDescriptor installedQueryDescriptor;
+	private boolean hideInstalledIUs = false;
+	Collection installedElements = null;
 
-	public AvailableIUCollector(IQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
-		super(queryProvider, queryable);
+	public AvailableIUCollector(IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext, boolean makeCategories) {
+		super(queryProvider, queryable, queryContext);
 		this.makeCategories = makeCategories;
 	}
 
+	public void hideInstalledIUs(ElementQueryDescriptor installedQuery) {
+		installedQueryDescriptor = installedQuery;
+		hideInstalledIUs = true;
+	}
+
 	/**
 	 * Accepts a result that matches the query criteria.
 	 * 
@@ -40,14 +50,28 @@ public class AvailableIUCollector extends QueriedElementCollector {
 	 * or <code>false</code> to indicate the query should stop.
 	 */
 	public boolean accept(Object match) {
+		if (hideInstalledIUs && installedElements == null)
+			initializeInstalledElements();
+		if (hideInstalledIUs) {
+			IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(match, IInstallableUnit.class);
+			if (installedElements.contains(iu))
+				return true;
+		}
+		// If it's not an IU, it's an element and work is done
 		if (!(match instanceof IInstallableUnit))
 			return super.accept(match);
+
+		// We need to make an element
 		IInstallableUnit iu = (IInstallableUnit) match;
 		if (makeCategories && isCategory(iu))
 			return super.accept(new CategoryElement(iu));
 		return super.accept(makeDefaultElement(iu));
 	}
 
+	private void initializeInstalledElements() {
+		installedElements = installedQueryDescriptor.queryable.query(installedQueryDescriptor.query, installedQueryDescriptor.collector, null).toCollection();
+	}
+
 	protected Object makeDefaultElement(IInstallableUnit iu) {
 		return new AvailableIUElement(iu, null);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
index 591714f..69b0663 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
@@ -31,8 +31,8 @@ public class CategoryElementCollector extends QueriedElementCollector {
 	private boolean groupUncategorized;
 	private Set referredIUs = new HashSet();
 
-	public CategoryElementCollector(IQueryProvider queryProvider, IQueryable queryable, boolean showUncategorized) {
-		super(queryProvider, queryable);
+	public CategoryElementCollector(IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext, boolean showUncategorized) {
+		super(queryProvider, queryable, queryContext);
 		this.groupUncategorized = showUncategorized;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/IUProfilePropertyQuery.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/IUProfilePropertyQuery.java
deleted file mode 100644
index 44cddfa..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/IUProfilePropertyQuery.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.query;
-
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
-
-/**
- * A query that searches for {@link IInstallableUnit} instances that have
- * a property associated with the specified profile, whose value matches the provided value.
- */
-public class IUProfilePropertyQuery extends IUPropertyQuery {
-	private IProfile profile;
-
-	/**
-	 * Creates a new query on the given property name and value.
-	 */
-	public IUProfilePropertyQuery(IProfile profile, String propertyName, String propertyValue) {
-		super(propertyName, propertyValue);
-		this.profile = profile;
-	}
-
-	protected String getProperty(IInstallableUnit iu, String name) {
-		return profile.getInstallableUnitProperty(iu, name);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
index 313ae2f..c74352d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
@@ -24,8 +24,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  */
 public class InstalledIUCollector extends QueriedElementCollector {
 
-	public InstalledIUCollector(IQueryProvider queryProvider, IProfile profile) {
-		super(queryProvider, profile);
+	public InstalledIUCollector(IQueryProvider queryProvider, IProfile profile, QueryContext queryContext) {
+		super(queryProvider, profile, queryContext);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionCollector.java
index a810829..4a14dca 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionCollector.java
@@ -25,8 +25,8 @@ public class LatestIUVersionCollector extends AvailableIUCollector {
 
 	private HashMap uniqueIds = new HashMap();
 
-	public LatestIUVersionCollector(IQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
-		super(queryProvider, queryable, makeCategories);
+	public LatestIUVersionCollector(IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext, boolean makeCategories) {
+		super(queryProvider, queryable, queryContext, makeCategories);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionElementCollector.java
index c47c12a..977dbae 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/LatestIUVersionElementCollector.java
@@ -22,8 +22,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  * @since 3.4
  */
 public class LatestIUVersionElementCollector extends LatestIUVersionCollector {
-	public LatestIUVersionElementCollector(IQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
-		super(queryProvider, queryable, makeCategories);
+	public LatestIUVersionElementCollector(IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext, boolean makeCategories) {
+		super(queryProvider, queryable, queryContext, makeCategories);
 	}
 
 	protected Object makeDefaultElement(IInstallableUnit iu) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
index 7101339..1c32d69 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
@@ -23,8 +23,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  */
 public class MetadataRepositoryElementCollector extends QueriedElementCollector {
 
-	public MetadataRepositoryElementCollector(IQueryProvider queryProvider) {
-		super(queryProvider, null);
+	public MetadataRepositoryElementCollector(IQueryProvider queryProvider, QueryContext queryContext) {
+		super(queryProvider, null, queryContext);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/OtherIUVersionsCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/OtherIUVersionsCollector.java
index e032a36..e69e376 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/OtherIUVersionsCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/OtherIUVersionsCollector.java
@@ -25,8 +25,8 @@ public class OtherIUVersionsCollector extends QueriedElementCollector {
 
 	private IInstallableUnit iu;
 
-	public OtherIUVersionsCollector(IInstallableUnit iu, IQueryProvider queryProvider, IQueryable queryable) {
-		super(queryProvider, queryable);
+	public OtherIUVersionsCollector(IInstallableUnit iu, IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext) {
+		super(queryProvider, queryable, queryContext);
 		this.iu = iu;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/ProfileElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/ProfileElementCollector.java
index 1092fb3..a5ebe02 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/ProfileElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/ProfileElementCollector.java
@@ -23,8 +23,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  */
 public class ProfileElementCollector extends QueriedElementCollector {
 
-	public ProfileElementCollector(IQueryProvider queryProvider, IProfile profile) {
-		super(queryProvider, profile);
+	public ProfileElementCollector(IQueryProvider queryProvider, IProfile profile, QueryContext queryContext) {
+		super(queryProvider, profile, queryContext);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
index e238bbd..3560009 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueriedElement.java
@@ -57,12 +57,22 @@ public abstract class QueriedElement extends ProvElement {
 		return null;
 	}
 
+	/**
+	 * Return the query type that is appropriate for this element when there
+	 * is no query context.
+	 * @return  The integer query type
+	 */
 	protected abstract int getDefaultQueryType();
 
+	/**
+	 * Return the query type that should be used for this element.
+	 * Depending on the element, the query type may take the query context
+	 * into account.  Subclasses should override this method if there are
+	 * context-dependent decisions to be made to determine the query.
+	 * @return The integer query type
+	 */
 	protected int getQueryType() {
-		if (queryContext == null)
-			return getDefaultQueryType();
-		return queryContext.getQueryType();
+		return getDefaultQueryType();
 	}
 
 	public void setQueryProvider(IQueryProvider queryProvider) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/RollbackIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/RollbackIUCollector.java
index 07c4e8b..b698707 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/RollbackIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/RollbackIUCollector.java
@@ -23,8 +23,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  */
 public class RollbackIUCollector extends AvailableIUCollector {
 
-	public RollbackIUCollector(IQueryProvider queryProvider, IQueryable queryable) {
-		super(queryProvider, queryable, false);
+	public RollbackIUCollector(IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext) {
+		super(queryProvider, queryable, queryContext, false);
 	}
 
 	protected Object makeDefaultElement(IInstallableUnit iu) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java
index cbffbe0..45c8548 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java
@@ -34,8 +34,8 @@ public class UncategorizedElementCollector extends QueriedElementCollector {
 	private HashMap allOthersById = new HashMap();
 	private Collector resultCollector;
 
-	public UncategorizedElementCollector(IQueryProvider queryProvider, IQueryable queryable, Collector resultCollector) {
-		super(queryProvider, queryable);
+	public UncategorizedElementCollector(IQueryProvider queryProvider, IQueryable queryable, QueryContext queryContext, Collector resultCollector) {
+		super(queryProvider, queryable, queryContext);
 		this.resultCollector = resultCollector;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
index a79219d..c0d57fc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
@@ -19,7 +19,6 @@ import org.eclipse.equinox.internal.provisional.p2.engine.ProfileEvent;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.jface.viewers.StructuredViewer;
-import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.IWorkbench;
 import org.eclipse.ui.PlatformUI;
@@ -134,11 +133,7 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 	protected void profileChanged(final String profileId) {
 		display.asyncExec(new Runnable() {
 			public void run() {
-				IWorkbench workbench = PlatformUI.getWorkbench();
-				if (workbench.isClosing())
-					return;
-
-				if (viewer.getControl().isDisposed())
+				if (isClosing())
 					return;
 				// We want to refresh the affected profile, so we
 				// construct a profile element on this profile.
@@ -171,15 +166,12 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 		asyncRefresh();
 	}
 
-	private void asyncRefresh() {
+	protected void asyncRefresh() {
 		display.asyncExec(new Runnable() {
 			public void run() {
-				IWorkbench workbench = PlatformUI.getWorkbench();
-				if (workbench.isClosing())
+				if (isClosing())
 					return;
-				Control control = viewer.getControl();
-				if (control != null && !control.isDisposed())
-					refreshAll();
+				refreshAll();
 			}
 		});
 	}
@@ -197,4 +189,21 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 	public int getEventTypes() {
 		return eventTypes;
 	}
+
+	/**
+	 * Return whether the viewer is closing or shutting down.
+	 * This method should be used in async execs to ensure that
+	 * the viewer is still alive.
+	 * @return a boolean indicating whether the viewer is closing
+	 */
+	protected boolean isClosing() {
+		IWorkbench workbench = PlatformUI.getWorkbench();
+		if (workbench.isClosing())
+			return true;
+
+		if (viewer.getControl().isDisposed())
+			return true;
+
+		return false;
+	}
 }

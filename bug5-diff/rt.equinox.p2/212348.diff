commit 0c26813151c77bda96fb1b35ffcf58e74aa05fd8
Author: John Arthorne <johna>
Date:   Fri Jan 11 16:45:56 2008 +0000

    Bug 212348 [prov] [repo] Find a way to better report the failure of repository addition

17	9	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
1	0	bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
14	11	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
16	9	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
1	0	bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
21	15	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
15	14	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
16	8	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
2	1	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
4	3	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
6	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
5	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
49	20	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
5	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
18	5	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
3	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/IMetadataRepositoryFactory.java
1	0	bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
3	2	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
2	1	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index 47d13b7..43f5f76 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -36,23 +36,31 @@ public class ProvisioningHelper {
 	public static IMetadataRepository addMetadataRepository(URL location) {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null)
-			throw new IllegalStateException("No metadata repository manager found");
-		IMetadataRepository repository = manager.loadRepository(location, null);
-		if (repository != null)
-			return repository;
+			throw new IllegalStateException("No metadata repository manager found"); //$NON-NLS-1$
+		try {
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
+		}
 
-		// for convenience create and add a repo here
-		// TODO need to get rid o fthe factory method.
+		// for convenience create and add a repository here
 		String repositoryName = location + " - metadata"; //$NON-NLS-1$
-		IMetadataRepository result = manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-		return result;
+		try {
+			return manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
+		} catch (ProvisionException e) {
+			return null;
+		}
 	}
 
 	public static IMetadataRepository getMetadataRepository(URL location) {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null)
 			throw new IllegalStateException("No metadata repository manager found");
-		return manager.loadRepository(location, null);
+		try {
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			return null;
+		}
 	}
 
 	public static void removeMetadataRepository(URL location) {
diff --git a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
index 6a0a08b..2d4faec 100644
--- a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
@@ -6,6 +6,7 @@ Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Bundle-Version: 0.1.0.qualifier
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.eventbus,
  org.eclipse.equinox.p2.core.location,
  org.eclipse.equinox.p2.core.repository,
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 9843cd4..198735d 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -13,6 +13,7 @@ import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.resolution.ResolutionHelper;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.IPlanner;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Operand;
@@ -207,7 +208,7 @@ public class SimplePlanner implements IPlanner {
 		}
 	}
 
-	protected IInstallableUnit[] gatherAvailableInstallableUnits(IInstallableUnit[] additionalSource, URL[] metadataRepositories) {
+	protected IInstallableUnit[] gatherAvailableInstallableUnits(IInstallableUnit[] additionalSource, URL[] repositories) {
 		List results = new ArrayList();
 		if (additionalSource != null) {
 			for (int i = 0; i < additionalSource.length; i++) {
@@ -216,16 +217,18 @@ public class SimplePlanner implements IPlanner {
 		}
 
 		IMetadataRepositoryManager repoMgr = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
-		if (metadataRepositories == null)
-			metadataRepositories = repoMgr.getKnownRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
-
-		for (int i = 0; i < metadataRepositories.length; i++) {
-			IMetadataRepository repository = repoMgr.loadRepository(metadataRepositories[i], null);
-			if (repository == null)
-				continue;
-			Collector matches = repository.query(new InstallableUnitQuery(null, VersionRange.emptyRange), new Collector(), null);
-			for (Iterator it = matches.iterator(); it.hasNext();)
-				results.add(it.next());
+		if (repositories == null)
+			repositories = repoMgr.getKnownRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
+
+		for (int i = 0; i < repositories.length; i++) {
+			try {
+				IMetadataRepository repository = repoMgr.loadRepository(repositories[i], null);
+				Collector matches = repository.query(new InstallableUnitQuery(null, VersionRange.emptyRange), new Collector(), null);
+				for (Iterator it = matches.iterator(); it.hasNext();)
+					results.add(it.next());
+			} catch (ProvisionException e) {
+				//skip unreadable repositories
+			}
 		}
 		return (IInstallableUnit[]) results.toArray(new IInstallableUnit[results.size()]);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index c7e2299..874560c 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -11,9 +11,11 @@ package org.eclipse.equinox.internal.p2.rollback;
 import java.net.URL;
 import java.util.EventObject;
 import java.util.Hashtable;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.director.DirectorActivator;
 import org.eclipse.equinox.internal.p2.director.IUTransformationHelper;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.p2.core.repository.IRepository;
@@ -22,9 +24,9 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.query.Collector;
-import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.osgi.framework.Version;
 
 public class FormerState {
@@ -68,16 +70,21 @@ public class FormerState {
 		});
 	}
 
-	AbstractMetadataRepository getRepository() {
+	IMetadataRepository getRepository() {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
-		AbstractMetadataRepository repository = (AbstractMetadataRepository) manager.loadRepository(location, null);
-		if (repository != null)
+		try {
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
+		}
+		try {
+			IMetadataRepository repository = manager.createRepository(location, "Agent rollback repository", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
+			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 			return repository;
-		repository = (AbstractMetadataRepository) manager.createRepository(location, "Agent rollback repository", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
-		if (repository == null)
-			throw new IllegalStateException("Unable to open or create Agent's rollback repository"); //$NON-NLS-1$
-		((IRepository) repository).setProperty(IRepository.PROP_SYSTEM, Boolean.valueOf(true).toString());
-		return repository;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+		}
+		throw new IllegalStateException("Unable to open or create Agent's rollback repository"); //$NON-NLS-1$
 	}
 
 	IInstallableUnit profileToIU(Profile toConvert) {
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
index 3e7014c..4cb2acd 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
@@ -7,6 +7,7 @@ Bundle-Localization: plugin
 Bundle-Version: 0.1.0.qualifier
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.p2.artifact.repository,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.metadata,
  org.eclipse.equinox.p2.metadata.generator,
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
index e6fa220..6c30c45 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
@@ -13,9 +13,11 @@ import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.directorywatcher.DirectoryChangeListener;
 import org.eclipse.equinox.p2.directorywatcher.DirectoryWatcher;
 import org.eclipse.equinox.p2.metadata.generator.*;
@@ -163,23 +165,27 @@ public class ProvisioningListener extends DirectoryChangeListener {
 
 	private void initializeMetadataRepository(EclipseInstallGeneratorInfoProvider provider, URL location) {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
-		IMetadataRepository repository = manager.loadRepository(location, null);
-		if (repository != null) {
-			if (repository.isModifiable()) {
-				provider.setMetadataRepository(repository);
-				if (!provider.append())
-					repository.removeAll();
-				return;
+		try {
+			IMetadataRepository repository = manager.loadRepository(location, null);
+			if (repository != null) {
+				if (repository.isModifiable()) {
+					provider.setMetadataRepository(repository);
+					if (!provider.append())
+						repository.removeAll();
+					return;
+				}
+				throw new IllegalArgumentException("Artifact repository not writeable: " + location); //$NON-NLS-1$
 			}
-			throw new IllegalArgumentException("Artifact repository not writeable: " + location); //$NON-NLS-1$
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
+		}
+		try {
+			String repositoryName = location + " - metadata"; //$NON-NLS-1$
+			IMetadataRepository repository = manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
+			provider.setMetadataRepository(repository);
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
 		}
-
-		// 	the given repo location is not an existing repo so we have to create something
-		// TODO for now create a random repo by default.
-		String repositoryName = location + " - metadata"; //$NON-NLS-1$
-		IMetadataRepository result = manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-		if (result != null)
-			provider.setMetadataRepository(result);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
index f4885fc..72053bd 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
@@ -13,7 +13,9 @@ import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.p2.artifact.repository.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -101,28 +103,27 @@ public class RepositoryListener extends DirectoryChangeListener {
 
 	private IMetadataRepository initializeMetadataRepository(BundleContext context, URL stateDirURL) {
 		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-		if (reference == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered.");
-
-		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) context.getService(reference);
+		IMetadataRepositoryManager manager = null;
+		if (reference != null)
+			manager = (IMetadataRepositoryManager) context.getService(reference);
 		if (manager == null)
 			throw new IllegalStateException("MetadataRepositoryManager not registered.");
 
-		IMetadataRepository repository = null;
 		try {
-			repository = manager.loadRepository(stateDirURL, null);
-			if (repository == null) {
-				repository = manager.createRepository(stateDirURL, "metadata listener " + repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-				repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			try {
+				return manager.loadRepository(stateDirURL, null);
+			} catch (ProvisionException e) {
+				//fall through and create new repository
 			}
+			IMetadataRepository repository = manager.createRepository(stateDirURL, "Metadata listener " + repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
+			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			return repository;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+			throw new IllegalStateException("Couldn't create listener metadata repository for: " + stateDirURL);
 		} finally {
 			context.ungetService(reference);
 		}
-
-		if (repository == null)
-			throw new IllegalStateException("Couldn't create listener metadata repository for: " + stateDirURL);
-
-		return repository;
 	}
 
 	/* (non-Javadoc)
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
index 08e9fd3..9c11d29 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
@@ -13,16 +13,18 @@ package org.eclipse.equinox.internal.p2.installregistry;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.EventObject;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.osgi.framework.ServiceReference;
 
 public class MetadataCache {
@@ -40,15 +42,21 @@ public class MetadataCache {
 		hookListener();
 	}
 
-	AbstractMetadataRepository getRepository() {
+	IMetadataRepository getRepository() {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(EngineActivator.getContext(), IMetadataRepositoryManager.class.getName());
-		AbstractMetadataRepository repository = (AbstractMetadataRepository) manager.loadRepository(location, null);
-		if (repository != null)
+		try {
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
+		}
+		try {
+			IMetadataRepository repository = manager.createRepository(location, REPOSITORY_NAME, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
+			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 			return repository;
-		//instruct the repository manager to construct a new metadata cache 
-		repository = (AbstractMetadataRepository) manager.createRepository(location, REPOSITORY_NAME, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-		repository.setProperty(IRepository.PROP_SYSTEM, Boolean.valueOf(true).toString());
-		return repository;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+			throw new IllegalStateException("Metadata cache could not be created"); //$NON-NLS-1$
+		}
 	}
 
 	private void hookListener() {
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
index 82e2760..85b13ca 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.provisional.p2.installer.IInstallOperation;
 import org.eclipse.equinox.internal.provisional.p2.installer.InstallDescription;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
@@ -236,7 +237,7 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 			artifactRepoMan.loadRepository(artifactRepo, null);
 	}
 
-	private void prepareMetadataRepository() {
+	private void prepareMetadataRepository() throws ProvisionException {
 		URL metadataRepo = installDescription.getMetadataRepository();
 		if (metadataRepo != null)
 			metadataRepoMan.loadRepository(metadataRepo, null);
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index e892458..33be19c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.generator.EclipseInstallGeneratorInfoProvider;
@@ -64,7 +65,7 @@ public class EclipseGeneratorApplication implements IApplication {
 		return new File(base, location.getPath());
 	}
 
-	private void initialize(EclipseInstallGeneratorInfoProvider provider) {
+	private void initialize(EclipseInstallGeneratorInfoProvider provider) throws ProvisionException {
 		if ("-source".equalsIgnoreCase(operation))
 			provider.initialize(new File(argument));
 		else if ("-inplace".equalsIgnoreCase(operation)) {
@@ -126,7 +127,7 @@ public class EclipseGeneratorApplication implements IApplication {
 		provider.setMappingRules(INPLACE_MAPPING_RULES);
 	}
 
-	private void initializeMetadataRepository(EclipseInstallGeneratorInfoProvider provider) {
+	private void initializeMetadataRepository(EclipseInstallGeneratorInfoProvider provider) throws ProvisionException {
 		URL location;
 		try {
 			location = new URL(metadataLocation);
@@ -155,7 +156,7 @@ public class EclipseGeneratorApplication implements IApplication {
 		}
 	}
 
-	private void initializeRepositories(EclipseInstallGeneratorInfoProvider provider) {
+	private void initializeRepositories(EclipseInstallGeneratorInfoProvider provider) throws ProvisionException {
 		initializeArtifactRepository(provider);
 		initializeMetadataRepository(provider);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
index 410f159..27a4a61 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
@@ -19,6 +19,7 @@ import java.util.jar.JarOutputStream;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.query.Collector;
@@ -171,7 +172,11 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 		save();
 		//force repository manager to reload this repository because it caches properties
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
-		manager.loadRepository(location, null);
+		try {
+			manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//ignore
+		}
 		return oldValue;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
index 942db82..0871f90 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
@@ -27,5 +27,10 @@ public class Messages extends NLS {
 
 	public static String MetadataRepositoryIO_Parser_Has_Incompatible_Version;
 	public static String MetadataRepositoryIO_Parser_Error_Parsing_Repository;
+	public static String repoMan_exists;
+	public static String repoMan_failedRead;
+	public static String repoMan_internalError;
+	public static String repoMan_notExists;
+	public static String repoMan_unknownType;
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index af80d71..939b533 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -18,6 +18,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.preferences.ConfigurationScope;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.URLUtil;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
@@ -111,28 +112,54 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		return null;
 	}
 
-	// TODO This method really should not be here.  There could be lots of different kinds of
-	// repositories and many different ways to create them.
-	// for now discriminate by the type of URL but this is bogus.
-	public IMetadataRepository createRepository(URL location, String name, String type) {
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager#createRepository(java.net.URL, java.lang.String, java.lang.String)
+	 */
+	public IMetadataRepository createRepository(URL location, String name, String type) throws ProvisionException {
 		Assert.isNotNull(location);
 		Assert.isNotNull(name);
 		Assert.isNotNull(type);
-		IMetadataRepository result = loadRepository(location, (IProgressMonitor) null);
-		if (result != null)
-			return result;
+		try {
+			//repository should not already exist
+			loadRepository(location, (IProgressMonitor) null);
+			fail(location, ProvisionException.REPOSITORY_EXISTS);
+		} catch (ProvisionException e) {
+			//expected - fall through and create the new repository
+		}
 		IExtension extension = RegistryFactory.getRegistry().getExtension(Activator.REPO_PROVIDER_XPT, type);
 		if (extension == null)
-			return null;
+			fail(location, ProvisionException.REPOSITORY_UNKNOWN_TYPE);
 		IMetadataRepositoryFactory factory = (IMetadataRepositoryFactory) createExecutableExtension(extension, FACTORY);
 		if (factory == null)
-			return null;
-		result = factory.create(location, name, type);
-		if (result != null)
-			addRepository(result);
+			fail(location, ProvisionException.REPOSITORY_FAILED_READ);
+		IMetadataRepository result = factory.create(location, name, type);
+		if (result == null)
+			fail(location, ProvisionException.REPOSITORY_FAILED_READ);
+		addRepository(result);
 		return result;
 	}
 
+	private void fail(URL location, int code) throws ProvisionException {
+		String msg = null;
+		switch (code) {
+			case ProvisionException.REPOSITORY_EXISTS :
+				msg = NLS.bind(Messages.repoMan_exists, location);
+				break;
+			case ProvisionException.REPOSITORY_UNKNOWN_TYPE :
+				msg = NLS.bind(Messages.repoMan_unknownType, location);
+				break;
+			case ProvisionException.REPOSITORY_FAILED_READ :
+				msg = NLS.bind(Messages.repoMan_failedRead, location);
+				break;
+			case ProvisionException.REPOSITORY_NOT_FOUND :
+				msg = NLS.bind(Messages.repoMan_notExists, location);
+				break;
+		}
+		if (msg == null)
+			msg = Messages.repoMan_internalError;
+		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, code, msg, null));
+	}
+
 	private IExtension[] findMatchingRepositoryExtensions(String suffix) {
 		IConfigurationElement[] elt = RegistryFactory.getRegistry().getConfigurationElementsFor(Activator.REPO_PROVIDER_XPT);
 		int count = 0;
@@ -246,7 +273,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		}
 	}
 
-	public IMetadataRepository loadRepository(URL location, IProgressMonitor progress) {
+	public IMetadataRepository loadRepository(URL location, IProgressMonitor progress) throws ProvisionException {
 		Assert.isNotNull(location);
 		IMetadataRepository result = getRepository(location);
 		if (result != null)
@@ -264,15 +291,15 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 			}
 		}
 		progress.done();
-		return null;
+		fail(location, ProvisionException.REPOSITORY_NOT_FOUND);
+		return null;//will never get here
 	}
 
 	/**
 	 * Try to load a pre-existing repo at the given location
+	 * @throws ProvisionException 
 	 */
-	// TODO this method should do some repo type discovery something like is done with
-	// the artifact repos.  For now just discriminate on the type of URL
-	private IMetadataRepository loadRepository(URL location, String suffix) {
+	private IMetadataRepository loadRepository(URL location, String suffix) throws ProvisionException {
 		IExtension[] providers = findMatchingRepositoryExtensions(suffix);
 		// Loop over the candidates and return the first one that successfully loads
 		for (int i = 0; i < providers.length; i++) {
@@ -338,9 +365,11 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		URL[] locations = getKnownRepositories(REPOSITORIES_ALL);
 		SubMonitor sub = SubMonitor.convert(monitor, locations.length * 10);
 		for (int i = 0; i < locations.length; i++) {
-			IMetadataRepository repository = loadRepository(locations[i], sub.newChild(9));
-			if (repository != null)
-				repository.query(query, collector, sub.newChild(1));
+			try {
+				loadRepository(locations[i], sub.newChild(9)).query(query, collector, sub.newChild(1));
+			} catch (ProvisionException e) {
+				//ignore this repository for this query
+			}
 		}
 		sub.done();
 		return collector;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
index cf9c005..9a1bcfe 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
@@ -16,3 +16,8 @@ MetadataRepositoryIO_Parser_Has_Incompatible_Version=\
 	Metadata repository has incompatible version {0}; expected {1}
 MetadataRepositoryIO_Parser_Error_Parsing_Repository=\
 	Error parsing metadata repository
+repoMan_exists=Repository already exists at {0}
+repoMan_failedRead=The repository could not be read: {0}
+repoMan_internalError=Internal error
+repoMan_notExists=No repository found at {0}
+repoMan_unknownType=Unknown repository type at {0}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
index 25a2f3d..c8e4c84 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.p2.metadata.repository;
 
 import java.net.URL;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.query.IQueryable;
 
@@ -64,15 +65,21 @@ public interface IMetadataRepositoryManager extends IQueryable {
 	public void addRepository(URL location);
 
 	/**
-	 * Creates and returns a metadata repository of the given type at the given location.
-	 * If a repository already exists at that location <code>null</code> is returned.
+	 * Creates and returns a new empty metadata repository of the given type at 
+	 * the given location.
 	 * 
 	 * @param location the location for the new repository
 	 * @param name the name of the new repository
 	 * @param type the kind of repository to create
-	 * @return the discovered or created repository
+	 * @return the newly created repository
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>The repository type is unknown.</li>
+	 * <li>There was an error writing to the given repository location.</li>
+	 * <li>A repository already exists at that location.</li>
+	 * </ul>
 	 */
-	public IMetadataRepository createRepository(URL location, String name, String type);
+	public IMetadataRepository createRepository(URL location, String name, String type) throws ProvisionException;
 
 	/**
 	 * Returns the metadata repository locations known to the repository manager.
@@ -104,8 +111,14 @@ public interface IMetadataRepositoryManager extends IQueryable {
 	 * @param location The location of the repository to load
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
+	 * @return The loaded metadata repository
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>There is no existing repository at that location.</li>
+	 * <li>The repository at that location could not be read.</li>
+	 * </ul>
 	 */
-	public IMetadataRepository loadRepository(URL location, IProgressMonitor monitor);
+	public IMetadataRepository loadRepository(URL location, IProgressMonitor monitor) throws ProvisionException;
 
 	/**
 	 * Removes the metadata repository at the given location from the list of
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/IMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/IMetadataRepositoryFactory.java
index ad9ef04..f1f4f61 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/IMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/IMetadataRepositoryFactory.java
@@ -11,11 +11,12 @@
 package org.eclipse.equinox.spi.p2.metadata.repository;
 
 import java.net.URL;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 
 public interface IMetadataRepositoryFactory {
 
-	public IMetadataRepository load(URL location);
+	public IMetadataRepository load(URL location) throws ProvisionException;
 
-	public IMetadataRepository create(URL location, String name, String type);
+	public IMetadataRepository create(URL location, String name, String type) throws ProvisionException;
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
index 74b6ed5..2a5df29 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
@@ -8,6 +8,7 @@ Eclipse-LazyStart: true
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.metadata.generator.features,
  org.eclipse.equinox.p2.artifact.repository,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.metadata,
  org.eclipse.equinox.p2.metadata.generator,
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
index 366a21c..dd8990f 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
@@ -19,6 +19,7 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.p2.updatesite.Activator;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -37,7 +38,7 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 
 	private final IMetadataRepository metadataRepository;
 
-	public UpdateSiteMetadataRepository(URL location) {
+	public UpdateSiteMetadataRepository(URL location) throws ProvisionException {
 		super("update site: " + location.toExternalForm(), null, null, location, null, null);
 		BundleContext context = Activator.getBundleContext();
 
@@ -183,7 +184,7 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 		}
 	}
 
-	private IMetadataRepository initializeMetadataRepository(BundleContext context, URL stateDirURL, String repositoryName) {
+	private IMetadataRepository initializeMetadataRepository(BundleContext context, URL stateDirURL, String repositoryName) throws ProvisionException {
 		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
 		if (reference == null)
 			throw new IllegalStateException("MetadataRepositoryManager not registered.");
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
index c764b0f..affd41f 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.p2.updatesite.metadata;
 
 import java.net.URL;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.spi.p2.metadata.repository.IMetadataRepositoryFactory;
 
@@ -20,7 +21,7 @@ public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryF
 		return null;
 	}
 
-	public IMetadataRepository load(URL location) {
+	public IMetadataRepository load(URL location) throws ProvisionException {
 		if (!location.getPath().endsWith("site.xml"))
 			return null;
 		return new UpdateSiteMetadataRepository(location);
commit 1f258fb6ac201453758093c8aefc9df97a8ad54d
Author: John Arthorne <johna>
Date:   Fri Jan 11 19:44:52 2008 +0000

    Bug 212348 [prov] [repo] Find a way to better report the failure of repository addition

1	0	bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
3	2	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Application.java
3	2	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Application.java
3	2	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Application.java
1	0	bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
10	5	bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/AbstractDeltaProcessorStep.java
7	5	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
58	24	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
7	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
9	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
8	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
24	7	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
17	8	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
10	8	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
15	14	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
7	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
1	1	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
8	8	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
1	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
22	18	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
1	0	bundles/org.eclipse.equinox.p2.touchpoint.natives/META-INF/MANIFEST.MF
25	28	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
12	9	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
index c993029..fde04db 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
@@ -12,6 +12,7 @@ Import-Package: ie.wombat.jbdiff,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.p2.artifact.repository,
  org.eclipse.equinox.p2.artifact.repository.processing,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.jarprocessor,
  org.eclipse.equinox.p2.metadata,
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Application.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Application.java
index 190ebcc..0a51f72 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Application.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Application.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -17,6 +17,7 @@ import org.eclipse.equinox.internal.p2.artifact.optimizers.Activator;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 
 /**
  * The optimizer <code>Application</code> for JBDiff based optimizations. 
@@ -35,7 +36,7 @@ public class Application implements IApplication {
 		return null;
 	}
 
-	private IArtifactRepository setupRepository(URL location) {
+	private IArtifactRepository setupRepository(URL location) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null)
 			// TODO log here
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Application.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Application.java
index 74955a1..a886409 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Application.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Application.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -17,6 +17,7 @@ import org.eclipse.equinox.internal.p2.artifact.optimizers.Activator;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 
 /**
  * The optimizer <code>Application</code> for JBDiff based optimizations. 
@@ -36,7 +37,7 @@ public class Application implements IApplication {
 		return null;
 	}
 
-	private IArtifactRepository setupRepository(URL location) {
+	private IArtifactRepository setupRepository(URL location) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null)
 			// TODO log here
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Application.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Application.java
index 4d61b5f..a579aae 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Application.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Application.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -17,6 +17,7 @@ import org.eclipse.equinox.internal.p2.artifact.optimizers.Activator;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 
 public class Application implements IApplication {
 
@@ -30,7 +31,7 @@ public class Application implements IApplication {
 		return null;
 	}
 
-	private IArtifactRepository setupRepository(URL location) {
+	private IArtifactRepository setupRepository(URL location) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null)
 			// TODO log here
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
index b60a5af..b91977a 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
@@ -16,6 +16,7 @@ Import-Package: ie.wombat.jbdiff,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.p2.artifact.repository,
  org.eclipse.equinox.p2.artifact.repository.processing,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.jarprocessor,
  org.eclipse.equinox.p2.metadata,
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/AbstractDeltaProcessorStep.java b/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/AbstractDeltaProcessorStep.java
index 3851614..eb7324e 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/AbstractDeltaProcessorStep.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/AbstractDeltaProcessorStep.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 compeople AG and others.
+ * Copyright (c) 2007, 2008 compeople AG and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.p2.artifact.optimizers.AbstractDeltaStep;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepDescriptor;
+import org.eclipse.equinox.p2.core.ProvisionException;
 
 /**
  * The <code>AbstractDeltaPatchStep</code> is an abstract processing step that
@@ -48,10 +49,14 @@ public abstract class AbstractDeltaProcessorStep extends AbstractDeltaStep {
 
 		URL[] repositories = repoMgr.getKnownRepositories(IArtifactRepositoryManager.REPOSITORIES_LOCAL);
 		for (int i = 0; i < repositories.length; i++) {
-			IArtifactRepository currentRepo = repoMgr.loadRepository(repositories[i], null);
-			if (currentRepo != null && currentRepo.contains(key)) {
-				repository = currentRepo;
-				return;
+			try {
+				IArtifactRepository currentRepo = repoMgr.loadRepository(repositories[i], null);
+				if (currentRepo.contains(key)) {
+					repository = currentRepo;
+					return;
+				}
+			} catch (ProvisionException e) {
+				//just skip unreadable repositories
 			}
 		}
 		status = new Status(IStatus.ERROR, Activator.ID, "No repository available containing key " + key);
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
index eced9e1..bd6d2de 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
@@ -16,6 +16,7 @@ import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 
 public class MirrorApplication implements IApplication {
 
@@ -34,7 +35,7 @@ public class MirrorApplication implements IApplication {
 		return null;
 	}
 
-	private void setupRepositories() {
+	private void setupRepositories() throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null)
 			// TODO log here
@@ -47,17 +48,18 @@ public class MirrorApplication implements IApplication {
 			destination = source;
 	}
 
-	private IArtifactRepository initializeDestination() {
+	private IArtifactRepository initializeDestination() throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
-		IArtifactRepository repository = manager.loadRepository(destinationLocation, null);
-		if (repository != null) {
+		try {
+			IArtifactRepository repository = manager.loadRepository(destinationLocation, null);
 			if (!repository.isModifiable())
 				throw new IllegalArgumentException("Artifact repository not modifiable: " + destinationLocation); //$NON-NLS-1$
 			if (!append)
 				repository.removeAll();
 			return repository;
+		} catch (ProvisionException e) {
+			//fall through and create a new repository below
 		}
-
 		// 	the given repo location is not an existing repo so we have to create something
 		// TODO for now create a Simple repo by default.
 		String repositoryName = destinationLocation + " - artifacts"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index fa6cec0..c533e2c 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -18,10 +18,12 @@ import org.eclipse.core.runtime.preferences.ConfigurationScope;
 import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.p2.artifact.repository.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.spi.p2.artifact.repository.IArtifactRepositoryFactory;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.service.prefs.BackingStoreException;
 import org.osgi.service.prefs.Preferences;
 
@@ -96,13 +98,20 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		return new FileDownloadRequest(key, destination);
 	}
 
-	private Object createExecutableExtension(IExtension extension, String element) throws CoreException {
+	private Object createExecutableExtension(IExtension extension, String element) throws ProvisionException {
 		IConfigurationElement[] elements = extension.getConfigurationElements();
 		for (int i = 0; i < elements.length; i++) {
-			if (elements[i].getName().equals(element))
-				return elements[i].createExecutableExtension("class"); //$NON-NLS-1$
+			if (elements[i].getName().equals(element)) {
+				try {
+					return elements[i].createExecutableExtension("class"); //$NON-NLS-1$
+				} catch (CoreException e) {
+					log("Error loading repository extension: " + extension.getUniqueIdentifier(), e); //$NON-NLS-1$
+					return null;
+				}
+			}
 		}
-		throw new CoreException(new Status(IStatus.ERROR, Activator.ID, "Malformed extension")); //$NON-NLS-1$
+		log("Malformed repository extension: " + extension.getUniqueIdentifier(), null); //$NON-NLS-1$
+		return null;
 	}
 
 	public IArtifactRequest createMirrorRequest(IArtifactKey key, IArtifactRepository destination) {
@@ -113,25 +122,45 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		return new MirrorRequest(key, destination, destinationDescriptorProperties, destinationRepositoryProperties);
 	}
 
-	public IArtifactRepository createRepository(URL location, String name, String type) {
-		IArtifactRepository result = loadRepository(location, (IProgressMonitor) null);
-		if (result != null)
-			return result;
-		IExtension extension = RegistryFactory.getRegistry().getExtension(Activator.REPO_PROVIDER_XPT, type);
-		if (extension == null)
-			return null;
+	private void fail(URL location, int code) throws ProvisionException {
+		String msg = null;
+		switch (code) {
+			case ProvisionException.REPOSITORY_EXISTS :
+				msg = NLS.bind(Messages.repoMan_exists, location);
+				break;
+			case ProvisionException.REPOSITORY_UNKNOWN_TYPE :
+				msg = NLS.bind(Messages.repoMan_unknownType, location);
+				break;
+			case ProvisionException.REPOSITORY_FAILED_READ :
+				msg = NLS.bind(Messages.repoMan_failedRead, location);
+				break;
+			case ProvisionException.REPOSITORY_NOT_FOUND :
+				msg = NLS.bind(Messages.repoMan_notExists, location);
+				break;
+		}
+		if (msg == null)
+			msg = Messages.repoMan_internalError;
+		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, code, msg, null));
+	}
+
+	public IArtifactRepository createRepository(URL location, String name, String type) throws ProvisionException {
 		try {
-			IArtifactRepositoryFactory factory = (IArtifactRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
-			if (factory == null)
-				return null;
-			result = factory.create(location, name, type);
-			if (result != null)
-				addRepository(result);
-			return result;
-		} catch (CoreException e) {
-			log("Failed to load artifact repository extension: " + location, e); //$NON-NLS-1$
-			return null;
+			loadRepository(location, (IProgressMonitor) null);
+			fail(location, ProvisionException.REPOSITORY_EXISTS);
+		} catch (ProvisionException e) {
+			//expected - fall through and create a new repository
 		}
+		IExtension extension = RegistryFactory.getRegistry().getExtension(Activator.REPO_PROVIDER_XPT, type);
+		if (extension == null)
+			fail(location, ProvisionException.REPOSITORY_UNKNOWN_TYPE);
+		IArtifactRepositoryFactory factory = (IArtifactRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
+		if (factory == null)
+			fail(location, ProvisionException.REPOSITORY_FAILED_READ);
+		IArtifactRepository result = factory.create(location, name, type);
+		if (result == null)
+			fail(location, ProvisionException.REPOSITORY_FAILED_READ);
+		addRepository(result);
+		return result;
 	}
 
 	private IExtension[] findMatchingRepositoryExtensions(String suffix) {
@@ -247,7 +276,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		}
 	}
 
-	public IArtifactRepository loadRepository(URL location, IProgressMonitor monitor) {
+	public IArtifactRepository loadRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		// TODO do something with the monitor
 		IArtifactRepository result = getRepository(location);
 		if (result != null)
@@ -260,6 +289,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 				return result;
 			}
 		}
+		fail(location, ProvisionException.REPOSITORY_NOT_FOUND);
 		return null;
 	}
 
@@ -364,8 +394,12 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		if (location == null)
 			// TODO should do something here since we are failing to restore.
 			return;
-		SimpleArtifactRepository cache = (SimpleArtifactRepository) createRepository(location.getArtifactRepositoryURL(), "download cache", "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$ //$NON-NLS-2$
-		cache.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+		try {
+			SimpleArtifactRepository cache = (SimpleArtifactRepository) createRepository(location.getArtifactRepositoryURL(), "download cache", "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$ //$NON-NLS-2$
+			cache.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+		}
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
index 73031ac..69d1b4a 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,6 +25,12 @@ public class Messages extends NLS {
 		// Do not instantiate
 	}
 
+	public static String repoMan_exists;
+	public static String repoMan_failedRead;
+	public static String repoMan_internalError;
+	public static String repoMan_notExists;
+	public static String repoMan_unknownType;
+
 	public static String FileDownloadError;
 	public static String SimpleArtifactRepositoryIO_Parser_Error_Parsing_Repository;
 	public static String SimpleArtifactRepositoryIO_Parser_Has_Incompatible_Version;
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
index 08a3f7e..968fdf1 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
@@ -1,5 +1,5 @@
 ###############################################################################
-# Copyright (c) 2007 IBM Corporation and others.
+# Copyright (c) 2007, 2008 IBM Corporation and others.
 # All rights reserved. This program and the accompanying materials
 # are made available under the terms of the Eclipse Public License v1.0
 # which accompanies this distribution, and is available at
@@ -13,4 +13,11 @@ FileDownloadError=Error downloading {0} to {1}.
 SimpleArtifactRepositoryIO_Parser_Error_Parsing_Registry=\
 	Error parsing simple artifact repository
 SimpleArtifactRepositoryIO_Parser_Has_Incompatible_Version=\
-	Simple artifact repository has incompatible version {0}; expected {1}
\ No newline at end of file
+	Simple artifact repository has incompatible version {0}; expected {1}
+	
+repoMan_exists=Repository already exists at {0}
+repoMan_failedRead=The repository could not be read: {0}
+repoMan_internalError=Internal error
+repoMan_notExists=No repository found at {0}
+repoMan_unknownType=Unknown repository type at {0}
+	
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 189d7f6..a65b1d8 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStep;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepHandler;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.spi.p2.artifact.repository.AbstractArtifactRepository;
 
@@ -95,6 +96,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 			count++;
 		}
 	}
+
 	// TODO: optimize
 	// we could stream right into the folder
 	public static class ZippedFolderOutputStream extends OutputStream {
@@ -135,6 +137,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 			fos.write(b);
 		}
 	}
+
 	private static final String ARTIFACT_FOLDER = "artifact.folder"; //$NON-NLS-1$
 	private static final String ARTIFACT_REFERENCE = "artifact.reference"; //$NON-NLS-1$
 	private static final String ARTIFACT_UUID = "artifact.uuid"; //$NON-NLS-1$
@@ -695,7 +698,11 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		save();
 		//force repository manager to reload this repository because it caches properties
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
-		manager.loadRepository(location, null);
+		try {
+			manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//ignore
+		}
 		return oldValue;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
index a020d1f..b4ad546 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
@@ -14,6 +14,7 @@ import java.net.URL;
 import java.util.Properties;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 
@@ -52,6 +53,11 @@ public interface IArtifactRepositoryManager {
 	 */
 	public static final String PROP_DESCRIPTION = "description"; //$NON-NLS-1$
 
+	/**
+	 * Repository type for a simple repository based on a URL or local file system location.
+	 */
+	public static final String TYPE_SIMPLE_REPOSITORY = "org.eclipse.equinox.p2.artifact.repository.simpleRepository"; //$NON-NLS-1$
+
 	public static final IArtifactRequest[] NO_ARTIFACT_REQUEST = new IArtifactRequest[0];
 
 	/**
@@ -89,14 +95,21 @@ public interface IArtifactRepositoryManager {
 	public IArtifactRequest createMirrorRequest(IArtifactKey key, IArtifactRepository destination, Properties destinationDescriptorProperties, Properties destinationRepositoryProperties);
 
 	/**
-	 * Creates and returns an artifact repository of the given type at the given location.
-	 * If a repository already exists at that location <code>null</code> is returned.
+	 * Creates and returns a new empty artifact repository of the given type at 
+	 * the given location.
+	 * 
 	 * @param location the location for the new repository
 	 * @param name the name of the new repository
 	 * @param type the kind of repository to create
-	 * @return the discovered or created repository
+	 * @return the newly created repository
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>The repository type is unknown.</li>
+	 * <li>There was an error writing to the given repository location.</li>
+	 * <li>A repository already exists at that location.</li>
+	 * </ul>
 	 */
-	public IArtifactRepository createRepository(URL location, String name, String type);
+	public IArtifactRepository createRepository(URL location, String name, String type) throws ProvisionException;
 
 	/**
 	 * Returns the artifact repository locations known to the repository manager.
@@ -152,10 +165,14 @@ public interface IArtifactRepositoryManager {
 	 * @param location the location in which to look for a repository description
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
-	 * @return a repository object for the given location or <code>null</code> if a repository
-	 * could not be found or loaded.
+	 * @return a repository object for the given location
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>There is no existing repository at that location.</li>
+	 * <li>The repository at that location could not be read.</li>
+	 * </ul>
 	 */
-	public IArtifactRepository loadRepository(URL location, IProgressMonitor monitor);
+	public IArtifactRepository loadRepository(URL location, IProgressMonitor monitor) throws ProvisionException;
 
 	/**
 	 * Remove the given repository from this manager.  Do nothing if the repository
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index 43f5f76..676f1c5 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -75,13 +75,18 @@ public class ProvisioningHelper {
 		if (manager == null)
 			// TODO log here
 			return null;
-		IArtifactRepository repository = manager.loadRepository(location, null);
-		if (repository != null)
-			return repository;
-
+		try {
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
+		}
 		// could not load a repo at that location so create one as a convenience
 		String repositoryName = location + " - artifacts"; //$NON-NLS-1$
-		return manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$
+		try {
+			return manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$
+		} catch (ProvisionException e) {
+			return null;
+		}
 	}
 
 	public static void removeArtifactRepository(URL location) {
@@ -248,8 +253,12 @@ public class ProvisioningHelper {
 
 	public static IArtifactRepository getArtifactRepository(URL repoURL) {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
-		if (manager == null)
-			return null;
-		return manager.loadRepository(repoURL, null);
+		try {
+			if (manager != null)
+				return manager.loadRepository(repoURL, null);
+		} catch (ProvisionException e) {
+			//for console, just ignore repositories that can't be read
+		}
+		return null;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
index 6c30c45..af57c07 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
@@ -144,8 +144,8 @@ public class ProvisioningListener extends DirectoryChangeListener {
 
 	private void initializeArtifactRepository(EclipseInstallGeneratorInfoProvider provider, URL location) {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
-		IArtifactRepository repository = manager.loadRepository(location, null);
-		if (repository != null) {
+		try {
+			IArtifactRepository repository = manager.loadRepository(location, null);
 			if (repository.isModifiable()) {
 				provider.setArtifactRepository(repository);
 				if (!provider.append())
@@ -153,14 +153,16 @@ public class ProvisioningListener extends DirectoryChangeListener {
 				return;
 			}
 			throw new IllegalArgumentException("Artifact repository not writeable: " + location); //$NON-NLS-1$
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
 		}
-
-		// 	the given repo location is not an existing repo so we have to create something
-		// TODO for now create a Simple repo by default.
 		String repositoryName = location + " - artifacts"; //$NON-NLS-1$
-		IArtifactRepository result = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$
-		if (result != null)
+		try {
+			IArtifactRepository result = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$
 			provider.setArtifactRepository(result);
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+		}
 	}
 
 	private void initializeMetadataRepository(EclipseInstallGeneratorInfoProvider provider, URL location) {
@@ -174,7 +176,7 @@ public class ProvisioningListener extends DirectoryChangeListener {
 						repository.removeAll();
 					return;
 				}
-				throw new IllegalArgumentException("Artifact repository not writeable: " + location); //$NON-NLS-1$
+				throw new IllegalArgumentException("Metadata repository not writeable: " + location); //$NON-NLS-1$
 			}
 		} catch (ProvisionException e) {
 			//fall through and create a new repository
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
index 72053bd..2aae24a 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
@@ -77,28 +77,29 @@ public class RepositoryListener extends DirectoryChangeListener {
 
 	private IArtifactRepository initializeArtifactRepository(BundleContext context, URL stateDirURL) {
 		ServiceReference reference = context.getServiceReference(IArtifactRepositoryManager.class.getName());
-		if (reference == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
-
-		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) context.getService(reference);
+		IArtifactRepositoryManager manager = null;
+		if (reference != null)
+			manager = (IArtifactRepositoryManager) context.getService(reference);
 		if (manager == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
+			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
 
-		IArtifactRepository repository = null;
 		try {
-			repository = manager.loadRepository(stateDirURL, null);
-			if (repository == null) {
-				repository = manager.createRepository(stateDirURL, "artifact listener " + repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
+			try {
+				return manager.loadRepository(stateDirURL, null);
+			} catch (ProvisionException e) {
+				//fall through and create a new repository
+			}
+			try {
+				IArtifactRepository repository = manager.createRepository(stateDirURL, "artifact listener " + repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
 				repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+				return repository;
+			} catch (ProvisionException e) {
+				LogHelper.log(e);
+				throw new IllegalStateException("Couldn't create listener artifact repository for: " + stateDirURL);
 			}
 		} finally {
 			context.ungetService(reference);
 		}
-
-		if (repository == null)
-			throw new IllegalStateException("Couldn't create listener artifact repository for: " + stateDirURL);
-
-		return repository;
 	}
 
 	private IMetadataRepository initializeMetadataRepository(BundleContext context, URL stateDirURL) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
index 678db1b..3c87df4 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.p2.artifact.repository.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.*;
 
 public class Sizing extends Phase {
@@ -70,17 +71,18 @@ public class Sizing extends Phase {
 		for (Iterator iterator = artifactsToObtain.iterator(); iterator.hasNext();) {
 			IArtifactRequest artifactRequest = (IArtifactRequest) iterator.next();
 			for (int i = 0; i < repositories.length; i++) {
-				IArtifactRepository repo = repoMgr.loadRepository(repositories[i], null);
-				if (repo == null)
-					continue;
+				IArtifactRepository repo;
+				try {
+					repo = repoMgr.loadRepository(repositories[i], null);
+				} catch (ProvisionException e) {
+					continue;//skip unresponsive repositories
+				}
 				IArtifactDescriptor[] descriptors = repo.getArtifactDescriptors(artifactRequest.getArtifactKey());
 				if (descriptors.length > 0) {
 					if (descriptors[0].getProperty(IArtifactDescriptor.ARTIFACT_SIZE) != null)
 						sizeOnDisk += Long.parseLong(descriptors[0].getProperty(IArtifactDescriptor.ARTIFACT_SIZE));
-
 					if (descriptors[0].getProperty(IArtifactDescriptor.DOWNLOAD_SIZE) != null)
 						dlSize += Long.parseLong(descriptors[0].getProperty(IArtifactDescriptor.DOWNLOAD_SIZE));
-
 					break;
 				}
 			}
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
index 85b13ca..c6041c7 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
@@ -231,7 +231,7 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 		profileRegistry = (IProfileRegistry) getService(IProfileRegistry.class.getName());
 	}
 
-	private void prepareArtifactRepository() {
+	private void prepareArtifactRepository() throws ProvisionException {
 		URL artifactRepo = installDescription.getArtifactRepository();
 		if (artifactRepo != null)
 			artifactRepoMan.loadRepository(artifactRepo, null);
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index 33be19c..b51276f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -84,7 +84,7 @@ public class EclipseGeneratorApplication implements IApplication {
 		initializeRepositories(provider);
 	}
 
-	private void initializeArtifactRepository(EclipseInstallGeneratorInfoProvider provider) {
+	private void initializeArtifactRepository(EclipseInstallGeneratorInfoProvider provider) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.context, IArtifactRepositoryManager.class.getName());
 		URL location;
 		try {
@@ -92,24 +92,24 @@ public class EclipseGeneratorApplication implements IApplication {
 		} catch (MalformedURLException e) {
 			throw new IllegalArgumentException("Artifact repository location not a valid URL:" + artifactLocation); //$NON-NLS-1$
 		}
-		IArtifactRepository repository = manager.loadRepository(location, null);
-		if (repository != null) {
+		try {
+			IArtifactRepository repository = manager.loadRepository(location, null);
 			if (!repository.isModifiable())
 				throw new IllegalArgumentException("Artifact repository not writeable: " + location); //$NON-NLS-1$
 			provider.setArtifactRepository(repository);
 			if (!provider.append())
 				repository.removeAll();
 			return;
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
 		}
 
 		// 	the given repo location is not an existing repo so we have to create something
 		// TODO for now create a Simple repo by default.
 		String repositoryName = artifactLocation + " - artifacts"; //$NON-NLS-1$
 		IArtifactRepository result = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$
-		if (result != null) {
-			provider.setArtifactRepository(result);
-			result.setProperty(IRepository.PROP_COMPRESSED, compress);
-		}
+		provider.setArtifactRepository(result);
+		result.setProperty(IRepository.PROP_COMPRESSED, compress);
 	}
 
 	public void initializeForInplace(EclipseInstallGeneratorInfoProvider provider) {
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
index 255bf2c..cea339e 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
@@ -13,6 +13,7 @@ Import-Package: org.eclipse.core.runtime;common=split,
  org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.p2.artifact.repository,
  org.eclipse.equinox.p2.artifact.repository.processing,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.location,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.download,
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
index fc1da05..2afa3eb 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
@@ -22,9 +22,9 @@ import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.frameworkadmin.FrameworkAdmin;
-import org.eclipse.equinox.internal.p2.core.helpers.Headers;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.p2.artifact.repository.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.engine.Profile;
@@ -73,17 +73,20 @@ public class Util {
 	static IFileArtifactRepository getBundlePoolRepository(Profile profile) {
 		URL location = getBundlePoolLocation(profile);
 		IArtifactRepositoryManager manager = getArtifactRepositoryManager();
-		IArtifactRepository bundlePool = manager.loadRepository(location, null);
-		if (bundlePool == null) {
-			// 	the given repo location is not an existing repo so we have to create something
+		try {
+			return (IFileArtifactRepository) manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//the repository doesn't exist, so fall through and create a new one
+		}
+		try {
 			String repositoryName = location + " - bundle pool"; //$NON-NLS-1$
-			bundlePool = manager.createRepository(location, repositoryName, REPOSITORY_TYPE);
-			if (bundlePool == null)
-				throw new IllegalArgumentException("Bundle pool repository not writeable: " + location); //$NON-NLS-1$
-			((IRepository) bundlePool).setProperty(IRepository.PROP_SYSTEM, Boolean.valueOf(true).toString());
+			IArtifactRepository bundlePool = manager.createRepository(location, repositoryName, REPOSITORY_TYPE);
+			bundlePool.setProperty(IRepository.PROP_SYSTEM, Boolean.valueOf(true).toString());
+			return (IFileArtifactRepository) bundlePool;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+			throw new IllegalArgumentException("Bundle pool repository not writeable: " + location); //$NON-NLS-1$
 		}
-
-		return (IFileArtifactRepository) bundlePool;
 	}
 
 	static IFileArtifactRepository getAggregatedBundleRepository(Profile profile) {
@@ -93,14 +96,15 @@ public class Util {
 		IArtifactRepositoryManager manager = getArtifactRepositoryManager();
 		URL[] knownRepositories = manager.getKnownRepositories(IArtifactRepositoryManager.REPOSITORIES_ALL);
 		for (int i = 0; i < knownRepositories.length; i++) {
-			IArtifactRepository repository = manager.loadRepository(knownRepositories[i], null);
-			if (repository == null)
-				continue;
-			String profileExtension = (String) repository.getProperties().get(PROFILE_EXTENSION);
-			if (profileExtension != null && profileExtension.equals(profile.getProfileId()))
-				bundleRepositories.add(repository);
+			try {
+				IArtifactRepository repository = manager.loadRepository(knownRepositories[i], null);
+				String profileExtension = (String) repository.getProperties().get(PROFILE_EXTENSION);
+				if (profileExtension != null && profileExtension.equals(profile.getProfileId()))
+					bundleRepositories.add(repository);
+			} catch (ProvisionException e) {
+				//skip repositories that could not be read
+			}
 		}
-
 		return new AggregatedBundleRepository(bundleRepositories);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.touchpoint.natives/META-INF/MANIFEST.MF
index 6722e01..a755c77 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/META-INF/MANIFEST.MF
@@ -8,6 +8,7 @@ Bundle-Version: 0.1.0.qualifier
 Bundle-Activator: org.eclipse.equinox.internal.p2.touchpoint.natives.Activator
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.p2.artifact.repository,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.location,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.download,
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
index 4ce6067..fcae7aa 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
@@ -16,7 +16,9 @@ import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.artifact.repository.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
+import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.osgi.framework.Version;
@@ -34,9 +36,13 @@ public class NativeTouchpoint extends Touchpoint {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
 					Operand operand = (Operand) parameters.get("operand");
-					IArtifactRequest[] requests = collect(operand.second(), profile);
-					Collection artifactRequests = (Collection) parameters.get("artifactRequests");
-					artifactRequests.add(requests);
+					try {
+						IArtifactRequest[] requests = collect(operand.second(), profile);
+						Collection artifactRequests = (Collection) parameters.get("artifactRequests");
+						artifactRequests.add(requests);
+					} catch (ProvisionException e) {
+						return e.getStatus();
+					}
 					return Status.OK_STATUS;
 				}
 
@@ -101,13 +107,11 @@ public class NativeTouchpoint extends Touchpoint {
 		return MetadataFactory.createTouchpointType("native", new Version(1, 0, 0));
 	}
 
-	private IArtifactRequest[] collect(IInstallableUnit installableUnit, Profile profile) {
+	IArtifactRequest[] collect(IInstallableUnit installableUnit, Profile profile) throws ProvisionException {
 		IArtifactKey[] toDownload = installableUnit.getArtifacts();
 		if (toDownload == null)
 			return new IArtifactRequest[0];
 		IArtifactRepository destination = getDownloadCacheRepo();
-		if (destination == null)
-			throw new IllegalStateException("The download cache is not available.");
 		IArtifactRequest[] requests = new IArtifactRequest[toDownload.length];
 		int count = 0;
 		for (int i = 0; i < toDownload.length; i++) {
@@ -134,36 +138,26 @@ public class NativeTouchpoint extends Touchpoint {
 		return (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 	}
 
-	static private void tagAsImplementation(IArtifactRepository repository) {
-		//		if (repository != null && repository.getProperties().getProperty(IRepositoryInfo.IMPLEMENTATION_ONLY_KEY) == null) {
-		//			IWritableRepositoryInfo writableInfo = (IWritableRepositoryInfo) repository.getAdapter(IWritableRepositoryInfo.class);
-		//			if (writableInfo != null) {
-		//				writableInfo.getModifiableProperties().setProperty(IRepositoryInfo.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
-		//			}
-		//		}
-	}
-
-	static private IFileArtifactRepository getDownloadCacheRepo() {
+	static private IFileArtifactRepository getDownloadCacheRepo() throws ProvisionException {
 		URL location = getDownloadCacheLocation();
 		if (location == null)
 			throw new IllegalStateException("Could not obtain the download cache location.");
 		IArtifactRepositoryManager manager = getArtifactRepositoryManager();
 		if (manager == null)
 			throw new IllegalStateException("The artifact repository manager could not be found.");
-		IArtifactRepository repository = manager.loadRepository(location, null);
-		if (repository == null) {
-			// 	the given repo location is not an existing repo so we have to create something
-			// TODO for now create a random repo by default.
+		IArtifactRepository repository;
+		try {
+			repository = manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			// the download cache doesn't exist or couldn't be read. Create new cache.
 			String repositoryName = location + " - Agent download cache"; //$NON-NLS-1$
 			repository = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
-			// TODO: do we still need to do this
-			tagAsImplementation(repository);
+			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 		}
 
 		IFileArtifactRepository downloadCache = (IFileArtifactRepository) repository.getAdapter(IFileArtifactRepository.class);
-		if (downloadCache == null) {
-			throw new IllegalArgumentException("Agent download cache not writeable: " + location); //$NON-NLS-1$
-		}
+		if (downloadCache == null)
+			throw new ProvisionException("Agent download cache not writeable: " + location);
 		return downloadCache;
 	}
 
@@ -197,9 +191,12 @@ public class NativeTouchpoint extends Touchpoint {
 
 			IArtifactKey artifactKey = iu.getArtifacts()[0];
 
-			IFileArtifactRepository downloadCache = getDownloadCacheRepo();
-			if (downloadCache == null)
-				return createError("The download cache could not be found for the \"unzip\" action.");
+			IFileArtifactRepository downloadCache;
+			try {
+				downloadCache = getDownloadCacheRepo();
+			} catch (ProvisionException e) {
+				return e.getStatus();
+			}
 			File fileLocation = downloadCache.getArtifactFile(artifactKey);
 			if ((fileLocation == null) || !fileLocation.exists())
 				return createError("The artifact for " + artifactKey + " is not available");
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
index e979e8b..b3fa91d 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
@@ -18,9 +18,11 @@ import java.util.zip.*;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.p2.updatesite.Activator;
 import org.eclipse.equinox.p2.artifact.repository.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.generator.*;
@@ -163,19 +165,20 @@ public class UpdateSiteArtifactRepository extends AbstractRepository implements
 
 		IArtifactRepository repository = null;
 		try {
-			repository = manager.loadRepository(stateDirURL, null);
-			if (repository == null) {
-				repository = manager.createRepository(stateDirURL, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
-				repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			try {
+				return manager.loadRepository(stateDirURL, null);
+			} catch (ProvisionException e) {
+				//fall through and create a new repository
 			}
+			repository = manager.createRepository(stateDirURL, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
+			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			return repository;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+			throw new IllegalStateException("Couldn't create artifact repository for: " + repositoryName);
 		} finally {
 			context.ungetService(reference);
 		}
-
-		if (repository == null)
-			throw new IllegalStateException("Couldn't create artifact repository for: " + repositoryName);
-
-		return repository;
 	}
 
 	public Map getProperties() {

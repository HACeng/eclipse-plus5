commit fb370e7515ee43f0d5adcad02e83471b9310a895
Author: Andrew Niefer <aniefer>
Date:   Wed Mar 4 13:47:32 2009 +0000

    bug 264389 - site qualifiers

1	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/AllTests.java
62	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/LocalUpdatesiteTest.java
27	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/SiteXMLActionTest.java
1	1	bundles/org.eclipse.equinox.p2.updatesite/plugin.xml
26	5	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
12	20	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
35	5	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
40	0	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSitePublisherApplication.java
0	30	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdatesitePublisherApplication.java
1	1	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/AllTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/AllTests.java
index 8c258c4..a59eda1 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/AllTests.java
@@ -21,6 +21,7 @@ public class AllTests extends TestCase {
 		TestSuite suite = new TestSuite(AllTests.class.getName());
 		suite.addTestSuite(SiteXMLActionTest.class);
 		suite.addTestSuite(UpdateSiteTest.class);
+		suite.addTestSuite(LocalUpdatesiteTest.class);
 		return suite;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/LocalUpdatesiteTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/LocalUpdatesiteTest.java
new file mode 100644
index 0000000..d2c0a89
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/LocalUpdatesiteTest.java
@@ -0,0 +1,62 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.p2.tests.updatesite;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Iterator;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.equinox.internal.p2.updatesite.UpdateSitePublisherApplication;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+import org.eclipse.equinox.p2.tests.TestData;
+
+public class LocalUpdatesiteTest extends AbstractProvisioningTest {
+	protected File repoLocation;
+
+	protected void setUp() throws Exception {
+		super.setUp();
+		String tempDir = System.getProperty("java.io.tmpdir");
+		repoLocation = new File(tempDir, "LocalMetadataRepositoryTest");
+		AbstractProvisioningTest.delete(repoLocation);
+		repoLocation.mkdir();
+	}
+
+	protected void tearDown() throws Exception {
+		getMetadataRepositoryManager().removeRepository(repoLocation.toURI());
+		delete(repoLocation);
+		super.tearDown();
+	}
+
+	public void testCategoryQualifier() throws IOException, ProvisionException {
+		Query categoryQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_CATEGORY, Boolean.toString(true));
+		File siteSource = TestData.getFile("updatesite", "SiteXMLActionTest");
+		UpdateSitePublisherApplication application = new UpdateSitePublisherApplication();
+		try {
+			application.run(new String[] {"-metadataRepository", repoLocation.toURI().toString(), "-source", siteSource.toString(), "-categoryQualifier", "fooQualifier"});
+		} catch (Exception e) {
+			fail("0.99");
+		}
+		IMetadataRepository repository = getMetadataRepositoryManager().loadRepository(repoLocation.toURI(), new NullProgressMonitor());
+		Collector results = repository.query(categoryQuery, new Collector(), new NullProgressMonitor());
+		assertEquals("1.0", 1, results.size());
+		Iterator iter = results.iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit unit = (IInstallableUnit) iter.next();
+			assertTrue("2.0", unit.getId().startsWith("fooQualifier"));
+			assertEquals("3.0", "Test Category Label", unit.getProperty(IInstallableUnit.PROP_NAME));
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/SiteXMLActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/SiteXMLActionTest.java
index f0a83a8..a9e91cf 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/SiteXMLActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/SiteXMLActionTest.java
@@ -10,14 +10,21 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.updatesite;
 
+import java.io.File;
 import java.net.URI;
 import java.util.Collection;
 import java.util.Iterator;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.URIUtil;
 import org.eclipse.equinox.internal.p2.updatesite.SiteXMLAction;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.RepositoryReference;
 import org.eclipse.equinox.p2.publisher.*;
+import org.eclipse.equinox.p2.publisher.eclipse.FeaturesAction;
 import org.eclipse.equinox.p2.tests.*;
 
 /**
@@ -25,17 +32,33 @@ import org.eclipse.equinox.p2.tests.*;
  */
 public class SiteXMLActionTest extends AbstractProvisioningTest {
 	private TestMetadataRepository metadataRepository;
+	private IPublisherResult actionResult;
+	private URI siteLocation;
 
 	@Override
 	protected void setUp() throws Exception {
 		super.setUp();
-		IPublisherResult result = new PublisherResult();
+		actionResult = new PublisherResult();
 		PublisherInfo info = new PublisherInfo();
 		metadataRepository = new TestMetadataRepository(new IInstallableUnit[0]);
 		info.setMetadataRepository(metadataRepository);
-		URI siteLocation = TestData.getFile("updatesite", "SiteXMLActionTest/site.xml").toURI();
-		SiteXMLAction action = new SiteXMLAction(siteLocation);
-		action.perform(info, result, getMonitor());
+		siteLocation = TestData.getFile("updatesite", "SiteXMLActionTest/site.xml").toURI();
+		FeaturesAction featuresAction = new FeaturesAction(new File[] {TestData.getFile("updateSite", "SiteXMLActionTest")});
+		featuresAction.perform(info, actionResult, new NullProgressMonitor());
+
+		SiteXMLAction action = new SiteXMLAction(siteLocation, null);
+		action.perform(info, actionResult, getMonitor());
+	}
+
+	public void testQualifier() {
+		Query categoryQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_CATEGORY, Boolean.toString(true));
+		Collector results = actionResult.query(categoryQuery, new Collector(), new NullProgressMonitor());
+		Iterator iter = results.iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit unit = (IInstallableUnit) iter.next();
+			assertTrue("1.0", unit.getId().startsWith(URIUtil.toUnencodedString(siteLocation)));
+			assertEquals("2.0", "Test Category Label", unit.getProperty(IInstallableUnit.PROP_NAME));
+		}
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/plugin.xml b/bundles/org.eclipse.equinox.p2.updatesite/plugin.xml
index e20eb06..071f009 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.updatesite/plugin.xml
@@ -27,7 +27,7 @@
             thread="any"
             visible="true">
          <run
-               class="org.eclipse.equinox.internal.p2.updatesite.UpdatesitePublisherApplication">
+               class="org.eclipse.equinox.internal.p2.updatesite.UpdateSitePublisherApplication">
          </run>
       </application>
    </extension>
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
index a258376..4b8ebe5 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
@@ -26,16 +26,34 @@ import org.eclipse.osgi.util.NLS;
 public class LocalUpdateSiteAction implements IPublisherAction {
 	protected String source;
 	private UpdateSite updateSite;
+	private String categoryQualifier;
 
 	protected LocalUpdateSiteAction() {
+		// empty
 	}
 
-	public LocalUpdateSiteAction(String source) {
+	/**
+	 * Creates a local updatesite publisher action from a source location
+	 * @param source The location of the directory that contains the site.xml file
+	 * @param categoryQualifier The qualifier to prepend to categories. This qualifier is used
+	 * to ensure that the category IDs are unique between update sites. If <b>null</b> a default
+	 * qualifier will be generated
+	 */
+	public LocalUpdateSiteAction(String source, String categoryQualifier) {
 		this.source = source;
+		this.categoryQualifier = categoryQualifier;
 	}
 
-	public LocalUpdateSiteAction(UpdateSite updateSite) {
+	/**
+	 * Creates a local updatesite publisher action from an UpdateSite
+	 * @param updateSite The updatesite to use
+	 * @param categoryQualifier The qualifier to prepend to categories. This qualifier is used
+	 * to ensure that the category IDs are unique between update sites.  If <b>null</b> a default
+	 * qualifier will be generated
+	 */
+	public LocalUpdateSiteAction(UpdateSite updateSite, String categoryQualifier) {
 		this.updateSite = updateSite;
+		this.categoryQualifier = categoryQualifier;
 	}
 
 	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
@@ -63,13 +81,16 @@ public class LocalUpdateSiteAction implements IPublisherAction {
 
 	private IPublisherAction createSiteXMLAction() {
 		if (updateSite != null)
-			return new SiteXMLAction(updateSite);
-		if (source != null)
-			return new SiteXMLAction(new File(source, "site.xml").toURI()); //$NON-NLS-1$
+			return new SiteXMLAction(updateSite, categoryQualifier);
+		if (source != null) {
+			SiteXMLAction siteXmlAction = new SiteXMLAction(new File(source, "site.xml").toURI(), categoryQualifier); //$NON-NLS-1$
+			return siteXmlAction;
+		}
 		return null;
 	}
 
 	private void createAdvice() {
+		// empty
 	}
 
 	protected IPublisherAction createFeaturesAction() {
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
index 62e35dc..dd7397d 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
@@ -10,8 +10,6 @@
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite;
 
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.util.ArrayList;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.publisher.*;
@@ -23,20 +21,24 @@ import org.eclipse.osgi.util.NLS;
  * IUs generated for the bundles are "partial" as the bundles themselves are not downloaded.
  */
 public class RemoteUpdateSiteAction implements IPublisherAction {
-	protected String source;
 	private UpdateSite updateSite;
+	private final String categoryQualifier;
 
-	public RemoteUpdateSiteAction(UpdateSite updateSite) {
+	/**
+	 * Creates a local remote updatesite publisher action from an UpdateSite
+	 * @param updateSite The UpdateSite to use
+	 * @param categoryQualifier The qualifier to prepend to categories. This qualifier is used
+	 * to ensure that the category IDs are unique between update sites. If <b>null</b> a default
+	 * qualifier will be generated
+	 */
+	public RemoteUpdateSiteAction(UpdateSite updateSite, String categoryQualifier) {
 		this.updateSite = updateSite;
-	}
-
-	public RemoteUpdateSiteAction(String source) {
-		this.source = source;
+		this.categoryQualifier = categoryQualifier;
 	}
 
 	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		IPublisherAction[] actions = createActions();
-		MultiStatus finalStatus = new MultiStatus(this.getClass().getName(), 0, NLS.bind(Messages.Error_Generation, source != null ? source : (updateSite != null ? updateSite.getLocation().toString() : "Unknown")), null); //$NON-NLS-1$
+		MultiStatus finalStatus = new MultiStatus(this.getClass().getName(), 0, NLS.bind(Messages.Error_Generation, updateSite != null ? updateSite.getLocation().toString() : "Unknown"), null); //$NON-NLS-1$
 		for (int i = 0; i < actions.length; i++) {
 			if (monitor.isCanceled())
 				return Status.CANCEL_STATUS;
@@ -55,16 +57,6 @@ public class RemoteUpdateSiteAction implements IPublisherAction {
 	}
 
 	private IPublisherAction createSiteXMLAction() {
-		if (updateSite != null)
-			return new SiteXMLAction(updateSite);
-		if (source != null) {
-			try {
-				return new SiteXMLAction(new URI(source + "/site.xml")); //$NON-NLS-1$
-			} catch (URISyntaxException e) {
-				// never happens
-				return null;
-			}
-		}
-		return null;
+		return new SiteXMLAction(updateSite, categoryQualifier);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
index 6495f54..4a09d1b 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
@@ -39,13 +39,30 @@ public class SiteXMLAction extends AbstractPublisherAction {
 	private SiteCategory defaultCategory;
 	private HashSet defaultCategorySet;
 	private URI location;
+	private String categoryQualifier = null;
 
-	public SiteXMLAction(URI location) {
+	/**
+	 * Creates a SiteXMLAction from a Location (URI) with an optional qualifier to use for category names
+	 * @param location The location of the update site
+	 * @param categoryQualifier The qualifier to prepend to categories. This qualifier is used
+	 * to ensure that the category IDs are unique between update sites. If <b>null</b> a default
+	 * qualifier will be generated
+	 */
+	public SiteXMLAction(URI location, String categoryQualifier) {
 		this.location = location;
+		this.categoryQualifier = categoryQualifier;
 	}
 
-	public SiteXMLAction(UpdateSite updateSite) {
+	/**
+	 * Creates a SiteXMLAction from an Update site with an optional qualifier to use for category names
+	 * @param updateSite The update site 
+	 * @param categoryQualifier The qualifier to prepend to categories. This qualifier is used
+	 * to ensure that the category IDs are unique between update sites. If <b>null</b> a default
+	 * qualifier will be generated
+	 */
+	public SiteXMLAction(UpdateSite updateSite, String categoryQualifier) {
 		this.updateSite = updateSite;
+		this.categoryQualifier = categoryQualifier;
 	}
 
 	private void initialize() {
@@ -247,13 +264,14 @@ public class SiteXMLAction extends AbstractPublisherAction {
 	 * @param parentCategory The parent category, or <code>null</code>
 	 * @return an IU representing the category
 	 */
-	public static IInstallableUnit createCategoryIU(SiteCategory category, Set featureIUs, IInstallableUnit parentCategory) {
+	public IInstallableUnit createCategoryIU(SiteCategory category, Set featureIUs, IInstallableUnit parentCategory) {
 		InstallableUnitDescription cat = new MetadataFactory.InstallableUnitDescription();
 		cat.setSingleton(true);
-		String categoryId = category.getName();
+		String categoryId = buildCategoryId(category.getName());
 		cat.setId(categoryId);
 		cat.setVersion(Version.emptyVersion);
-		cat.setProperty(IInstallableUnit.PROP_NAME, category.getLabel());
+		String label = category.getLabel();
+		cat.setProperty(IInstallableUnit.PROP_NAME, label != null ? label : category.getName());
 		cat.setProperty(IInstallableUnit.PROP_DESCRIPTION, category.getDescription());
 
 		ArrayList reqsConfigurationUnits = new ArrayList(featureIUs.size());
@@ -293,4 +311,16 @@ public class SiteXMLAction extends AbstractPublisherAction {
 		return MetadataFactory.createInstallableUnit(cat);
 	}
 
+	/**
+	 * Creates a qualified category id. This action's qualifier is used if one exists 
+	 * or an existing update site's location is used.
+	 */
+	private String buildCategoryId(String categoryName) {
+		if (categoryQualifier != null)
+			return categoryQualifier + "." + categoryName; //$NON-NLS-1$
+		if (updateSite != null)
+			return URIUtil.toUnencodedString(updateSite.getLocation()) + "." + categoryName; //$NON-NLS-1$
+		return categoryName;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSitePublisherApplication.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSitePublisherApplication.java
new file mode 100644
index 0000000..f5c6f91
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSitePublisherApplication.java
@@ -0,0 +1,40 @@
+/*******************************************************************************
+ * Copyright (c) 2008 Code 9 and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: 
+ *   Code 9 - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.updatesite;
+
+import java.net.URISyntaxException;
+import org.eclipse.equinox.p2.publisher.*;
+
+/**
+ * <p>
+ * This application generates meta-data/artifact repositories from a local update site.
+ * The -source <localdir> parameter must specify the top-level directory containing the update site.
+ * </p>
+ */
+public class UpdateSitePublisherApplication extends AbstractPublisherApplication {
+
+	private String categoryQualifier = null;
+
+	public UpdateSitePublisherApplication() {
+		// nothing todo
+	}
+
+	protected void processParameter(String arg, String parameter, PublisherInfo pinfo) throws URISyntaxException {
+		super.processParameter(arg, parameter, pinfo);
+
+		if (arg.equalsIgnoreCase("-categoryQualifier")) //$NON-NLS-1$
+			categoryQualifier = parameter;
+
+	}
+
+	protected IPublisherAction[] createActions() {
+		return new IPublisherAction[] {new LocalUpdateSiteAction(source, categoryQualifier)};
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdatesitePublisherApplication.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdatesitePublisherApplication.java
deleted file mode 100644
index e593df8..0000000
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdatesitePublisherApplication.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 Code 9 and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: 
- *   Code 9 - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.internal.p2.updatesite;
-
-import org.eclipse.equinox.p2.publisher.AbstractPublisherApplication;
-import org.eclipse.equinox.p2.publisher.IPublisherAction;
-
-/**
- * <p>
- * This application generates meta-data/artifact repositories from a local update site.
- * The -source <localdir> parameter must specify the top-level directory containing the update site.
- * </p>
- */
-public class UpdatesitePublisherApplication extends AbstractPublisherApplication {
-
-	public UpdatesitePublisherApplication() {
-		// nothing todo
-	}
-
-	protected IPublisherAction[] createActions() {
-		return new IPublisherAction[] {new LocalUpdateSiteAction(source)};
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
index 702469e..4a6f083 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
@@ -94,7 +94,7 @@ public class UpdateSiteMetadataRepositoryFactory extends MetadataRepositoryFacto
 	private IStatus generateMetadata(UpdateSite updateSite, IMetadataRepository repository, IProgressMonitor monitor) {
 		PublisherInfo info = new PublisherInfo();
 		info.setMetadataRepository(repository);
-		IPublisherAction[] actions = new IPublisherAction[] {new RemoteUpdateSiteAction(updateSite)};
+		IPublisherAction[] actions = new IPublisherAction[] {new RemoteUpdateSiteAction(updateSite, null)};
 		Publisher publisher = new Publisher(info);
 		return publisher.publish(actions, monitor);
 	}

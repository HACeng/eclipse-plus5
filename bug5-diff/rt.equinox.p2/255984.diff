commit 92576153aa37ae84fc21f97248e91100351ebfc8
Author: Susan Franklin <sfranklin>
Date:   Wed Jan 21 23:38:48 2009 +0000

    Bug 255984 - [planner] [ui] Uninstall does not remove entry from Installed Software
    Refactoring of actions and wizards to keep track of the resolution operation (and original ProfileChangeRequest)

4	3	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateAction.java
1	0	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateMessages.java
166	80	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
1	0	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/messages.properties
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
11	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
77	74	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
19	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
10	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
7	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateAction.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateAction.java
index 4d999be..09598e7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateAction.java
@@ -14,6 +14,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.UpdateAction;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.PlanValidator;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.viewers.ISelectionProvider;
@@ -45,12 +46,12 @@ final class AutomaticUpdateAction extends UpdateAction {
 		suppressWizard = suppress;
 	}
 
-	protected int performAction(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
+	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
 		if (suppressWizard) {
-			automaticUpdater.setUpdateAffordanceState(plan != null && plan.getStatus().isOK());
+			automaticUpdater.setUpdateAffordanceState(resolution != null && resolution.getResolutionResult().getSummaryStatus().isOK());
 			return Window.OK;
 		}
-		return super.performAction(ius, targetProfileId, plan);
+		return super.performAction(ius, targetProfileId, resolution);
 	}
 
 	protected PlanValidator getPlanValidator() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateMessages.java
index d8d601b..8619cde 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateMessages.java
@@ -69,6 +69,7 @@ public class AutomaticUpdateMessages extends NLS {
 	public static String AutomaticUpdater_ClickToReviewUpdates;
 	public static String AutomaticUpdater_ClickToReviewUpdatesWithProblems;
 	public static String AutomaticUpdater_ErrorCheckingUpdates;
+	public static String AutomaticUpdater_ResolutionOperationLabel;
 	public static String AutomaticUpdatesPreferencePage_UpdateSchedule;
 	public static String AutomaticUpdatesPreferencePage_findOnStart;
 	public static String AutomaticUpdatesPreferencePage_findOnSchedule;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
index 39e7c7d..6d1a767 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
@@ -20,7 +20,6 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
@@ -60,10 +59,16 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	/*
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener#updatesAvailable(org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent)
+	 * 
+	 * @see
+	 * org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener
+	 * #
+	 * updatesAvailable(org.eclipse.equinox.internal.provisional.p2.updatechecker
+	 * .UpdateEvent)
 	 */
 	public void updatesAvailable(final UpdateEvent event) {
-		final boolean download = getPreferenceStore().getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY);
+		final boolean download = getPreferenceStore().getBoolean(
+				PreferenceConstants.PREF_DOWNLOAD_ONLY);
 		profileId = event.getProfileId();
 		iusWithUpdates = event.getIUs();
 		validateUpdates(null, true);
@@ -80,87 +85,131 @@ public class AutomaticUpdater implements IUpdateListener {
 		// showing the user that updates are available.
 		try {
 			if (download) {
-				ElementQueryDescriptor descriptor = Policy.getDefault().getQueryProvider().getQueryDescriptor(new Updates(event.getProfileId(), event.getIUs()));
-				IInstallableUnit[] replacements = (IInstallableUnit[]) descriptor.queryable.query(descriptor.query, descriptor.collector, null).toArray(IInstallableUnit.class);
+				ElementQueryDescriptor descriptor = Policy.getDefault()
+						.getQueryProvider().getQueryDescriptor(
+								new Updates(event.getProfileId(), event
+										.getIUs()));
+				IInstallableUnit[] replacements = (IInstallableUnit[]) descriptor.queryable
+						.query(descriptor.query, descriptor.collector, null)
+						.toArray(IInstallableUnit.class);
 				if (replacements.length > 0) {
-					ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(event.getProfileId());
+					ProfileChangeRequest request = ProfileChangeRequest
+							.createByProfileId(event.getProfileId());
 					request.removeInstallableUnits(iusWithUpdates);
 					request.addInstallableUnits(replacements);
-					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getProvisioningPlan(request, new ProvisioningContext(), null);
-					Job job = ProvisioningOperationRunner.schedule(new ProfileModificationOperation(AutomaticUpdateMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfileId(), plan, new DownloadPhaseSet(), false), StatusManager.LOG);
-					job.addJobChangeListener(new JobChangeAdapter() {
-						public void done(IJobChangeEvent jobEvent) {
-							alreadyDownloaded = true;
-							IStatus status = jobEvent.getResult();
-							if (status.isOK()) {
-								createUpdateAction();
-								PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
-									public void run() {
-										updateAction.suppressWizard(true);
-										updateAction.performAction(iusWithUpdates, event.getProfileId(), plan);
-									}
-								});
-							} else if (status.getSeverity() != IStatus.CANCEL) {
-								ProvUI.reportStatus(status, StatusManager.LOG);
+					final PlannerResolutionOperation operation = new PlannerResolutionOperation(
+							AutomaticUpdateMessages.AutomaticUpdater_ResolutionOperationLabel, iusWithUpdates,
+							event.getProfileId(), request, new MultiStatus(
+									AutomaticUpdatePlugin.PLUGIN_ID, 0, null,
+									null), false);
+					if ((operation.execute(new NullProgressMonitor())).isOK()) {
+						Job job = ProvisioningOperationRunner
+								.schedule(
+										new ProfileModificationOperation(
+												AutomaticUpdateMessages.AutomaticUpdater_AutomaticDownloadOperationName,
+												event.getProfileId(), operation
+														.getProvisioningPlan(),
+												new DownloadPhaseSet(), false),
+										StatusManager.LOG);
+						job.addJobChangeListener(new JobChangeAdapter() {
+							public void done(IJobChangeEvent jobEvent) {
+								alreadyDownloaded = true;
+								IStatus status = jobEvent.getResult();
+								if (status.isOK()) {
+									createUpdateAction();
+									PlatformUI.getWorkbench().getDisplay()
+											.asyncExec(new Runnable() {
+												public void run() {
+													updateAction
+															.suppressWizard(true);
+													updateAction
+															.performAction(
+																	iusWithUpdates,
+																	event
+																			.getProfileId(),
+																	operation);
+												}
+											});
+								} else if (status.getSeverity() != IStatus.CANCEL) {
+									ProvUI.reportStatus(status,
+											StatusManager.LOG);
+								}
 							}
-						}
-					});
+						});
+					}
 				}
 			} else {
 				createUpdateAction();
-				PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
-					public void run() {
-						updateAction.suppressWizard(true);
-						updateAction.run();
-					}
-				});
+				PlatformUI.getWorkbench().getDisplay().asyncExec(
+						new Runnable() {
+							public void run() {
+								updateAction.suppressWizard(true);
+								updateAction.run();
+							}
+						});
 			}
 
 		} catch (ProvisionException e) {
-			ProvUI.handleException(e, AutomaticUpdateMessages.AutomaticUpdater_ErrorCheckingUpdates, StatusManager.LOG);
+			ProvUI
+					.handleException(
+							e,
+							AutomaticUpdateMessages.AutomaticUpdater_ErrorCheckingUpdates,
+							StatusManager.LOG);
 		}
 
 	}
 
 	/*
-	 * Validate that iusToBeUpdated is valid, and reset the cache.  
-	 * If isKnownToBeAvailable is false, then recheck that the update is
-	 * available.  isKnownToBeAvailable should be false when the update list 
-	 * might be stale (Reminding the user of updates may happen long
-	 * after the update check.  This reduces the risk of notifying the user
-	 * of updates and then not finding them .)
+	 * Validate that iusToBeUpdated is valid, and reset the cache. If
+	 * isKnownToBeAvailable is false, then recheck that the update is available.
+	 * isKnownToBeAvailable should be false when the update list might be stale
+	 * (Reminding the user of updates may happen long after the update check.
+	 * This reduces the risk of notifying the user of updates and then not
+	 * finding them .)
 	 */
 
 	void validateUpdates(IProgressMonitor monitor, boolean isKnownToBeAvailable) {
 		ArrayList list = new ArrayList();
 		for (int i = 0; i < iusWithUpdates.length; i++) {
 			try {
-				if (isKnownToBeAvailable || ProvisioningUtil.getPlanner().updatesFor(iusWithUpdates[i], new ProvisioningContext(), monitor).length > 0) {
+				if (isKnownToBeAvailable
+						|| ProvisioningUtil.getPlanner().updatesFor(
+								iusWithUpdates[i], new ProvisioningContext(),
+								monitor).length > 0) {
 					if (validToUpdate(iusWithUpdates[i]))
 						list.add(iusWithUpdates[i]);
 				}
 			} catch (ProvisionException e) {
-				ProvUI.handleException(e, AutomaticUpdateMessages.AutomaticUpdater_ErrorCheckingUpdates, StatusManager.LOG);
+				ProvUI
+						.handleException(
+								e,
+								AutomaticUpdateMessages.AutomaticUpdater_ErrorCheckingUpdates,
+								StatusManager.LOG);
 				continue;
 			} catch (OperationCanceledException e) {
 				// Nothing to report
 			}
 		}
-		iusWithUpdates = (IInstallableUnit[]) list.toArray(new IInstallableUnit[list.size()]);
+		iusWithUpdates = (IInstallableUnit[]) list
+				.toArray(new IInstallableUnit[list.size()]);
 	}
 
-	// A proposed update is valid if it is still visible to the user as an installed item (it is a root)
+	// A proposed update is valid if it is still visible to the user as an
+	// installed item (it is a root)
 	// and if it is not locked for updating.
 	private boolean validToUpdate(IInstallableUnit iu) {
 		int lock = IInstallableUnit.LOCK_NONE;
 		boolean isRoot = false;
 		try {
 			IProfile profile = ProvisioningUtil.getProfile(profileId);
-			String value = profile.getInstallableUnitProperty(iu, IInstallableUnit.PROP_PROFILE_LOCKED_IU);
+			String value = profile.getInstallableUnitProperty(iu,
+					IInstallableUnit.PROP_PROFILE_LOCKED_IU);
 			if (value != null)
 				lock = Integer.parseInt(value);
-			value = profile.getInstallableUnitProperty(iu, IInstallableUnit.PROP_PROFILE_ROOT_IU);
-			isRoot = value == null ? false : Boolean.valueOf(value).booleanValue();
+			value = profile.getInstallableUnitProperty(iu,
+					IInstallableUnit.PROP_PROFILE_ROOT_IU);
+			isRoot = value == null ? false : Boolean.valueOf(value)
+					.booleanValue();
 		} catch (ProvisionException e) {
 			// ignore
 		} catch (NumberFormatException e) {
@@ -170,7 +219,8 @@ public class AutomaticUpdater implements IUpdateListener {
 	}
 
 	Shell getWorkbenchWindowShell() {
-		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
+		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench()
+				.getActiveWorkbenchWindow();
 		return activeWindow != null ? activeWindow.getShell() : null;
 
 	}
@@ -178,13 +228,16 @@ public class AutomaticUpdater implements IUpdateListener {
 	IStatusLineManager getStatusLineManager() {
 		if (statusLineManager != null)
 			return statusLineManager;
-		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
+		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench()
+				.getActiveWorkbenchWindow();
 		if (activeWindow == null)
 			return null;
-		// YUCK!  YUCK!  YUCK!
-		// IWorkbenchWindow does not define getStatusLineManager(), yet WorkbenchWindow does
+		// YUCK! YUCK! YUCK!
+		// IWorkbenchWindow does not define getStatusLineManager(), yet
+		// WorkbenchWindow does
 		try {
-			Method method = activeWindow.getClass().getDeclaredMethod("getStatusLineManager", new Class[0]); //$NON-NLS-1$
+			Method method = activeWindow.getClass().getDeclaredMethod(
+					"getStatusLineManager", new Class[0]); //$NON-NLS-1$
 			try {
 				Object statusLine = method.invoke(activeWindow, new Object[0]);
 				if (statusLine instanceof IStatusLineManager) {
@@ -200,11 +253,14 @@ public class AutomaticUpdater implements IUpdateListener {
 			// can't blame us for trying.
 		}
 
-		IWorkbenchPartSite site = activeWindow.getActivePage().getActivePart().getSite();
+		IWorkbenchPartSite site = activeWindow.getActivePage().getActivePart()
+				.getSite();
 		if (site instanceof IViewSite) {
-			statusLineManager = ((IViewSite) site).getActionBars().getStatusLineManager();
+			statusLineManager = ((IViewSite) site).getActionBars()
+					.getStatusLineManager();
 		} else if (site instanceof IEditorSite) {
-			statusLineManager = ((IEditorSite) site).getActionBars().getStatusLineManager();
+			statusLineManager = ((IEditorSite) site).getActionBars()
+					.getStatusLineManager();
 		}
 		return statusLineManager;
 	}
@@ -216,7 +272,8 @@ public class AutomaticUpdater implements IUpdateListener {
 	}
 
 	void createUpdateAffordance() {
-		updateAffordance = new StatusLineCLabelContribution(AUTO_UPDATE_STATUS_ITEM, 5);
+		updateAffordance = new StatusLineCLabelContribution(
+				AUTO_UPDATE_STATUS_ITEM, 5);
 		updateAffordance.addListener(SWT.MouseDown, new Listener() {
 			public void handleEvent(Event event) {
 				launchUpdate();
@@ -233,11 +290,15 @@ public class AutomaticUpdater implements IUpdateListener {
 		if (updateAffordance == null)
 			return;
 		if (isValid) {
-			updateAffordance.setTooltip(AutomaticUpdateMessages.AutomaticUpdater_ClickToReviewUpdates);
-			updateAffordance.setImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_UPDATE));
+			updateAffordance
+					.setTooltip(AutomaticUpdateMessages.AutomaticUpdater_ClickToReviewUpdates);
+			updateAffordance.setImage(ProvUIImages
+					.getImage(ProvUIImages.IMG_TOOL_UPDATE));
 		} else {
-			updateAffordance.setTooltip(AutomaticUpdateMessages.AutomaticUpdater_ClickToReviewUpdatesWithProblems);
-			updateAffordance.setImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_UPDATE_PROBLEMS));
+			updateAffordance
+					.setTooltip(AutomaticUpdateMessages.AutomaticUpdater_ClickToReviewUpdatesWithProblems);
+			updateAffordance.setImage(ProvUIImages
+					.getImage(ProvUIImages.IMG_TOOL_UPDATE_PROBLEMS));
 		}
 		IStatusLineManager manager = getStatusLineManager();
 		if (manager != null) {
@@ -250,7 +311,8 @@ public class AutomaticUpdater implements IUpdateListener {
 		// so we hide it if it should not be enabled.
 		if (updateAffordance == null)
 			return;
-		boolean shouldBeVisible = !ProvisioningOperationRunner.hasScheduledOperations();
+		boolean shouldBeVisible = !ProvisioningOperationRunner
+				.hasScheduledOperations();
 		if (updateAffordance.isVisible() != shouldBeVisible) {
 			IStatusLineManager manager = getStatusLineManager();
 			if (manager != null) {
@@ -261,14 +323,16 @@ public class AutomaticUpdater implements IUpdateListener {
 	}
 
 	void createUpdatePopup() {
-		popup = new AutomaticUpdatesPopup(getWorkbenchWindowShell(), alreadyDownloaded, getPreferenceStore());
+		popup = new AutomaticUpdatesPopup(getWorkbenchWindowShell(),
+				alreadyDownloaded, getPreferenceStore());
 		popup.open();
 
 	}
 
 	void createUpdateAction() {
 		if (updateAction == null)
-			updateAction = new AutomaticUpdateAction(this, getSelectionProvider(), profileId);
+			updateAction = new AutomaticUpdateAction(this,
+					getSelectionProvider(), profileId);
 	}
 
 	void clearUpdatesAvailable() {
@@ -291,32 +355,49 @@ public class AutomaticUpdater implements IUpdateListener {
 	ISelectionProvider getSelectionProvider() {
 		return new ISelectionProvider() {
 
-			/* (non-Javadoc)
-			 * @see org.eclipse.jface.viewers.ISelectionProvider#addSelectionChangedListener(org.eclipse.jface.viewers.ISelectionChangedListener)
+			/*
+			 * (non-Javadoc)
+			 * 
+			 * @seeorg.eclipse.jface.viewers.ISelectionProvider#
+			 * addSelectionChangedListener
+			 * (org.eclipse.jface.viewers.ISelectionChangedListener)
 			 */
-			public void addSelectionChangedListener(ISelectionChangedListener listener) {
-				// Ignore because the selection won't change 
+			public void addSelectionChangedListener(
+					ISelectionChangedListener listener) {
+				// Ignore because the selection won't change
 			}
 
-			/* (non-Javadoc)
+			/*
+			 * (non-Javadoc)
+			 * 
 			 * @see org.eclipse.jface.viewers.ISelectionProvider#getSelection()
 			 */
 			public ISelection getSelection() {
 				return new StructuredSelection(iusWithUpdates);
 			}
 
-			/* (non-Javadoc)
-			 * @see org.eclipse.jface.viewers.ISelectionProvider#removeSelectionChangedListener(org.eclipse.jface.viewers.ISelectionChangedListener)
+			/*
+			 * (non-Javadoc)
+			 * 
+			 * @seeorg.eclipse.jface.viewers.ISelectionProvider#
+			 * removeSelectionChangedListener
+			 * (org.eclipse.jface.viewers.ISelectionChangedListener)
 			 */
-			public void removeSelectionChangedListener(ISelectionChangedListener listener) {
+			public void removeSelectionChangedListener(
+					ISelectionChangedListener listener) {
 				// ignore because the selection is static
 			}
 
-			/* (non-Javadoc)
-			 * @see org.eclipse.jface.viewers.ISelectionProvider#setSelection(org.eclipse.jface.viewers.ISelection)
+			/*
+			 * (non-Javadoc)
+			 * 
+			 * @see
+			 * org.eclipse.jface.viewers.ISelectionProvider#setSelection(org
+			 * .eclipse.jface.viewers.ISelection)
 			 */
 			public void setSelection(ISelection sel) {
-				throw new UnsupportedOperationException("This ISelectionProvider is static, and cannot be modified."); //$NON-NLS-1$
+				throw new UnsupportedOperationException(
+						"This ISelectionProvider is static, and cannot be modified."); //$NON-NLS-1$
 			}
 		};
 	}
@@ -333,13 +414,15 @@ public class AutomaticUpdater implements IUpdateListener {
 				public void notify(EventObject o) {
 					if (o instanceof ProfileEvent) {
 						ProfileEvent event = (ProfileEvent) o;
-						if (event.getReason() == ProfileEvent.CHANGED && profileId.equals(event.getProfileId())) {
+						if (event.getReason() == ProfileEvent.CHANGED
+								&& profileId.equals(event.getProfileId())) {
 							validateUpdates();
 						}
 					}
 				}
 			};
-			IProvisioningEventBus bus = AutomaticUpdatePlugin.getDefault().getProvisioningEventBus();
+			IProvisioningEventBus bus = AutomaticUpdatePlugin.getDefault()
+					.getProvisioningEventBus();
 			if (bus != null)
 				bus.addListener(profileChangeListener);
 		}
@@ -374,14 +457,15 @@ public class AutomaticUpdater implements IUpdateListener {
 					});
 				}
 			};
-			ProvisioningOperationRunner.addJobChangeListener(provisioningJobListener);
+			ProvisioningOperationRunner
+					.addJobChangeListener(provisioningJobListener);
 		}
 	}
 
 	/*
-	 * The profile has changed.  Make sure our toUpdate list is
-	 * still valid and if there is nothing to update, get rid
-	 * of the update popup and affordance.
+	 * The profile has changed. Make sure our toUpdate list is still valid and
+	 * if there is nothing to update, get rid of the update popup and
+	 * affordance.
 	 */
 	void validateUpdates() {
 		Job validateJob = new WorkbenchJob("Update validate job") { //$NON-NLS-1$
@@ -406,18 +490,20 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	public void shutdown() {
 		if (provisioningJobListener != null) {
-			ProvisioningOperationRunner.removeJobChangeListener(provisioningJobListener);
+			ProvisioningOperationRunner
+					.removeJobChangeListener(provisioningJobListener);
 			provisioningJobListener = null;
 		}
 		if (profileChangeListener == null)
 			return;
-		IProvisioningEventBus bus = AutomaticUpdatePlugin.getDefault().getProvisioningEventBus();
+		IProvisioningEventBus bus = AutomaticUpdatePlugin.getDefault()
+				.getProvisioningEventBus();
 		if (bus != null)
 			bus.removeListener(profileChangeListener);
 		profileChangeListener = null;
 		statusLineManager = null;
 	}
-	
+
 	IPreferenceStore getPreferenceStore() {
 		return AutomaticUpdatePlugin.getDefault().getPreferenceStore();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/messages.properties
index a40c7db..ffa39b8 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/messages.properties
@@ -55,6 +55,7 @@ AutomaticUpdater_AutomaticDownloadOperationName=Automatic updates download
 AutomaticUpdater_ClickToReviewUpdates=Updates are available.  Click here to review and install them.
 AutomaticUpdater_ClickToReviewUpdatesWithProblems=Updates are available, but there may be some compatibility problems.  Click here to review them.
 AutomaticUpdater_ErrorCheckingUpdates=Unexpected error while checking the validity of updates.
+AutomaticUpdater_ResolutionOperationLabel=Computing Automatic Updates
 AutomaticUpdatesPreferencePage_UpdateSchedule=&Update schedule
 AutomaticUpdatesPreferencePage_findOnStart=Look for updates each time &platform is started
 AutomaticUpdatesPreferencePage_findOnSchedule=Look for updates on the following &schedule:
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
index ede3753..5ae5189 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
@@ -16,15 +16,15 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
 public class InstallWizardPage extends SizeComputingWizardPage {
 
-	public InstallWizardPage(Policy policy, String profileId, IUElementListRoot root, ProvisioningPlan initialPlan) {
-		super(policy, root, profileId, initialPlan);
+	public InstallWizardPage(Policy policy, String profileId, IUElementListRoot root, PlannerResolutionOperation initialResolution) {
+		super(policy, root, profileId, initialResolution);
 		setTitle(ProvUIMessages.InstallWizardPage_Title);
 		setDescription(ProvUIMessages.InstallWizardPage_NoCheckboxDescription);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
index 4b99877..64dc621 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
@@ -14,8 +14,8 @@ import java.util.Arrays;
 import java.util.HashSet;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.wizard.IWizardPage;
 import org.eclipse.jface.wizard.Wizard;
@@ -34,15 +34,15 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	private Object[] planSelections;
 	protected ISelectableIUsPage mainPage;
 	protected ResolutionWizardPage resolutionPage;
-	private ProvisioningPlan plan;
+	private PlannerResolutionOperation resolutionOperation;
 	boolean waitingForOtherJobs = false;
 
-	public ProvisioningOperationWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, ProvisioningPlan initialPlan) {
+	public ProvisioningOperationWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, PlannerResolutionOperation initialResolution) {
 		super();
 		this.policy = policy;
 		this.profileId = profileId;
 		this.root = root;
-		this.plan = initialPlan;
+		this.resolutionOperation = initialResolution;
 		if (initialSelections == null)
 			planSelections = new Object[0];
 		else
@@ -58,8 +58,8 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	public void addPages() {
 		mainPage = createMainPage(root, planSelections);
 		addPage(mainPage);
-		if (plan != null && planSelections != null) {
-			resolutionPage = createResolutionPage(makeResolutionElementRoot(planSelections), plan);
+		if (resolutionOperation != null && planSelections != null) {
+			resolutionPage = createResolutionPage(makeResolutionElementRoot(planSelections), resolutionOperation);
 			addPage(resolutionPage);
 		}
 	}
@@ -78,7 +78,7 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 
 	protected abstract ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections);
 
-	protected abstract ResolutionWizardPage createResolutionPage(IUElementListRoot input, ProvisioningPlan initialPlan);
+	protected abstract ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution);
 
 	public boolean performFinish() {
 		return resolutionPage.performFinish();
@@ -103,15 +103,15 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 			if (resolutionPage != null) {
 				if (shouldRecomputePlan()) {
 					// any initial plan that was passed in is no longer valid, no need to hang on to it
-					plan = null;
+					resolutionOperation = null;
 					planSelections = mainPage.getCheckedIUElements();
 					resolutionPage.recomputePlan(makeResolutionElementRoot(planSelections));
 					planChanged();
 				}
 			} else {
-				if (plan != null && shouldRecomputePlan())
-					plan = null;
-				resolutionPage = createResolutionPage(makeResolutionElementRoot(mainPage.getCheckedIUElements()), plan);
+				if (resolutionOperation != null && shouldRecomputePlan())
+					resolutionOperation = null;
+				resolutionPage = createResolutionPage(makeResolutionElementRoot(mainPage.getCheckedIUElements()), resolutionOperation);
 				planChanged();
 				addPage(resolutionPage);
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
index e81a429..1ba8d57 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
@@ -38,11 +38,10 @@ import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.statushandlers.StatusManager;
 
 public abstract class ResolutionWizardPage extends WizardPage {
-	private static final String NESTING_INDENT = "  "; //$NON-NLS-1$
-	static final IStatus NULL_PLAN_STATUS = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, null);
 	protected IUElementListRoot input;
-	ProvisioningPlan currentPlan;
-	IStatus currentStatus;
+	PlannerResolutionOperation resolvedOperation;
+	ResolutionResult resolutionResult;
+	boolean couldNotResolve;
 	private String profileId;
 	protected Policy policy;
 	TreeViewer treeViewer;
@@ -50,10 +49,10 @@ public abstract class ResolutionWizardPage extends WizardPage {
 	ProvElementContentProvider contentProvider;
 	protected Display display;
 
-	protected ResolutionWizardPage(Policy policy, IUElementListRoot input, String profileID, ProvisioningPlan initialPlan) {
+	protected ResolutionWizardPage(Policy policy, IUElementListRoot input, String profileID, PlannerResolutionOperation initialResolution) {
 		super("ResolutionPage"); //$NON-NLS-1$
 		this.policy = policy;
-		currentPlan = initialPlan;
+		this.resolvedOperation = initialResolution;
 		if (input == null)
 			this.input = new IUElementListRoot();
 		else
@@ -109,12 +108,12 @@ public abstract class ResolutionWizardPage extends WizardPage {
 		treeViewer.setContentProvider(contentProvider);
 		treeViewer.setLabelProvider(new IUDetailsLabelProvider(null, getColumnConfig(), getShell()));
 
-		if (currentPlan == null)
+		if (resolvedOperation == null)
 			// this will also set the input on the viewer
 			recomputePlan(input);
 		else {
 			treeViewer.setInput(input);
-			currentStatus = PlanStatusHelper.computeStatus(currentPlan, ElementUtils.elementsToIUs(input.getChildren(input)));
+			resolutionResult = resolvedOperation.getResolutionResult();
 		}
 
 		// Optional area to show the size
@@ -146,8 +145,8 @@ public abstract class ResolutionWizardPage extends WizardPage {
 	}
 
 	public boolean performFinish() {
-		if (currentStatus != null && currentStatus.getSeverity() != IStatus.ERROR) {
-			ProfileModificationOperation op = createProfileModificationOperation(currentPlan);
+		if (resolutionResult != null && resolutionResult.getSummaryStatus().getSeverity() != IStatus.ERROR) {
+			ProfileModificationOperation op = createProfileModificationOperation(resolvedOperation.getProvisioningPlan());
 			ProvisioningOperationRunner.schedule(op, StatusManager.SHOW | StatusManager.LOG);
 			return true;
 		}
@@ -159,7 +158,9 @@ public abstract class ResolutionWizardPage extends WizardPage {
 	}
 
 	public ProvisioningPlan getCurrentPlan() {
-		return currentPlan;
+		if (resolvedOperation == null)
+			return null;
+		return resolvedOperation.getProvisioningPlan();
 	}
 
 	protected Object[] getSelectedElements() {
@@ -193,32 +194,35 @@ public abstract class ResolutionWizardPage extends WizardPage {
 		this.input = root;
 		final Object[] elements = root.getChildren(root);
 		final IInstallableUnit[] ius = ElementUtils.elementsToIUs(elements);
+		couldNotResolve = false;
 		try {
 			if (elements.length == 0) {
-				currentPlan = null;
-				currentStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, IStatusCodes.EXPECTED_NOTHING_TO_DO, ProvUIMessages.ProfileModificationWizardPage_NothingSelected, null);
+				couldNotResolve();
 			} else
 				getContainer().run(true, true, new IRunnableWithProgress() {
 					public void run(IProgressMonitor monitor) {
-						currentPlan = null;
-						currentStatus = NULL_PLAN_STATUS;
-						MultiStatus status = PlanStatusHelper.getProfileChangeAlteredStatus();
+						resolvedOperation = null;
+						resolutionResult = null;
+						MultiStatus status = PlanAnalyzer.getProfileChangeAlteredStatus();
 						ProfileChangeRequest request = computeProfileChangeRequest(elements, status, monitor);
 						if (request != null) {
-							PlannerResolutionOperation op = new PlannerResolutionOperation(ProvUIMessages.ProfileModificationWizardPage_ResolutionOperationLabel, ius, getProfileId(), request, status, false);
+							resolvedOperation = new PlannerResolutionOperation(ProvUIMessages.ProfileModificationWizardPage_ResolutionOperationLabel, ius, getProfileId(), request, status, false);
 							try {
-								op.execute(monitor);
+								resolvedOperation.execute(monitor);
 							} catch (ProvisionException e) {
-								currentStatus = ProvUI.handleException(e, ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, StatusManager.LOG);
+								ProvUI.handleException(e, null, StatusManager.SHOW | StatusManager.LOG);
+								couldNotResolve();
 							}
-							currentPlan = op.getProvisioningPlan();
-							if (currentPlan != null) {
-								for (int i = 0; i < elements.length; i++) {
-									if (elements[i] instanceof QueriedElement) {
-										((QueriedElement) elements[i]).setQueryable(getQueryable(currentPlan));
+							if (resolvedOperation.getProvisioningPlan() != null) {
+								resolutionResult = resolvedOperation.getResolutionResult();
+								// set up the iu parents to be the plan so that drilldown query can work
+								if (resolvedOperation.getProvisioningPlan() != null)
+									for (int i = 0; i < elements.length; i++) {
+										if (elements[i] instanceof QueriedElement) {
+											((QueriedElement) elements[i]).setQueryable(getQueryable(resolvedOperation.getProvisioningPlan()));
+										}
 									}
-								}
-								currentStatus = currentPlan.getStatus();
+
 							}
 						}
 					}
@@ -226,13 +230,19 @@ public abstract class ResolutionWizardPage extends WizardPage {
 		} catch (InterruptedException e) {
 			// Nothing to report if thread was interrupted
 		} catch (InvocationTargetException e) {
-			currentPlan = null;
-			currentStatus = ProvUI.handleException(e.getCause(), ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, StatusManager.LOG);
+			ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
+			couldNotResolve();
 		}
 		treeViewer.setInput(input);
 		updateStatus();
 	}
 
+	private void couldNotResolve() {
+		resolvedOperation = null;
+		resolutionResult = null;
+		couldNotResolve = true;
+	}
+
 	private ProfileModificationOperation createProfileModificationOperation(ProvisioningPlan plan) {
 		return new ProfileModificationOperation(getOperationLabel(), profileId, plan);
 	}
@@ -248,10 +258,16 @@ public abstract class ResolutionWizardPage extends WizardPage {
 	protected abstract String getOperationLabel();
 
 	void updateStatus() {
+		IStatus currentStatus;
 		if (detailsArea == null || detailsArea.isDisposed())
 			return;
 		int messageType = IMessageProvider.NONE;
 		boolean pageComplete = true;
+		if (couldNotResolve) {
+			currentStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, null);
+		} else {
+			currentStatus = resolvedOperation.getResolutionResult().getSummaryStatus();
+		}
 		if (currentStatus != null && !currentStatus.isOK()) {
 			messageType = IMessageProvider.INFORMATION;
 			int severity = currentStatus.getSeverity();
@@ -271,68 +287,55 @@ public abstract class ResolutionWizardPage extends WizardPage {
 			// Check to see if another operation is in progress
 			if (ProvisioningOperationRunner.hasScheduledOperationsFor(profileId)) {
 				messageType = IMessageProvider.ERROR;
-				currentStatus = PlanStatusHelper.getStatus(IStatusCodes.OPERATION_ALREADY_IN_PROGRESS, null);
+				currentStatus = PlanAnalyzer.getStatus(IStatusCodes.OPERATION_ALREADY_IN_PROGRESS, null);
 				pageComplete = false;
 			}
 		}
 		setPageComplete(pageComplete);
-		setMessage(getMessageText(), messageType);
+		setMessage(getMessageText(currentStatus), messageType);
 		detailsArea.setText(getDetailText());
 	}
 
 	String getDetailText() {
-		String detail = ""; //$NON-NLS-1$
-		if (currentStatus == null || currentStatus.isOK()) {
-			IInstallableUnit iu = getSelectedIU();
+		String detail = null;
+		IInstallableUnit iu = getSelectedIU();
+
+		// We tried to resolve and it failed.  The specific error was already reported, so description
+		// text can be used for the selected IU.
+		if (couldNotResolve) {
 			if (iu != null)
 				detail = getIUDescription(iu);
-		} else {
-			// current status is not OK.  See if there are embedded exceptions or status to report
-			StringBuffer buffer = new StringBuffer();
-			appendDetailText(currentStatus, buffer, -1, false);
-			detail = buffer.toString();
+			return detail;
 		}
-		return detail;
-	}
 
-	void appendDetailText(IStatus status, StringBuffer buffer, int indent, boolean includeTopLevel) {
-		for (int i = 0; i < indent; i++)
-			buffer.append(NESTING_INDENT);
-		if (includeTopLevel && status.getMessage() != null)
-			buffer.append(status.getMessage());
-		Throwable t = status.getException();
-		if (t != null) {
-			// A provision (or core) exception occurred.  Get its status message or if none, its top level message.
-			if (t instanceof CoreException) {
-				IStatus exceptionStatus = ((CoreException) t).getStatus();
-				if (exceptionStatus != null && exceptionStatus.getMessage() != null)
-					buffer.append(exceptionStatus.getMessage());
-				else {
-					String details = t.getLocalizedMessage();
-					if (details != null)
-						buffer.append(details);
-				}
-			} else {
-				String details = t.getLocalizedMessage();
-				if (details != null)
-					buffer.append(details);
-			}
-		} else {
-			// This is the most important case.  No exception occurred, we have a non-OK status after trying
-			// to get a provisioning plan.  It's important not to lose the multi status information.  The top level status
-			// message has already been reported 
-			IStatus[] children = status.getChildren();
-			for (int i = 0; i < children.length; i++) {
-				appendDetailText(children[i], buffer, indent + 1, true);
-				buffer.append('\n');
-			}
+		// An IU is selected and we have resolved.  Look for information about the specific IU.
+		if (iu != null) {
+			detail = resolutionResult.getDetailedReport(new IInstallableUnit[] {iu});
+			if (detail != null)
+				return detail;
+			// No specific error about this IU.  Show the overall error if it is in error.
+			if (resolutionResult.getSummaryStatus().getSeverity() == IStatus.ERROR)
+				return resolutionResult.getSummaryReport();
+
+			// The overall status is not an error, so we may as well just return info about this iu rather than everything.
+			return getIUDescription(iu);
 		}
+
+		//No IU is selected, give the overall report
+		detail = resolutionResult.getSummaryReport();
+		if (detail == null)
+			detail = ""; //$NON-NLS-1$
+		return detail;
 	}
 
-	String getMessageText() {
+	String getMessageText(IStatus currentStatus) {
 		if (currentStatus == null || currentStatus.isOK())
 			return getDescription();
-		return currentStatus.getMessage();
+		if (currentStatus.getSeverity() == IStatus.CANCEL)
+			return ProvUIMessages.ResolutionWizardPage_Canceled;
+		if (currentStatus.getSeverity() == IStatus.ERROR)
+			return ProvUIMessages.ResolutionWizardPage_ErrorStatus;
+		return ProvUIMessages.ResolutionWizardPage_WarningInfoStatus;
 	}
 
 	protected String getIUDescription(IInstallableUnit iu) {
@@ -344,7 +347,7 @@ public abstract class ResolutionWizardPage extends WizardPage {
 	}
 
 	protected TreeViewer createTreeViewer(Composite parent) {
-		return new TreeViewer(parent, SWT.BORDER | SWT.FULL_SELECTION);
+		return new TreeViewer(parent, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
 	}
 
 	protected abstract IQueryable getQueryable(ProvisioningPlan plan);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
index 952e750..ee048f5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.osgi.util.NLS;
@@ -33,8 +34,8 @@ import org.eclipse.swt.widgets.Label;
  */
 public abstract class SizeComputingWizardPage extends ResolutionWizardPage {
 
-	protected SizeComputingWizardPage(Policy policy, IUElementListRoot root, String profileID, ProvisioningPlan initialPlan) {
-		super(policy, root, profileID, initialPlan);
+	protected SizeComputingWizardPage(Policy policy, IUElementListRoot root, String profileID, PlannerResolutionOperation initialResolution) {
+		super(policy, root, profileID, initialResolution);
 	}
 
 	protected Label sizeInfo;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
index 80d1ed5..29dc1f2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
@@ -18,12 +18,13 @@ import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
 public class UninstallWizardPage extends ResolutionWizardPage {
 
-	public UninstallWizardPage(Policy policy, IUElementListRoot root, String profileId, ProvisioningPlan initialPlan) {
-		super(policy, root, profileId, initialPlan);
+	public UninstallWizardPage(Policy policy, IUElementListRoot root, String profileId, PlannerResolutionOperation initialResolution) {
+		super(policy, root, profileId, initialResolution);
 		setTitle(ProvUIMessages.UninstallWizardPage_Title);
 		setDescription(ProvUIMessages.UninstallWizardPage_Description);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 3668709..a0288ff 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -18,9 +18,9 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IUpdateDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
 public class UpdateWizardPage extends SizeComputingWizardPage {
@@ -45,8 +45,8 @@ public class UpdateWizardPage extends SizeComputingWizardPage {
 		return (IInstallableUnit[]) replacements.toArray(new IInstallableUnit[replacements.size()]);
 	}
 
-	public UpdateWizardPage(Policy policy, IUElementListRoot root, String profileId, ProvisioningPlan initialPlan) {
-		super(policy, root, profileId, initialPlan);
+	public UpdateWizardPage(Policy policy, IUElementListRoot root, String profileId, PlannerResolutionOperation initialResolution) {
+		super(policy, root, profileId, initialResolution);
 		setTitle(ProvUIMessages.UpdateWizardPage_Title);
 		setDescription(ProvUIMessages.UpdateWizardPage_Description);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
index dd5ba38..c2347c3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
@@ -14,6 +14,7 @@ import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.wizard.IWizardPage;
 
@@ -25,8 +26,8 @@ public abstract class WizardWithLicenses extends ProvisioningOperationWizard {
 
 	AcceptLicensesWizardPage licensePage;
 
-	public WizardWithLicenses(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, ProvisioningPlan initialPlan) {
-		super(policy, profileId, root, initialSelections, initialPlan);
+	public WizardWithLicenses(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, PlannerResolutionOperation initialResolution) {
+		super(policy, profileId, root, initialSelections, initialResolution);
 	}
 
 	protected AcceptLicensesWizardPage createLicensesPage(IInstallableUnit[] ius, ProvisioningPlan plan) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index 7ead7ba..1afb4fe 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -15,7 +15,8 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.director.*;
+import org.eclipse.equinox.internal.provisional.p2.director.PlannerHelper;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
@@ -23,6 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.InstallWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.viewers.ISelectionProvider;
@@ -50,7 +52,10 @@ public class InstallAction extends ProfileModificationAction {
 
 			// Check to see if it is already installed.  This may alter the request.
 			Collector alreadyInstalled = profile.query(new InstallableUnitQuery(ius[i].getId()), new Collector(), null);
-			if (alreadyInstalled.size() > 0) {
+			// TODO ideally we should only do this check if the iu is a singleton, but in practice many iu's that should
+			// be singletons are not, so we don't check this (yet)
+			// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=230878
+			if (alreadyInstalled.size() > 0) { //  && ius[i].isSingleton()
 				IInstallableUnit installedIU = (IInstallableUnit) alreadyInstalled.iterator().next();
 				int compareTo = ius[i].getVersion().compareTo(installedIU.getVersion());
 				// If the iu is a newer version of something already installed, consider this an
@@ -62,22 +67,25 @@ public class InstallAction extends ProfileModificationAction {
 					if (!Boolean.toString(true).equals(profile.getInstallableUnitProperty(installedIU, IInstallableUnit.PROP_PROFILE_ROOT_IU)))
 						request.setInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 					// Add a status informing the user that the update has been inferred
-					status.merge(PlanStatusHelper.getStatus(IStatusCodes.IMPLIED_UPDATE, ius[i]));
+					status.merge(PlanAnalyzer.getStatus(IStatusCodes.ALTERED_IMPLIED_UPDATE, ius[i]));
 				} else if (compareTo < 0) {
 					// An implied downgrade.  We will not put this in the plan, add a status informing the user
-					status.merge(PlanStatusHelper.getStatus(IStatusCodes.IGNORED_IMPLIED_DOWNGRADE, ius[i]));
+					status.merge(PlanAnalyzer.getStatus(IStatusCodes.ALTERED_IGNORED_IMPLIED_DOWNGRADE, ius[i]));
 				} else {
 					if (Boolean.toString(true).equals(profile.getInstallableUnitProperty(installedIU, IInstallableUnit.PROP_PROFILE_ROOT_IU)))
 						// It is already a root, nothing to do. We tell the user it was already installed
-						status.merge(PlanStatusHelper.getStatus(IStatusCodes.IGNORED_ALREADY_INSTALLED, ius[i]));
-					else
-						// It was already installed but not as a root.  Nothing to tell the user, it will just seem like a fast install.
-						request.setInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+						status.merge(PlanAnalyzer.getStatus(IStatusCodes.ALTERED_IGNORED_ALREADY_INSTALLED, ius[i]));
+					else {
+						// It was already installed but not as a root.  Tell the user that parts of it are already installed and mark
+						// it as a root. 
+						status.merge(PlanAnalyzer.getStatus(IStatusCodes.ALTERED_PARTIAL_INSTALL, ius[i]));
+						request.setInstallableUnitProfileProperty(ius[i], Policy.getDefault().getQueryContext().getVisibleInstalledIUProperty(), Boolean.toString(true));
+					}
 				}
 			} else {
 				// Install it and mark as a root
 				request.addInstallableUnits(new IInstallableUnit[] {ius[i]});
-				request.setInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+				request.setInstallableUnitProfileProperty(ius[i], Policy.getDefault().getQueryContext().getVisibleInstalledIUProperty(), Boolean.toString(true));
 			}
 			sub.worked(1);
 		}
@@ -123,8 +131,8 @@ public class InstallAction extends ProfileModificationAction {
 		return ProvUIMessages.InstallIUProgress;
 	}
 
-	protected int performAction(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
-		InstallWizard wizard = new InstallWizard(getPolicy(), targetProfileId, ius, plan, new QueryableMetadataRepositoryManager(getPolicy(), false));
+	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
+		InstallWizard wizard = new InstallWizard(getPolicy(), targetProfileId, ius, resolution, new QueryableMetadataRepositoryManager(getPolicy(), false));
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.INSTALL_WIZARD);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
index 52f5fa9..d837603 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
@@ -117,7 +117,7 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 						PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
 							public void run() {
 								if (validatePlan(plan))
-									performAction(ius, getProfileId(true), plan);
+									performAction(ius, getProfileId(true), operation);
 								userChosenProfileId = null;
 							}
 						});
@@ -166,7 +166,7 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 	 */
 	protected abstract ProfileChangeRequest getProfileChangeRequest(IInstallableUnit[] ius, String targetProfileId, MultiStatus status, IProgressMonitor monitor);
 
-	protected abstract int performAction(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan);
+	protected abstract int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution);
 
 	protected abstract String getTaskName();
 
@@ -295,7 +295,7 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 	}
 
 	protected MultiStatus getProfileChangeAlteredStatus() {
-		return PlanStatusHelper.getProfileChangeAlteredStatus();
+		return PlanAnalyzer.getProfileChangeAlteredStatus();
 	}
 
 	protected boolean isResolveUserVisible() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
index 2a276cc..192d2ce 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
@@ -14,11 +14,11 @@ package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.IProvHelpContextIds;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.UninstallWizard;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.wizard.WizardDialog;
@@ -35,8 +35,8 @@ public class UninstallAction extends ExistingIUInProfileAction {
 		return ProvUIMessages.UninstallIUProgress;
 	}
 
-	protected int performAction(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
-		UninstallWizard wizard = new UninstallWizard(getPolicy(), targetProfileId, ius, plan);
+	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
+		UninstallWizard wizard = new UninstallWizard(getPolicy(), targetProfileId, ius, resolution);
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.UNINSTALL_WIZARD);
@@ -50,6 +50,13 @@ public class UninstallAction extends ExistingIUInProfileAction {
 		try {
 			request = ProfileChangeRequest.createByProfileId(targetProfileId);
 			request.removeInstallableUnits(ius);
+			// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=255984
+			// We ask to remove the the profile root property in addition to removing the IU.  In theory this
+			// should be redundant, but there are cases where the planner decides not to uninstall something because
+			// it is needed by others.  We still want to remove the root in this case.
+			String key = getPolicy().getQueryContext().getVisibleInstalledIUProperty();
+			for (int i = 0; i < ius.length; i++)
+				request.removeInstallableUnitProfileProperty(ius[i], key);
 		} finally {
 			sub.done();
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
index ad49372..4af08d6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
@@ -13,16 +13,16 @@ package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
 import java.util.*;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.PlanStatusHelper;
+import org.eclipse.equinox.internal.p2.ui.PlanAnalyzer;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.UpdateWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.Updates;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.wizard.WizardDialog;
@@ -45,13 +45,13 @@ public class UpdateAction extends ExistingIUInProfileAction {
 		this.manager = manager;
 	}
 
-	protected int performAction(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
+	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
 		// Caches should have been created while formulating the plan
 		Assert.isNotNull(latestReplacements);
 		Assert.isNotNull(root);
-		Assert.isNotNull(plan);
+		Assert.isNotNull(resolution);
 
-		UpdateWizard wizard = new UpdateWizard(getPolicy(), targetProfileId, root, latestReplacements.values().toArray(), plan, manager);
+		UpdateWizard wizard = new UpdateWizard(getPolicy(), targetProfileId, root, latestReplacements.values().toArray(), resolution, manager);
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.UPDATE_WIZARD);
@@ -91,7 +91,7 @@ public class UpdateAction extends ExistingIUInProfileAction {
 			sub.worked(1);
 		}
 		if (toBeUpdated.size() <= 0) {
-			status.add(PlanStatusHelper.getStatus(IStatusCodes.NOTHING_TO_UPDATE, null));
+			status.add(PlanAnalyzer.getStatus(IStatusCodes.NOTHING_TO_UPDATE, null));
 			sub.done();
 			return null;
 		}
@@ -124,7 +124,7 @@ public class UpdateAction extends ExistingIUInProfileAction {
 
 	protected IStatus getNoProfileOrSelectionStatus(String id, IInstallableUnit[] ius) {
 		if (ius.length == 0)
-			return PlanStatusHelper.getStatus(IStatusCodes.NOTHING_TO_UPDATE, null);
+			return PlanAnalyzer.getStatus(IStatusCodes.NOTHING_TO_UPDATE, null);
 		return super.getNoProfileOrSelectionStatus(id, ius);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
index 81592b4..d47b1e1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
@@ -14,10 +14,10 @@ import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.*;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.swt.widgets.Composite;
 
@@ -28,8 +28,8 @@ public class InstallWizard extends WizardWithLicenses {
 
 	QueryableMetadataRepositoryManager manager;
 
-	public InstallWizard(Policy policy, String profileId, IInstallableUnit[] initialSelections, ProvisioningPlan initialPlan, QueryableMetadataRepositoryManager manager) {
-		super(policy, profileId, null, initialSelections, initialPlan);
+	public InstallWizard(Policy policy, String profileId, IInstallableUnit[] initialSelections, PlannerResolutionOperation initialResolution, QueryableMetadataRepositoryManager manager) {
+		super(policy, profileId, null, initialSelections, initialResolution);
 		this.manager = manager;
 		setWindowTitle(ProvUIMessages.InstallIUOperationLabel);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL));
@@ -39,8 +39,8 @@ public class InstallWizard extends WizardWithLicenses {
 		this(policy, profileId, null, null, new QueryableMetadataRepositoryManager(policy, false));
 	}
 
-	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, ProvisioningPlan initialPlan) {
-		return new InstallWizardPage(policy, profileId, input, initialPlan);
+	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution) {
+		return new InstallWizardPage(policy, profileId, input, initialResolution);
 	}
 
 	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
index b8072df..34bad15 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
@@ -15,10 +15,10 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
 /**
@@ -38,8 +38,8 @@ public class UninstallWizard extends ProvisioningOperationWizard {
 		return elementRoot;
 	}
 
-	public UninstallWizard(Policy policy, String profileId, IInstallableUnit[] ius, ProvisioningPlan initialPlan) {
-		super(policy, profileId, makeElementRoot(ius, profileId), ius, initialPlan);
+	public UninstallWizard(Policy policy, String profileId, IInstallableUnit[] ius, PlannerResolutionOperation initialResolution) {
+		super(policy, profileId, makeElementRoot(ius, profileId), ius, initialResolution);
 		setWindowTitle(ProvUIMessages.UninstallIUOperationLabel);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_UNINSTALL));
 	}
@@ -51,8 +51,8 @@ public class UninstallWizard extends ProvisioningOperationWizard {
 		return page;
 	}
 
-	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, ProvisioningPlan plan) {
-		return new UninstallWizardPage(policy, input, profileId, plan);
+	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution) {
+		return new UninstallWizardPage(policy, input, profileId, initialResolution);
 	}
 
 	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
index 11fc0c6..2e12d8d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
@@ -16,10 +16,10 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.swt.widgets.Composite;
 
@@ -30,8 +30,8 @@ public class UpdateWizard extends WizardWithLicenses {
 	IInstallableUnit[] iusToReplace;
 	QueryableMetadataRepositoryManager manager;
 
-	public UpdateWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, ProvisioningPlan initialPlan, QueryableMetadataRepositoryManager manager) {
-		super(policy, profileId, root, initialSelections, initialPlan);
+	public UpdateWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, PlannerResolutionOperation initialResolution, QueryableMetadataRepositoryManager manager) {
+		super(policy, profileId, root, initialSelections, initialResolution);
 		setWindowTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_UPDATE));
 		this.manager = manager;
@@ -44,8 +44,8 @@ public class UpdateWizard extends WizardWithLicenses {
 		return page;
 	}
 
-	protected ResolutionWizardPage createResolutionPage(IUElementListRoot root, ProvisioningPlan plan) {
-		return new UpdateWizardPage(policy, root, profileId, plan);
+	protected ResolutionWizardPage createResolutionPage(IUElementListRoot root, PlannerResolutionOperation initialResolution) {
+		return new UpdateWizardPage(policy, root, profileId, initialResolution);
 	}
 
 	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
commit 60da7166bb1976b30bffb95dbf91c78c6d0c479f
Author: Susan Franklin <sfranklin>
Date:   Wed Jan 21 23:42:31 2009 +0000

    Bug 255984 - [planner] [ui] Uninstall does not remove entry from Installed Software
    Bug 252638 - [ui] P2 offers a patch feature to be installed when required feature is missing
    Bug 258168 - [ui] "OK" string in message

142	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
0	123	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java
11	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
14	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
18	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
126	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ResolutionResult.java
13	14	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
40	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
new file mode 100644
index 0000000..06b8cf7
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
@@ -0,0 +1,142 @@
+/*******************************************************************************
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui;
+
+import java.util.Iterator;
+import java.util.Map;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.director.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.osgi.util.NLS;
+
+/**
+ * This class analyzes a profile change request and the resultant provisioning plan,
+ * and reports problems in a way that can be communicated to a user.
+ * 
+ * @since 3.5
+ */
+public class PlanAnalyzer {
+
+	public static IStatus getStatus(int statusCode, IInstallableUnit affectedIU) {
+		switch (statusCode) {
+			case IStatusCodes.PROFILE_CHANGE_ALTERED :
+				return new MultiStatus(ProvUIActivator.PLUGIN_ID, statusCode, ProvUIMessages.PlanStatusHelper_RequestAltered, null);
+			case IStatusCodes.ALTERED_IMPLIED_UPDATE :
+				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_ImpliedUpdate, getIUString(affectedIU)), null);
+			case IStatusCodes.ALTERED_IGNORED_IMPLIED_DOWNGRADE :
+				return new Status(IStatus.WARNING, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_IgnoringImpliedDowngrade, getIUString(affectedIU)), null);
+			case IStatusCodes.ALTERED_IGNORED_ALREADY_INSTALLED :
+				return new Status(IStatus.WARNING, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_AlreadyInstalled, getIUString(affectedIU)), null);
+			case IStatusCodes.ALTERED_PARTIAL_INSTALL :
+				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanAnalyzer_PartialInstall, getIUString(affectedIU)), null);
+			case IStatusCodes.ALTERED_PARTIAL_UNINSTALL :
+				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanAnalyzer_PartialUninstall, getIUString(affectedIU)), null);
+			case IStatusCodes.UNEXPECTED_NOTHING_TO_DO :
+				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_NothingToDo, getIUString(affectedIU)), null);
+			case IStatusCodes.NOTHING_TO_UPDATE :
+				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, statusCode, ProvUIMessages.UpdateOperation_NothingToUpdate, null);
+			case IStatusCodes.OPERATION_ALREADY_IN_PROGRESS :
+				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, ProvUIMessages.PlanStatusHelper_AnotherOperationInProgress, null);
+			default :
+				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_UnexpectedError, new Integer(statusCode), getIUString(affectedIU)), null);
+		}
+	}
+
+	public static MultiStatus getProfileChangeAlteredStatus() {
+		return (MultiStatus) getStatus(IStatusCodes.PROFILE_CHANGE_ALTERED, null);
+	}
+
+	public static ResolutionResult computeResolutionResult(ProfileChangeRequest originalRequest, ProvisioningPlan plan, MultiStatus originalStatus) {
+		Assert.isNotNull(originalRequest);
+		Assert.isNotNull(plan);
+		Assert.isNotNull(originalStatus);
+
+		ResolutionResult report = new ResolutionResult();
+
+		// If the plan was canceled, no further analysis is needed
+		if (plan.getStatus().getSeverity() == IStatus.CANCEL) {
+			report.addSummaryStatus(plan.getStatus());
+			return report;
+		}
+
+		// If there was already some status supplied before resolution, this should get included
+		// with the report.  For example, this might contain information about the profile request
+		// being altered before resolution began.
+		if (originalStatus != null && originalStatus.getChildren().length > 0) {
+			report.addSummaryStatus(originalStatus);
+		}
+
+		// If the overall plan had a non-OK status, capture that in the report.
+		if (!plan.getStatus().isOK())
+			report.addSummaryStatus(plan.getStatus());
+
+		// Now we compare what was requested with what is going to happen.
+		// In the long run, when a RequestStatus can provide actual explanation/status
+		// about failures, we might want to add this information to the overall status.
+		// As it stands now, if the provisioning plan is in error, that info is more detailed
+		// than the request status.  So we will only add request status info to the overall
+		// status when the overall status is not in error.
+		if (plan.getStatus().getSeverity() != IStatus.ERROR) {
+			IInstallableUnit[] iusAdded = originalRequest.getAddedInstallableUnits();
+			for (int i = 0; i < iusAdded.length; i++) {
+				RequestStatus rs = plan.getRequestStatus(iusAdded[i]);
+				if (rs.getSeverity() == IStatus.ERROR) {
+					// This is a serious error so it must also appear in the overall status
+					IStatus fail = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, IStatusCodes.ALTERED_IGNORED_INSTALL_REQUEST, NLS.bind(ProvUIMessages.PlanAnalyzer_IgnoringInstall, getIUString(iusAdded[i])), null);
+					report.addStatus(iusAdded[i], fail);
+					report.addSummaryStatus(fail);
+				}
+			}
+			IInstallableUnit[] iusRemoved = originalRequest.getRemovedInstallableUnits();
+			for (int i = 0; i < iusRemoved.length; i++) {
+				RequestStatus rs = plan.getRequestStatus(iusRemoved[i]);
+				if (rs.getSeverity() == IStatus.ERROR) {
+					// TODO see https://bugs.eclipse.org/bugs/show_bug.cgi?id=255984
+					// We are making assumptions here about why the planner chose to ignore an uninstall.
+					// Assume it could not be uninstalled because of some other dependency, yet the planner did not view
+					// this as an error.  So we inform the user that we can only uninstall parts of it.  The root property will be
+					// removed per the original change request.
+					IStatus fail = new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, IStatusCodes.ALTERED_PARTIAL_UNINSTALL, NLS.bind(ProvUIMessages.PlanAnalyzer_PartialUninstall, getIUString(iusRemoved[i])), null);
+					report.addStatus(iusRemoved[i], fail);
+					report.addSummaryStatus(fail);
+				}
+			}
+		}
+
+		// Now process the side effects
+		Map sideEffects = plan.getSideEffectChanges();
+		Iterator iusWithSideEffects = sideEffects.keySet().iterator();
+		while (iusWithSideEffects.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) iusWithSideEffects.next();
+			RequestStatus rs = (RequestStatus) sideEffects.get(iu);
+			if (rs.getInitialRequestType() == RequestStatus.ADDED) {
+				report.addStatus(iu, new Status(rs.getSeverity(), ProvUIActivator.PLUGIN_ID, IStatusCodes.ALTERED_SIDE_EFFECT_INSTALL, NLS.bind(ProvUIMessages.PlanAnalyzer_SideEffectInstall, getIUString(iu)), null));
+			} else {
+				report.addStatus(iu, new Status(rs.getSeverity(), ProvUIActivator.PLUGIN_ID, IStatusCodes.ALTERED_SIDE_EFFECT_REMOVE, NLS.bind(ProvUIMessages.PlanAnalyzer_SideEffectUninstall, getIUString(iu)), null));
+			}
+		}
+
+		return report;
+
+	}
+
+	private static String getIUString(IInstallableUnit iu) {
+		if (iu == null)
+			return ProvUIMessages.PlanStatusHelper_Items;
+		// Get the iu name in the default locale
+		String name = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_NAME);
+		if (name != null)
+			return name;
+		return iu.getId();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java
deleted file mode 100644
index 9168680..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.internal.p2.ui;
-
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
-import org.eclipse.equinox.internal.provisional.p2.engine.Operand;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.jface.dialogs.IDialogConstants;
-import org.eclipse.jface.dialogs.MessageDialog;
-import org.eclipse.osgi.util.NLS;
-import org.eclipse.swt.custom.BusyIndicator;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.PlatformUI;
-
-/**
- * This class defines commonly used status objects for communicating issues
- * about provisioning plans to the user and analyzes a proposed provisioning plan
- * to find common problems and report them in a way that makes sense to a user.
- * 
- * @since 3.4
- */
-public class PlanStatusHelper {
-
-	public static IStatus getStatus(int statusCode, IInstallableUnit affectedIU) {
-		switch (statusCode) {
-			case IStatusCodes.IMPLIED_UPDATE :
-				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_ImpliedUpdate, getIUString(affectedIU)), null);
-			case IStatusCodes.IGNORED_IMPLIED_DOWNGRADE :
-				return new Status(IStatus.WARNING, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_IgnoringImpliedDowngrade, getIUString(affectedIU)), null);
-			case IStatusCodes.IGNORED_ALREADY_INSTALLED :
-				return new Status(IStatus.WARNING, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_AlreadyInstalled, getIUString(affectedIU)), null);
-			case IStatusCodes.UNEXPECTED_NOTHING_TO_DO :
-				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_NothingToDo, getIUString(affectedIU)), null);
-			case IStatusCodes.PROFILE_CHANGE_ALTERED :
-				return new MultiStatus(ProvUIActivator.PLUGIN_ID, statusCode, ProvUIMessages.PlanStatusHelper_RequestAltered, null);
-			case IStatusCodes.NOTHING_TO_UPDATE :
-				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, statusCode, ProvUIMessages.UpdateOperation_NothingToUpdate, null);
-			case IStatusCodes.OPERATION_ALREADY_IN_PROGRESS :
-				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, ProvUIMessages.PlanStatusHelper_AnotherOperationInProgress, null);
-			default :
-				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_UnexpectedError, new Integer(statusCode), getIUString(affectedIU)), null);
-		}
-	}
-
-	public static MultiStatus getProfileChangeAlteredStatus() {
-		return (MultiStatus) getStatus(IStatusCodes.PROFILE_CHANGE_ALTERED, null);
-	}
-
-	public static IStatus computeStatus(ProvisioningPlan plan, IInstallableUnit[] ius) {
-		if (plan == null)
-			return getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null);
-		// If the plan requires install handler support, we want to open the old update UI and
-		// cancel this operation
-		if (UpdateManagerCompatibility.requiresInstallHandlerSupport(plan)) {
-			PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					Shell shell = ProvUI.getDefaultParentShell();
-					MessageDialog dialog = new MessageDialog(shell, ProvUIMessages.PlanStatusHelper_UpdateManagerPromptTitle, null, ProvUIMessages.PlanStatusHelper_PromptForUpdateManagerUI, MessageDialog.WARNING, new String[] {ProvUIMessages.PlanStatusHelper_Launch, IDialogConstants.CANCEL_LABEL}, 0);
-					if (dialog.open() == 0)
-						BusyIndicator.showWhile(shell.getDisplay(), new Runnable() {
-							public void run() {
-								UpdateManagerCompatibility.openInstaller();
-							}
-						});
-				}
-
-			});
-			return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.PlanStatusHelper_RequiresUpdateManager);
-		}
-
-		// If the plan is ok or cancel, no further analysis is needed
-		if (plan.getStatus().isOK() || plan.getStatus().getSeverity() == IStatus.CANCEL)
-			return plan.getStatus();
-
-		// If this is a status we have already checked, don't bother doing so again.
-		if (plan.getStatus().getCode() == IStatusCodes.UNEXPECTED_NOTHING_TO_DO)
-			return plan.getStatus();
-
-		// If the plan has no IU operands and some were expected, then nothing will happen.
-		if (ius != null && ius.length > 0) {
-			boolean iusInPlan = false;
-			Operand[] operands = plan.getOperands();
-			for (int i = 0; i < operands.length; i++)
-				if (operands[i] instanceof InstallableUnitOperand) {
-					iusInPlan = true;
-					break;
-				}
-			if (!iusInPlan) {
-				MultiStatus status = new MultiStatus(ProvUIActivator.PLUGIN_ID, IStatusCodes.UNEXPECTED_NOTHING_TO_DO, ProvUIMessages.PlanStatusHelper_NothingToDo, null);
-				if (plan.getStatus() != null)
-					status.merge(plan.getStatus());
-				else
-					status.add(getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null));
-				return status;
-			}
-		}
-		// We have no further interpretation.
-		return plan.getStatus();
-
-	}
-
-	private static String getIUString(IInstallableUnit iu) {
-		if (iu == null)
-			return ProvUIMessages.PlanStatusHelper_Items;
-		// Get the iu name in the default locale
-		String name = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_NAME);
-		if (name != null)
-			return name;
-		return iu.getId();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 34e6de7..e2b4bab 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -144,6 +144,10 @@ public class ProvUIMessages extends NLS {
 	public static String RepositoryManipulationPage_Title;
 	public static String RepositoryManipulatorDropTarget_DragAndDropJobLabel;
 	public static String RepositoryManipulatorDropTarget_DragSourceNotValid;
+	public static String ResolutionReport_SummaryStatus;
+	public static String ResolutionWizardPage_Canceled;
+	public static String ResolutionWizardPage_ErrorStatus;
+	public static String ResolutionWizardPage_WarningInfoStatus;
 
 	public static String AddColocatedRepositoryAction_Label;
 	public static String AddColocatedRepositoryAction_Tooltip;
@@ -175,6 +179,12 @@ public class ProvUIMessages extends NLS {
 	public static String MetadataRepositoryElement_RepositoryLoadError;
 	public static String UpdateAction_UpdatesAvailableMessage;
 	public static String UpdateAction_UpdatesAvailableTitle;
+	public static String PlanAnalyzer_IgnoringInstall;
+	public static String PlanAnalyzer_IgnoringUninstall;
+	public static String PlanAnalyzer_PartialInstall;
+	public static String PlanAnalyzer_PartialUninstall;
+	public static String PlanAnalyzer_SideEffectInstall;
+	public static String PlanAnalyzer_SideEffectUninstall;
 	public static String PlannerResolutionOperation_UnexpectedError;
 	public static String PlanStatusHelper_IgnoringImpliedDowngrade;
 	public static String PlanStatusHelper_ImpliedUpdate;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index bc8f5ee..7d1147a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -1,5 +1,5 @@
 ###############################################################################
-# Copyright (c) 2007, 2008 IBM Corporation and others.
+# Copyright (c) 2007, 2009 IBM Corporation and others.
 # All rights reserved. This program and the accompanying materials
 # are made available under the terms of the Eclipse Public License v1.0
 # which accompanies this distribution, and is available at
@@ -105,6 +105,10 @@ RepositoryManipulationPage_RemoveConfirmTitle=Remove Sites
 RepositoryManipulationPage_Title=Available Software Sites
 RepositoryManipulatorDropTarget_DragAndDropJobLabel=Drag and Drop Operation
 RepositoryManipulatorDropTarget_DragSourceNotValid={0} was not accepted as a valid software site location.  Check the details.
+ResolutionReport_SummaryStatus=Operation details
+ResolutionWizardPage_Canceled=The operation was cancelled.
+ResolutionWizardPage_ErrorStatus=The operation cannot be completed.  See the details.
+ResolutionWizardPage_WarningInfoStatus=Your original request has been modified.  See the details.
 
 AcceptLicensesWizardPage_AcceptMultiple=I &accept the terms of the license agreements
 AcceptLicensesWizardPage_AcceptSingle=I &accept the terms of the license agreement
@@ -151,12 +155,18 @@ RevertProfilePage_RevertTooltip=Revert to the selected install configuration.
 InstallWizardPage_NoCheckboxDescription=Review the items to be installed.
 InstallWizardPage_Title=Install Details
 
+PlanAnalyzer_IgnoringInstall="{0}" is not applicable to the current configuration and will not be installed.
+PlanAnalyzer_IgnoringUninstall="{0}" cannot be uninstalled because other installed software depends on it.
+PlanAnalyzer_PartialInstall="{0}" is partially installed because other installed software requires it.  The remainder will be installed.
+PlanAnalyzer_PartialUninstall= "{0}" cannot be fully uninstalled because other installed software requires it.  The parts that are not required will be uninstalled.
+PlanAnalyzer_SideEffectInstall="{0}" will also be installed in order to complete this operation.
+PlanAnalyzer_SideEffectUninstall="{0}" must be uninstalled in order to complete this operation.
 PlannerResolutionOperation_UnexpectedError=Unexpected error.  Unable to calculate requirements and dependencies.
-PlanStatusHelper_IgnoringImpliedDowngrade={0} will be ignored because a newer version is already installed. 
-PlanStatusHelper_ImpliedUpdate={0} is already installed, so an update will be performed instead.
+PlanStatusHelper_IgnoringImpliedDowngrade="{0}" will be ignored because a newer version is already installed. 
+PlanStatusHelper_ImpliedUpdate="{0}" is already installed, so an update will be performed instead.
 PlanStatusHelper_Items=Items
 PlanStatusHelper_NothingToDo=Cannot complete the request.  See the details.
-PlanStatusHelper_AlreadyInstalled={0} will be ignored because it is already installed.
+PlanStatusHelper_AlreadyInstalled="{0}" will be ignored because it is already installed.
 PlanStatusHelper_AnotherOperationInProgress=Cannot continue the operation.  There is another install operation in progress.
 PlanStatusHelper_Launch=Launch...
 PlanStatusHelper_RequestAltered=Your original request has been modified.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
index 0a2582f..0e5c56d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
@@ -24,11 +24,23 @@ public interface IStatusCodes {
 	//in ProvisionException or we'll see strange results.
 
 	public static final int NOTHING_TO_UPDATE = 10000;
+
+	// Status codes associated with profile change request or plans being altered from the original intent
 	public static final int PROFILE_CHANGE_ALTERED = 10001;
-	public static final int IMPLIED_UPDATE = 10002;
-	public static final int IGNORED_IMPLIED_DOWNGRADE = 10003;
-	public static final int IGNORED_ALREADY_INSTALLED = 10004;
-	public static final int UNEXPECTED_NOTHING_TO_DO = 10005;
-	public static final int EXPECTED_NOTHING_TO_DO = 10006;
-	public static final int OPERATION_ALREADY_IN_PROGRESS = 10007;
+	public static final int IU_REQUEST_ALTERED = 10002;
+	public static final int ALTERED_IMPLIED_UPDATE = 10003;
+	public static final int ALTERED_IGNORED_IMPLIED_DOWNGRADE = 10004;
+	public static final int ALTERED_IGNORED_ALREADY_INSTALLED = 10005;
+	public static final int ALTERED_PARTIAL_INSTALL = 10006;
+	public static final int ALTERED_PARTIAL_UNINSTALL = 10007;
+	public static final int ALTERED_SIDE_EFFECT_UPDATE = 10008;
+	public static final int ALTERED_SIDE_EFFECT_REMOVE = 10009;
+	public static final int ALTERED_SIDE_EFFECT_INSTALL = 10010;
+	public static final int ALTERED_IGNORED_INSTALL_REQUEST = 10011;
+	public static final int ALTERED_IGNORED_UNINSTALL_REQUEST = 10012;
+
+	// Status codes associated with inability to perform an operation
+	public static final int UNEXPECTED_NOTHING_TO_DO = 10050;
+	public static final int EXPECTED_NOTHING_TO_DO = 10051;
+	public static final int OPERATION_ALREADY_IN_PROGRESS = 10052;
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ResolutionResult.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ResolutionResult.java
new file mode 100644
index 0000000..440b5f6
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ResolutionResult.java
@@ -0,0 +1,126 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.provisional.p2.ui;
+
+import java.util.HashMap;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+
+/**
+ * ResolutionResult describes problems in a provisioning plan in a structured
+ * way that can be presented to a user.
+ * 
+ * @since 3.5
+ */
+public class ResolutionResult {
+	private static final String NESTING_INDENT = "  "; //$NON-NLS-1$
+
+	private HashMap iuToStatusMap = new HashMap();
+	private MultiStatus summaryStatus;
+
+	public IStatus getSummaryStatus() {
+		if (summaryStatus != null)
+			return summaryStatus;
+		return Status.OK_STATUS;
+	}
+
+	public void addSummaryStatus(IStatus status) {
+		if (summaryStatus == null) {
+			summaryStatus = new MultiStatus(ProvUIActivator.PLUGIN_ID, 0, ProvUIMessages.ResolutionReport_SummaryStatus, null);
+		}
+		summaryStatus.add(status);
+	}
+
+	public IStatus statusOf(IInstallableUnit iu) {
+		return (IStatus) iuToStatusMap.get(iu);
+	}
+
+	public void addStatus(IInstallableUnit iu, IStatus status) {
+		MultiStatus iuSummaryStatus = (MultiStatus) iuToStatusMap.get(iu);
+		if (iuSummaryStatus == null) {
+			iuSummaryStatus = new MultiStatus(ProvUIActivator.PLUGIN_ID, IStatusCodes.IU_REQUEST_ALTERED, new IStatus[] {status}, getIUString(iu), null);
+		} else
+			iuSummaryStatus.add(status);
+	}
+
+	private String getIUString(IInstallableUnit iu) {
+		if (iu == null)
+			return ProvUIMessages.PlanStatusHelper_Items;
+		// Get the iu name in the default locale
+		String name = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_NAME);
+		if (name != null)
+			return name;
+		return iu.getId();
+	}
+
+	public String getSummaryReport() {
+		if (summaryStatus != null) {
+			StringBuffer buffer = new StringBuffer();
+			appendDetailText(summaryStatus, buffer, -1, false);
+			return buffer.toString();
+		}
+		return ""; //$NON-NLS-1$
+	}
+
+	// Answers null if there is nothing to say about the ius
+	public String getDetailedReport(IInstallableUnit[] ius) {
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0; i < ius.length; i++) {
+			MultiStatus iuStatus = (MultiStatus) iuToStatusMap.get(ius[i]);
+			if (iuStatus != null)
+				appendDetailText(iuStatus, buffer, 0, true);
+		}
+		String report = buffer.toString();
+		if (report.length() == 0)
+			return null;
+		return report;
+	}
+
+	void appendDetailText(IStatus status, StringBuffer buffer, int indent, boolean includeTopLevelMessage) {
+		if (includeTopLevelMessage) {
+			for (int i = 0; i < indent; i++)
+				buffer.append(NESTING_INDENT);
+			if (status.getMessage() != null)
+				buffer.append(status.getMessage());
+		}
+		Throwable t = status.getException();
+		if (t != null) {
+			// A provision (or core) exception occurred.  Get its status message or if none, its top level message.
+			// Indent by one more level (note the <=)
+			buffer.append('\n');
+			for (int i = 0; i <= indent; i++)
+				buffer.append(NESTING_INDENT);
+			if (t instanceof CoreException) {
+				IStatus exceptionStatus = ((CoreException) t).getStatus();
+				if (exceptionStatus != null && exceptionStatus.getMessage() != null)
+					buffer.append(exceptionStatus.getMessage());
+				else {
+					String details = t.getLocalizedMessage();
+					if (details != null)
+						buffer.append(details);
+				}
+			} else {
+				String details = t.getLocalizedMessage();
+				if (details != null)
+					buffer.append(details);
+			}
+		}
+		// Now print the children status info (if there are children)
+		IStatus[] children = status.getChildren();
+		for (int i = 0; i < children.length; i++) {
+			buffer.append('\n');
+			appendDetailText(children[i], buffer, indent + 1, true);
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
index 891a519..5a51327 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
@@ -13,16 +13,13 @@ package org.eclipse.equinox.internal.provisional.p2.ui;
 import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.Vector;
+import java.util.*;
 import javax.xml.parsers.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.MetadataRepositoryElement;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
-import org.eclipse.equinox.internal.provisional.p2.engine.Operand;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.swt.SWT;
@@ -166,17 +163,19 @@ public class UpdateManagerCompatibility {
 		}
 	}
 
-	public static boolean requiresInstallHandlerSupport(ProvisioningPlan plan) {
-		Operand[] operands = plan.getOperands();
-		for (int i = 0; i < operands.length; i++) {
-			if (operands[i] instanceof InstallableUnitOperand) {
-				IInstallableUnit iu = ((InstallableUnitOperand) operands[i]).second();
-				if (iu != null && iu.getProperty(ECLIPSE_INSTALL_HANDLER_PROP) != null)
-					return true;
-			}
-		}
+	public static boolean requiresInstallHandlerSupport(ProfileChangeRequest request) {
+		Set iusInvolved = new HashSet();
+		iusInvolved.addAll(Arrays.asList(request.getAddedInstallableUnits()));
+		iusInvolved.addAll(Arrays.asList(request.getRemovedInstallableUnits()));
+		Iterator iter = iusInvolved.iterator();
+		while (iter.hasNext())
+			if (requiresInstallHandlerSupport((IInstallableUnit) iter.next()))
+				return true;
 		return false;
+	}
 
+	public static boolean requiresInstallHandlerSupport(IInstallableUnit iu) {
+		return iu.getProperty(ECLIPSE_INSTALL_HANDLER_PROP) != null;
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
index 4a1601b..1574750 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.operations;
 
+import org.eclipse.equinox.internal.provisional.p2.ui.ResolutionResult;
+
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -17,7 +19,12 @@ import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.IStatusCodes;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.jface.dialogs.IDialogConstants;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.swt.custom.BusyIndicator;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.ui.PlatformUI;
 
 /**
  * Class representing a provisioning profile plan
@@ -31,6 +38,7 @@ public class PlannerResolutionOperation extends ProvisioningOperation {
 	boolean isUser = true;
 	ProvisioningPlan plan;
 	MultiStatus additionalStatus;
+	ResolutionResult report;
 	IInstallableUnit[] iusInvolved;
 
 	public PlannerResolutionOperation(String label, IInstallableUnit[] iusInvolved, String profileId, ProfileChangeRequest request, MultiStatus additionalStatus, boolean isUser) {
@@ -39,6 +47,7 @@ public class PlannerResolutionOperation extends ProvisioningOperation {
 		this.profileId = profileId;
 		this.isUser = isUser;
 		this.iusInvolved = iusInvolved;
+		Assert.isNotNull(additionalStatus);
 		this.additionalStatus = additionalStatus;
 	}
 
@@ -46,25 +55,45 @@ public class PlannerResolutionOperation extends ProvisioningOperation {
 		return plan;
 	}
 
+	public ProfileChangeRequest getProfileChangeRequest() {
+		return request;
+	}
+
 	protected IStatus doExecute(IProgressMonitor monitor) throws ProvisionException {
+		// Why bother getting a plan if install handler support is required?  In the future we might 
+		// consider checking per IU, and offering a quick fix, but for now just bail
+		if (UpdateManagerCompatibility.requiresInstallHandlerSupport(request)) {
+			PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					Shell shell = ProvUI.getDefaultParentShell();
+					MessageDialog dialog = new MessageDialog(shell, ProvUIMessages.PlanStatusHelper_UpdateManagerPromptTitle, null, ProvUIMessages.PlanStatusHelper_PromptForUpdateManagerUI, MessageDialog.WARNING, new String[] {ProvUIMessages.PlanStatusHelper_Launch, IDialogConstants.CANCEL_LABEL}, 0);
+					if (dialog.open() == 0)
+						BusyIndicator.showWhile(shell.getDisplay(), new Runnable() {
+							public void run() {
+								UpdateManagerCompatibility.openInstaller();
+							}
+						});
+				}
+
+			});
+			return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, ProvUIMessages.PlanStatusHelper_RequiresUpdateManager);
+		}
+
 		plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
 		if (plan == null)
 			return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, IStatusCodes.UNEXPECTED_NOTHING_TO_DO, ProvUIMessages.PlannerResolutionOperation_UnexpectedError, null);
-		// If we recorded additional status along the way, build a plan that merges in this status.
-		// Ideally this all would have been detected in the planner itself.
-		if (additionalStatus.getChildren().length > 0) {
-			additionalStatus.merge(plan.getStatus());
-			plan = new ProvisioningPlan(additionalStatus, plan.getOperands(), null);
-		}
-		// Now run the result through the sanity checker.  Again, this would ideally be caught
-		// in the planner, but for now we have to build a new plan to include the UI status checking.
-		plan = new ProvisioningPlan(PlanStatusHelper.computeStatus(plan, iusInvolved), plan.getOperands(), null);
-
 		// We are reporting on our ability to get a plan, not on the status of the plan itself.
 		// Callers will interpret and report the status as needed.
 		return Status.OK_STATUS;
 	}
 
+	public ResolutionResult getResolutionResult() {
+		if (report == null) {
+			report = PlanAnalyzer.computeResolutionResult(request, plan, additionalStatus);
+		}
+		return report;
+	}
+
 	public boolean runInBackground() {
 		return true;
 	}
commit 7f9c21f780c46a36974a3785a8aa5da0875a414f
Author: Susan Franklin <sfranklin>
Date:   Sun Jan 25 00:38:50 2009 +0000

    Bug 255984 - [planner] [ui] Uninstall does not remove entry from Installed Software

12	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
index 06b8cf7..2195a58 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
@@ -69,6 +69,14 @@ public class PlanAnalyzer {
 			return report;
 		}
 
+		if (nothingToDo(originalRequest)) {
+			report.addSummaryStatus(getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null));
+			IStatus[] details = originalStatus.getChildren();
+			for (int i = 0; i < details.length; i++)
+				report.addSummaryStatus(details[i]);
+			return report;
+		}
+
 		// If there was already some status supplied before resolution, this should get included
 		// with the report.  For example, this might contain information about the profile request
 		// being altered before resolution began.
@@ -139,4 +147,8 @@ public class PlanAnalyzer {
 			return name;
 		return iu.getId();
 	}
+
+	private static boolean nothingToDo(ProfileChangeRequest request) {
+		return request.getAddedInstallableUnits().length == 0 && request.getRemovedInstallableUnits().length == 0 && request.getInstallableUnitProfilePropertiesToAdd().size() == 0 && request.getInstallableUnitProfilePropertiesToRemove().size() == 0;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 7d1147a..00168f4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -165,7 +165,7 @@ PlannerResolutionOperation_UnexpectedError=Unexpected error.  Unable to calculat
 PlanStatusHelper_IgnoringImpliedDowngrade="{0}" will be ignored because a newer version is already installed. 
 PlanStatusHelper_ImpliedUpdate="{0}" is already installed, so an update will be performed instead.
 PlanStatusHelper_Items=Items
-PlanStatusHelper_NothingToDo=Cannot complete the request.  See the details.
+PlanStatusHelper_NothingToDo=Cannot complete the request.
 PlanStatusHelper_AlreadyInstalled="{0}" will be ignored because it is already installed.
 PlanStatusHelper_AnotherOperationInProgress=Cannot continue the operation.  There is another install operation in progress.
 PlanStatusHelper_Launch=Launch...
commit 35d17206f86ff8536817da3bd21c2b197b27004d
Author: Susan Franklin <sfranklin>
Date:   Mon Jan 26 22:29:13 2009 +0000

    Bug 255984 - [planner] [ui] Uninstall does not remove entry from Installed Software
    Change to resolve an install before checking for install handler support

23	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
14	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
2	27	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
index 2195a58..fcc941b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanAnalyzer.java
@@ -17,7 +17,12 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.jface.dialogs.IDialogConstants;
+import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.osgi.util.NLS;
+import org.eclipse.swt.custom.BusyIndicator;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.ui.PlatformUI;
 
 /**
  * This class analyzes a profile change request and the resultant provisioning plan,
@@ -69,6 +74,24 @@ public class PlanAnalyzer {
 			return report;
 		}
 
+		// If the plan requires install handler support, we want to open the old update UI and
+		// cancel this operation
+		if (UpdateManagerCompatibility.requiresInstallHandlerSupport(plan)) {
+			PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					Shell shell = ProvUI.getDefaultParentShell();
+					MessageDialog dialog = new MessageDialog(shell, ProvUIMessages.PlanStatusHelper_UpdateManagerPromptTitle, null, ProvUIMessages.PlanStatusHelper_PromptForUpdateManagerUI, MessageDialog.WARNING, new String[] {ProvUIMessages.PlanStatusHelper_Launch, IDialogConstants.CANCEL_LABEL}, 0);
+					if (dialog.open() == 0)
+						BusyIndicator.showWhile(shell.getDisplay(), new Runnable() {
+							public void run() {
+								UpdateManagerCompatibility.openInstaller();
+							}
+						});
+				}
+			});
+			report.addSummaryStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.PlanStatusHelper_RequiresUpdateManager));
+		}
+
 		if (nothingToDo(originalRequest)) {
 			report.addSummaryStatus(getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null));
 			IStatus[] details = originalStatus.getChildren();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
index 5a51327..891a519 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
@@ -13,13 +13,16 @@ package org.eclipse.equinox.internal.provisional.p2.ui;
 import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Vector;
 import javax.xml.parsers.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.MetadataRepositoryElement;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
+import org.eclipse.equinox.internal.provisional.p2.engine.Operand;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.swt.SWT;
@@ -163,19 +166,17 @@ public class UpdateManagerCompatibility {
 		}
 	}
 
-	public static boolean requiresInstallHandlerSupport(ProfileChangeRequest request) {
-		Set iusInvolved = new HashSet();
-		iusInvolved.addAll(Arrays.asList(request.getAddedInstallableUnits()));
-		iusInvolved.addAll(Arrays.asList(request.getRemovedInstallableUnits()));
-		Iterator iter = iusInvolved.iterator();
-		while (iter.hasNext())
-			if (requiresInstallHandlerSupport((IInstallableUnit) iter.next()))
-				return true;
+	public static boolean requiresInstallHandlerSupport(ProvisioningPlan plan) {
+		Operand[] operands = plan.getOperands();
+		for (int i = 0; i < operands.length; i++) {
+			if (operands[i] instanceof InstallableUnitOperand) {
+				IInstallableUnit iu = ((InstallableUnitOperand) operands[i]).second();
+				if (iu != null && iu.getProperty(ECLIPSE_INSTALL_HANDLER_PROP) != null)
+					return true;
+			}
+		}
 		return false;
-	}
 
-	public static boolean requiresInstallHandlerSupport(IInstallableUnit iu) {
-		return iu.getProperty(ECLIPSE_INSTALL_HANDLER_PROP) != null;
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
index 1574750..d883b4d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/PlannerResolutionOperation.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.operations;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.ResolutionResult;
-
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -19,12 +17,8 @@ import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.jface.dialogs.IDialogConstants;
-import org.eclipse.jface.dialogs.MessageDialog;
-import org.eclipse.swt.custom.BusyIndicator;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.PlatformUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.IStatusCodes;
+import org.eclipse.equinox.internal.provisional.p2.ui.ResolutionResult;
 
 /**
  * Class representing a provisioning profile plan
@@ -60,25 +54,6 @@ public class PlannerResolutionOperation extends ProvisioningOperation {
 	}
 
 	protected IStatus doExecute(IProgressMonitor monitor) throws ProvisionException {
-		// Why bother getting a plan if install handler support is required?  In the future we might 
-		// consider checking per IU, and offering a quick fix, but for now just bail
-		if (UpdateManagerCompatibility.requiresInstallHandlerSupport(request)) {
-			PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					Shell shell = ProvUI.getDefaultParentShell();
-					MessageDialog dialog = new MessageDialog(shell, ProvUIMessages.PlanStatusHelper_UpdateManagerPromptTitle, null, ProvUIMessages.PlanStatusHelper_PromptForUpdateManagerUI, MessageDialog.WARNING, new String[] {ProvUIMessages.PlanStatusHelper_Launch, IDialogConstants.CANCEL_LABEL}, 0);
-					if (dialog.open() == 0)
-						BusyIndicator.showWhile(shell.getDisplay(), new Runnable() {
-							public void run() {
-								UpdateManagerCompatibility.openInstaller();
-							}
-						});
-				}
-
-			});
-			return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, ProvUIMessages.PlanStatusHelper_RequiresUpdateManager);
-		}
-
 		plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
 		if (plan == null)
 			return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, IStatusCodes.UNEXPECTED_NOTHING_TO_DO, ProvUIMessages.PlannerResolutionOperation_UnexpectedError, null);

commit 86446769d518abb6a83aa98584c9064fe7e9324e
Author: John Arthorne <johna>
Date:   Thu May 14 18:51:28 2009 +0000

    Bug 275975 [transport] cancelling the "timeout" test server took at least 2 min

8	8	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorSelector.java
3	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
75	11	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/FileReader.java
1	0	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/Messages.java
3	2	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/RepositoryTransport.java
1	0	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorSelector.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorSelector.java
index 3bacc0c..44b2090 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorSelector.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorSelector.java
@@ -122,7 +122,7 @@ public class MirrorSelector {
 	 * 
 	 * Originally copied from DefaultSiteParser.getMirrors in org.eclipse.update.core
 	 */
-	private MirrorInfo[] computeMirrors(String mirrorsURL) {
+	private MirrorInfo[] computeMirrors(String mirrorsURL, IProgressMonitor monitor) {
 		try {
 			String countryCode = Locale.getDefault().getCountry().toLowerCase();
 			int timeZone = (new GregorianCalendar()).get(Calendar.ZONE_OFFSET) / (60 * 60 * 1000);
@@ -140,7 +140,7 @@ public class MirrorSelector {
 			// Use Transport to read the mirrors list (to benefit from proxy support, authentication, etc)
 			RepositoryTransport transport = RepositoryTransport.getInstance();
 			InputSource input = new InputSource(mirrorsURL);
-			input.setByteStream(transport.stream(URIUtil.fromString(mirrorsURL)));
+			input.setByteStream(transport.stream(URIUtil.fromString(mirrorsURL), monitor));
 			document = builder.parse(input);
 			if (document == null)
 				return null;
@@ -172,7 +172,7 @@ public class MirrorSelector {
 	 * repository.  Always falls back to the given input location in case of failure
 	 * to compute mirrors. Never returns null.
 	 */
-	public synchronized URI getMirrorLocation(URI inputLocation) {
+	public synchronized URI getMirrorLocation(URI inputLocation, IProgressMonitor monitor) {
 		Assert.isNotNull(inputLocation);
 		if (baseURI == null)
 			return inputLocation;
@@ -180,7 +180,7 @@ public class MirrorSelector {
 		//if we failed to relativize the location, we can't select a mirror
 		if (relativeLocation == null || relativeLocation.isAbsolute())
 			return inputLocation;
-		MirrorInfo selectedMirror = selectMirror();
+		MirrorInfo selectedMirror = selectMirror(monitor);
 		if (selectedMirror == null)
 			return inputLocation;
 		if (Tracing.DEBUG_MIRRORS)
@@ -197,12 +197,12 @@ public class MirrorSelector {
 	 * Returns the mirror locations for this repository, or <code>null</code> if
 	 * they could not be computed.
 	 */
-	private MirrorInfo[] initMirrors() {
+	private MirrorInfo[] initMirrors(IProgressMonitor monitor) {
 		if (mirrors != null)
 			return mirrors;
 		String mirrorsURL = (String) repository.getProperties().get(IRepository.PROP_MIRRORS_URL);
 		if (mirrorsURL != null)
-			mirrors = computeMirrors(mirrorsURL);
+			mirrors = computeMirrors(mirrorsURL, monitor);
 		return mirrors;
 	}
 
@@ -251,8 +251,8 @@ public class MirrorSelector {
 	 * Selects a mirror from the given list of mirrors. Returns null if a mirror
 	 * could not be found.
 	 */
-	private MirrorInfo selectMirror() {
-		initMirrors();
+	private MirrorInfo selectMirror(IProgressMonitor monitor) {
+		initMirrors(monitor);
 		int mirrorCount;
 		if (mirrors == null || (mirrorCount = mirrors.length) == 0)
 			return null;
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 5b07087..55986f7 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -451,7 +451,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		URI baseLocation = getLocation(descriptor);
 		if (baseLocation == null)
 			return new Status(IStatus.ERROR, Activator.ID, "Can not find the location of " + descriptor);
-		URI mirrorLocation = getMirror(baseLocation);
+		URI mirrorLocation = getMirror(baseLocation, monitor);
 		IStatus status = downloadArtifact(descriptor, mirrorLocation, destination, monitor);
 		IStatus result = reportStatus(descriptor, destination, status);
 		// if the original download went reasonably but the reportStatus found some issues
@@ -490,12 +490,12 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	 * @param baseLocation The location of the artifact in this repository
 	 * @return the Location of the artifact in this repository, or an equivalent mirror
 	 */
-	private synchronized URI getMirror(URI baseLocation) {
+	private synchronized URI getMirror(URI baseLocation, IProgressMonitor monitor) {
 		if (!MIRRORS_ENABLED || (!isForceThreading() && isLocal()))
 			return baseLocation;
 		if (mirrors == null)
 			mirrors = new MirrorSelector(this);
-		return mirrors.getMirrorLocation(baseLocation);
+		return mirrors.getMirrorLocation(baseLocation, monitor);
 	}
 
 	public Object getAdapter(Class adapter) {
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/FileReader.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/FileReader.java
index 12498a7..4b07dbf 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/FileReader.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/FileReader.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006-2009, Cloudsmith Inc.
+ * Copyright (c) 2006, 2009, Cloudsmith Inc.
  * The code, documentation and other materials contained herein have been
  * licensed under the Eclipse Public License - v 1.0 by the copyright holder
  * listed above, as the Initial Contributor under such license. The text of
@@ -8,9 +8,11 @@
 package org.eclipse.equinox.internal.p2.repository;
 
 import java.io.*;
+import java.net.SocketTimeoutException;
 import java.net.URI;
 import java.util.Date;
 import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.ecf.core.security.IConnectContext;
 import org.eclipse.ecf.filetransfer.*;
 import org.eclipse.ecf.filetransfer.events.*;
@@ -22,20 +24,22 @@ import org.eclipse.osgi.util.NLS;
 /**
  * FileReader is an ECF FileTransferJob implementation.
  */
-public class FileReader extends FileTransferJob implements IFileTransferListener {
+public final class FileReader extends FileTransferJob implements IFileTransferListener {
 	private static IFileReaderProbe testProbe;
 	private boolean closeStreamWhenFinished = false;
 	private Exception exception;
 	private FileInfo fileInfo;
 	private long lastProgressCount;
 	private long lastStatsCount;
-	private IProgressMonitor theMonitor;
+	protected IProgressMonitor theMonitor;
 	private OutputStream theOutputStream;
 	private ProgressStatistics statistics;
 	private final int connectionRetryCount;
 	private final long connectionRetryDelay;
 	private final IConnectContext connectContext;
 	private URI requestUri;
+	protected IFileTransferConnectStartEvent connectEvent;
+	private Job cancelJob;
 
 	/**
 	 * Create a new FileReader that will retry failed connection attempts and sleep some amount of time between each
@@ -56,8 +60,53 @@ public class FileReader extends FileTransferJob implements IFileTransferListener
 		return fileInfo;
 	}
 
+	/**
+	 * A job to handle cancelation when trying to establish a socket connection.
+	 * At this point we don't have a transfer job running yet, so we need a separate
+	 * job to monitor for cancelation.
+	 */
+	protected class CancelHandler extends Job {
+		private boolean done = false;
+
+		protected CancelHandler() {
+			super(Messages.FileTransport_cancelCheck);
+			setSystem(true);
+		}
+
+		public IStatus run(IProgressMonitor jobMonitor) {
+			while (!done && !jobMonitor.isCanceled()) {
+				try {
+					Thread.sleep(1000);
+				} catch (InterruptedException e) {
+					return Status.CANCEL_STATUS;
+				}
+				if (theMonitor != null && theMonitor.isCanceled())
+					if (connectEvent != null)
+						connectEvent.cancel();
+			}
+			return Status.OK_STATUS;
+		}
+
+		protected void canceling() {
+			//wake up from sleep in run method
+			Thread t = getThread();
+			if (t != null)
+				t.interrupt();
+		}
+
+	}
+
 	public synchronized void handleTransferEvent(IFileTransferEvent event) {
-		if (event instanceof IIncomingFileTransferReceiveStartEvent) {
+		if (event instanceof IFileTransferConnectStartEvent) {
+			// keep the connect event to be able to cancel the transfer
+			connectEvent = (IFileTransferConnectStartEvent) event;
+			cancelJob = new CancelHandler();
+			//schedule with a delay to avoid the overhead of an extra job on a fast connection
+			cancelJob.schedule(500);
+		} else if (event instanceof IIncomingFileTransferReceiveStartEvent) {
+			//we no longer need the cancel handler because we are about to fork the transfer job
+			if (cancelJob != null)
+				cancelJob.cancel();
 			IIncomingFileTransfer source = ((IIncomingFileTransferEvent) event).getSource();
 			try {
 				FileInfo fi = new FileInfo();
@@ -114,7 +163,7 @@ public class FileReader extends FileTransferJob implements IFileTransferListener
 		}
 	}
 
-	public InputStream read(URI url) throws CoreException, FileNotFoundException, AuthenticationFailedException {
+	public InputStream read(URI url, final IProgressMonitor monitor) throws CoreException, FileNotFoundException, AuthenticationFailedException {
 		final PipedInputStream input = new PipedInputStream();
 		PipedOutputStream output;
 		try {
@@ -124,8 +173,7 @@ public class FileReader extends FileTransferJob implements IFileTransferListener
 		}
 		RepositoryTracing.debug("Downloading {0}", url); //$NON-NLS-1$
 
-		final IProgressMonitor cancellationMonitor = new NullProgressMonitor();
-		sendRetrieveRequest(url, output, null, true, cancellationMonitor);
+		sendRetrieveRequest(url, output, null, true, monitor);
 
 		return new InputStream() {
 			public int available() throws IOException {
@@ -134,7 +182,7 @@ public class FileReader extends FileTransferJob implements IFileTransferListener
 			}
 
 			public void close() throws IOException {
-				cancellationMonitor.setCanceled(true);
+				monitor.setCanceled(true);
 				hardClose(input);
 				checkException();
 			}
@@ -194,22 +242,32 @@ public class FileReader extends FileTransferJob implements IFileTransferListener
 		readInto(uri, anOutputStream, -1, monitor);
 	}
 
+	public boolean belongsTo(Object family) {
+		return family == this;
+	}
+
 	public void readInto(URI uri, OutputStream anOutputStream, long startPos, IProgressMonitor monitor) //
 			throws CoreException, FileNotFoundException, AuthenticationFailedException {
 		try {
 			sendRetrieveRequest(uri, anOutputStream, (startPos != -1 ? new DownloadRange(startPos) : null), false, monitor);
-			join();
+			Job.getJobManager().join(this, new SubProgressMonitor(monitor, 0));
+			if (monitor.isCanceled() && connectEvent != null)
+				connectEvent.cancel();
 			// check and throw exception if received in callback
 			checkException(uri, connectionRetryCount);
 		} catch (InterruptedException e) {
 			monitor.setCanceled(true);
 			throw new OperationCanceledException();
 		} finally {
+			// kill the cancelJob, if there is one
+			if (cancelJob != null) {
+				cancelJob.cancel();
+				cancelJob = null;
+			}
+
 			if (monitor != null) {
 				if (statistics == null)
-					//
 					// Monitor was never started. See to that it's balanced
-					//
 					monitor.beginTask(null, 1);
 				else
 					statistics = null;
@@ -286,6 +344,12 @@ public class FileReader extends FileTransferJob implements IFileTransferListener
 			if (t instanceof CoreException)
 				throw RepositoryStatusHelper.unwindCoreException((CoreException) t);
 
+			// not meaningful to try 'timeout again' - if a server is that busy, we
+			// need to wait for quite some time before retrying- it is not likely it is
+			// just a temporary network thing.
+			if (t instanceof SocketTimeoutException)
+				throw RepositoryStatusHelper.wrap(t);
+
 			if (t instanceof IOException && attemptCounter < connectionRetryCount) {
 				// TODO: Retry only certain exceptions or filter out
 				// some exceptions not worth retrying
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/Messages.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/Messages.java
index cf47b5b..2ed09a9 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/Messages.java
@@ -70,6 +70,7 @@ public class Messages extends NLS {
 	public static String connection_to_0_failed_on_1_retry_attempt_2;
 
 	public static String FileTransport_reader;
+	public static String FileTransport_cancelCheck;
 
 	public static String UnableToRead_0_TooManyAttempts;
 	public static String UnableToRead_0_UserCanceled;
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/RepositoryTransport.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/RepositoryTransport.java
index cb55c6c..c8bef36 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/RepositoryTransport.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/RepositoryTransport.java
@@ -126,12 +126,13 @@ public class RepositoryTransport extends Transport {
 	 * 
 	 * @returns InputStream a stream with the content from the toDownload URI, or null
 	 * @param toDownload URI of file to download
+	 * @param monitor monitor checked for cancellation
 	 * @throws OperationCanceledException if the operation was canceled.
 	 * @throws AuthenticationFailedException if authentication failed, or too many attempt were made
 	 * @throws FileNotFoundException if the toDownload was reported as non existing
 	 * @throws CoreException on errors
 	 */
-	public InputStream stream(URI toDownload) throws FileNotFoundException, CoreException, AuthenticationFailedException {
+	public InputStream stream(URI toDownload, IProgressMonitor monitor) throws FileNotFoundException, CoreException, AuthenticationFailedException {
 
 		boolean promptUser = false;
 		AuthenticationInfo loginDetails = null;
@@ -143,7 +144,7 @@ public class RepositoryTransport extends Transport {
 
 				// perform the streamed download
 				reader = new FileReader(context);
-				return reader.read(toDownload);
+				return reader.read(toDownload, monitor);
 			} catch (UserCancelledException e) {
 				throw new OperationCanceledException();
 			} catch (AuthenticationFailedException e) {
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/messages.properties b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/messages.properties
index d8ecc03..15728fe 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/messages.properties
@@ -67,6 +67,7 @@ TransportErrorTranslator_UnknownHost=Unknown Host: {0}
 fetching_0_from_1_2_at_3=Fetching {0} ({2} at {3}/s) from {1}
 fetching_0_from_1_2_of_3_at_4=Fetching {0} ({2} of {3} at {4}/s) from {1}
 FileTransport_reader=File Transport Reader
+FileTransport_cancelCheck=File Transport Cancel Handler
 connection_to_0_failed_on_1_retry_attempt_2=Connection to {0} failed on {1}. Retry attempt {2} started
 UnableToRead_0_TooManyAttempts=Unable to read repository at: {0}. Too many failed login attempts.
 UnableToRead_0_UserCanceled=Unable to read repository at: {0}. Login canceled by user.
commit a79adfbeb3c3a579cd211411f0fff34cbc66c8cf
Author: John Arthorne <johna>
Date:   Thu May 14 18:51:58 2009 +0000

    Tests for bug 275975 [transport] cancelling the "timeout" test server took at least 2 min

6	4	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/helpers/AbstractRepositoryManager.java
5	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
2	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/repository/TimeoutTest.java
4	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/helpers/AbstractRepositoryManager.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/helpers/AbstractRepositoryManager.java
index ad6eca7..da7df13 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/helpers/AbstractRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/repository/helpers/AbstractRepositoryManager.java
@@ -251,7 +251,7 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 		Assert.isNotNull(type);
 		IRepository result = null;
 		try {
-			enterLoad(location);
+			enterLoad(location, new NullProgressMonitor());
 			boolean loaded = false;
 			try {
 				//repository should not already exist
@@ -313,15 +313,17 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 	 * 
 	 * @param location The location to lock
 	 */
-	private void enterLoad(URI location) {
+	private void enterLoad(URI location, IProgressMonitor monitor) {
 		Thread current = Thread.currentThread();
 		synchronized (loadLocks) {
 			while (true) {
 				Thread owner = (Thread) loadLocks.get(location);
 				if (owner == null || current.equals(owner))
 					break;
+				if (monitor.isCanceled())
+					throw new OperationCanceledException();
 				try {
-					loadLocks.wait();
+					loadLocks.wait(1000);
 				} catch (InterruptedException e) {
 					//keep trying
 				}
@@ -594,7 +596,7 @@ public abstract class AbstractRepositoryManager implements IRepositoryManager, P
 		IRepository result = null;
 
 		try {
-			enterLoad(location);
+			enterLoad(location, monitor);
 			result = basicGetRepository(location);
 			if (result != null)
 				return result;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
index 11a636d..9a1399e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
@@ -115,7 +115,7 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 		// The download succeeded
 		assertTrue(request.getResult().toString(), request.getResult().isOK());
 		// All available mirrors used
-		assertTrue("All mirrors utilized", selector.index == selector.mirrors.length);
+		assertEquals("All mirrors utilized", selector.mirrors.length, selector.index);
 	}
 
 	/*
@@ -338,16 +338,19 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 		}
 
 		// Overridden to prevent mirror sorting
+		@Override
 		public synchronized void reportResult(String toDownload, IStatus result) {
 			return;
 		}
 
 		// We want to test each mirror once.
+		@Override
 		public synchronized boolean hasValidMirror() {
 			return mirrors != null && index < mirrors.length;
 		}
 
-		public synchronized URI getMirrorLocation(URI inputLocation) {
+		@Override
+		public synchronized URI getMirrorLocation(URI inputLocation, IProgressMonitor monitor) {
 			return URIUtil.append(nextMirror(), repoLocation.relativize(inputLocation).getPath());
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/repository/TimeoutTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/repository/TimeoutTest.java
index 9b1b958..e6c525e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/repository/TimeoutTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/repository/TimeoutTest.java
@@ -63,8 +63,7 @@ public class TimeoutTest extends AbstractTestServerClientCase {
 					transport.getLastModified(toDownload, null);
 					break;
 				case STREAM :
-					transport.stream(toDownload);
-					//					transport.stream(toDownload, null); // 
+					transport.stream(toDownload, null);
 					break;
 			}
 		} catch (OperationCanceledException e) {
@@ -155,8 +154,7 @@ public class TimeoutTest extends AbstractTestServerClientCase {
 					transport.getLastModified(toDownload, monitor);
 					break;
 				case STREAM :
-					transport.stream(toDownload);
-					//					transport.stream(toDownload, null); // 
+					transport.stream(toDownload, monitor);
 					break;
 			}
 		} catch (OperationCanceledException e) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
index dfa4d35..728e3e1 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
@@ -851,16 +851,19 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 		}
 
 		// Overridden to prevent mirror sorting
+		@Override
 		public synchronized void reportResult(String toDownload, IStatus result) {
 			return;
 		}
 
 		// We want to test each mirror once.
+		@Override
 		public synchronized boolean hasValidMirror() {
 			return mirrors != null && index < mirrors.length;
 		}
 
-		public synchronized URI getMirrorLocation(URI inputLocation) {
+		@Override
+		public synchronized URI getMirrorLocation(URI inputLocation, IProgressMonitor monitor) {
 			return URIUtil.append(nextMirror(), repoLocation.relativize(inputLocation).getPath());
 		}
 

commit 154b5ef3f97a377660bfaf951e6e153107bcf685
Author: Susan Franklin <sfranklin>
Date:   Thu Nov 13 23:48:49 2008 +0000

    Bug 227784 - [ui] Need consistency in interface naming

2	2	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
6	6	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
3	3	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/SizingTest.java
2	2	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
2	2	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java
3	3	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
55	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java
0	55	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
0	27	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentListener.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentProvider.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java
0	29	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java
27	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryContentListener.java
29	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryTreeListener.java
9	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ExistingIUInProfileAction.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
29	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IProfileChooser.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/Policy.java
0	29	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ProfileChooser.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
index 7b4a1aa..da581de 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
@@ -12,7 +12,7 @@
 package org.eclipse.equinox.p2.tests.ui.actions;
 
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
@@ -63,7 +63,7 @@ public class InstallActionTest extends ProfileModificationActionTest {
 		assertEquals(2, action.getSelectedIUs().length);
 	}
 
-	protected IUElement element(IInstallableUnit iu) {
+	protected IIUElement element(IInstallableUnit iu) {
 		return new AvailableIUElement(null, iu, profile.getProfileId());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
index 698f0ee..244b324 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
@@ -11,7 +11,7 @@
 package org.eclipse.equinox.p2.tests.ui.actions;
 
 import org.eclipse.core.runtime.IStatus;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.DefaultPhaseSet;
@@ -47,16 +47,16 @@ public abstract class ProfileModificationActionTest extends ActionTest {
 		return new IInstallableUnit[] {top1, top2, locked};
 	}
 
-	protected IUElement[] getTopLevelIUElements() {
-		return new IUElement[] {element(top1), element(top2)};
+	protected IIUElement[] getTopLevelIUElements() {
+		return new IIUElement[] {element(top1), element(top2)};
 	}
 
 	protected Object[] getMixedIUElements() {
-		return new IUElement[] {element(top1), element(top2), element(nested)};
+		return new IIUElement[] {element(top1), element(top2), element(nested)};
 	}
 
 	protected Object[] getTopLevelIUElementsWithLockedIU() {
-		return new IUElement[] {element(top1), element(top2), element(locked)};
+		return new IIUElement[] {element(top1), element(top2), element(locked)};
 	}
 
 	protected Object[] getMixedIUsAndElements() {
@@ -98,7 +98,7 @@ public abstract class ProfileModificationActionTest extends ActionTest {
 		return createEngine().perform(profile, new DefaultPhaseSet(), plan.getOperands(), null, null);
 	}
 
-	protected IUElement element(IInstallableUnit iu) {
+	protected IIUElement element(IInstallableUnit iu) {
 		return new InstalledIUElement(profileElement, profile.getProfileId(), iu);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/SizingTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/SizingTest.java
index 7f8d929..61a2e84 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/SizingTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/SizingTest.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.ui.operations;
 
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
@@ -35,7 +35,7 @@ public class SizingTest extends AbstractProvisioningUITest {
 			fail("0.99", e);
 			return;
 		}
-		long size = IUElement.SIZE_NOTAPPLICABLE;
+		long size = IIUElement.SIZE_NOTAPPLICABLE;
 		try {
 			size = ProvisioningUtil.getSize(plan, profileId, getMonitor());
 		} catch (ProvisionException e) {
@@ -60,7 +60,7 @@ public class SizingTest extends AbstractProvisioningUITest {
 			fail("0.99", e);
 			return;
 		}
-		long size = IUElement.SIZE_NOTAPPLICABLE;
+		long size = IIUElement.SIZE_NOTAPPLICABLE;
 		try {
 			size = ProvisioningUtil.getSize(plan, profileId, getMonitor());
 		} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
index da4a4c9..f5a8bd5b 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
@@ -12,7 +12,7 @@ package org.eclipse.equinox.p2.tests.ui.query;
 
 import java.util.*;
 import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.query.AvailableIUCollector;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
@@ -39,7 +39,7 @@ public class AvailableIUCollectorTest extends QueryTest {
 	 * Returns the IU corresponding to the collected element.
 	 */
 	protected IInstallableUnit getIU(Object collected) {
-		return ((IUElement) collected).getIU();
+		return ((IIUElement) collected).getIU();
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java
index 060358d..4fbe77f 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.ui.query;
 
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.query.AvailableIUCollector;
 import org.eclipse.equinox.internal.p2.ui.query.LatestIUVersionCollector;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -33,7 +33,7 @@ public class LatestIUVersionCollectorTest extends AvailableIUCollectorTest {
 	protected IInstallableUnit getIU(Object collected) {
 		if (collected instanceof IInstallableUnit)
 			return (IInstallableUnit) collected;
-		return ((IUElement) collected).getIU();
+		return ((IIUElement) collected).getIU();
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 7c95e88..b50e61f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.actions.UpdateAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveProfilesOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.ProfileChooser;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IProfileChooser;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.action.*;
 import org.eclipse.jface.viewers.*;
@@ -184,8 +184,8 @@ public class ProfilesView extends ProvView {
 		return new Profiles(ProvAdminUIActivator.getDefault().getPolicy());
 	}
 
-	ProfileChooser getProfileChooser() {
-		return new ProfileChooser() {
+	IProfileChooser getProfileChooser() {
+		return new IProfileChooser() {
 			public String getProfileId(Shell shell) {
 				Object firstElement = getSelection().getFirstElement();
 				if (firstElement instanceof InstalledIUElement) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
index c928d9a..f2d2048 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
@@ -145,7 +145,7 @@ public class ProvAdminUIActivator extends AbstractUIPlugin {
 				return true;
 			}
 		});
-		policy.setProfileChooser(new ProfileChooser() {
+		policy.setProfileChooser(new IProfileChooser() {
 			public String getProfileId(Shell shell) {
 				// TODO would be nice if the profile chooser dialog let you
 				// create a new profile
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index b59a575..87407dd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -178,7 +178,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 
 	private void initializePolicies() {
 		Policy policy = new Policy();
-		policy.setProfileChooser(new ProfileChooser() {
+		policy.setProfileChooser(new IProfileChooser() {
 			public String getProfileId(Shell shell) {
 				try {
 					return getSelfProfileId();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
index de12ba9..9917ff0 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
@@ -131,7 +131,7 @@ public class DefaultQueryProvider extends QueryProvider {
 				// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=226577
 				// if (element instanceof IUElement) {
 				if (element instanceof CategoryElement) {
-					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IUElement) element).getRequirements());
+					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IIUElement) element).getRequirements());
 					if (showLatest)
 						availableIUCollector = new LatestIUVersionElementCollector(queryable, element, true);
 					else
@@ -170,8 +170,8 @@ public class DefaultQueryProvider extends QueryProvider {
 				return new ElementQueryDescriptor(updateQueryable, allQuery, collector);
 			case QueryProvider.INSTALLED_IUS :
 				// Querying of IU's.  We are drilling down into the requirements.
-				if (element instanceof IUElement) {
-					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IUElement) element).getRequirements());
+				if (element instanceof IIUElement) {
+					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IIUElement) element).getRequirements());
 					Query visibleAsAvailableQuery = new IUPropertyQuery(context.getVisibleAvailableIUProperty(), Boolean.TRUE.toString());
 					availableIUCollector = new AvailableIUCollector(queryable, element, true);
 					return new ElementQueryDescriptor(queryable, new CompoundQuery(new Query[] {visibleAsAvailableQuery, meetsAnyRequirementQuery}, true), new InstalledIUCollector(queryable, element));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
index 13cbfce..aab38c4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUPatternFilter.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
 
 import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
@@ -54,7 +54,7 @@ public class AvailableIUPatternFilter extends PatternFilter {
 	 * @see org.eclipse.ui.internal.dialogs.PatternFilter#isElementSelectable(java.lang.Object)
 	 */
 	public boolean isElementSelectable(Object element) {
-		return element instanceof IUElement && !(element instanceof CategoryElement);
+		return element instanceof IIUElement && !(element instanceof CategoryElement);
 	}
 
 	/*
@@ -89,8 +89,8 @@ public class AvailableIUPatternFilter extends PatternFilter {
 		}
 
 		String text = null;
-		if (element instanceof IUElement) {
-			IInstallableUnit iu = ((IUElement) element).getIU();
+		if (element instanceof IIUElement) {
+			IInstallableUnit iu = ((IIUElement) element).getIU();
 			if (checkName) {
 				// Get the iu name in the default locale
 				text = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_NAME);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
index 1b04c59..1f67d99 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/DeferredFetchFilteredTree.java
@@ -4,7 +4,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositor
 
 import org.eclipse.equinox.internal.p2.ui.model.QueriedElement;
 
-import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryContentListener;
+import org.eclipse.equinox.internal.p2.ui.viewers.IDeferredQueryContentListener;
 import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryContentProvider;
 
 import java.util.ArrayList;
@@ -188,7 +188,7 @@ public class DeferredFetchFilteredTree extends FilteredTree {
 
 	public void contentProviderSet(final DeferredQueryContentProvider deferredProvider) {
 		this.contentProvider = deferredProvider;
-		deferredProvider.addListener(new DeferredQueryContentListener() {
+		deferredProvider.addListener(new IDeferredQueryContentListener() {
 			public void inputChanged(Viewer v, Object oldInput, Object newInput) {
 				if (newInput == null)
 					return;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
index 5df883b..d15d860 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
@@ -14,7 +14,7 @@ import java.text.NumberFormat;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -46,7 +46,7 @@ public abstract class SizeComputingWizardPage extends ProfileModificationWizardP
 	private Job sizingJob;
 
 	protected void computeSizing(final ProvisioningPlan plan, final String profileId) {
-		size = IUElement.SIZE_UNKNOWN;
+		size = IIUElement.SIZE_UNKNOWN;
 		if (sizingJob != null)
 			sizingJob.cancel();
 		sizingJob = new Job(ProvUIMessages.SizeComputingWizardPage_SizeJobTitle) {
@@ -88,7 +88,7 @@ public abstract class SizeComputingWizardPage extends ProfileModificationWizardP
 
 	protected void updateSizingInfo() {
 		if (sizeInfo != null && !sizeInfo.isDisposed()) {
-			if (size == IUElement.SIZE_NOTAPPLICABLE)
+			if (size == IIUElement.SIZE_NOTAPPLICABLE)
 				sizeInfo.setVisible(false);
 			else {
 				sizeInfo.setText(NLS.bind(ProvUIMessages.UpdateOrInstallWizardPage_Size, getFormattedSize()));
@@ -98,7 +98,7 @@ public abstract class SizeComputingWizardPage extends ProfileModificationWizardP
 	}
 
 	protected String getFormattedSize() {
-		if (size == IUElement.SIZE_UNKNOWN || size == IUElement.SIZE_UNAVAILABLE)
+		if (size == IIUElement.SIZE_UNKNOWN || size == IIUElement.SIZE_UNAVAILABLE)
 			return ProvUIMessages.IUDetailsLabelProvider_Unknown;
 		if (size > 1000L) {
 			long kb = size / 1000L;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index 380f136..2b4d30a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -31,7 +31,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
  * 
  * @since 3.4
  */
-public class AvailableIUElement extends QueriedElement implements IUElement {
+public class AvailableIUElement extends QueriedElement implements IIUElement {
 
 	IInstallableUnit iu;
 	// Currently this variable is not settable due to the
@@ -40,7 +40,7 @@ public class AvailableIUElement extends QueriedElement implements IUElement {
 	// probably refer to some preference or policy to decide what to do.
 	// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=221087
 	private static boolean shouldShowSize = false;
-	long size = IUElement.SIZE_UNKNOWN;
+	long size = IIUElement.SIZE_UNKNOWN;
 	String profileID;
 
 	public AvailableIUElement(Object parent, IInstallableUnit iu, String profileID) {
@@ -81,7 +81,7 @@ public class AvailableIUElement extends QueriedElement implements IUElement {
 			size = ProvisioningUtil.getSize(plan, profileID, mon.newChild(50));
 		} catch (ProvisionException e) {
 			handleException(e, ProvUIMessages.AvailableIUElement_ProfileNotFound);
-			size = IUElement.SIZE_UNAVAILABLE;
+			size = IIUElement.SIZE_UNAVAILABLE;
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
index 97ddcf7..127141d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
  * 
  * @since 3.4
  */
-public class CategoryElement extends RemoteQueriedElement implements IUElement {
+public class CategoryElement extends RemoteQueriedElement implements IIUElement {
 
 	private ArrayList ius = new ArrayList(1);
 	private RequiredCapability[] requirements;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java
new file mode 100644
index 0000000..221eb40
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java
@@ -0,0 +1,55 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.model;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
+
+/**
+ * Interface for elements that represent IU's.
+ * 
+ * @since 3.4
+ */
+public interface IIUElement {
+
+	/**
+	 * Indicates that the size is currently unknown
+	 */
+	public static final long SIZE_UNKNOWN = -1L;
+
+	/**
+	 * Indicates that the size is unavailable (an
+	 * attempt was made to compute size but it failed)
+	 */
+	public static final long SIZE_UNAVAILABLE = -2L;
+
+	/**
+	 * Indicates that there was nothing to size (there
+	 * was no valid plan that could be used to compute
+	 * size).
+	 */
+	public static final long SIZE_NOTAPPLICABLE = -3L;
+
+	public IInstallableUnit getIU();
+
+	public boolean shouldShowSize();
+
+	public boolean shouldShowVersion();
+
+	public long getSize();
+
+	public void computeSize(IProgressMonitor monitor);
+
+	public RequiredCapability[] getRequirements();
+
+	public Object getParent(Object obj);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
deleted file mode 100644
index d8d974a..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.model;
-
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
-
-/**
- * Interface for elements that represent IU's.
- * 
- * @since 3.4
- */
-public interface IUElement {
-
-	/**
-	 * Indicates that the size is currently unknown
-	 */
-	public static final long SIZE_UNKNOWN = -1L;
-
-	/**
-	 * Indicates that the size is unavailable (an
-	 * attempt was made to compute size but it failed)
-	 */
-	public static final long SIZE_UNAVAILABLE = -2L;
-
-	/**
-	 * Indicates that there was nothing to size (there
-	 * was no valid plan that could be used to compute
-	 * size).
-	 */
-	public static final long SIZE_NOTAPPLICABLE = -3L;
-
-	public IInstallableUnit getIU();
-
-	public boolean shouldShowSize();
-
-	public boolean shouldShowVersion();
-
-	public long getSize();
-
-	public void computeSize(IProgressMonitor monitor);
-
-	public RequiredCapability[] getRequirements();
-
-	public Object getParent(Object obj);
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
index 5d8f6f7..4a1e4b3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
@@ -22,7 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
  * 
  * @since 3.4
  */
-public class IUVersionsElement extends QueriedElement implements IUElement {
+public class IUVersionsElement extends QueriedElement implements IIUElement {
 
 	IInstallableUnit iu;
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
index 48b7900..096c1ae 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
@@ -34,7 +34,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
  * 
  * @since 3.4
  */
-public class RollbackProfileElement extends RemoteQueriedElement implements IUElement {
+public class RollbackProfileElement extends RemoteQueriedElement implements IIUElement {
 
 	private IInstallableUnit iu;
 	private IProfile snapshot;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentListener.java
deleted file mode 100644
index 16ae2bc..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentListener.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.internal.p2.ui.viewers;
-
-import java.util.EventListener;
-import org.eclipse.jface.viewers.Viewer;
-
-/**
- * A listening interface used to signal when fetching begins and
- * ends.  Used by clients who wish to coordinate fetching with other
- * jobs that must occur in the viewer.
- * 
- * @since 3.4
- *
- */
-public interface DeferredQueryContentListener extends EventListener {
-	public void inputChanged(Viewer v, Object oldInput, Object newInput);
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentProvider.java
index 44e6566..cfec4b8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryContentProvider.java
@@ -45,11 +45,11 @@ public class DeferredQueryContentProvider extends ProvElementContentProvider {
 		// Default constructor
 	}
 
-	public void addListener(DeferredQueryContentListener listener) {
+	public void addListener(IDeferredQueryContentListener listener) {
 		listeners.add(listener);
 	}
 
-	public void removeListener(DeferredQueryContentListener listener) {
+	public void removeListener(IDeferredQueryContentListener listener) {
 		listeners.remove(listener);
 	}
 
@@ -61,7 +61,7 @@ public class DeferredQueryContentProvider extends ProvElementContentProvider {
 		if (v instanceof AbstractTreeViewer) {
 			manager = new DeferredQueryTreeContentManager((AbstractTreeViewer) v);
 			viewer = (AbstractTreeViewer) v;
-			manager.setListener(new DeferredQueryTreeListener() {
+			manager.setListener(new IDeferredQueryTreeListener() {
 
 				public void fetchingDeferredChildren(Object parent, Object placeholder) {
 					alreadyQueried.put(parent, placeholder);
@@ -78,7 +78,7 @@ public class DeferredQueryContentProvider extends ProvElementContentProvider {
 		currentInput = newInput;
 		Object[] inputListeners = listeners.getListeners();
 		for (int i = 0; i < inputListeners.length; i++) {
-			((DeferredQueryContentListener) inputListeners[i]).inputChanged(v, oldInput, newInput);
+			((IDeferredQueryContentListener) inputListeners[i]).inputChanged(v, oldInput, newInput);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java
index a62f291..8ee7296 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeContentManager.java
@@ -40,7 +40,7 @@ public class DeferredQueryTreeContentManager extends DeferredTreeContentManager
 	}
 
 	Object elementRequested;
-	DeferredQueryTreeListener listener;
+	IDeferredQueryTreeListener listener;
 
 	public DeferredQueryTreeContentManager(AbstractTreeViewer viewer) {
 		super(viewer);
@@ -81,7 +81,7 @@ public class DeferredQueryTreeContentManager extends DeferredTreeContentManager
 		return new ElementPendingUpdateAdapter(elementRequested);
 	}
 
-	public void setListener(DeferredQueryTreeListener listener) {
+	public void setListener(IDeferredQueryTreeListener listener) {
 		this.listener = listener;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java
deleted file mode 100644
index 3d9647e..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/DeferredQueryTreeListener.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.internal.p2.ui.viewers;
-
-import java.util.EventListener;
-
-/**
- * A listening interface used to signal when fetching begins and
- * ends.  Used by clients who wish to coordinate fetching with other
- * capabilities of the viewer.
- * 
- * @since 3.4
- *
- */
-public interface DeferredQueryTreeListener extends EventListener {
-
-	public void fetchingDeferredChildren(Object parent, Object placeHolder);
-
-	public void finishedFetchingDeferredChildren(Object parent, Object placeHolder);
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryContentListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryContentListener.java
new file mode 100644
index 0000000..42468e6
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryContentListener.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.viewers;
+
+import java.util.EventListener;
+import org.eclipse.jface.viewers.Viewer;
+
+/**
+ * A listening interface used to signal when fetching begins and
+ * ends.  Used by clients who wish to coordinate fetching with other
+ * jobs that must occur in the viewer.
+ * 
+ * @since 3.4
+ *
+ */
+public interface IDeferredQueryContentListener extends EventListener {
+	public void inputChanged(Viewer v, Object oldInput, Object newInput);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryTreeListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryTreeListener.java
new file mode 100644
index 0000000..bcd3c2f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IDeferredQueryTreeListener.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.viewers;
+
+import java.util.EventListener;
+
+/**
+ * A listening interface used to signal when fetching begins and
+ * ends.  Used by clients who wish to coordinate fetching with other
+ * capabilities of the viewer.
+ * 
+ * @since 3.4
+ *
+ */
+public interface IDeferredQueryTreeListener extends EventListener {
+
+	public void fetchingDeferredChildren(Object parent, Object placeHolder);
+
+	public void finishedFetchingDeferredChildren(Object parent, Object placeHolder);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
index 67f9ae4..c0e0fd9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.viewers;
 
 import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
 
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 
 import java.text.NumberFormat;
 import java.util.HashMap;
@@ -109,8 +109,8 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 				return iu.getId();
 			case IUColumnConfig.COLUMN_VERSION :
 				// If it's an element, determine if version should be shown
-				if (element instanceof IUElement) {
-					if (((IUElement) element).shouldShowVersion())
+				if (element instanceof IIUElement) {
+					if (((IIUElement) element).shouldShowVersion())
 						return iu.getVersion().toString();
 					return BLANK;
 				}
@@ -118,8 +118,8 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 				return iu.getVersion().toString();
 
 			case IUColumnConfig.COLUMN_SIZE :
-				if (element instanceof IUElement && ((IUElement) element).shouldShowSize())
-					return getIUSize((IUElement) element);
+				if (element instanceof IIUElement && ((IIUElement) element).shouldShowSize())
+					return getIUSize((IIUElement) element);
 				return BLANK;
 		}
 		return BLANK;
@@ -135,11 +135,11 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 		return null;
 	}
 
-	private String getIUSize(final IUElement element) {
+	private String getIUSize(final IIUElement element) {
 		long size = element.getSize();
 		// If size is already known, or we already tried
 		// to get it, don't try again
-		if (size != IUElement.SIZE_UNKNOWN)
+		if (size != IIUElement.SIZE_UNKNOWN)
 			return getFormattedSize(size);
 		if (!jobs.containsKey(element)) {
 			Job resolveJob = new Job(element.getIU().getId()) {
@@ -157,7 +157,7 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 						return Status.CANCEL_STATUS;
 
 					// If we still could not compute size, give up
-					if (element.getSize() == IUElement.SIZE_UNKNOWN)
+					if (element.getSize() == IIUElement.SIZE_UNKNOWN)
 						return Status.OK_STATUS;
 
 					if (shell == null || shell.isDisposed())
@@ -187,7 +187,7 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 	}
 
 	private String getFormattedSize(long size) {
-		if (size == IUElement.SIZE_UNKNOWN || size == IUElement.SIZE_UNAVAILABLE)
+		if (size == IIUElement.SIZE_UNKNOWN || size == IIUElement.SIZE_UNAVAILABLE)
 			return ProvUIMessages.IUDetailsLabelProvider_Unknown;
 		if (size > 1000L) {
 			long kb = size / 1000L;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ExistingIUInProfileAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ExistingIUInProfileAction.java
index fe239a3..eeb9f1c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ExistingIUInProfileAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ExistingIUInProfileAction.java
@@ -11,7 +11,7 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
@@ -80,7 +80,7 @@ public abstract class ExistingIUInProfileAction extends ProfileModificationActio
 		return false;
 	}
 
-	protected boolean isSelectable(IUElement element) {
+	protected boolean isSelectable(IIUElement element) {
 		if (!super.isSelectable(element))
 			return false;
 		Object parent = element.getParent(element);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index 4f4c108..7ead7ba 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
@@ -101,7 +101,7 @@ public class InstallAction extends ProfileModificationAction {
 		// must be at least one installable unit selected that is
 		// selectable
 		for (int i = 0; i < selectionArray.length; i++) {
-			if (selectionArray[i] instanceof InstalledIUElement && isSelectable((IUElement) selectionArray[i]))
+			if (selectionArray[i] instanceof InstalledIUElement && isSelectable((IIUElement) selectionArray[i]))
 				return true;
 			IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(selectionArray[i], IInstallableUnit.class);
 			if (iu != null && isSelectable(iu))
@@ -115,8 +115,8 @@ public class InstallAction extends ProfileModificationAction {
 	 * (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.actions.ProfileModificationAction#isSelectable(org.eclipse.equinox.internal.p2.ui.model.IUElement)
 	 */
-	protected boolean isSelectable(IUElement element) {
-		return super.isSelectable(element) && !(element.getParent(element) instanceof IUElement);
+	protected boolean isSelectable(IIUElement element) {
+		return super.isSelectable(element) && !(element.getParent(element) instanceof IIUElement);
 	}
 
 	protected String getTaskName() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
index 665bc85..d1528da 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
@@ -17,7 +17,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
@@ -190,8 +190,8 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 		List iusList = new ArrayList(elements.size());
 
 		for (int i = 0; i < elements.size(); i++) {
-			if (elements.get(i) instanceof IUElement) {
-				IUElement element = (IUElement) elements.get(i);
+			if (elements.get(i) instanceof IIUElement) {
+				IIUElement element = (IIUElement) elements.get(i);
 				if (isSelectable(element))
 					iusList.add(getIU(element));
 			} else {
@@ -203,7 +203,7 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 		return (IInstallableUnit[]) iusList.toArray(new IInstallableUnit[iusList.size()]);
 	}
 
-	protected boolean isSelectable(IUElement element) {
+	protected boolean isSelectable(IIUElement element) {
 		return !(element instanceof CategoryElement);
 	}
 
@@ -223,7 +223,7 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 		return policy.getPlanValidator();
 	}
 
-	protected ProfileChooser getProfileChooser() {
+	protected IProfileChooser getProfileChooser() {
 		return policy.getProfileChooser();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
index 27aa04b..7afed44 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
@@ -11,7 +11,7 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.model.QueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
@@ -24,7 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
  * 
  * @since 3.4
  */
-public class InstalledIUElement extends QueriedElement implements IUElement {
+public class InstalledIUElement extends QueriedElement implements IIUElement {
 
 	String profileId;
 	IInstallableUnit iu;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
index ce22e83..f1e6c8c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
@@ -16,7 +16,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.*;
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -241,14 +241,14 @@ public class ProvisioningUtil {
 	public static long getSize(ProvisioningPlan plan, String profileId, IProgressMonitor monitor) throws ProvisionException {
 		// If there is nothing to size, return 0
 		if (plan == null)
-			return IUElement.SIZE_NOTAPPLICABLE;
+			return IIUElement.SIZE_NOTAPPLICABLE;
 		if (plan.getOperands().length == 0)
 			return 0;
 		SizingPhaseSet set = new SizingPhaseSet();
 		IStatus status = getEngine().perform(getProfile(profileId), set, plan.getOperands(), null, monitor);
 		if (status.isOK())
 			return set.getSizing().getDiskSize();
-		return IUElement.SIZE_UNAVAILABLE;
+		return IIUElement.SIZE_UNAVAILABLE;
 	}
 
 	public static IStatus performProvisioningPlan(ProvisioningPlan plan, PhaseSet phaseSet, IProfile profile, IProgressMonitor monitor) throws ProvisionException {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IProfileChooser.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IProfileChooser.java
new file mode 100644
index 0000000..9bf0036
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IProfileChooser.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui.policy;
+
+import org.eclipse.swt.widgets.Shell;
+
+/**
+ * Interface for a mechanism that chooses a profile from the profile registry.
+ * the mechanism may or may not involve the user.
+ * 
+ * @since 3.4
+ * 
+ */
+
+public interface IProfileChooser {
+	/**
+	 * Return a chosen profile id, or <code>null</code> if there is no profile
+	 * chosen.
+	 */
+	public String getProfileId(Shell shell);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/Policy.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/Policy.java
index f599145..0aace22 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/Policy.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/Policy.java
@@ -43,7 +43,7 @@ public class Policy {
 	private QueryProvider queryProvider;
 	private LicenseManager licenseManager;
 	private PlanValidator planValidator;
-	private ProfileChooser profileChooser;
+	private IProfileChooser profileChooser;
 	private IUViewQueryContext queryContext;
 	private RepositoryManipulator repositoryManipulator;
 
@@ -143,7 +143,7 @@ public class Policy {
 	 * 
 	 * @return the profile chooser
 	 */
-	public ProfileChooser getProfileChooser() {
+	public IProfileChooser getProfileChooser() {
 		if (profileChooser == null) {
 			return getDefaultProfileChooser();
 		}
@@ -157,7 +157,7 @@ public class Policy {
 	 * @param chooser the chooser to use, or <code>null</code> to use 
 	 * the default chooser
 	 */
-	public void setProfileChooser(ProfileChooser chooser) {
+	public void setProfileChooser(IProfileChooser chooser) {
 		profileChooser = chooser;
 	}
 
@@ -249,8 +249,8 @@ public class Policy {
 	 * This profile chooser uses the profile id of the running
 	 * application.
 	 */
-	private ProfileChooser getDefaultProfileChooser() {
-		return new ProfileChooser() {
+	private IProfileChooser getDefaultProfileChooser() {
+		return new IProfileChooser() {
 			public String getProfileId(Shell shell) {
 				return IProfileRegistry.SELF;
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ProfileChooser.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ProfileChooser.java
deleted file mode 100644
index ea8b1d9..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/ProfileChooser.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.policy;
-
-import org.eclipse.swt.widgets.Shell;
-
-/**
- * Interface for a mechanism that chooses a profile from the profile registry.
- * the mechanism may or may not involve the user.
- * 
- * @since 3.4
- * 
- */
-
-public interface ProfileChooser {
-	/**
-	 * Return a chosen profile id, or <code>null</code> if there is no profile
-	 * chosen.
-	 */
-	public String getProfileId(Shell shell);
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
index b9909ce..b2e4ea9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
@@ -11,7 +11,7 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 
-import org.eclipse.equinox.internal.p2.ui.model.IUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepDescriptor;
@@ -118,9 +118,9 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 				if (element instanceof IProfile) {
 					return ((IProfile) element).getProperty(IProfile.PROP_NAME);
 				}
-				if (element instanceof IUElement) {
-					if (((IUElement) element).shouldShowVersion())
-						return ((IUElement) element).getIU().getVersion().toString();
+				if (element instanceof IIUElement) {
+					if (((IIUElement) element).shouldShowVersion())
+						return ((IIUElement) element).getIU().getVersion().toString();
 				}
 				IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
 				if (iu != null) {

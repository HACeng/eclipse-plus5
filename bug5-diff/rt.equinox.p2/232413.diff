commit ff928c1c504be502a09ab6afc244209f47dafcf2
Author: John Arthorne <johna>
Date:   Thu May 22 16:51:32 2008 +0000

    Bug 232413 [ui] Long delay opening updates dialog

2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
29	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
14	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
67	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index e20c652..57a81db 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -124,6 +124,8 @@ public class ProvUIMessages extends NLS {
 	public static String AvailableIUGroup_RefreshOperationLabel;
 	public static String AvailableIUGroup_ViewByToolTipText;
 	public static String DeferredFetchFilteredTree_RetrievingList;
+	public static String DeferredQueryContentProvider_FetchJobName;
+	public static String DeferredQueryContentProvider_Pending;
 	public static String Label_Profiles;
 	public static String Label_Repositories;
 	public static String MetadataRepositoryElement_NotFound;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 4dc9b6d..9237648 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -140,6 +140,8 @@ AvailableIUGroup_LoadingRepository=Loading {0}
 AvailableIUGroup_RefreshOperationLabel=Refresh
 AvailableIUGroup_ViewByToolTipText=View by
 DeferredFetchFilteredTree_RetrievingList=Retrieving List
+DeferredQueryContentProvider_FetchJobName=Fetching install information
+DeferredQueryContentProvider_Pending=Pending...
 Label_Profiles=All Software Profiles
 Label_Repositories=Known Repositories
 MetadataRepositoryElement_NotFound=This repository is currently not available.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
index 6be8c7c..63c8261 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
@@ -98,6 +98,8 @@ public class InstalledIUGroup extends StructuredIUGroup {
 	Object getInput() {
 		ProfileElement element = new ProfileElement(profileId);
 		element.setQueryProvider(getQueryProvider());
+		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=232413
+		element.preloadIUNamesWhileCollecting();
 		return element;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
index aae1bf8..6d42507 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ProfileElement.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -18,6 +19,8 @@ import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.InstalledIUCollector;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -29,6 +32,9 @@ import org.eclipse.osgi.util.NLS;
 public class ProfileElement extends RemoteQueriedElement {
 	String profileId;
 
+	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=232413
+	private boolean queryChildNames = false;
+
 	public ProfileElement(String profileId) {
 		this.profileId = profileId;
 	}
@@ -83,4 +89,27 @@ public class ProfileElement extends RemoteQueriedElement {
 	public boolean isContainer() {
 		return super.getChildren(this).length > 0;
 	}
+
+	// Make these two methods public to fix
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=232413
+	public Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+		if (queryChildNames) {
+			if (getQueryProvider() == null)
+				return new Object[0];
+			ElementQueryDescriptor queryDescriptor = getQueryProvider().getQueryDescriptor(this, getQueryType());
+			if (queryDescriptor == null || !isSufficientForQuery(queryDescriptor))
+				return new Object[0];
+			if (queryDescriptor.collector instanceof InstalledIUCollector)
+				((InstalledIUCollector) queryDescriptor.collector).fetchNamePropertyWhileCollecting();
+			queryDescriptor.queryable.query(queryDescriptor.query, queryDescriptor.collector, monitor);
+			return queryDescriptor.collector.toArray(Object.class);
+
+		}
+		return super.fetchChildren(o, monitor);
+	}
+
+	public void preloadIUNamesWhileCollecting() {
+		queryChildNames = true;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
index c74352d..56161ea 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/InstalledIUCollector.java
@@ -24,6 +24,9 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  */
 public class InstalledIUCollector extends QueriedElementCollector {
 
+	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=232413
+	private boolean queryNameProperty = false;
+
 	public InstalledIUCollector(IQueryProvider queryProvider, IProfile profile, QueryContext queryContext) {
 		super(queryProvider, profile, queryContext);
 	}
@@ -38,10 +41,20 @@ public class InstalledIUCollector extends QueriedElementCollector {
 	public boolean accept(Object match) {
 		if (!(match instanceof IInstallableUnit))
 			return true;
-		if (queryable instanceof IProfile)
+		if (queryable instanceof IProfile) {
+			// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=232413
+			// access the IU's name while collecting to prevent a later lockup in the UI thread.
+			if (queryNameProperty)
+				IUPropertyUtils.getIUProperty((IInstallableUnit) match, IInstallableUnit.PROP_NAME);
 			return super.accept(new InstalledIUElement(((IProfile) queryable).getProfileId(), (IInstallableUnit) match));
+		}
 		// shouldn't happen, but is possible if a client reset the queryable to a non-profile.
 		return super.accept(match);
 	}
 
+	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=232413
+	public void fetchNamePropertyWhileCollecting() {
+		this.queryNameProperty = true;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
index 607d49e..fa71b08 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
@@ -13,14 +13,18 @@ package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 
 import java.util.HashMap;
 import java.util.HashSet;
-import org.eclipse.core.runtime.ListenerList;
+import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.jobs.*;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryTreeContentManager;
 import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryTreeListener;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
 import org.eclipse.jface.viewers.*;
+import org.eclipse.swt.widgets.Display;
 
 /**
  * Content provider that retrieves children asynchronously where
@@ -40,6 +44,11 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 	AbstractTreeViewer viewer = null;
 	ListenerList listeners = new ListenerList();
 	boolean synchronous = false;
+	TableViewer tableViewer = null;
+	Job profileFetchJob = null;
+	Display display = null;
+	String placeholder;
+	Object[] realChildren;
 
 	public DeferredQueryContentProvider(IQueryProvider queryProvider) {
 		this.queryProvider = queryProvider;
@@ -54,11 +63,18 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 	}
 
 	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
+		// cache display while in UI thread
+		display = v.getControl().getDisplay();
 		if (manager != null)
 			manager.cancel(oldInput);
+		if (profileFetchJob != null) {
+			profileFetchJob.cancel();
+			profileFetchJob = null;
+		}
 		if (v instanceof AbstractTreeViewer) {
 			manager = new DeferredQueryTreeContentManager((AbstractTreeViewer) v);
 			viewer = (AbstractTreeViewer) v;
+			tableViewer = null;
 			manager.setListener(new DeferredQueryTreeListener() {
 
 				public void fetchingDeferredChildren(Object parent, Object placeholder) {
@@ -69,8 +85,11 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 					queryCompleted.add(parent);
 				}
 			});
-		} else
+		} else {
 			viewer = null;
+			if (v instanceof TableViewer)
+				tableViewer = (TableViewer) v;
+		}
 		alreadyQueried = new HashMap();
 		queryCompleted = new HashSet();
 		currentInput = newInput;
@@ -81,7 +100,48 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 
 	}
 
-	public Object[] getElements(Object input) {
+	public Object[] getElements(final Object input) {
+		if (input instanceof ProfileElement) {
+			if (profileFetchJob == null && tableViewer != null) {
+				final ProfileElement element = (ProfileElement) input;
+				element.setQueryProvider(queryProvider);
+				placeholder = ProvUIMessages.DeferredQueryContentProvider_Pending;
+				profileFetchJob = new Job(ProvUIMessages.DeferredQueryContentProvider_FetchJobName) {
+					public IStatus run(IProgressMonitor monitor) {
+						if (monitor.isCanceled())
+							return Status.CANCEL_STATUS;
+						realChildren = element.fetchChildren(input, monitor);
+						return Status.OK_STATUS;
+					}
+				};
+				profileFetchJob.addJobChangeListener(new JobChangeAdapter() {
+					public void done(IJobChangeEvent event) {
+						// whether finished or cancelled, get rid of the placeholder.
+						if (display == null || placeholder == null)
+							return;
+						final boolean addChildren = event.getResult().isOK();
+						display.asyncExec(new Runnable() {
+							public void run() {
+								if (!tableViewer.getControl().isDisposed()) {
+									tableViewer.remove(placeholder);
+									if (addChildren) {
+										tableViewer.add(realChildren);
+										// Set the selection explicitly so listeners can
+										// change their validation
+										tableViewer.setSelection(StructuredSelection.EMPTY);
+									}
+								}
+								placeholder = null;
+							}
+						});
+					}
+				});
+				profileFetchJob.schedule();
+				realChildren = new Object[] {placeholder};
+			}
+			// realChildren could contain the placeholder or the real stuff
+			return realChildren;
+		}
 		if (input instanceof QueriedElement) {
 			QueriedElement element = (QueriedElement) input;
 			element.setQueryProvider(queryProvider);
@@ -94,6 +154,10 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 		if (manager != null) {
 			manager.cancel(currentInput);
 		}
+		if (profileFetchJob != null) {
+			profileFetchJob.cancel();
+			profileFetchJob = null;
+		}
 	}
 
 	public Object getParent(Object child) {

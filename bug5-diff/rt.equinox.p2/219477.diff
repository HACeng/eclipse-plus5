commit e1179d2f082e9b50bb34460cdd33238b90af8cc3
Author: Pascal Rapicault <prapicau>
Date:   Mon Mar 10 19:34:46 2008 +0000

    Bug 219477 - [prov] [solver] Integrate sat4j

3	1	bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
34	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUProfilePropertyQuery.java
48	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUPropertyQuery.java
401	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/PBProjector.java
49	33	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
354	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/TwoTierMap.java
diff --git a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
index 221a4bd..413dd1d 100644
--- a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
@@ -27,4 +27,6 @@ Bundle-Activator: org.eclipse.equinox.internal.p2.director.DirectorActivator
 Eclipse-LazyStart: true
 Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
  J2SE-1.4
-Require-Bundle: org.eclipse.equinox.common
+Require-Bundle: org.eclipse.equinox.common,
+ org.sat4j.core;bundle-version="2.0.0",
+ org.sat4j.pb;bundle-version="2.0.0"
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUProfilePropertyQuery.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUProfilePropertyQuery.java
new file mode 100644
index 0000000..cc7caf7
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUProfilePropertyQuery.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.director;
+
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+
+/**
+ * A query that searches for {@link IInstallableUnit} instances that have
+ * a property associated with the specified profile, whose value matches the provided value.
+ */
+public class IUProfilePropertyQuery extends IUPropertyQuery {
+	private IProfile profile;
+
+	/**
+	 * Creates a new query on the given property name and value.
+	 */
+	public IUProfilePropertyQuery(IProfile profile, String propertyName, String propertyValue) {
+		super(propertyName, propertyValue);
+		this.profile = profile;
+	}
+
+	protected String getProperty(IInstallableUnit iu, String name) {
+		return profile.getInstallableUnitProperty(iu, name);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUPropertyQuery.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUPropertyQuery.java
new file mode 100644
index 0000000..8e6073a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUPropertyQuery.java
@@ -0,0 +1,48 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.director;
+
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
+
+/**
+ * A query that searches for {@link IInstallableUnit} instances that have
+ * a property whose value matches the provided value.
+ */
+public class IUPropertyQuery extends Query {
+	private String propertyName;
+	private String propertyValue;
+
+	/**
+	 * Creates a new query on the given property name and value.
+	 */
+	public IUPropertyQuery(String propertyName, String propertyValue) {
+		this.propertyName = propertyName;
+		this.propertyValue = propertyValue;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.p2.query2.Query#isMatch(java.lang.Object)
+	 */
+	public boolean isMatch(Object object) {
+		if (!(object instanceof IInstallableUnit))
+			return false;
+		IInstallableUnit candidate = (IInstallableUnit) object;
+		String value = getProperty(candidate, propertyName);
+		if (value != null && value.equals(propertyValue))
+			return true;
+		return false;
+	}
+
+	protected String getProperty(IInstallableUnit iu, String name) {
+		return iu.getProperty(name);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/PBProjector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/PBProjector.java
new file mode 100644
index 0000000..1f52a6e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/PBProjector.java
@@ -0,0 +1,401 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.director;
+
+import java.io.*;
+import java.util.*;
+import java.util.Map.Entry;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
+import org.osgi.framework.InvalidSyntaxException;
+import org.sat4j.pb.IPBSolver;
+import org.sat4j.pb.SolverFactory;
+import org.sat4j.pb.core.PBSolverCP;
+import org.sat4j.pb.orders.VarOrderHeapObjective;
+import org.sat4j.pb.reader.OPBEclipseReader2007;
+import org.sat4j.reader.ParseFormatException;
+import org.sat4j.specs.*;
+
+public class PBProjector {
+	private static boolean DEBUG = false;
+	private Picker picker;
+
+	private Map variables; //key IU, value corresponding variable in the problem
+	private List toConsider; //IUs to add to the slice
+	private TwoTierMap slice; //The IUs that have been considered to be part of the problem
+	private ArrayList nonGreedyRequirements; //List of non greedy requirements. They are processed separately once the slicing has been done since they don't bring in new IU 
+
+	private Dictionary selectionContext;
+
+	private final static int shift = 1;
+
+	private ArrayList constraints;
+	private ArrayList dependencies;
+	private ArrayList tautologies;
+	private String objective;
+
+	private Collection solution;
+	private boolean incompleteProjection = false;
+
+	private File problemFile;
+
+	public PBProjector(Picker p, Dictionary context) {
+		picker = p;
+		variables = new HashMap();
+		slice = new TwoTierMap();
+		constraints = new ArrayList();
+		tautologies = new ArrayList();
+		dependencies = new ArrayList();
+		selectionContext = context;
+		nonGreedyRequirements = new ArrayList();
+	}
+
+	public PBProjector(IInstallableUnit[] installRoots, IInstallableUnit[] gatherAvailableInstallableUnits, Dictionary selectionContext) {
+		this(new Picker(gatherAvailableInstallableUnits, null), selectionContext);
+	}
+
+	public void encode(IInstallableUnit[] ius, IProgressMonitor monitor) {
+		try {
+			long start = 0;
+			if (DEBUG) {
+				start = System.currentTimeMillis();
+				System.out.println("Start slicing: " + start); //$NON-NLS-1$
+			}
+
+			validateInput(ius);
+			toConsider = new ArrayList();
+			toConsider.addAll(Arrays.asList(ius));
+			for (int i = 0; i < toConsider.size(); i++) {
+				IInstallableUnit current = (IInstallableUnit) toConsider.get(i);
+				processIU(current);
+			}
+			processNonGreedyRequirements();
+			createConstraintsForSingleton();
+			for (int i = 0; i < ius.length; i++) {
+				createMustHaves(ius[i]);
+			}
+			createOptimizationFunction();
+			persist();
+			if (DEBUG) {
+				long stop = System.currentTimeMillis();
+				System.out.println("Slicing complete: " + (stop - start)); //$NON-NLS-1$
+			}
+		} catch (IllegalStateException e) {
+			// TODO Marking incomplete is good, but we need to track what caused the failure
+			System.err.println(e.getMessage());
+			incompleteProjection = true;
+		}
+	}
+
+	//This is a shortcut to simplify the error reporting when the filter of the ius we are being asked to install does not pass 
+	private void validateInput(IInstallableUnit[] ius) {
+		for (int i = 0; i < ius.length; i++) {
+			if (!isApplicable(ius[i]))
+				throw new IllegalStateException("The IU " + ius[i] + " can't be installed in this environment because its filter does not match."); //$NON-NLS-1$//$NON-NLS-2$
+		}
+	}
+
+	private void processNonGreedyRequirements() {
+		if (nonGreedyRequirements.size() == 0)
+			return;
+		IInstallableUnit[] toPickFrom = (IInstallableUnit[]) slice.values().toArray(new IInstallableUnit[slice.values().size()]);
+		Picker p = new Picker(toPickFrom, null);
+		for (Iterator iterator = nonGreedyRequirements.iterator(); iterator.hasNext();) {
+			Object[] req = (Object[]) iterator.next();
+			getVariable((IInstallableUnit) req[0]);
+			expandRequirement((IInstallableUnit) req[0], (RequiredCapability) req[1], p);
+		}
+
+	}
+
+	//Create an optimization function favoring the highest version of each IU  
+	private void createOptimizationFunction() {
+		objective = "min:"; //$NON-NLS-1$
+		Set s = slice.entrySet();
+		for (Iterator iterator = s.iterator(); iterator.hasNext();) {
+			Map.Entry entry = (Map.Entry) iterator.next();
+			HashMap conflictingEntries = (HashMap) entry.getValue();
+			if (conflictingEntries.size() <= 1) {
+				objective += " 1 " + getVariable((IInstallableUnit) conflictingEntries.values().iterator().next()); //$NON-NLS-1$
+				continue;
+			}
+			List toSort = new ArrayList(conflictingEntries.values());
+			Collections.sort(toSort);
+			int weight = toSort.size();
+			for (Iterator iterator2 = toSort.iterator(); iterator2.hasNext();) {
+				objective += " " + weight-- + " " + getVariable((IInstallableUnit) iterator2.next()); //$NON-NLS-1$//$NON-NLS-2$
+			}
+		}
+		objective += " ;"; //$NON-NLS-1$
+	}
+
+	private void createMustHaves(IInstallableUnit iu) {
+		tautologies.add(" +1 " + getVariable(iu) + " = 1;"); //$NON-NLS-1$ //$NON-NLS-2$
+	}
+
+	private void createNegation(IInstallableUnit iu) {
+		tautologies.add(" +1" + getVariable(iu) + " = 0;"); //$NON-NLS-1$//$NON-NLS-2$
+	}
+
+	// Check whether the requirement is applicable
+	private boolean isApplicable(RequiredCapability req) {
+		String filter = req.getFilter();
+		if (filter == null)
+			return true;
+		try {
+			return DirectorActivator.context.createFilter(filter).match(selectionContext);
+		} catch (InvalidSyntaxException e) {
+			return false;
+		}
+	}
+
+	//Write the problem generated into a temporary file
+	private void persist() {
+		try {
+			problemFile = File.createTempFile("p2Encoding", ".opb"); //$NON-NLS-1$//$NON-NLS-2$
+			BufferedWriter w = new BufferedWriter(new FileWriter(problemFile));
+			int clauseCount = tautologies.size() + dependencies.size() + constraints.size();
+
+			int variableCount = variables.size();
+			w.write("* #variable= " + variableCount + " #constraint= " + clauseCount + "  "); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+			w.newLine();
+			w.write("*"); //$NON-NLS-1$
+			w.newLine();
+
+			w.write(objective);
+			w.newLine();
+			w.newLine();
+
+			w.write(explanation + " ;"); //$NON-NLS-1$
+			w.newLine();
+			w.newLine();
+
+			for (Iterator iterator = dependencies.iterator(); iterator.hasNext();) {
+				w.write((String) iterator.next());
+				w.newLine();
+			}
+			for (Iterator iterator = constraints.iterator(); iterator.hasNext();) {
+				w.write((String) iterator.next());
+				w.newLine();
+			}
+			for (Iterator iterator = tautologies.iterator(); iterator.hasNext();) {
+				w.write((String) iterator.next());
+				w.newLine();
+			}
+			w.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+
+	private boolean isApplicable(IInstallableUnit iu) {
+		String enablementFilter = iu.getFilter();
+		if (enablementFilter == null)
+			return true;
+		try {
+			return DirectorActivator.context.createFilter(enablementFilter).match(selectionContext);
+		} catch (InvalidSyntaxException e) {
+			return false;
+		}
+	}
+
+	String explanation = "explain: ";
+
+	private void processIU(IInstallableUnit iu) {
+		slice.put(iu.getId(), iu.getVersion(), iu);
+		explanation += " " + getVariable(iu);
+		if (!isApplicable(iu)) {
+			createNegation(iu);
+			return;
+		}
+
+		RequiredCapability[] reqs = iu.getRequiredCapabilities();
+		if (reqs.length == 0) {
+			return;
+		}
+		for (int i = 0; i < reqs.length; i++) {
+			if (!isApplicable(reqs[i]) || reqs[i].isOptional())
+				continue;
+
+			if (!reqs[i].isGreedy()) {
+				nonGreedyRequirements.add(new Object[] {iu, reqs[i]});
+				continue;
+			}
+			try {
+				expandRequirement(iu, reqs[i], picker);
+			} catch (IllegalStateException ise) {
+				createNegation(iu);
+				return;
+			}
+		}
+	}
+
+	private void expandRequirement(IInstallableUnit iu, RequiredCapability req, Picker toPickFrom) {
+		String expression = "-1 " + getVariable(iu); //$NON-NLS-1$
+		Collection[] found = toPickFrom.findInstallableUnit(null, null, req);
+
+		int countMatches = 0;
+		for (int j = 0; j < found.length; j++) {
+			for (Iterator iterator = found[j].iterator(); iterator.hasNext();) {
+				IInstallableUnit match = (IInstallableUnit) iterator.next();
+				if (!isApplicable(match))
+					continue;
+				countMatches++;
+				expression += " +1 " + getVariable(match); //$NON-NLS-1$
+				if (!slice.containsKey(match.getId(), match.getVersion()))
+					if (!toConsider.contains(match))
+						toConsider.add(match);
+			}
+		}
+		if (countMatches > 0) {
+			dependencies.add(expression + (countMatches == 1 ? " >= 0;" : " >= 0;")); //$NON-NLS-1$ //$NON-NLS-2$
+		} else {
+			if (!req.isGreedy())
+				return;
+
+			if (req.isOptional()) {
+				if (DEBUG)
+					System.out.println("No IU found to satisfy optional dependency of " + iu + " req " + req); //$NON-NLS-1$//$NON-NLS-2$
+			} else {
+				throw new IllegalStateException("No IU found to satisfy dependency of " + iu + " req " + req); //$NON-NLS-1$//$NON-NLS-2$
+			}
+		}
+	}
+
+	//Create constraints to deal with singleton
+	//When there is a mix of singleton and non singleton, several constraints are generated 
+	private void createConstraintsForSingleton() {
+		Set s = slice.entrySet();
+		for (Iterator iterator = s.iterator(); iterator.hasNext();) {
+			Map.Entry entry = (Map.Entry) iterator.next();
+			HashMap conflictingEntries = (HashMap) entry.getValue();
+			if (conflictingEntries.size() < 2)
+				continue;
+
+			Collection conflictingVersions = conflictingEntries.values();
+			String singletonRule = ""; //$NON-NLS-1$
+			ArrayList nonSingleton = new ArrayList();
+			int countSingleton = 0;
+			for (Iterator conflictIterator = conflictingVersions.iterator(); conflictIterator.hasNext();) {
+				IInstallableUnit conflictElt = (IInstallableUnit) conflictIterator.next();
+				if (conflictElt.isSingleton()) {
+					singletonRule += " -1 " + getVariable(conflictElt); //$NON-NLS-1$
+					countSingleton++;
+				} else {
+					nonSingleton.add(conflictElt);
+				}
+			}
+			if (countSingleton == 0)
+				continue;
+
+			for (Iterator iterator2 = nonSingleton.iterator(); iterator2.hasNext();) {
+				constraints.add(singletonRule + " -1 " + getVariable((IInstallableUnit) iterator2.next()) + " >= -1;"); //$NON-NLS-1$ //$NON-NLS-2$
+			}
+			singletonRule += " >= -1;"; //$NON-NLS-1$
+			constraints.add(singletonRule);
+		}
+	}
+
+	//Return the corresponding variable 
+	private String getVariable(IInstallableUnit iu) {
+		String v = (String) variables.get(iu);
+		if (v == null) {
+			//			v = new String("x" + (variables.size() + shift) + iu.toString()); //$NON-NLS-1$
+			v = new String("x" + (variables.size() + shift)); //$NON-NLS-1$
+			variables.put(iu, v);
+		}
+		return v;
+	}
+
+	public IStatus invokeSolver(IProgressMonitor monitor) {
+		if (incompleteProjection)
+			return new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, 1, "Projection incomplete", null); //$NON-NLS-1$
+		IPBSolver solver = SolverFactory.newEclipseP2();
+		solver.setTimeout(60);
+		OPBEclipseReader2007 reader = new OPBEclipseReader2007(solver);
+		// CNF filename is given on the command line 
+		long start = System.currentTimeMillis();
+		if (DEBUG)
+			System.out.println("Invoking solver: " + start); //$NON-NLS-1$
+		FileReader fr = null;
+		try {
+			fr = new FileReader(problemFile);
+			PBSolverCP problem = (PBSolverCP) reader.parseInstance(fr);
+			if (problem.getOrder() instanceof VarOrderHeapObjective) {
+				((VarOrderHeapObjective) problem.getOrder()).setObjectiveFunction(reader.getObjectiveFunction());
+			}
+			if (problem.isSatisfiable()) {
+				if (DEBUG) {
+					System.out.println("Satisfiable !"); //$NON-NLS-1$
+					System.out.println(reader.decode(problem.model()));
+				}
+				backToIU(problem);
+				return Status.OK_STATUS;
+			} else {
+				if (DEBUG)
+					System.out.println("Unsatisfiable !"); //$NON-NLS-1$
+				return new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, 1, "No solution found", null); //$NON-NLS-1$
+			}
+		} catch (FileNotFoundException e) {
+			//Ignore we are producing the input file
+			if (DEBUG)
+				e.printStackTrace();
+		} catch (ParseFormatException e) {
+			//Ignore we are producing the input file
+			if (DEBUG)
+				e.printStackTrace();
+		} catch (IOException e) {
+			return new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, 1, "No solution found", e); //$NON-NLS-1$
+		} catch (ContradictionException e) {
+			return new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, 1, "No solution found because of a trivial contradiction", null); //$NON-NLS-1$
+		} catch (TimeoutException e) {
+			return new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, 1, "No solution found.", e); //$NON-NLS-1$
+		} catch (Exception e) {
+			e.printStackTrace();
+		} finally {
+			try {
+				if (fr != null)
+					fr.close();
+			} catch (IOException e) {
+				//ignore
+			}
+		}
+		long stop = System.currentTimeMillis();
+		if (DEBUG)
+			System.out.println("Solver solution found: " + (stop - start)); //$NON-NLS-1$
+		problemFile.delete();
+		return new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, 1, "No solution found", null); //$NON-NLS-1$
+	}
+
+	private void backToIU(IProblem problem) {
+		solution = new ArrayList();
+		for (Iterator allIUs = variables.entrySet().iterator(); allIUs.hasNext();) {
+			Entry entry = (Entry) allIUs.next();
+			int match = Integer.parseInt(((String) entry.getValue()).substring(1));
+			if (problem.model(match))
+				solution.add(entry.getKey());
+		}
+	}
+
+	private void printSolution(Collection state) {
+		ArrayList l = new ArrayList(state);
+		Collections.sort(l);
+		System.out.println("Numbers of IUs selected:" + l.size()); //$NON-NLS-1$
+		for (Iterator iterator = l.iterator(); iterator.hasNext();) {
+			System.out.println(iterator.next());
+		}
+	}
+
+	public Collection extractSolution() {
+		if (DEBUG)
+			printSolution(solution);
+		return solution;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index fe2d8a4..f4b8b36 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -28,7 +28,8 @@ import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 
 public class SimplePlanner implements IPlanner {
-	static final int ExpandWork = 12;
+	private static final int ExpandWork = 12;
+	private static final String PLANNER_MARKER = "private.org.eclipse.equinox.p2.planner.installed"; //$NON-NLS-1$
 
 	private IInstallableUnit[] getInstallableUnits(IProfile profile) {
 		return (IInstallableUnit[]) profile.query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
@@ -312,46 +313,27 @@ public class SimplePlanner implements IPlanner {
 		SubMonitor sub = SubMonitor.convert(monitor, ExpandWork);
 		sub.setTaskName(Messages.Director_Task_Resolving_Dependencies);
 		try {
-			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Install_Problems, null);
-			//find the things being updated in the profile
 			IProfile profile = profileChangeRequest.getProfile();
 
-			IInstallableUnit[] alreadyInstalled = getInstallableUnits(profile);
-			IInstallableUnit[] uninstallRoots = profileChangeRequest.getRemovedInstallableUnits();
+			IInstallableUnit[] allIUs = updatePlannerInfo(profileChangeRequest);
 
-			Dictionary currentSelectionContext = createSelectionContext(profile.getProperties());
-			//compute the transitive closure and remove them.
-			ResolutionHelper oldStateHelper = new ResolutionHelper(currentSelectionContext, null);
-			Collection oldState = oldStateHelper.attachCUs(Arrays.asList(alreadyInstalled));
-
-			NewDependencyExpander expander = new NewDependencyExpander(uninstallRoots, new IInstallableUnit[0], alreadyInstalled, currentSelectionContext, true);
-			IStatus expanderResult = expander.expand(sub.newChild(ExpandWork / 3));
-			if (!expanderResult.isOK()) {
-				result.merge(expanderResult);
-				return new ProvisioningPlan(result);
-			}
-			Collection toUninstallClosure = new ResolutionHelper(currentSelectionContext, null).attachCUs(expander.getAllInstallableUnits());
-
-			//add the new set.
-			Collection remainingIUs = new HashSet(oldState);
-			remainingIUs.removeAll(toUninstallClosure);
-			//		for (int i = 0; i < updateRoots.length; i++) {
-			//			remainingIUs.add(updateRoots[i]);
-			//		}
 			URL[] metadataRepositories = (context != null) ? context.getMetadataRepositories() : null;
-			IInstallableUnit[] allUnits = gatherAvailableInstallableUnits(alreadyInstalled, metadataRepositories, sub.newChild(ExpandWork / 3));
 			Dictionary newSelectionContext = createSelectionContext(profileChangeRequest.getProfileProperties());
-			//			String newFlavor = profileChangeRequest.getProfileProperty(IProfile.PROP_FLAVOR);
-
-			NewDependencyExpander finalExpander = new NewDependencyExpander(profileChangeRequest.getAddedInstallableUnits(), (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), allUnits, newSelectionContext, true);
-			IStatus finalExpanderResult = finalExpander.expand(sub.newChild(ExpandWork / 3));
-			if (!finalExpanderResult.isOK()) {
-				result.merge(finalExpanderResult);
-				return new ProvisioningPlan(result);
+			IInstallableUnit[] availableIUs = gatherAvailableInstallableUnits(null, metadataRepositories, sub.newChild(ExpandWork / 4));
+			PBProjector pb = new PBProjector(new Picker(availableIUs, null), newSelectionContext);
+			pb.encode(allIUs, sub.newChild(ExpandWork / 4));
+			IStatus s = pb.invokeSolver(sub.newChild(ExpandWork / 4));
+			if (!s.isOK()) {
+				//We invoke the old resolver to get explanations for now
+				return new ProvisioningPlan(new NewDependencyExpander(allIUs, null, availableIUs, newSelectionContext, false).expand(sub.newChild(ExpandWork / 4)));
 			}
+			Collection newState = pb.extractSolution();
 
 			ResolutionHelper newStateHelper = new ResolutionHelper(newSelectionContext, null);
-			Collection newState = newStateHelper.attachCUs(finalExpander.getAllInstallableUnits());
+			newState = newStateHelper.attachCUs(newState);
+
+			ResolutionHelper oldStateHelper = new ResolutionHelper(createSelectionContext(profile.getProperties()), null);
+			Collection oldState = oldStateHelper.attachCUs(profile.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection());
 
 			return generateProvisioningPlan(oldState, newState, oldStateHelper.getSorted(), newStateHelper.getSorted(), profileChangeRequest);
 		} finally {
@@ -359,6 +341,40 @@ public class SimplePlanner implements IPlanner {
 		}
 	}
 
+	//The planner uses installable unit properties to keep track of what it has been asked to install. This updates this information
+	private IInstallableUnit[] updatePlannerInfo(ProfileChangeRequest profileChangeRequest) {
+		Collector alreadyInstalled = profileChangeRequest.getProfile().query(new IUProfilePropertyQuery(profileChangeRequest.getProfile(), PLANNER_MARKER, Boolean.toString(true)), new Collector(), null);
+
+		IInstallableUnit[] added = profileChangeRequest.getAddedInstallableUnits();
+		IInstallableUnit[] removed = profileChangeRequest.getRemovedInstallableUnits();
+		IInstallableUnit[] allIUs = new IInstallableUnit[alreadyInstalled.size() + added.length + removed.length];
+
+		int count = 0;
+		for (Iterator iterator = alreadyInstalled.iterator(); iterator.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
+			boolean found = false;
+			for (int i = 0; i < removed.length; i++) {
+				if (iu.equals(removed[i])) {
+					profileChangeRequest.removeInstallableUnitProfileProperty(removed[i], PLANNER_MARKER);
+					found = true;
+					break;
+				}
+			}
+			if (!found)
+				allIUs[count++] = iu;
+		}
+		for (int i = 0; i < added.length; i++) {
+			allIUs[count++] = added[i];
+			profileChangeRequest.setInstallableUnitProfileProperty(added[i], PLANNER_MARKER, "true"); //$NON-NLS-1$
+		}
+		if (allIUs.length > count) {
+			IInstallableUnit[] result = new IInstallableUnit[count];
+			System.arraycopy(allIUs, 0, result, 0, count);
+			allIUs = result;
+		}
+		return allIUs;
+	}
+
 	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, ProvisioningContext context, IProgressMonitor monitor) {
 		Map resultsMap = new HashMap();
 
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/TwoTierMap.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/TwoTierMap.java
new file mode 100644
index 0000000..bd0799e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/TwoTierMap.java
@@ -0,0 +1,354 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.director;
+
+import java.io.PrintStream;
+import java.io.Serializable;
+import java.util.*;
+
+/**
+ * The purpose of this class is to provide a two-tier map.
+ * MapOf(key1 => MapOf(key2 => value)).
+ * Even though this class implements Map the behavior of
+ * the methods aren't exactly the same as that of a real
+ * Map - especially, entrySet(), keySet() etc. works off
+ * the outer map while values() returns all the values of
+ * all the inner maps.
+ */
+public class TwoTierMap implements Map, Serializable {
+
+	private static final long serialVersionUID = 362497720873186265L;
+
+	private Map outerMap;
+	private int policy;
+
+	public static final int POLICY_NONE = 0, POLICY_BOTH_MAPS_PRESERVE_ORDERING = 1 << 0, POLICY_INNER_MAP_PRESERVE_EXISTING = 1 << 1, POLICY_INNER_MAP_SORTED_ASCENDING = 1 << 2, POLICY_INNER_MAP_SORTED_DESCENDING = 1 << 3, POLICY_INNER_MAP_ENSURE_SINGLETON = 1 << 4;
+
+	private static final int POLICY_INNER_MAP_SORTED_MASK = POLICY_INNER_MAP_SORTED_ASCENDING | POLICY_INNER_MAP_SORTED_DESCENDING;
+
+	public TwoTierMap() {
+		this(8, POLICY_NONE);
+	}
+
+	public TwoTierMap(int initialCapacity) {
+		this(initialCapacity, POLICY_NONE);
+	}
+
+	/**
+	 * Creates a two-tier map with the specified
+	 * initialCapacity and policy. The policy determines
+	 * whether the outer map is ordered, inner map is
+	 * sorted, clobber values of inner map etc.
+	 */
+	public TwoTierMap(int initialCapacity, int policy) {
+		this.policy = policy;
+		this.outerMap = shouldUseOrderedMap() ? new LinkedHashMap(initialCapacity) : new HashMap(initialCapacity);
+	}
+
+	/**
+	 * Insert the value with key key1 into the inner map 
+	 * that is obtained from the outer map with key key2.
+	 * If you have set POLICY_INNER_MAP_PRESERVE_EXISTING
+	 * at the time of creating this, it will not overwrite
+	 * if there is already a non-null value at key2. 
+	 * The other POLICY_INNER_MAP_* policies determine 
+	 * what kind of inner map is created.
+	 * @param key1 The key for outer map.
+	 * @param key2 The key for inner map.
+	 * @param value The value.
+	 * @return Existing value if any, otherwise null.
+	 */
+	public Object put(Object key1, Object key2, Object value) {
+		Map innerMap = (Map) this.outerMap.get(key1);
+		if (innerMap == null) {
+			if (shouldUseSingletonInnerMap()) {
+				this.outerMap.put(key1, Collections.singletonMap(key2, value));
+				return null;
+			}
+			innerMap = createInnerMap();
+			this.outerMap.put(key1, innerMap);
+		}
+		// It is faster to check for already existing entry 
+		// this way instead of containsKey() check. Of course,
+		// this will prevent us from recognizing a null entry, 
+		// which I think shouldn't be a problem.
+		Object existing = innerMap.put(key2, value);
+		if (existing != null && shouldPreserveExisting()) {
+			innerMap.put(key2, existing);
+		}
+		return existing;
+	}
+
+	/**
+	 * Get the object stored in the inner map using key2
+	 * as key where the inner map is obtained from the 
+	 * outer map using key1.
+	 * @param key1 The key for outer map.
+	 * @param key2 The key for inner map.
+	 * @return The object for key2 in inner map for key1 
+	 * in the outer map. 
+	 */
+	public Object get(Object key1, Object key2) {
+		if (key1 == null || key2 == null)
+			return getAll(key1);
+		Map innerMap = (Map) this.outerMap.get(key1);
+		Object value = innerMap == null ? null : innerMap.get(key2);
+		return value;
+	}
+
+	/**
+	 * Get all the values in the inner map for key1 in
+	 * the outer map.
+	 * @param key1 The key for outer map.
+	 * @return Collection of values in the inner map.
+	 */
+	public Collection getAll(Object key1) {
+		if (key1 == null)
+			// return all
+			return values();
+		Map innerMap = (Map) this.outerMap.get(key1);
+		return innerMap == null ? Collections.EMPTY_LIST : Collections.unmodifiableCollection(innerMap.values());
+
+	}
+
+	public Object remove(Object key1, Object key2) {
+		if (key1 == null || key2 == null)
+			return removeAll(key1);
+		Map innerMap = (Map) this.outerMap.get(key1);
+		if (innerMap == null)
+			return null;
+		if (shouldUseSingletonInnerMap()) {
+			Object result = innerMap.get(key2);
+			if (result != null) {
+				this.outerMap.remove(key1);
+			}
+			return result;
+		}
+		Object result = (innerMap == null) ? null : innerMap.remove(key2);
+		if (result != null && innerMap.isEmpty()) {
+			this.outerMap.remove(key1);
+		}
+		return result;
+	}
+
+	public Collection removeAll(Object key1) {
+		if (key1 == null)
+			return Collections.EMPTY_LIST;
+		Map innerMap = (Map) this.outerMap.remove(key1);
+		return innerMap == null ? Collections.EMPTY_LIST : innerMap.values();
+	}
+
+	/**
+	 * Determine whether there exists a valid object for
+	 * key2 in the inner map for key1 in the outer map.
+	 * @param key1 The key for outer map.
+	 * @param key2 The key for inner map.
+	 * @return true if a non-null object exists; otherwise
+	 * false.
+	 */
+	public boolean containsKey(Object key1, Object key2) {
+		if (key1 == null)
+			return false;
+		if (key2 == null)
+			return containsKey(key1);
+		return get(key1, key2) != null;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#clear()
+	 */
+	public void clear() {
+		this.outerMap.clear();
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#containsKey(java.lang.Object)
+	 */
+	public boolean containsKey(Object key) {
+		return this.outerMap.containsKey(key);
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#containsValue(java.lang.Object)
+	 */
+	public boolean containsValue(Object value) {
+		for (Iterator it = entrySet().iterator(); it.hasNext();) {
+			Map.Entry entry = (Map.Entry) it.next();
+			Map innerMap = (Map) entry.getValue();
+			if (innerMap.containsValue(value))
+				return true;
+		}
+		return false;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#size()
+	 */
+	public int size() {
+		return this.outerMap.size();
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#isEmpty()
+	 */
+	public boolean isEmpty() {
+		return this.size() == 0;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#entrySet()
+	 */
+	public Set entrySet() {
+		return Collections.unmodifiableSet(this.outerMap.entrySet());
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#values()
+	 */
+	public Collection values() {
+		ArrayList result = new ArrayList(size());
+		for (Iterator it = this.outerMap.keySet().iterator(); it.hasNext();) {
+			Object key = it.next();
+			// A null key will cause infinite recursion!
+			if (key != null) {
+				result.addAll(getAll(key));
+			}
+		}
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#get(java.lang.Object)
+	 */
+	public Object get(Object key) {
+		if (key instanceof Object[]) {
+			Object[] keys = (Object[]) key;
+			return get(keys[0], keys[1]);
+		} else
+			return getAll(key);
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#keySet()
+	 */
+	public Set keySet() {
+		return Collections.unmodifiableSet(this.outerMap.keySet());
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#put(java.lang.Object, java.lang.Object)
+	 */
+	public Object put(Object key, Object value) {
+		if (key instanceof Object[]) {
+			Object[] keys = (Object[]) key;
+			return put(keys[0], keys[1], value);
+		}
+		throw new IllegalArgumentException("First arg should be an array!"); //$NON-NLS-1$
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#putAll(java.util.Map)
+	 */
+	public void putAll(Map t) {
+		throw new UnsupportedOperationException();
+	}
+
+	/* (non-Javadoc)
+	 * @see java.util.Map#remove(java.lang.Object)
+	 */
+	public Object remove(Object key) {
+		if (key instanceof Object[]) {
+			Object[] keys = (Object[]) key;
+			return remove(keys[0], keys[1]);
+		} else
+			return removeAll(key);
+	}
+
+	public String toString() {
+		StringBuffer sb = new StringBuffer();
+		if (this.outerMap.isEmpty()) {
+			sb.append("  (Empty)"); //$NON-NLS-1$
+		} else {
+			for (Iterator it = this.outerMap.entrySet().iterator(); it.hasNext();) {
+				Map.Entry entry = (Map.Entry) it.next();
+				sb.append("  ").append(entry.getKey()) //$NON-NLS-1$
+						.append(" = ") //$NON-NLS-1$
+						.append(entry.getValue()).append('\n');
+			}
+			sb.setLength(sb.length() - 1);
+		}
+		return sb.toString();
+	}
+
+	public void dump(PrintStream ps) {
+		if (ps == null) {
+			ps = System.out;
+		}
+		ps.println(this.toString());
+	}
+
+	private Map createInnerMap() {
+		Map innerMap;
+		if (shouldUseSortedInnerMap()) {
+			innerMap = new TreeMap(new ValueComparator(shouldSortInAscendingOrder()));
+		} else if (shouldUseOrderedMap()) {
+			innerMap = new LinkedHashMap(2);
+		} else {
+			innerMap = new HashMap(2);
+		}
+		return innerMap;
+	}
+
+	private boolean shouldPreserveExisting() {
+		return (this.policy & POLICY_INNER_MAP_PRESERVE_EXISTING) == POLICY_INNER_MAP_PRESERVE_EXISTING;
+	}
+
+	private boolean shouldUseOrderedMap() {
+		return (this.policy & POLICY_BOTH_MAPS_PRESERVE_ORDERING) == POLICY_BOTH_MAPS_PRESERVE_ORDERING;
+	}
+
+	private boolean shouldUseSortedInnerMap() {
+		return (this.policy & POLICY_INNER_MAP_SORTED_MASK) != 0;
+	}
+
+	private boolean shouldSortInAscendingOrder() {
+		return (this.policy & POLICY_INNER_MAP_SORTED_MASK) == POLICY_INNER_MAP_SORTED_ASCENDING;
+	}
+
+	private boolean shouldUseSingletonInnerMap() {
+		return (this.policy & POLICY_INNER_MAP_ENSURE_SINGLETON) == POLICY_INNER_MAP_ENSURE_SINGLETON;
+	}
+
+	private static class ValueComparator implements Comparator, Serializable {
+		private static final long serialVersionUID = 362497720873186266L;
+		private boolean ascending;
+
+		public ValueComparator(boolean ascending) {
+			this.ascending = ascending;
+		}
+
+		/* (non-Javadoc)
+		 * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
+		 */
+		public int compare(Object o1, Object o2) {
+			try {
+				if (o1 instanceof Comparable) {
+					int cmp = ((Comparable) o1).compareTo(o2);
+					return this.ascending ? cmp : (0 - cmp);
+				}
+			} catch (Exception e) {
+				// Ignore
+			}
+			return 1;
+		}
+	}
+
+}

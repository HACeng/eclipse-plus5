commit b3e73c41fe7e6909f697b9dab16a09f38a31bef8
Author: John Arthorne <johna>
Date:   Thu Feb 11 22:48:28 2010 +0000

    Bug 302278 -  Garbage collector not multi-agent enabled

3	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineComponent.java
0	2	bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
0	40	bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
5	0	bundles/org.eclipse.equinox.p2.garbagecollector/.project
2	0	bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
8	0	bundles/org.eclipse.equinox.p2.garbagecollector/OSGI-INF/garbagecollector.xml
5	14	bundles/org.eclipse.equinox.p2.garbagecollector/build.properties
11	5	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/Application.java
5	88	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
141	72	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
28	0	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollectorComponent.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineComponent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineComponent.java
index 7a20606..6019099 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineComponent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineComponent.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2009 IBM Corporation and others.
+ * Copyright (c) 2009, 2010 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -24,6 +24,8 @@ public class EngineComponent implements IAgentServiceFactory {
 	 * @see org.eclipse.equinox.p2.core.spi.IAgentServiceFactory#createService(org.eclipse.equinox.p2.core.IProvisioningAgent)
 	 */
 	public Object createService(IProvisioningAgent agent) {
+		//ensure there is a garbage collector created for this agent if available
+		Object gc = agent.getService("org.eclipse.equinox.internal.p2.garbagecollector.GarbageCollector"); //$NON-NLS-1$
 		//various parts of the engine may need an open-ended set of services, so we pass the agent to the engine directly
 		return new Engine(agent);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
index 9ec90fc..f6bb069 100644
--- a/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
@@ -15,8 +15,6 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.p2.repository.metadata,
  org.osgi.framework;version="1.3.0"
 Bundle-ActivationPolicy: lazy
-Bundle-Activator: org.eclipse.equinox.internal.p2.exemplarysetup.Activator
 Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
  J2SE-1.4
-Export-Package: org.eclipse.equinox.internal.p2.exemplarysetup;x-internal:=true
 Require-Bundle: org.eclipse.equinox.common;bundle-version="3.5.100"
diff --git a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java b/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
deleted file mode 100644
index a382de4..0000000
--- a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- *  Copyright (c) 2007, 2010 IBM Corporation and others.
- *  All rights reserved. This program and the accompanying materials
- *  are made available under the terms of the Eclipse Public License v1.0
- *  which accompanies this distribution, and is available at
- *  http://www.eclipse.org/legal/epl-v10.html
- * 
- *  Contributors:
- *     IBM Corporation - initial API and implementation
- *     Cloudsmith, Inc - Ongoing development
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.exemplarysetup;
-
-import org.eclipse.equinox.internal.p2.garbagecollector.GarbageCollector;
-import org.osgi.framework.BundleActivator;
-import org.osgi.framework.BundleContext;
-
-public class Activator implements BundleActivator {
-	public static BundleContext context;
-	public static final String ID = "org.eclipse.equinox.p2.exemplarysetup"; //$NON-NLS-1$
-
-	public void start(BundleContext aContext) throws Exception {
-		//Need to do the configuration of all the bits and pieces:
-		Activator.context = aContext;
-
-		startGarbageCollector();
-
-		//create artifact repositories
-		//		registerDefaultArtifactRepoManager();
-	}
-
-	private void startGarbageCollector() {
-		new GarbageCollector();
-	}
-
-	public void stop(BundleContext aContext) throws Exception {
-		Activator.context = null;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/.project b/bundles/org.eclipse.equinox.p2.garbagecollector/.project
index 772f2af..478c5b8 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/.project
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/.project
@@ -25,6 +25,11 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ds.core.builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
 		<nature>org.eclipse.pde.PluginNature</nature>
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
index 3328c3a..047d6c7 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
@@ -12,6 +12,7 @@ Import-Package: org.eclipse.core.runtime.preferences,
  org.eclipse.equinox.internal.provisional.p2.metadata,
  org.eclipse.equinox.internal.provisional.p2.repository,
  org.eclipse.equinox.p2.core,
+ org.eclipse.equinox.p2.core.spi,
  org.eclipse.equinox.p2.metadata,
  org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.query,
@@ -28,3 +29,4 @@ Require-Bundle: org.eclipse.equinox.p2.engine,
 Bundle-RequiredExecutionEnvironment: J2SE-1.5,
  J2SE-1.4,
  CDC-1.1/Foundation-1.1
+Service-Component: OSGI-INF/garbagecollector.xml
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/OSGI-INF/garbagecollector.xml b/bundles/org.eclipse.equinox.p2.garbagecollector/OSGI-INF/garbagecollector.xml
new file mode 100644
index 0000000..d50c2d2
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/OSGI-INF/garbagecollector.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<scr:component xmlns:scr="http://www.osgi.org/xmlns/scr/v1.1.0" name="org.eclipse.equinox.p2.garbagecollector">
+   <implementation class="org.eclipse.equinox.internal.p2.garbagecollector.GarbageCollectorComponent"/>
+   <service>
+      <provide interface="org.eclipse.equinox.p2.core.spi.IAgentServiceFactory"/>
+   </service>
+   <property name="p2.agent.servicename" type="String" value="org.eclipse.equinox.internal.p2.garbagecollector.GarbageCollector"/>
+</scr:component>
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/build.properties b/bundles/org.eclipse.equinox.p2.garbagecollector/build.properties
index a8ad906..078feef 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/build.properties
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/build.properties
@@ -1,21 +1,12 @@
-###############################################################################
-# Copyright (c) 2007, 2008 IBM Corporation and others.
-# All rights reserved. This program and the accompanying materials
-# are made available under the terms of the Eclipse Public License v1.0
-# which accompanies this distribution, and is available at
-# http://www.eclipse.org/legal/epl-v10.html
-#
-# Contributors:
-#     IBM Corporation - initial API and implementation
-###############################################################################
-source.. = src/
 output.. = bin/
 bin.includes = META-INF/,\
                .,\
                plugin.xml,\
                schema/,\
                about.html,\
-               plugin.properties
+               plugin.properties,\
+               OSGI-INF/garbagecollector.xml
 src.includes = about.html
-javacTarget=jsr14
-javacSource=1.5
+javacSource = 1.5
+javacTarget = jsr14
+source.. = src/
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/Application.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/Application.java
index 7b61c37..4ce9661 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/Application.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/Application.java
@@ -13,8 +13,7 @@ package org.eclipse.equinox.internal.p2.garbagecollector;
 import java.util.Map;
 import org.eclipse.equinox.app.IApplication;
 import org.eclipse.equinox.app.IApplicationContext;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.p2.core.IProvisioningAgent;
+import org.eclipse.equinox.p2.core.*;
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 
@@ -25,12 +24,12 @@ public class Application implements IApplication {
 
 	private static final String DEFAULT_PROFILE_ID = "SDKProfile"; //$NON-NLS-1$
 	private String profileId;
+	private IProvisioningAgent agent;
 
 	/*
 	 * Return the profile with the given id, or null if not found.
 	 */
 	private IProfile getProfile(String id) {
-		IProvisioningAgent agent = (IProvisioningAgent) ServiceHelper.getService(GCActivator.getContext(), IProvisioningAgent.SERVICE_NAME);
 		IProfileRegistry profileRegistry = (IProfileRegistry) agent.getService(IProfileRegistry.SERVICE_NAME);
 		return profileRegistry == null ? null : profileRegistry.getProfile(id);
 	}
@@ -39,20 +38,27 @@ public class Application implements IApplication {
 	 * @see org.eclipse.equinox.app.IApplication#start(org.eclipse.equinox.app.IApplicationContext)
 	 */
 	public Object start(IApplicationContext context) throws Exception {
-		// TODO - do we have to start exemplarySetup here?
 		Map<?, ?> allArgs = context.getArguments();
 		String[] args = (String[]) allArgs.get(IApplicationContext.APPLICATION_ARGS);
 		processArguments(args);
 		// if the user didn't give us a profile id, then use the default SDK one
 		if (profileId == null)
 			profileId = DEFAULT_PROFILE_ID;
+
+		initializeServices();
 		IProfile profile = getProfile(profileId);
 		if (profile == null)
 			throw new IllegalArgumentException("\"" + profileId + "\" is not a valid profile identifier.");
-		new GarbageCollector().runGC(profile);
+		GarbageCollector gc = (GarbageCollector) agent.getService(GarbageCollector.SERVICE_NAME);
+		gc.runGC(profile);
 		return null;
 	}
 
+	private void initializeServices() throws ProvisionException {
+		IProvisioningAgentProvider provider = (IProvisioningAgentProvider) GCActivator.getService(IProvisioningAgentProvider.SERVICE_NAME);
+		agent = provider.createAgent(null);
+	}
+
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.app.IApplication#stop()
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
index faa7a88..8392aa7 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
@@ -10,18 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.garbagecollector;
 
-import java.util.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.core.runtime.preferences.*;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
-import org.eclipse.equinox.p2.core.IProvisioningAgent;
-import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.osgi.service.debug.DebugOptions;
 import org.osgi.framework.*;
-import org.osgi.service.prefs.Preferences;
 
 public class GCActivator implements BundleActivator {
 	public static final String ID = "org.eclipse.equinox.p2.garbagecollector"; //$NON-NLS-1$
@@ -31,97 +21,24 @@ public class GCActivator implements BundleActivator {
 
 	static BundleContext context;
 
-	private SynchronousProvisioningListener busListener;
-
-	static Object getService(BundleContext ctx, String name) {
-		ServiceReference reference = ctx.getServiceReference(name);
-		if (reference == null)
-			return null;
-		Object result = ctx.getService(reference);
-		ctx.ungetService(reference);
-		return result;
-	}
-
-	static IProvisioningAgent getAgent(BundleContext ctx) {
-		ServiceReference reference = ctx.getServiceReference(IProvisioningAgent.SERVICE_NAME);
+	static Object getService(String name) {
+		ServiceReference reference = context.getServiceReference(name);
 		if (reference == null)
 			return null;
-		IProvisioningAgent result = (IProvisioningAgent) ctx.getService(reference);
-		ctx.ungetService(reference);
+		Object result = context.getService(reference);
+		context.ungetService(reference);
 		return result;
 	}
 
-	static IProvisioningEventBus getEventBus(BundleContext ctx) {
-		IProvisioningAgent agent = getAgent(GCActivator.context);
-		if (agent == null)
-			return null;
-		return (IProvisioningEventBus) agent.getService(IProvisioningEventBus.SERVICE_NAME);
-	}
-
 	public void start(BundleContext inContext) throws Exception {
 		GCActivator.context = inContext;
-		DebugOptions debug = (DebugOptions) getService(inContext, DebugOptions.class.getName());
+		DebugOptions debug = (DebugOptions) getService(DebugOptions.class.getName());
 		if (debug != null) {
 			CoreGarbageCollector.setDebugMode(debug.getBooleanOption(DEBUG_STRING, DEFAULT_DEBUG));
 		}
-		registerGCTrigger();
-	}
-
-	//	Register the listener used to trigger the GC.
-	private void registerGCTrigger() {
-		IProvisioningEventBus eventBus = getEventBus(GCActivator.context);
-		if (eventBus == null) {
-			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.Missing_bus));
-			return;
-		}
-		eventBus.addListener(busListener = new SynchronousProvisioningListener() {
-			//The GC is triggered when an uninstall event occurred during a "transaction" and the transaction is committed.   
-			private boolean uninstallEventOccurred = false;
-
-			public void notify(EventObject o) {
-				if (o instanceof InstallableUnitEvent) {
-					InstallableUnitEvent event = (InstallableUnitEvent) o;
-					if (event.isUninstall() && event.isPost()) {
-						uninstallEventOccurred = true;
-					}
-				} else if (o instanceof CommitOperationEvent) {
-					if (uninstallEventOccurred == true) {
-						CommitOperationEvent event = (CommitOperationEvent) o;
-						if (getBooleanPreference(GC_ENABLED, true)) {
-							new GarbageCollector().runGC(event.getProfile());
-						}
-						uninstallEventOccurred = false;
-					}
-				} else if (o instanceof RollbackOperationEvent) {
-					uninstallEventOccurred = false;
-				}
-			}
-		});
-	}
-
-	protected boolean getBooleanPreference(String key, boolean defaultValue) {
-		IPreferencesService prefService = (IPreferencesService) getService(context, IPreferencesService.class.getName());
-		if (prefService == null)
-			return defaultValue;
-		List<IEclipsePreferences> nodes = new ArrayList<IEclipsePreferences>();
-		// todo we should look in the instance scope as well but have to be careful that the instance location has been set
-		nodes.add(new ConfigurationScope().getNode(ID));
-		nodes.add(new DefaultScope().getNode(ID));
-		return Boolean.valueOf(prefService.get(key, Boolean.toString(defaultValue), nodes.toArray(new Preferences[nodes.size()]))).booleanValue();
-	}
-
-	private void unregisterGCTrigger() {
-		IProvisioningEventBus eventBus = getEventBus(GCActivator.context);
-		if (eventBus != null && busListener != null)
-			eventBus.removeListener(busListener);
 	}
 
 	public void stop(BundleContext inContext) throws Exception {
-		unregisterGCTrigger();
 		GCActivator.context = null;
 	}
-
-	public static BundleContext getContext() {
-		return context;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
index a247917..f458709 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- *  Copyright (c) 2007, 2009 IBM Corporation and others.
+ *  Copyright (c) 2007, 2010 IBM Corporation and others.
  *  All rights reserved. This program and the accompanying materials
  *  are made available under the terms of the Eclipse Public License v1.0
  *  which accompanies this distribution, and is available at
@@ -12,12 +12,16 @@ package org.eclipse.equinox.internal.p2.garbagecollector;
 
 import java.util.*;
 import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.preferences.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.p2.core.IProvisioningAgent;
-import org.eclipse.equinox.p2.engine.IProfile;
-import org.eclipse.equinox.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.p2.core.spi.IAgentService;
+import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
+import org.osgi.service.prefs.Preferences;
 
 /**
  * The main control point for the p2 garbage collector.  Takes a Profile and runs the CoreGarbageCollector with the
@@ -30,19 +34,130 @@ import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
  * checked to see if its artifact repository is already a key in markSet.  If so, that MarkSet's artifact keys 
  * are added to the list that is mapped to by the artifact repository. 
  */
-public class GarbageCollector {
+public class GarbageCollector implements SynchronousProvisioningListener, IAgentService {
+	/**
+	 * Service name constant for the garbage collection service.
+	 */
+	public static final String SERVICE_NAME = GarbageCollector.class.getName();
+
+	private class ParameterizedSafeRunnable implements ISafeRunnable {
+		IProfile aProfile;
+		MarkSet[] aProfileMarkSets;
+		IConfigurationElement cfg;
+
+		public ParameterizedSafeRunnable(IConfigurationElement runtAttribute, IProfile profile) {
+			cfg = runtAttribute;
+			aProfile = profile;
+		}
+
+		public MarkSet[] getResult() {
+			return aProfileMarkSets;
+		}
+
+		public void handleException(Throwable exception) {
+			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.Error_in_extension, exception));
+		}
+
+		public void run() throws Exception {
+			MarkSetProvider aMarkSetProvider = (MarkSetProvider) cfg.createExecutableExtension(ATTRIBUTE_CLASS);
+			if (aMarkSetProvider == null) {
+				aProfileMarkSets = null;
+				return;
+			}
+			aProfileMarkSets = aMarkSetProvider.getMarkSets(agent, aProfile);
+		}
+	}
+
 	private static final String ATTRIBUTE_CLASS = "class"; //$NON-NLS-1$
+
 	private static final String PT_MARKSET = GCActivator.ID + ".marksetproviders"; //$NON-NLS-1$
+	final IProvisioningAgent agent;
+
+	//The GC is triggered when an uninstall event occurred during a "transaction" and the transaction is committed.   
+	boolean uninstallEventOccurred = false;
 
 	/**
 	 * Maps IArtifactRepository objects to their respective "marked set" of IArtifactKeys
 	 */
 	private Map<IArtifactRepository, Collection<IArtifactKey>> markSet;
-	final IProvisioningAgent agent;
 
+	/**
+	 * @deprecated obtain the garbage collector directly from the agent instead.
+	 * This method will be removed by 3.6 M6
+	 */
 	public GarbageCollector() {
 		// we need to use DS to create an Agent Listener here
-		agent = (IProvisioningAgent) GCActivator.getContext().getService(GCActivator.getContext().getServiceReference(IProvisioningAgent.SERVICE_NAME));
+		agent = (IProvisioningAgent) GCActivator.getService(IProvisioningAgent.SERVICE_NAME);
+	}
+
+	public GarbageCollector(IProvisioningAgent agent) {
+		this.agent = agent;
+	}
+
+	private void addKeys(Collection<IArtifactKey> keyList, IArtifactKey[] keyArray) {
+		for (int i = 0; i < keyArray.length; i++)
+			keyList.add(keyArray[i]);
+	}
+
+	private void contributeMarkSets(IConfigurationElement runAttribute, IProfile profile, boolean addRepositories) {
+		ParameterizedSafeRunnable providerExecutor = new ParameterizedSafeRunnable(runAttribute, profile);
+		SafeRunner.run(providerExecutor);
+		MarkSet[] aProfileMarkSets = providerExecutor.getResult();
+		if (aProfileMarkSets == null || aProfileMarkSets.length == 0 || aProfileMarkSets[0] == null)
+			return;
+
+		for (int i = 0; i < aProfileMarkSets.length; i++) {
+			if (aProfileMarkSets[i] == null) {
+				continue;
+			}
+			Collection<IArtifactKey> keys = markSet.get(aProfileMarkSets[i].getRepo());
+			if (keys == null) {
+				if (addRepositories) {
+					keys = new HashSet<IArtifactKey>();
+					markSet.put(aProfileMarkSets[i].getRepo(), keys);
+					addKeys(keys, aProfileMarkSets[i].getKeys());
+				}
+			} else {
+				addKeys(keys, aProfileMarkSets[i].getKeys());
+			}
+		}
+	}
+
+	protected boolean getBooleanPreference(String key, boolean defaultValue) {
+		IPreferencesService prefService = (IPreferencesService) GCActivator.getService(IPreferencesService.class.getName());
+		if (prefService == null)
+			return defaultValue;
+		List<IEclipsePreferences> nodes = new ArrayList<IEclipsePreferences>();
+		// todo we should look in the instance scope as well but have to be careful that the instance location has been set
+		nodes.add(new ConfigurationScope().getNode(GCActivator.ID));
+		nodes.add(new DefaultScope().getNode(GCActivator.ID));
+		return Boolean.valueOf(prefService.get(key, Boolean.toString(defaultValue), nodes.toArray(new Preferences[nodes.size()]))).booleanValue();
+	}
+
+	private void invokeCoreGC() {
+		for (IArtifactRepository nextRepo : markSet.keySet()) {
+			IArtifactKey[] keys = markSet.get(nextRepo).toArray(new IArtifactKey[0]);
+			MarkSet aMarkSet = new MarkSet(keys, nextRepo);
+			new CoreGarbageCollector().clean(aMarkSet.getKeys(), aMarkSet.getRepo());
+		}
+	}
+
+	public void notify(EventObject o) {
+		if (o instanceof InstallableUnitEvent) {
+			InstallableUnitEvent event = (InstallableUnitEvent) o;
+			if (event.isUninstall() && event.isPost()) {
+				uninstallEventOccurred = true;
+			}
+		} else if (o instanceof CommitOperationEvent) {
+			if (uninstallEventOccurred == true) {
+				CommitOperationEvent event = (CommitOperationEvent) o;
+				if (getBooleanPreference(GCActivator.GC_ENABLED, true))
+					runGC(event.getProfile());
+				uninstallEventOccurred = false;
+			}
+		} else if (o instanceof RollbackOperationEvent) {
+			uninstallEventOccurred = false;
+		}
 	}
 
 	public void runGC(IProfile profile) {
@@ -57,6 +172,25 @@ public class GarbageCollector {
 		invokeCoreGC();
 	}
 
+	/*(non-Javadoc)
+	 * @see org.eclipse.equinox.p2.core.spi.IAgentService#start()
+	 */
+	public void start() {
+		IProvisioningEventBus eventBus = (IProvisioningEventBus) agent.getService(IProvisioningEventBus.SERVICE_NAME);
+		if (eventBus == null)
+			return;
+		eventBus.addListener(this);
+	}
+
+	/*(non-Javadoc)
+	 * @see org.eclipse.equinox.p2.core.spi.IAgentService#stop()
+	 */
+	public void stop() {
+		IProvisioningEventBus eventBus = (IProvisioningEventBus) agent.getService(IProvisioningEventBus.SERVICE_NAME);
+		if (eventBus != null)
+			eventBus.removeListener(this);
+	}
+
 	private boolean traverseMainProfile(IProfile profile) {
 		IExtensionRegistry registry = RegistryFactory.getRegistry();
 		IConfigurationElement[] configElts = registry.getConfigurationElementsFor(PT_MARKSET);
@@ -76,14 +210,6 @@ public class GarbageCollector {
 		return true;
 	}
 
-	private void invokeCoreGC() {
-		for (IArtifactRepository nextRepo : markSet.keySet()) {
-			IArtifactKey[] keys = markSet.get(nextRepo).toArray(new IArtifactKey[0]);
-			MarkSet aMarkSet = new MarkSet(keys, nextRepo);
-			new CoreGarbageCollector().clean(aMarkSet.getKeys(), aMarkSet.getRepo());
-		}
-	}
-
 	private void traverseRegisteredProfiles() {
 		IExtensionRegistry registry = RegistryFactory.getRegistry();
 		IConfigurationElement[] configElts = registry.getConfigurationElementsFor(PT_MARKSET);
@@ -96,7 +222,7 @@ public class GarbageCollector {
 				continue;
 			}
 
-			IProfileRegistry profileRegistry = (IProfileRegistry) GCActivator.getService(GCActivator.getContext(), IProfileRegistry.SERVICE_NAME);
+			IProfileRegistry profileRegistry = (IProfileRegistry) agent.getService(IProfileRegistry.SERVICE_NAME);
 			if (profileRegistry == null)
 				return;
 			IProfile[] registeredProfiles = profileRegistry.getProfiles();
@@ -106,61 +232,4 @@ public class GarbageCollector {
 			}
 		}
 	}
-
-	private class ParameterizedSafeRunnable implements ISafeRunnable {
-		IConfigurationElement cfg;
-		IProfile aProfile;
-		MarkSet[] aProfileMarkSets;
-
-		public ParameterizedSafeRunnable(IConfigurationElement runtAttribute, IProfile profile) {
-			cfg = runtAttribute;
-			aProfile = profile;
-		}
-
-		public void handleException(Throwable exception) {
-			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.Error_in_extension, exception));
-		}
-
-		public void run() throws Exception {
-			MarkSetProvider aMarkSetProvider = (MarkSetProvider) cfg.createExecutableExtension(ATTRIBUTE_CLASS);
-			if (aMarkSetProvider == null) {
-				aProfileMarkSets = null;
-				return;
-			}
-			aProfileMarkSets = aMarkSetProvider.getMarkSets(agent, aProfile);
-		}
-
-		public MarkSet[] getResult() {
-			return aProfileMarkSets;
-		}
-	}
-
-	private void contributeMarkSets(IConfigurationElement runAttribute, IProfile profile, boolean addRepositories) {
-		ParameterizedSafeRunnable providerExecutor = new ParameterizedSafeRunnable(runAttribute, profile);
-		SafeRunner.run(providerExecutor);
-		MarkSet[] aProfileMarkSets = providerExecutor.getResult();
-		if (aProfileMarkSets == null || aProfileMarkSets.length == 0 || aProfileMarkSets[0] == null)
-			return;
-
-		for (int i = 0; i < aProfileMarkSets.length; i++) {
-			if (aProfileMarkSets[i] == null) {
-				continue;
-			}
-			Collection<IArtifactKey> keys = markSet.get(aProfileMarkSets[i].getRepo());
-			if (keys == null) {
-				if (addRepositories) {
-					keys = new HashSet<IArtifactKey>();
-					markSet.put(aProfileMarkSets[i].getRepo(), keys);
-					addKeys(keys, aProfileMarkSets[i].getKeys());
-				}
-			} else {
-				addKeys(keys, aProfileMarkSets[i].getKeys());
-			}
-		}
-	}
-
-	private void addKeys(Collection<IArtifactKey> keyList, IArtifactKey[] keyArray) {
-		for (int i = 0; i < keyArray.length; i++)
-			keyList.add(keyArray[i]);
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollectorComponent.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollectorComponent.java
new file mode 100644
index 0000000..5b0f0da
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollectorComponent.java
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright (c) 2010 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.garbagecollector;
+
+import org.eclipse.equinox.p2.core.IProvisioningAgent;
+import org.eclipse.equinox.p2.core.spi.IAgentServiceFactory;
+
+/**
+ * Component for instantiating p2 garbage collectors.
+ */
+public class GarbageCollectorComponent implements IAgentServiceFactory {
+
+	/*(non-Javadoc)
+	 * @see org.eclipse.equinox.p2.core.spi.IAgentServiceFactory#createService(org.eclipse.equinox.p2.core.IProvisioningAgent)
+	 */
+	public Object createService(IProvisioningAgent agent) {
+		return new GarbageCollector(agent);
+	}
+
+}

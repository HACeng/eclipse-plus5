commit e64145e63b05575a19a58a533b19190bf85d17b8
Author: Simon Kaegi <skaegi>
Date:   Thu Jan 31 20:55:26 2008 +0000

    Bug 216044 [prov] Updatesite repo is implemented as two repos

1	1	bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
3	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
0	103	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java
1	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
104	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
1	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
1	1	bundles/org.eclipse.equinox.p2.metadata.repository/plugin.xml
4	3	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
0	169	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
2	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
171	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
5	23	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
6	24	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
index 1b82457..08d9a05 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
@@ -6,7 +6,7 @@
 
    <extension id="simpleRepository"  point="org.eclipse.equinox.p2.artifact.repository.artifactRepositories">
 		<filter suffix="artifacts.xml"/>
-		<factory class="org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepositoryFactory"/>
+		<factory class="org.eclipse.equinox.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory"/>
    </extension>
 
 	<extension
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index cf1fd16..199a862 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -731,9 +731,10 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		}
 		save();
 		//force repository manager to reload this repository because it caches properties
-		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
+		ArtifactRepositoryManager manager = (ArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 		try {
-			manager.loadRepository(location, null);
+			if (manager.getRepository(location) != null)
+				manager.loadRepository(location, null);
 		} catch (ProvisionException e) {
 			//ignore
 		}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java
deleted file mode 100644
index f986d53..0000000
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.artifact.repository.simple;
-
-import java.io.*;
-import java.net.URL;
-import java.util.jar.JarEntry;
-import java.util.jar.JarInputStream;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.artifact.repository.*;
-import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
-import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.spi.p2.artifact.repository.IArtifactRepositoryFactory;
-import org.eclipse.osgi.util.NLS;
-
-public class SimpleArtifactRepositoryFactory implements IArtifactRepositoryFactory {
-
-	public IArtifactRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
-		long time = 0;
-		final String debugMsg = "Restoring artifact repository "; //$NON-NLS-1$
-		if (Tracing.DEBUG_METADATA_PARSING) {
-			Tracing.debug(debugMsg + location);
-			time = -System.currentTimeMillis();
-		}
-		File temp = null;
-		try {
-			SubMonitor sub = SubMonitor.convert(monitor, 300);
-			// TODO This temporary file stuff is not very elegant. 
-			OutputStream artifacts = null;
-			temp = File.createTempFile("artifacts", ".xml"); //$NON-NLS-1$ //$NON-NLS-2$
-			// try with compressed
-			boolean compress = true;
-			try {
-				artifacts = new BufferedOutputStream(new FileOutputStream(temp));
-				IStatus status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, compress).toExternalForm(), artifacts, sub.newChild(100));
-				if (!status.isOK()) {
-					// retry uncompressed
-					compress = false;
-					status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, compress).toExternalForm(), artifacts, sub.newChild(100));
-					if (!status.isOK())
-						throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, status.getMessage(), null));
-				}
-			} finally {
-				if (artifacts != null)
-					artifacts.close();
-			}
-			InputStream descriptorStream = null;
-			try {
-				descriptorStream = new BufferedInputStream(new FileInputStream(temp));
-				if (compress) {
-					URL actualFile = SimpleArtifactRepository.getActualLocation(location, false);
-					JarInputStream jInStream = new JarInputStream(descriptorStream);
-					JarEntry jarEntry = jInStream.getNextJarEntry();
-					String filename = new Path(actualFile.getFile()).lastSegment();
-					while (jarEntry != null && !(filename.equals(jarEntry.getName()))) {
-						jarEntry = jInStream.getNextJarEntry();
-					}
-					if (jarEntry == null) {
-						throw new FileNotFoundException("Repository not found in " + actualFile.getPath()); //$NON-NLS-1$
-					}
-					descriptorStream = jInStream;
-				}
-				SimpleArtifactRepositoryIO io = new SimpleArtifactRepositoryIO();
-				SimpleArtifactRepository result = (SimpleArtifactRepository) io.read(temp.toURL(), descriptorStream, sub.newChild(100));
-				result.initializeAfterLoad(location);
-				if (Tracing.DEBUG_METADATA_PARSING) {
-					time += System.currentTimeMillis();
-					Tracing.debug(debugMsg + "time (ms): " + time); //$NON-NLS-1$ 
-				}
-				return result;
-			} finally {
-				if (descriptorStream != null)
-					descriptorStream.close();
-			}
-		} catch (FileNotFoundException e) {
-			String msg = NLS.bind(Messages.io_failedRead, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, e));
-		} catch (IOException e) {
-			String msg = NLS.bind(Messages.io_failedRead, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
-		} finally {
-			if (temp != null && !temp.delete())
-				temp.deleteOnExit();
-		}
-	}
-
-	public IArtifactRepository create(URL location, String name, String type) {
-		return new SimpleArtifactRepository(name, location);
-	}
-
-	private Transport getTransport() {
-		return ECFTransport.getInstance();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
index d020c13..de11797 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
@@ -42,7 +42,7 @@ import org.xml.sax.*;
 
 // TODO: Should a registration/factory mechanism be supported
 //		 for getting a repository reader/writer given a repository type
-class SimpleArtifactRepositoryIO {
+public class SimpleArtifactRepositoryIO {
 
 	/**
 	 * Writes the given artifact repository to the stream.
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
new file mode 100644
index 0000000..56d29f1
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
@@ -0,0 +1,104 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.spi.p2.artifact.repository;
+
+import java.io.*;
+import java.net.URL;
+import java.util.jar.JarEntry;
+import java.util.jar.JarInputStream;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.artifact.repository.*;
+import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository;
+import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepositoryIO;
+import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
+import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.osgi.util.NLS;
+
+public class SimpleArtifactRepositoryFactory implements IArtifactRepositoryFactory {
+
+	public IArtifactRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
+		long time = 0;
+		final String debugMsg = "Restoring artifact repository "; //$NON-NLS-1$
+		if (Tracing.DEBUG_METADATA_PARSING) {
+			Tracing.debug(debugMsg + location);
+			time = -System.currentTimeMillis();
+		}
+		File temp = null;
+		try {
+			SubMonitor sub = SubMonitor.convert(monitor, 300);
+			// TODO This temporary file stuff is not very elegant. 
+			OutputStream artifacts = null;
+			temp = File.createTempFile("artifacts", ".xml"); //$NON-NLS-1$ //$NON-NLS-2$
+			// try with compressed
+			boolean compress = true;
+			try {
+				artifacts = new BufferedOutputStream(new FileOutputStream(temp));
+				IStatus status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, compress).toExternalForm(), artifacts, sub.newChild(100));
+				if (!status.isOK()) {
+					// retry uncompressed
+					compress = false;
+					status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, compress).toExternalForm(), artifacts, sub.newChild(100));
+					if (!status.isOK())
+						throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, status.getMessage(), null));
+				}
+			} finally {
+				if (artifacts != null)
+					artifacts.close();
+			}
+			InputStream descriptorStream = null;
+			try {
+				descriptorStream = new BufferedInputStream(new FileInputStream(temp));
+				if (compress) {
+					URL actualFile = SimpleArtifactRepository.getActualLocation(location, false);
+					JarInputStream jInStream = new JarInputStream(descriptorStream);
+					JarEntry jarEntry = jInStream.getNextJarEntry();
+					String filename = new Path(actualFile.getFile()).lastSegment();
+					while (jarEntry != null && !(filename.equals(jarEntry.getName()))) {
+						jarEntry = jInStream.getNextJarEntry();
+					}
+					if (jarEntry == null) {
+						throw new FileNotFoundException("Repository not found in " + actualFile.getPath()); //$NON-NLS-1$
+					}
+					descriptorStream = jInStream;
+				}
+				SimpleArtifactRepositoryIO io = new SimpleArtifactRepositoryIO();
+				SimpleArtifactRepository result = (SimpleArtifactRepository) io.read(temp.toURL(), descriptorStream, sub.newChild(100));
+				result.initializeAfterLoad(location);
+				if (Tracing.DEBUG_METADATA_PARSING) {
+					time += System.currentTimeMillis();
+					Tracing.debug(debugMsg + "time (ms): " + time); //$NON-NLS-1$ 
+				}
+				return result;
+			} finally {
+				if (descriptorStream != null)
+					descriptorStream.close();
+			}
+		} catch (FileNotFoundException e) {
+			String msg = NLS.bind(Messages.io_failedRead, location);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, e));
+		} catch (IOException e) {
+			String msg = NLS.bind(Messages.io_failedRead, location);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
+		} finally {
+			if (temp != null && !temp.delete())
+				temp.deleteOnExit();
+		}
+	}
+
+	public IArtifactRepository create(URL location, String name, String type) {
+		return new SimpleArtifactRepository(name, location);
+	}
+
+	private Transport getTransport() {
+		return ECFTransport.getInstance();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index b03ff24..034d395 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -121,7 +121,7 @@ public class MetadataGeneratorHelper {
 
 	public static IInstallableUnit createBundleIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key) {
 		boolean isBinaryBundle = true;
-		if (manifest.containsKey("Eclipse-SourceBundle")) { //$NON-NLS-1$
+		if (manifest != null && manifest.containsKey("Eclipse-SourceBundle")) { //$NON-NLS-1$
 			isBinaryBundle = false;
 		}
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/plugin.xml b/bundles/org.eclipse.equinox.p2.metadata.repository/plugin.xml
index ecfab67..8772d22 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/plugin.xml
@@ -4,6 +4,6 @@
    <extension-point id="metadataRepositories" name="Metadata Repositories" schema="schema/metadataRepositories.exsd"/>
    <extension id="simpleRepository"  point="org.eclipse.equinox.p2.metadata.repository.metadataRepositories">
 		<filter suffix="content.xml"/>
-		<factory class="org.eclipse.equinox.internal.p2.metadata.repository.SimpleMetadataRepositoryFactory"/>
+		<factory class="org.eclipse.equinox.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory"/>
    </extension>
 </plugin>
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
index b567e3a..d466ad7 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
@@ -52,7 +52,7 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 	}
 
 	public static File getActualLocation(URL location) {
-		return getActualLocation(location, XML_EXTENSION); 
+		return getActualLocation(location, XML_EXTENSION);
 	}
 
 	/**
@@ -171,9 +171,10 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 			return oldValue;
 		save();
 		//force repository manager to reload this repository because it caches properties
-		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
+		MetadataRepositoryManager manager = (MetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
 		try {
-			manager.loadRepository(location, null);
+			if (manager.getRepository(location) != null)
+				manager.loadRepository(location, null);
 		} catch (ProvisionException e) {
 			//ignore
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
deleted file mode 100644
index 7b34506..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
+++ /dev/null
@@ -1,169 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.metadata.repository;
-
-import java.io.*;
-import java.net.URL;
-import java.util.jar.JarEntry;
-import java.util.jar.JarInputStream;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.*;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.core.location.AgentLocation;
-import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.spi.p2.metadata.repository.IMetadataRepositoryFactory;
-import org.eclipse.osgi.util.NLS;
-
-public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFactory {
-
-	private static final String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
-	private static final String XML_EXTENSION = ".xml"; //$NON-NLS-1$
-	private static final String CONTENT_FILENAME = "content"; //$NON-NLS-1$
-	private static final String PROTOCOL_FILE = "file"; //$NON-NLS-1$
-
-	public IMetadataRepository create(URL location, String name, String type) {
-		if (location.getProtocol().equals("file")) //$NON-NLS-1$
-			return new LocalMetadataRepository(location, name);
-		return new URLMetadataRepository(location, name);
-	}
-
-	/**
-	 * Returns a file in the local file system that contains the contents of the
-	 * metadata repository at the given location.
-	 */
-	private File getLocalFile(URL location, IProgressMonitor monitor) throws IOException, ProvisionException {
-		File localFile = null;
-		URL jarLocation = URLMetadataRepository.getActualLocation(location, JAR_EXTENSION);
-		URL xmlLocation = URLMetadataRepository.getActualLocation(location, XML_EXTENSION);
-		// If the repository is local, we can return the repository file directly
-		if (PROTOCOL_FILE.equals(xmlLocation.getProtocol())) {
-			//look for a compressed local file
-			localFile = new File(jarLocation.getPath());
-			if (localFile.exists())
-				return localFile;
-			//look for an uncompressed local file
-			localFile = new File(xmlLocation.getPath());
-			if (localFile.exists())
-				return localFile;
-			String msg = NLS.bind(Messages.io_failedRead, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, null));
-		}
-		//file is not local, so we need to get a locally cached copy
-		AgentLocation agentLocation = (AgentLocation) ServiceHelper.getService(Activator.getContext(), AgentLocation.class.getName());
-		URL dataArea = agentLocation.getDataArea(Activator.ID + "/cache/"); //$NON-NLS-1$
-		File dataAreaFile = URLUtil.toFile(dataArea);
-		int hashCode = location.hashCode();
-		URL remoteLocation;
-		long remoteTimestamp = getTransport().getLastModified(jarLocation.toExternalForm());
-		if (remoteTimestamp != 0) {
-			//remote file is in jar form
-			remoteLocation = jarLocation;
-			localFile = new File(dataAreaFile, CONTENT_FILENAME + hashCode + JAR_EXTENSION);
-		} else {
-			//check for remote file in xml form
-			remoteTimestamp = getTransport().getLastModified(xmlLocation.toExternalForm());
-			if (remoteTimestamp == 0) {
-				//there is no remote file in either form
-				String msg = NLS.bind(Messages.io_failedRead, location);
-				throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, null));
-			}
-			remoteLocation = xmlLocation;
-			localFile = new File(dataAreaFile, CONTENT_FILENAME + hashCode + XML_EXTENSION);
-		}
-		long cacheTimestamp = localFile.lastModified();
-		//if the cache is out of date, refresh with latest contents
-		if (remoteTimestamp > cacheTimestamp) {
-			localFile.getParentFile().mkdirs();
-			OutputStream metadata = new BufferedOutputStream(new FileOutputStream(localFile));
-			try {
-				IStatus result = getTransport().download(remoteLocation.toExternalForm(), metadata, monitor);
-				if (!result.isOK())
-					throw new ProvisionException(result);
-			} finally {
-				metadata.close();
-			}
-		}
-		return localFile;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.spi.p2.metadata.repository.IMetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	public IMetadataRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
-		long time = 0;
-		final String debugMsg = "Restoring metadata repository "; //$NON-NLS-1$
-		if (Tracing.DEBUG_METADATA_PARSING) {
-			Tracing.debug(debugMsg + location);
-			time = -System.currentTimeMillis();
-		}
-		SubMonitor sub = SubMonitor.convert(monitor, 400);
-		try {
-			File localFile = getLocalFile(location, sub.newChild(300));
-			InputStream inStream = new BufferedInputStream(new FileInputStream(localFile));
-			JarInputStream jarStream = null;
-			try {
-				//if reading from a jar, obtain a stream on the entry with the actual contents
-				if (localFile.getAbsolutePath().endsWith(JAR_EXTENSION)) {
-					jarStream = new JarInputStream(inStream);
-					JarEntry jarEntry = jarStream.getNextJarEntry();
-					String entryName = URLMetadataRepository.CONTENT_FILENAME + URLMetadataRepository.XML_EXTENSION;
-					while (jarEntry != null && (!entryName.equals(jarEntry.getName()))) {
-						jarEntry = jarStream.getNextJarEntry();
-					}
-					if (jarEntry == null) {
-						throw new FileNotFoundException("Repository not found in compressed file."); //$NON-NLS-1$
-					}
-				}
-				//parse the repository descriptor file
-				sub.setWorkRemaining(100);
-				InputStream descriptorStream = jarStream != null ? jarStream : inStream;
-				IMetadataRepository result = new MetadataRepositoryIO().read(localFile.toURL(), descriptorStream, sub.newChild(100));
-				if (result instanceof LocalMetadataRepository)
-					((LocalMetadataRepository) result).initializeAfterLoad(location);
-				if (result instanceof URLMetadataRepository)
-					((URLMetadataRepository) result).initializeAfterLoad(location);
-				if (Tracing.DEBUG_METADATA_PARSING) {
-					time += System.currentTimeMillis();
-					Tracing.debug(debugMsg + "time (ms): " + time); //$NON-NLS-1$ 
-				}
-				return result;
-			} finally {
-				safeClose(jarStream);
-				safeClose(inStream);
-			}
-		} catch (FileNotFoundException e) {
-			String msg = NLS.bind(Messages.io_failedRead, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, e));
-		} catch (IOException e) {
-			String msg = NLS.bind(Messages.io_failedRead, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
-		} finally {
-			monitor.done();
-		}
-	}
-
-	/**
-	 * Closes a stream, ignoring any secondary exceptions
-	 */
-	private void safeClose(InputStream stream) {
-		if (stream == null)
-			return;
-		try {
-			stream.close();
-		} catch (IOException e) {
-			//ignore
-		}
-	}
-
-	private ECFMetadataTransport getTransport() {
-		return ECFMetadataTransport.getInstance();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
index 966e051..ccff4fa 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
@@ -24,8 +24,8 @@ import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository
  */
 public class URLMetadataRepository extends AbstractMetadataRepository {
 
-	protected static final String CONTENT_FILENAME = "content"; //$NON-NLS-1$
-	protected static final String XML_EXTENSION = ".xml"; //$NON-NLS-1$
+	public static final String CONTENT_FILENAME = "content"; //$NON-NLS-1$
+	public static final String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 	private static final String REPOSITORY_TYPE = URLMetadataRepository.class.getName();
 	private static final Integer REPOSITORY_VERSION = new Integer(1);
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
new file mode 100644
index 0000000..86402ef
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
@@ -0,0 +1,171 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.spi.p2.metadata.repository;
+
+import java.io.*;
+import java.net.URL;
+import java.util.jar.JarEntry;
+import java.util.jar.JarInputStream;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.helpers.*;
+import org.eclipse.equinox.internal.p2.metadata.repository.*;
+import org.eclipse.equinox.internal.p2.metadata.repository.Messages;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.core.location.AgentLocation;
+import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.osgi.util.NLS;
+
+public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFactory {
+
+	private static final String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
+	private static final String XML_EXTENSION = ".xml"; //$NON-NLS-1$
+	private static final String CONTENT_FILENAME = "content"; //$NON-NLS-1$
+	private static final String PROTOCOL_FILE = "file"; //$NON-NLS-1$
+
+	public IMetadataRepository create(URL location, String name, String type) {
+		if (location.getProtocol().equals("file")) //$NON-NLS-1$
+			return new LocalMetadataRepository(location, name);
+		return new URLMetadataRepository(location, name);
+	}
+
+	/**
+	 * Returns a file in the local file system that contains the contents of the
+	 * metadata repository at the given location.
+	 */
+	private File getLocalFile(URL location, IProgressMonitor monitor) throws IOException, ProvisionException {
+		File localFile = null;
+		URL jarLocation = URLMetadataRepository.getActualLocation(location, JAR_EXTENSION);
+		URL xmlLocation = URLMetadataRepository.getActualLocation(location, XML_EXTENSION);
+		// If the repository is local, we can return the repository file directly
+		if (PROTOCOL_FILE.equals(xmlLocation.getProtocol())) {
+			//look for a compressed local file
+			localFile = new File(jarLocation.getPath());
+			if (localFile.exists())
+				return localFile;
+			//look for an uncompressed local file
+			localFile = new File(xmlLocation.getPath());
+			if (localFile.exists())
+				return localFile;
+			String msg = NLS.bind(Messages.io_failedRead, location);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, null));
+		}
+		//file is not local, so we need to get a locally cached copy
+		AgentLocation agentLocation = (AgentLocation) ServiceHelper.getService(Activator.getContext(), AgentLocation.class.getName());
+		URL dataArea = agentLocation.getDataArea(Activator.ID + "/cache/"); //$NON-NLS-1$
+		File dataAreaFile = URLUtil.toFile(dataArea);
+		int hashCode = location.hashCode();
+		URL remoteLocation;
+		long remoteTimestamp = getTransport().getLastModified(jarLocation.toExternalForm());
+		if (remoteTimestamp != 0) {
+			//remote file is in jar form
+			remoteLocation = jarLocation;
+			localFile = new File(dataAreaFile, CONTENT_FILENAME + hashCode + JAR_EXTENSION);
+		} else {
+			//check for remote file in xml form
+			remoteTimestamp = getTransport().getLastModified(xmlLocation.toExternalForm());
+			if (remoteTimestamp == 0) {
+				//there is no remote file in either form
+				String msg = NLS.bind(Messages.io_failedRead, location);
+				throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, null));
+			}
+			remoteLocation = xmlLocation;
+			localFile = new File(dataAreaFile, CONTENT_FILENAME + hashCode + XML_EXTENSION);
+		}
+		long cacheTimestamp = localFile.lastModified();
+		//if the cache is out of date, refresh with latest contents
+		if (remoteTimestamp > cacheTimestamp) {
+			localFile.getParentFile().mkdirs();
+			OutputStream metadata = new BufferedOutputStream(new FileOutputStream(localFile));
+			try {
+				IStatus result = getTransport().download(remoteLocation.toExternalForm(), metadata, monitor);
+				if (!result.isOK())
+					throw new ProvisionException(result);
+			} finally {
+				metadata.close();
+			}
+		}
+		return localFile;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.spi.p2.metadata.repository.IMetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 */
+	public IMetadataRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
+		long time = 0;
+		final String debugMsg = "Restoring metadata repository "; //$NON-NLS-1$
+		if (Tracing.DEBUG_METADATA_PARSING) {
+			Tracing.debug(debugMsg + location);
+			time = -System.currentTimeMillis();
+		}
+		SubMonitor sub = SubMonitor.convert(monitor, 400);
+		try {
+			File localFile = getLocalFile(location, sub.newChild(300));
+			InputStream inStream = new BufferedInputStream(new FileInputStream(localFile));
+			JarInputStream jarStream = null;
+			try {
+				//if reading from a jar, obtain a stream on the entry with the actual contents
+				if (localFile.getAbsolutePath().endsWith(JAR_EXTENSION)) {
+					jarStream = new JarInputStream(inStream);
+					JarEntry jarEntry = jarStream.getNextJarEntry();
+					String entryName = URLMetadataRepository.CONTENT_FILENAME + URLMetadataRepository.XML_EXTENSION;
+					while (jarEntry != null && (!entryName.equals(jarEntry.getName()))) {
+						jarEntry = jarStream.getNextJarEntry();
+					}
+					if (jarEntry == null) {
+						throw new FileNotFoundException("Repository not found in compressed file."); //$NON-NLS-1$
+					}
+				}
+				//parse the repository descriptor file
+				sub.setWorkRemaining(100);
+				InputStream descriptorStream = jarStream != null ? jarStream : inStream;
+				IMetadataRepository result = new MetadataRepositoryIO().read(localFile.toURL(), descriptorStream, sub.newChild(100));
+				if (result instanceof LocalMetadataRepository)
+					((LocalMetadataRepository) result).initializeAfterLoad(location);
+				if (result instanceof URLMetadataRepository)
+					((URLMetadataRepository) result).initializeAfterLoad(location);
+				if (Tracing.DEBUG_METADATA_PARSING) {
+					time += System.currentTimeMillis();
+					Tracing.debug(debugMsg + "time (ms): " + time); //$NON-NLS-1$ 
+				}
+				return result;
+			} finally {
+				safeClose(jarStream);
+				safeClose(inStream);
+			}
+		} catch (FileNotFoundException e) {
+			String msg = NLS.bind(Messages.io_failedRead, location);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, e));
+		} catch (IOException e) {
+			String msg = NLS.bind(Messages.io_failedRead, location);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
+		} finally {
+			if (monitor != null)
+				monitor.done();
+		}
+	}
+
+	/**
+	 * Closes a stream, ignoring any secondary exceptions
+	 */
+	private void safeClose(InputStream stream) {
+		if (stream == null)
+			return;
+		try {
+			stream.close();
+		} catch (IOException e) {
+			//ignore
+		}
+	}
+
+	private ECFMetadataTransport getTransport() {
+		return ECFMetadataTransport.getInstance();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
index 89f59fe..344372a 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
@@ -18,7 +18,6 @@ import java.util.zip.*;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.p2.updatesite.Activator;
 import org.eclipse.equinox.p2.artifact.repository.*;
@@ -26,9 +25,9 @@ import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.generator.*;
+import org.eclipse.equinox.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.equinox.spi.p2.core.repository.AbstractRepository;
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceReference;
 import org.xml.sax.SAXException;
 
 public class UpdateSiteArtifactRepository extends AbstractRepository implements IArtifactRepository {
@@ -193,30 +192,13 @@ public class UpdateSiteArtifactRepository extends AbstractRepository implements
 	}
 
 	private IArtifactRepository initializeArtifactRepository(BundleContext context, URL stateDirURL, String repositoryName) {
-		ServiceReference reference = context.getServiceReference(IArtifactRepositoryManager.class.getName());
-		if (reference == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
-
-		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) context.getService(reference);
-		if (manager == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
-
-		IArtifactRepository repository = null;
+		SimpleArtifactRepositoryFactory factory = new SimpleArtifactRepositoryFactory();
 		try {
-			try {
-				return manager.loadRepository(stateDirURL, null);
-			} catch (ProvisionException e) {
-				//fall through and create a new repository
-			}
-			repository = manager.createRepository(stateDirURL, repositoryName, IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
-			return repository;
+			return factory.load(stateDirURL, null);
 		} catch (ProvisionException e) {
-			LogHelper.log(e);
-			throw new IllegalStateException("Couldn't create artifact repository for: " + repositoryName);
-		} finally {
-			context.ungetService(reference);
+			//fall through and create a new repository
 		}
+		return factory.create(stateDirURL, repositoryName, null);
 	}
 
 	public Map getProperties() {
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
index a64f2fe..8003ba1 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
@@ -17,7 +17,6 @@ import java.util.*;
 import java.util.zip.*;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.p2.updatesite.Activator;
 import org.eclipse.equinox.p2.core.ProvisionException;
@@ -26,10 +25,10 @@ import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.generator.*;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.equinox.spi.p2.core.repository.AbstractRepository;
+import org.eclipse.equinox.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
 import org.eclipse.osgi.service.resolver.*;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
@@ -68,7 +67,6 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 			if (savedChecksum != null && savedChecksum.equals(checksumString))
 				return;
 
-			metadataRepository.setProperty("site.checksum", checksumString);
 			metadataRepository.removeAll();
 
 			SiteCategory[] siteCategories = siteModel.getCategories();
@@ -139,6 +137,7 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 
 			IInstallableUnit[] ius = (IInstallableUnit[]) allSiteIUs.toArray(new IInstallableUnit[allSiteIUs.size()]);
 			metadataRepository.addInstallableUnits(ius);
+			metadataRepository.setProperty("site.checksum", checksumString);
 			System.out.println("Time Fetching Metadata Site and Features for " + location + " was: " + (System.currentTimeMillis() - start) + " ms");
 
 		} catch (IOException e) {
@@ -233,30 +232,13 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 	}
 
 	private IMetadataRepository initializeMetadataRepository(BundleContext context, URL stateDirURL, String repositoryName) {
-		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-		if (reference == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered.");
-
-		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) context.getService(reference);
-		if (manager == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered.");
-
+		SimpleMetadataRepositoryFactory factory = new SimpleMetadataRepositoryFactory();
 		try {
-			try {
-				return manager.loadRepository(stateDirURL, null);
-			} catch (ProvisionException e) {
-				//fall through and create a new repository
-			}
-
-			IMetadataRepository repository = manager.createRepository(stateDirURL, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
-			return repository;
+			return factory.load(stateDirURL, null);
 		} catch (ProvisionException e) {
-			LogHelper.log(e);
-			throw new IllegalStateException("Couldn't create artifact repository for: " + repositoryName);
-		} finally {
-			context.ungetService(reference);
+			//fall through and create a new repository
 		}
+		return factory.create(stateDirURL, repositoryName, null);
 	}
 
 	private BundleDescriptionFactory initializeBundleDescriptionFactory(BundleContext context) {

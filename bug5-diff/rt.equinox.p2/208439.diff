commit 9032157587295febbb71fcd42f4a5ef4025dca03
Author: John Arthorne <johna>
Date:   Fri Nov 2 20:05:33 2007 +0000

    Bug 208439 [prov] clean up transient fields

12	13	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ArtifactKey.java
130	135	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
28	32	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
31	32	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ProvidedCapability.java
65	66	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ArtifactKey.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ArtifactKey.java
index a593138..aa089ed 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ArtifactKey.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ArtifactKey.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.metadata;
 
+import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.osgi.framework.Version;
 
@@ -19,18 +20,19 @@ import org.osgi.framework.Version;
  * See {link IArtifact for a description of the lifecycle of artifact keys) 
  */
 public class ArtifactKey implements IArtifactKey {
-
-	static final int NO_SEGMENTS = 5;
 	private static final char SEP_CHAR = ',';
 
-	private String namespace;
-	private String id;
-	private String classifier;
-	private transient Version versionObject;
-	private String version;
+	private final String namespace;
+	private final String id;
+	private final String classifier;
+	private final Version version;
 
-	public ArtifactKey(String namespace, String classifier, String id, Version aVersion) {
+	public ArtifactKey(String namespace, String classifier, String id, Version version) {
 		super();
+		Assert.isNotNull(namespace);
+		Assert.isNotNull(classifier);
+		Assert.isNotNull(id);
+		Assert.isNotNull(version);
 		if (namespace.indexOf(SEP_CHAR) != -1)
 			throw new IllegalArgumentException("comma not allowed in namespace"); //$NON-NLS-1$
 		if (classifier.indexOf(SEP_CHAR) != -1)
@@ -40,8 +42,7 @@ public class ArtifactKey implements IArtifactKey {
 		this.namespace = namespace;
 		this.classifier = classifier;
 		this.id = id;
-		this.versionObject = aVersion;
-		this.version = aVersion == null ? null : aVersion.toString();
+		this.version = version;
 	}
 
 	public String getNamespace() {
@@ -53,9 +54,7 @@ public class ArtifactKey implements IArtifactKey {
 	}
 
 	public Version getVersion() {
-		if (versionObject == null)
-			versionObject = version == null ? Version.emptyVersion : new Version(version);
-		return versionObject;
+		return version;
 	}
 
 	public int hashCode() {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
index de5c27e..5f5428f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
@@ -15,27 +15,26 @@ import org.eclipse.equinox.p2.core.helpers.UnmodifiableProperties;
 import org.osgi.framework.Version;
 
 public class InstallableUnit implements IInstallableUnitConstants, IInstallableUnit, InternalInstallableUnit {
-	private static final RequiredCapability[] NO_REQUIRES = new RequiredCapability[0];
 	private static final OrderedProperties NO_PROPERTIES = new OrderedProperties();
+	private static final RequiredCapability[] NO_REQUIRES = new RequiredCapability[0];
+
+	String applicabilityFilter;
+	private IArtifactKey[] artifacts;
+	private String filter;
 
 	private String id;
-	private transient Version versionObject;
-	private String version;
-	private boolean singleton;
 
 	private OrderedProperties properties;
-
-	private IArtifactKey[] artifacts;
-	private TouchpointType touchpointType;
-	private ArrayList touchpointData = null;
-
+	ProvidedCapability[] providedCapabilities = new ProvidedCapability[0];
 	private RequiredCapability[] requires;
 
-	private String filter;
+	private boolean singleton;
 
-	String applicabilityFilter;
+	private ArrayList touchpointData = null;
 
-	ProvidedCapability[] providedCapabilities = new ProvidedCapability[0];
+	private TouchpointType touchpointType;
+
+	private Version version;
 
 	public InstallableUnit() {
 		super();
@@ -44,53 +43,94 @@ public class InstallableUnit implements IInstallableUnitConstants, IInstallableU
 	public InstallableUnit(String id, Version version, boolean singleton) {
 		super();
 		this.id = id;
-		this.version = version.toString();
-		this.versionObject = version;
+		this.version = version == null ? Version.emptyVersion : version;
 		this.singleton = singleton;
 	}
 
-	public TouchpointType getTouchpointType() {
-		return touchpointType == null ? TouchpointType.NONE : touchpointType;
+	public void accept(IMetadataVisitor visitor) {
+		visitor.visitInstallableUnit(this);
 	}
 
-	public String getId() {
-		return id;
+	public void addProperties(OrderedProperties newProperties) {
+		if (properties == null)
+			properties = new OrderedProperties(newProperties.size());
+		properties.putAll(newProperties);
 	}
 
-	public String getFilter() {
-		return filter;
+	public void addTouchpointData(TouchpointData[] newData) {
+		ensureTouchpointDataCapacity(newData.length);
+		for (int i = 0; i < newData.length; i++) {
+			touchpointData.add(newData[i]);
+		}
 	}
 
-	public Version getVersion() {
-		if (versionObject == null)
-			versionObject = version == null ? Version.emptyVersion : new Version(version);
-		return versionObject;
+	public int compareTo(Object toCompareTo) {
+		if (!(toCompareTo instanceof IInstallableUnit)) {
+			return -1;
+		}
+		IInstallableUnit other = (IInstallableUnit) toCompareTo;
+		if (getId().compareTo(other.getId()) == 0)
+			return (getVersion().compareTo(other.getVersion()));
+		return getId().compareTo(other.getId());
 	}
 
-	public IArtifactKey[] getArtifacts() {
-		return artifacts;
+	private void ensureTouchpointDataCapacity(int size) {
+		if (touchpointData != null) {
+			touchpointData.ensureCapacity(size);
+		} else {
+			touchpointData = new ArrayList(size);
+		}
 	}
 
-	public void setId(String id) {
-		this.id = id;
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof IInstallableUnit))
+			return false;
+		final IInstallableUnit other = (IInstallableUnit) obj;
+		if (id == null) {
+			if (other.getId() != null)
+				return false;
+		} else if (!id.equals(other.getId()))
+			return false;
+		if (getVersion() == null) {
+			if (other.getVersion() != null)
+				return false;
+		} else if (!getVersion().equals(other.getVersion()))
+			return false;
+		return true;
 	}
 
-	public void setVersion(Version newVersion) {
-		this.versionObject = newVersion;
-		this.version = newVersion == null ? null : newVersion.toString();
+	public String getApplicabilityFilter() {
+		return applicabilityFilter;
 	}
 
-	public void setTouchpointType(TouchpointType type) {
-		this.touchpointType = type == TouchpointType.NONE ? null : type;
+	public IArtifactKey[] getArtifacts() {
+		return artifacts;
 	}
 
-	public void setArtifacts(IArtifactKey[] value) {
-		artifacts = value;
+	public String getFilter() {
+		return filter;
 	}
 
-	public RequiredCapability[] getRequiredCapabilities() {
-		return requires != null ? requires : NO_REQUIRES;
+	public String getId() {
+		return id;
+	}
 
+	/**
+	 * Get an <i>unmodifiable copy</i> of the properties
+	 * associated with the installable unit.
+	 * 
+	 * @return an <i>unmodifiable copy</i> of the IU properties.
+	 */
+	public OrderedProperties getProperties() {
+		return new UnmodifiableProperties(properties());
+	}
+
+	public String getProperty(String key) {
+		return getProperties().getProperty(key);
 	}
 
 	public ProvidedCapability[] getProvidedCapabilities() {
@@ -104,41 +144,26 @@ public class InstallableUnit implements IInstallableUnitConstants, IInstallableU
 		return result;
 	}
 
-	public void setRequiredCapabilities(RequiredCapability[] capabilities) {
-		if (capabilities == NO_REQUIRES) {
-			this.requires = null;
-		} else {
-			//copy array for safety
-			this.requires = (RequiredCapability[]) capabilities.clone();
-		}
-	}
-
-	public void accept(IMetadataVisitor visitor) {
-		visitor.visitInstallableUnit(this);
-	}
+	public RequiredCapability[] getRequiredCapabilities() {
+		return requires != null ? requires : NO_REQUIRES;
 
-	public boolean isSingleton() {
-		return singleton;
 	}
 
-	public void setSingleton(boolean singleton) {
-		this.singleton = singleton;
+	public IResolvedInstallableUnit getResolved() {
+		return new ResolvedInstallableUnit(this);
 	}
 
-	public String getProperty(String key) {
-		return getProperties().getProperty(key);
+	public TouchpointData[] getTouchpointData() {
+		return (touchpointData == null ? TouchpointData.NO_TOUCHPOINT_DATA //
+				: (TouchpointData[]) touchpointData.toArray(new TouchpointData[touchpointData.size()]));
 	}
 
-	public String setProperty(String key, String value) {
-		if (value == null)
-			return (properties != null ? (String) properties.remove(key) : null);
-		if (properties == null)
-			properties = new OrderedProperties();
-		return (String) properties.setProperty(key, value);
+	public TouchpointType getTouchpointType() {
+		return touchpointType == null ? TouchpointType.NONE : touchpointType;
 	}
 
-	public String toString() {
-		return id + ' ' + getVersion();
+	public Version getVersion() {
+		return version;
 	}
 
 	public int hashCode() {
@@ -149,105 +174,75 @@ public class InstallableUnit implements IInstallableUnitConstants, IInstallableU
 		return result;
 	}
 
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (!(obj instanceof IInstallableUnit))
-			return false;
-		final IInstallableUnit other = (IInstallableUnit) obj;
-		if (id == null) {
-			if (other.getId() != null)
-				return false;
-		} else if (!id.equals(other.getId()))
-			return false;
-		if (getVersion() == null) {
-			if (other.getVersion() != null)
-				return false;
-		} else if (!getVersion().equals(other.getVersion()))
-			return false;
-		return true;
+	public boolean isFragment() {
+		return false;
 	}
 
-	public void setFilter(String filter) {
-		this.filter = filter;
+	public boolean isSingleton() {
+		return singleton;
 	}
 
-	public TouchpointData[] getTouchpointData() {
-		return (touchpointData == null ? TouchpointData.NO_TOUCHPOINT_DATA //
-				: (TouchpointData[]) touchpointData.toArray(new TouchpointData[touchpointData.size()]));
+	private OrderedProperties properties() {
+		return (properties != null ? properties : NO_PROPERTIES);
 	}
 
-	// TODO: resolve the schizophrenia between the singleton immutable data
-	//	   	 and the public returned touchpoint data array.
-	public void setImmutableTouchpointData(TouchpointData immutableData) {
-		ensureTouchpointDataCapacity(4);
-		touchpointData.add(immutableData);
+	public void setApplicabilityFilter(String ldapFilter) {
+		applicabilityFilter = ldapFilter;
 	}
 
-	public void addTouchpointData(TouchpointData[] newData) {
-		ensureTouchpointDataCapacity(newData.length);
-		for (int i = 0; i < newData.length; i++) {
-			touchpointData.add(newData[i]);
-		}
+	public void setArtifacts(IArtifactKey[] value) {
+		artifacts = value;
 	}
 
-	private void ensureTouchpointDataCapacity(int size) {
-		if (touchpointData != null) {
-			touchpointData.ensureCapacity(size);
-		} else {
-			touchpointData = new ArrayList(size);
-		}
+	public void setCapabilities(ProvidedCapability[] exportedCapabilities) {
+		providedCapabilities = exportedCapabilities;
 	}
 
-	private OrderedProperties properties() {
-		return (properties != null ? properties : NO_PROPERTIES);
+	public void setFilter(String filter) {
+		this.filter = filter;
 	}
 
-	/**
-	 * Get an <i>unmodifiable copy</i> of the properties
-	 * associated with the installable unit.
-	 * 
-	 * @return an <i>unmodifiable copy</i> of the IU properties.
-	 */
-	public OrderedProperties getProperties() {
-		return new UnmodifiableProperties(properties());
+	public void setId(String id) {
+		this.id = id;
 	}
 
-	public void addProperties(OrderedProperties newProperties) {
-		if (properties == null)
-			properties = new OrderedProperties(newProperties.size());
-		properties.putAll(newProperties);
+	// TODO: resolve the schizophrenia between the singleton immutable data
+	//	   	 and the public returned touchpoint data array.
+	public void setImmutableTouchpointData(TouchpointData immutableData) {
+		ensureTouchpointDataCapacity(4);
+		touchpointData.add(immutableData);
 	}
 
-	public boolean isFragment() {
-		return false;
+	public String setProperty(String key, String value) {
+		if (value == null)
+			return (properties != null ? (String) properties.remove(key) : null);
+		if (properties == null)
+			properties = new OrderedProperties();
+		return (String) properties.setProperty(key, value);
 	}
 
-	public void setCapabilities(ProvidedCapability[] exportedCapabilities) {
-		providedCapabilities = exportedCapabilities;
+	public void setRequiredCapabilities(RequiredCapability[] capabilities) {
+		if (capabilities == NO_REQUIRES) {
+			this.requires = null;
+		} else {
+			//copy array for safety
+			this.requires = (RequiredCapability[]) capabilities.clone();
+		}
 	}
 
-	public void setApplicabilityFilter(String ldapFilter) {
-		applicabilityFilter = ldapFilter;
+	public void setSingleton(boolean singleton) {
+		this.singleton = singleton;
 	}
 
-	public String getApplicabilityFilter() {
-		return applicabilityFilter;
+	public void setTouchpointType(TouchpointType type) {
+		this.touchpointType = type == TouchpointType.NONE ? null : type;
 	}
 
-	public IResolvedInstallableUnit getResolved() {
-		return new ResolvedInstallableUnit(this);
+	public void setVersion(Version newVersion) {
+		this.version = newVersion == null ? Version.emptyVersion : newVersion;
 	}
 
-	public int compareTo(Object toCompareTo) {
-		if (!(toCompareTo instanceof IInstallableUnit)) {
-			return -1;
-		}
-		IInstallableUnit other = (IInstallableUnit) toCompareTo;
-		if (getId().compareTo(other.getId()) == 0)
-			return (getVersion().compareTo(other.getVersion()));
-		return getId().compareTo(other.getId());
+	public String toString() {
+		return id + ' ' + getVersion();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
index 5f6049b..20294ed 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
@@ -18,8 +18,7 @@ public class InstallableUnitFragment extends InstallableUnit implements IInstall
 	public static ProvidedCapability FRAGMENT_CAPABILITY = new ProvidedCapability(IU_KIND_NAMESPACE, "iu.fragment", new Version(1, 0, 0)); //$NON-NLS-1$
 
 	private String hostId;
-	private transient VersionRange hostRangeObject;
-	private String hostRange;
+	private VersionRange hostRange = VersionRange.emptyRange;
 
 	public InstallableUnitFragment() {
 		super();
@@ -28,8 +27,24 @@ public class InstallableUnitFragment extends InstallableUnit implements IInstall
 	public InstallableUnitFragment(String id, Version version, boolean singleton, String hostId, VersionRange hostRange) {
 		super(id, version, singleton);
 		this.hostId = hostId;
-		this.hostRange = hostRange.toString();
-		hostRangeObject = hostRange;
+		if (hostRange != null)
+			this.hostRange = hostRange;
+	}
+
+	private void addRequiredCapability(RequiredCapability toAdd) {
+		RequiredCapability[] current = super.getRequiredCapabilities();
+		RequiredCapability[] result = new RequiredCapability[current.length + 1];
+		System.arraycopy(current, 0, result, 0, current.length);
+		result[current.length] = toAdd;
+		setRequiredCapabilities(result);
+	}
+
+	public String getHostId() {
+		return hostId;
+	}
+
+	public VersionRange getHostVersionRange() {
+		return hostRange;
 	}
 
 	public ProvidedCapability[] getProvidedCapabilities() {
@@ -43,38 +58,19 @@ public class InstallableUnitFragment extends InstallableUnit implements IInstall
 		return result;
 	}
 
-	public void setHost(String iuId, VersionRange versionRange) {
-		if (iuId == null || versionRange == null)
-			throw new IllegalArgumentException();
-		hostId = iuId;
-		hostRangeObject = versionRange;
-		hostRange = versionRange == null ? null : versionRange.toString();
-		addRequiredCapability(RequiredCapability.createRequiredCapabilityForName(iuId, versionRange, false));
-	}
-
-	public String getHostId() {
-		return hostId;
-	}
-
-	public VersionRange getHostVersionRange() {
-		if (hostRangeObject == null)
-			hostRangeObject = hostRange == null ? VersionRange.emptyRange : new VersionRange(hostRange);
-		return hostRangeObject;
-	}
-
-	private void addRequiredCapability(RequiredCapability toAdd) {
-		RequiredCapability[] current = super.getRequiredCapabilities();
-		RequiredCapability[] result = new RequiredCapability[current.length + 1];
-		System.arraycopy(current, 0, result, 0, current.length);
-		result[current.length] = toAdd;
-		setRequiredCapabilities(result);
+	public IResolvedInstallableUnit getResolved() {
+		return new ResolvedInstallableUnitFragment(this);
 	}
 
 	public boolean isFragment() {
 		return true;
 	}
 
-	public IResolvedInstallableUnit getResolved() {
-		return new ResolvedInstallableUnitFragment(this);
+	public void setHost(String iuId, VersionRange versionRange) {
+		if (iuId == null || versionRange == null)
+			throw new IllegalArgumentException();
+		hostId = iuId;
+		hostRange = versionRange;
+		addRequiredCapability(RequiredCapability.createRequiredCapabilityForName(iuId, versionRange, false));
 	}
-}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ProvidedCapability.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ProvidedCapability.java
index 759f9c4..4994e09 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ProvidedCapability.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ProvidedCapability.java
@@ -10,36 +10,51 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.metadata;
 
+import org.eclipse.core.runtime.Assert;
 import org.osgi.framework.Version;
 
 /**
  * Describes a capability as exposed or required by an installable unit
  */
 public class ProvidedCapability {
-	String namespace;
-	String name;
-	transient Version versionObject;
-	String version;
+	private final String name;
+	private final String namespace;
+	private final Version version;
 
-	public String getNamespace() {
-		return namespace;
+	public ProvidedCapability(String namespace, String name, Version version) {
+		Assert.isNotNull(namespace);
+		Assert.isNotNull(name);
+		this.namespace = namespace;
+		this.name = name;
+		this.version = version == null ? Version.emptyVersion : version;
+	}
+
+	public void accept(IMetadataVisitor visitor) {
+		visitor.visitCapability(this);
+	}
+
+	public boolean equals(Object other) {
+		if (other instanceof ProvidedCapability) {
+			ProvidedCapability otherCapability = (ProvidedCapability) other;
+			return otherCapability.namespace.equals(namespace) && otherCapability.name.equals(name) && otherCapability.version.equals(version);
+		}
+		return false;
 	}
 
 	public String getName() {
 		return name;
 	}
 
+	public String getNamespace() {
+		return namespace;
+	}
+
 	public Version getVersion() {
-		if (versionObject == null)
-			versionObject = version == null ? Version.emptyVersion : new Version(version);
-		return versionObject;
+		return version;
 	}
 
-	public ProvidedCapability(String namespace, String name, Version newVersion) {
-		this.name = name;
-		this.versionObject = newVersion;
-		this.version = newVersion == null ? null : newVersion.toString();
-		this.namespace = namespace;
+	public int hashCode() {
+		return namespace.hashCode() * name.hashCode() * version.hashCode();
 	}
 
 	public boolean isSatisfiedBy(RequiredCapability candidate) {
@@ -47,27 +62,11 @@ public class ProvidedCapability {
 			return false;
 		if (getNamespace() == null || !getNamespace().equals(candidate.getNamespace()))
 			return false;
-		return candidate.getRange().isIncluded(getVersion());
-	}
-
-	public void accept(IMetadataVisitor visitor) {
-		visitor.visitCapability(this);
-	}
-
-	public boolean equals(Object other) {
-		if (other instanceof ProvidedCapability) {
-			ProvidedCapability otherCapability = (ProvidedCapability) other;
-			return otherCapability.namespace.equals(namespace) && otherCapability.name.equals(name) && otherCapability.getVersion().equals(getVersion());
-		}
-		return false;
-	}
-
-	public int hashCode() {
-		return namespace.hashCode() * name.hashCode() * getVersion().hashCode();
+		return candidate.getRange().isIncluded(version);
 	}
 
 	public String toString() {
-		return namespace + '/' + name + '/' + getVersion();
+		return namespace + '/' + name + '/' + version;
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
index 48f8ac0..bf3e8a0 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
@@ -27,18 +27,23 @@ import org.eclipse.osgi.service.resolver.VersionRange;
  */
 public class RequiredCapability {
 
-	private String name;
-	private String namespace;
-	private String range;
-	private boolean optional;
-	private boolean multiple;
 	private String filter;
+	private final boolean multiple;
+	private final String name;//never null
+	private final String namespace;//never null
+	private boolean optional;
+	private final VersionRange range;//never null
 	private String[] selectors;
-	private transient VersionRange rangeObject;
 
 	/**
 	 * Returns a {@link RequiredCapability} on the installable unit with the given name
 	 * and version range.
+	 * 
+	 * @param name The name of the {@link InstallableUnit} that is required.
+	 * @param versionRange The range of versions that are required, or <code>null</code>
+	 * to indicate that any version will do.
+	 * @param optional <code>true</code> if this required capability is optional,
+	 * and <code>false</code> otherwise.
 	 */
 	public static RequiredCapability createRequiredCapabilityForName(String name, VersionRange versionRange, boolean optional) {
 		return new RequiredCapability(IInstallableUnit.IU_NAMESPACE, name, versionRange, null, optional, false);
@@ -57,8 +62,7 @@ public class RequiredCapability {
 		Assert.isNotNull(name);
 		this.namespace = namespace;
 		this.name = name;
-		this.rangeObject = range;
-		this.range = rangeObject == null ? null : rangeObject.toString();
+		this.range = range == null ? VersionRange.emptyRange : range;
 		this.selectors = selectors == null ? new String[0] : selectors;
 		this.optional = optional;
 		this.filter = filter;
@@ -69,52 +73,6 @@ public class RequiredCapability {
 		visitor.visitRequiredCapability(this);
 	}
 
-	public String getFilter() {
-		return filter;
-	}
-
-	public void setFilter(String filter) {
-		this.filter = filter;
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public String getNamespace() {
-		return namespace;
-	}
-
-	public VersionRange getRange() {
-		if (rangeObject == null)
-			rangeObject = range == null ? VersionRange.emptyRange : new VersionRange(range);
-		return rangeObject;
-	}
-
-	public boolean isMultiple() {
-		return multiple;
-	}
-
-	public boolean isOptional() {
-		return optional;
-	}
-
-	public String toString() {
-		return "requiredCapability: " + namespace + '/' + name + '/' + range; //$NON-NLS-1$
-	}
-
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((filter == null) ? 0 : filter.hashCode());
-		result = prime * result + (multiple ? 1231 : 1237);
-		result = prime * result + ((name == null) ? 0 : name.hashCode());
-		result = prime * result + ((namespace == null) ? 0 : namespace.hashCode());
-		result = prime * result + (optional ? 1231 : 1237);
-		result = prime * result + ((rangeObject == null) ? 0 : rangeObject.hashCode());
-		return result;
-	}
-
 	public boolean equals(Object obj) {
 		if (this == obj)
 			return true;
@@ -130,26 +88,39 @@ public class RequiredCapability {
 			return false;
 		if (multiple != other.multiple)
 			return false;
-		if (name == null) {
-			if (other.name != null)
-				return false;
-		} else if (!name.equals(other.name))
+		if (!name.equals(other.name))
 			return false;
-		if (namespace == null) {
-			if (other.namespace != null)
-				return false;
-		} else if (!namespace.equals(other.namespace))
+		if (!namespace.equals(other.namespace))
 			return false;
 		if (optional != other.optional)
 			return false;
-		if (rangeObject == null) {
-			if (other.rangeObject != null)
-				return false;
-		} else if (!rangeObject.equals(other.rangeObject))
+		if (!range.equals(other.range))
 			return false;
 		return true;
 	}
 
+	public String getFilter() {
+		return filter;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public String getNamespace() {
+		return namespace;
+	}
+
+	/**
+	 * Returns the range of versions that satisfy this required capability. Returns
+	 * an empty version range ({@link VersionRange#emptyRange} if any version
+	 * will satisfy the capability.
+	 * @return the range of versions that satisfy this required capability.
+	 */
+	public VersionRange getRange() {
+		return range;
+	}
+
 	/**
 	 * Returns the properties to use for evaluating required capability filters 
 	 * downstream from this capability. For example, if the selector "doc"
@@ -160,7 +131,35 @@ public class RequiredCapability {
 		return selectors;
 	}
 
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((filter == null) ? 0 : filter.hashCode());
+		result = prime * result + (multiple ? 1231 : 1237);
+		result = prime * result + name.hashCode();
+		result = prime * result + namespace.hashCode();
+		result = prime * result + (optional ? 1231 : 1237);
+		result = prime * result + range.hashCode();
+		return result;
+	}
+
+	public boolean isMultiple() {
+		return multiple;
+	}
+
+	public boolean isOptional() {
+		return optional;
+	}
+
+	public void setFilter(String filter) {
+		this.filter = filter;
+	}
+
 	public void setSelectors(String[] selectors) {
 		this.selectors = selectors;
 	}
+
+	public String toString() {
+		return "requiredCapability: " + namespace + '/' + name + '/' + range; //$NON-NLS-1$
+	}
 }

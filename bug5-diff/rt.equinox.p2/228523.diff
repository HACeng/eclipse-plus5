commit e267de0a16666b252342c0825188808651bd038a
Author: DJ Houghton <dj>
Date:   Thu Apr 24 21:08:12 2008 +0000

    Bug 228523 - Multiple repositories on same location

1	1	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
1	1	bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
1	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
54	63	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
18	6	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
1	0	bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
54	63	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
18	6	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index b1ef5d9..bd044dd 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -61,7 +61,7 @@ public class ExtensionLocationMetadataRepository extends AbstractMetadataReposit
 		if (location.getPath().endsWith(POOLED))
 			listener = new BundlePoolFilteredListener(listener);
 		if (site != null)
-			listener = new SiteListener(site, listener);
+			listener = new SiteListener(site, new BundlePoolFilteredListener(listener));
 
 		watcher.addListener(listener);
 		watcher.poll();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
index 61099e9..2a37cc5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
@@ -5,7 +5,7 @@ Bundle-Name: %pluginName
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Bundle-Version: 0.1.0.qualifier
-Export-Package: org.eclipse.equinox.internal.p2.metadata.repository;x-friends:="org.eclipse.equinox.p2.metadata.generator,org.eclipse.equinox.p2.engine",
+Export-Package: org.eclipse.equinox.internal.p2.metadata.repository;x-friends:="org.eclipse.equinox.p2.engine,org.eclipse.equinox.p2.metadata.generator,org.eclipse.equinox.p2.reconciler.dropins",
  org.eclipse.equinox.internal.p2.metadata.repository.io;x-friends:="org.eclipse.equinox.p2.engine",
  org.eclipse.equinox.internal.provisional.p2.metadata.repository,
  org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
index afdab10..1a365a5 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
@@ -10,6 +10,7 @@ Bundle-RequiredExecutionEnvironment: J2SE-1.4,
  CDC-1.1/Foundation-1.1
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.extensionlocation,
+ org.eclipse.equinox.internal.p2.metadata.repository,
  org.eclipse.equinox.internal.p2.update,
  org.eclipse.equinox.internal.provisional.configurator,
  org.eclipse.equinox.internal.provisional.p2.artifact.repository,
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index c8edc4b..3d6b7a5 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -10,11 +10,13 @@
 package org.eclipse.equinox.internal.p2.reconciler.dropins;
 
 import java.io.File;
+import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
+import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -31,7 +33,6 @@ public class Activator implements BundleActivator {
 
 	public static final String ID = "org.eclipse.equinox.p2.reconciler.dropins"; //$NON-NLS-1$
 	private static final String DROPINS_DIRECTORY = "org.eclipse.equinox.p2.reconciler.dropins.directory"; //$NON-NLS-1$
-	private static final String OSGI_CONFIGURATION_AREA = "osgi.configuration.area"; //$NON-NLS-1$
 	private static final String DROPINS = "dropins"; //$NON-NLS-1$
 	private static final String LINKS = "links"; //$NON-NLS-1$
 	//	private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
@@ -66,6 +67,24 @@ public class Activator implements BundleActivator {
 		}
 	}
 
+	/*
+	 * Helper method to add the given metadata repository to the manager's list.
+	 */
+	public static void addRepository(IMetadataRepository repo) {
+		BundleContext context = getContext();
+		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
+		IMetadataRepositoryManager manager = null;
+		if (reference != null)
+			manager = (IMetadataRepositoryManager) context.getService(reference);
+		if (manager == null)
+			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
+		try {
+			((MetadataRepositoryManager) manager).addRepository(repo);
+		} finally {
+			context.ungetService(reference);
+		}
+	}
+
 	/**
 	 * Helper method to load an artifact repository from the given URL.
 	 * This method never returns <code>null</code>.
@@ -88,14 +107,6 @@ public class Activator implements BundleActivator {
 		}
 	}
 
-	protected static Collection getDropinRepositories() {
-		return dropinRepositories == null ? new ArrayList(0) : dropinRepositories;
-	}
-
-	protected static Collection getConfigurationRepositories() {
-		return configurationRepositories == null ? new ArrayList(0) : configurationRepositories;
-	}
-
 	/* (non-Javadoc)
 	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
 	 */
@@ -134,14 +145,21 @@ public class Activator implements BundleActivator {
 
 	private void watchEclipseProduct() {
 		try {
-			URL baseURL = new URL(bundleContext.getProperty(OSGI_CONFIGURATION_AREA));
-			URL pooledURL = new URL(baseURL, "../.pooled"); //$NON-NLS-1$
+			File configurationLocation = getConfigurationLocation();
+			if (configurationLocation == null) {
+				LogHelper.log(new Status(IStatus.ERROR, ID, "Unable to determine configuration location."));
+				return;
+			}
+			File pool = new File(configurationLocation, "../.pooled").getCanonicalFile(); //$NON-NLS-1$
+			URL pooledURL = pool.toURL();
 			loadArtifactRepository(pooledURL);
 			eclipseProductRepository = loadMetadataRepository(pooledURL);
 		} catch (MalformedURLException e) {
 			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
 		} catch (ProvisionException e) {
 			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
+		} catch (IOException e) {
+			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
 		}
 	}
 
@@ -185,16 +203,17 @@ public class Activator implements BundleActivator {
 	 * Watch the platform.xml file.
 	 */
 	private void watchConfiguration() {
-		// TODO get the real config area
-		File configFile = new File("configuration/org.eclipse.update/platform.xml"); //$NON-NLS-1$
+		File configFile = getConfigurationLocation();
+		if (configFile == null) {
+			LogHelper.log(new Status(IStatus.ERROR, ID, "Unable to determine configuration location."));
+			return;
+		}
+		configFile = new File(configFile, "org.eclipse.update/platform.xml"); //$NON-NLS-1$
 		DirectoryWatcher watcher = new DirectoryWatcher(configFile.getParentFile());
 		PlatformXmlListener listener = new PlatformXmlListener(configFile);
 		watcher.addListener(listener);
 		watcher.poll();
-		Collection repositories = listener.getMetadataRepositories();
-		if (repositories != null)
-			configurationRepositories = repositories;
-
+		configurationRepositories = listener.getMetadataRepositories();
 	}
 
 	/*
@@ -240,6 +259,24 @@ public class Activator implements BundleActivator {
 		return bundleContext;
 	}
 
+	/*
+	 * Helper method to get the configuration location. Return null if
+	 * it is unavailable.
+	 */
+	public static File getConfigurationLocation() {
+		Location configurationLocation = (Location) ServiceHelper.getService(getContext(), Location.class.getName(), Location.CONFIGURATION_FILTER);
+		if (configurationLocation == null || !configurationLocation.isSet())
+			return null;
+		URL url = configurationLocation.getURL();
+		if (url == null)
+			return null;
+		return URLUtil.toFile(url);
+	}
+
+	/*
+	 * Helper method to return the eclipse.home location. Return
+	 * null if it is unavailable.
+	 */
 	public static File getEclipseHome() {
 		Location eclipseHome = (Location) ServiceHelper.getService(getContext(), Location.class.getName(), Location.ECLIPSE_HOME_FILTER);
 		if (eclipseHome == null || !eclipseHome.isSet())
@@ -263,52 +300,6 @@ public class Activator implements BundleActivator {
 		return root == null ? null : new File(root, DROPINS);
 	}
 
-	// Disabled for now
-
-	//	private void removeUnwatchedRepositories(BundleContext context, Profile profile, File watchedFolder) {
-	//		removeUnwatchedMetadataRepositories(context, profile, watchedFolder);
-	//		removeUnwatchedArtifactRepositories(context, profile, watchedFolder);
-	//	}
-	//
-	//	private void removeUnwatchedArtifactRepositories(BundleContext context, Profile profile, File watchedFolder) {
-	//		ServiceReference reference = context.getServiceReference(IArtifactRepositoryManager.class.getName());
-	//		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) context.getService(reference);
-	//		try {
-	//			IArtifactRepository[] repositories = manager.getKnownRepositories();
-	//			for (int i = 0; i < repositories.length; i++) {
-	//				Map properties = repositories[i].getProperties();
-	//				String profileId = (String) properties.get("profileId");
-	//				String folderName = (String) properties.get("folder");
-	//
-	//				if (profile.getProfileId().equals(profileId) && !watchedFolder.getAbsolutePath().equals(folderName)) {
-	//					manager.removeRepository(repositories[i]);
-	//				}
-	//			}
-	//		} finally {
-	//			context.ungetService(reference);
-	//		}
-	//	}
-	//
-	//	private void removeUnwatchedMetadataRepositories(BundleContext context, Profile profile, File watchedFolder) {
-	//		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-	//		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) context.getService(reference);
-	//		try {
-	//			IMetadataRepository[] repositories = manager.getKnownRepositories();
-	//			for (int i = 0; i < repositories.length; i++) {
-	//				Map properties = repositories[i].getProperties();
-	//				String profileId = (String) properties.get("profileId");
-	//				if (profile.getProfileId().equals(profileId)) {
-	//					String folderName = (String) properties.get("folder");
-	//					if ((folderName != null) && !watchedFolder.getAbsolutePath().equals(folderName)) {
-	//						manager.removeRepository(repositories[i].getLocation());
-	//					}
-	//				}
-	//			}
-	//		} finally {
-	//			context.ungetService(reference);
-	//		}
-	//	}
-
 	public static IProfile getCurrentProfile(BundleContext context) {
 		ServiceReference reference = context.getServiceReference(IProfileRegistry.class.getName());
 		if (reference == null)
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
index de869d5..f090428 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
@@ -26,6 +26,11 @@ import org.eclipse.osgi.service.datalocation.Location;
 import org.eclipse.osgi.util.NLS;
 
 /**
+ * This class watches a platform.xml file. Note that we don't really need to use the DirectoryChangeListener
+ * framework since we are doing a single poll on startup, but we will leave the code here in case we
+ * want to watch for changes during a session. Note that the code to actually synchronize the repositories
+ * is on the Activator so we will need to call out to that if this behaviour is changed.
+ * 
  * @since 1.0
  */
 public class PlatformXmlListener extends DirectoryChangeListener {
@@ -123,6 +128,11 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		return configRepositories;
 	}
 
+	/*
+	 * Look through the given list of repositories and see if there is one
+	 * currently associated with the given url string. Return null if one could not
+	 * be found.
+	 */
 	private IMetadataRepository getMatchingRepo(Collection repositoryList, String urlString) {
 		if (repositoryList == null)
 			return null;
@@ -136,6 +146,9 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		return null;
 	}
 
+	/*
+	 * Ensure that we have a repository for each site in the given configuration.
+	 */
 	protected void synchronizeConfiguration(Configuration config) {
 		List sites = config.getSites();
 		Set newRepos = new LinkedHashSet();
@@ -144,13 +157,12 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 			String siteURL = site.getUrl();
 			if (siteURL.startsWith("file:") && siteURL.endsWith("/eclipse/")) //$NON-NLS-1$//$NON-NLS-2$
 				siteURL = siteURL.substring(0, siteURL.length() - 8);
-			IMetadataRepository match = getMatchingRepo(Activator.getConfigurationRepositories(), siteURL);
-			if (match == null)
-				match = getMatchingRepo(configRepositories, siteURL);
+			IMetadataRepository match = getMatchingRepo(configRepositories, siteURL);
 			if (match == null) {
 				try {
 					URL repoURL = new URL(siteURL);
 					IMetadataRepository newRepo = new ExtensionLocationMetadataRepository(repoURL, site, null);
+					Activator.addRepository(newRepo);
 					Activator.loadArtifactRepository(repoURL);
 					newRepos.add(newRepo);
 				} catch (MalformedURLException e) {
@@ -158,10 +170,10 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 				} catch (ProvisionException e) {
 					LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.errorLoadingRepository, siteURL), e));
 				}
+			} else {
+				newRepos.add(match);
 			}
 		}
-		// if we didn't add any new repos then there is no work to do
-		if (!newRepos.isEmpty())
-			configRepositories = newRepos;
+		configRepositories = newRepos;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
index afdab10..1a365a5 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
@@ -10,6 +10,7 @@ Bundle-RequiredExecutionEnvironment: J2SE-1.4,
  CDC-1.1/Foundation-1.1
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.extensionlocation,
+ org.eclipse.equinox.internal.p2.metadata.repository,
  org.eclipse.equinox.internal.p2.update,
  org.eclipse.equinox.internal.provisional.configurator,
  org.eclipse.equinox.internal.provisional.p2.artifact.repository,
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index c8edc4b..3d6b7a5 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -10,11 +10,13 @@
 package org.eclipse.equinox.internal.p2.reconciler.dropins;
 
 import java.io.File;
+import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
+import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -31,7 +33,6 @@ public class Activator implements BundleActivator {
 
 	public static final String ID = "org.eclipse.equinox.p2.reconciler.dropins"; //$NON-NLS-1$
 	private static final String DROPINS_DIRECTORY = "org.eclipse.equinox.p2.reconciler.dropins.directory"; //$NON-NLS-1$
-	private static final String OSGI_CONFIGURATION_AREA = "osgi.configuration.area"; //$NON-NLS-1$
 	private static final String DROPINS = "dropins"; //$NON-NLS-1$
 	private static final String LINKS = "links"; //$NON-NLS-1$
 	//	private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
@@ -66,6 +67,24 @@ public class Activator implements BundleActivator {
 		}
 	}
 
+	/*
+	 * Helper method to add the given metadata repository to the manager's list.
+	 */
+	public static void addRepository(IMetadataRepository repo) {
+		BundleContext context = getContext();
+		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
+		IMetadataRepositoryManager manager = null;
+		if (reference != null)
+			manager = (IMetadataRepositoryManager) context.getService(reference);
+		if (manager == null)
+			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
+		try {
+			((MetadataRepositoryManager) manager).addRepository(repo);
+		} finally {
+			context.ungetService(reference);
+		}
+	}
+
 	/**
 	 * Helper method to load an artifact repository from the given URL.
 	 * This method never returns <code>null</code>.
@@ -88,14 +107,6 @@ public class Activator implements BundleActivator {
 		}
 	}
 
-	protected static Collection getDropinRepositories() {
-		return dropinRepositories == null ? new ArrayList(0) : dropinRepositories;
-	}
-
-	protected static Collection getConfigurationRepositories() {
-		return configurationRepositories == null ? new ArrayList(0) : configurationRepositories;
-	}
-
 	/* (non-Javadoc)
 	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
 	 */
@@ -134,14 +145,21 @@ public class Activator implements BundleActivator {
 
 	private void watchEclipseProduct() {
 		try {
-			URL baseURL = new URL(bundleContext.getProperty(OSGI_CONFIGURATION_AREA));
-			URL pooledURL = new URL(baseURL, "../.pooled"); //$NON-NLS-1$
+			File configurationLocation = getConfigurationLocation();
+			if (configurationLocation == null) {
+				LogHelper.log(new Status(IStatus.ERROR, ID, "Unable to determine configuration location."));
+				return;
+			}
+			File pool = new File(configurationLocation, "../.pooled").getCanonicalFile(); //$NON-NLS-1$
+			URL pooledURL = pool.toURL();
 			loadArtifactRepository(pooledURL);
 			eclipseProductRepository = loadMetadataRepository(pooledURL);
 		} catch (MalformedURLException e) {
 			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
 		} catch (ProvisionException e) {
 			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
+		} catch (IOException e) {
+			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
 		}
 	}
 
@@ -185,16 +203,17 @@ public class Activator implements BundleActivator {
 	 * Watch the platform.xml file.
 	 */
 	private void watchConfiguration() {
-		// TODO get the real config area
-		File configFile = new File("configuration/org.eclipse.update/platform.xml"); //$NON-NLS-1$
+		File configFile = getConfigurationLocation();
+		if (configFile == null) {
+			LogHelper.log(new Status(IStatus.ERROR, ID, "Unable to determine configuration location."));
+			return;
+		}
+		configFile = new File(configFile, "org.eclipse.update/platform.xml"); //$NON-NLS-1$
 		DirectoryWatcher watcher = new DirectoryWatcher(configFile.getParentFile());
 		PlatformXmlListener listener = new PlatformXmlListener(configFile);
 		watcher.addListener(listener);
 		watcher.poll();
-		Collection repositories = listener.getMetadataRepositories();
-		if (repositories != null)
-			configurationRepositories = repositories;
-
+		configurationRepositories = listener.getMetadataRepositories();
 	}
 
 	/*
@@ -240,6 +259,24 @@ public class Activator implements BundleActivator {
 		return bundleContext;
 	}
 
+	/*
+	 * Helper method to get the configuration location. Return null if
+	 * it is unavailable.
+	 */
+	public static File getConfigurationLocation() {
+		Location configurationLocation = (Location) ServiceHelper.getService(getContext(), Location.class.getName(), Location.CONFIGURATION_FILTER);
+		if (configurationLocation == null || !configurationLocation.isSet())
+			return null;
+		URL url = configurationLocation.getURL();
+		if (url == null)
+			return null;
+		return URLUtil.toFile(url);
+	}
+
+	/*
+	 * Helper method to return the eclipse.home location. Return
+	 * null if it is unavailable.
+	 */
 	public static File getEclipseHome() {
 		Location eclipseHome = (Location) ServiceHelper.getService(getContext(), Location.class.getName(), Location.ECLIPSE_HOME_FILTER);
 		if (eclipseHome == null || !eclipseHome.isSet())
@@ -263,52 +300,6 @@ public class Activator implements BundleActivator {
 		return root == null ? null : new File(root, DROPINS);
 	}
 
-	// Disabled for now
-
-	//	private void removeUnwatchedRepositories(BundleContext context, Profile profile, File watchedFolder) {
-	//		removeUnwatchedMetadataRepositories(context, profile, watchedFolder);
-	//		removeUnwatchedArtifactRepositories(context, profile, watchedFolder);
-	//	}
-	//
-	//	private void removeUnwatchedArtifactRepositories(BundleContext context, Profile profile, File watchedFolder) {
-	//		ServiceReference reference = context.getServiceReference(IArtifactRepositoryManager.class.getName());
-	//		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) context.getService(reference);
-	//		try {
-	//			IArtifactRepository[] repositories = manager.getKnownRepositories();
-	//			for (int i = 0; i < repositories.length; i++) {
-	//				Map properties = repositories[i].getProperties();
-	//				String profileId = (String) properties.get("profileId");
-	//				String folderName = (String) properties.get("folder");
-	//
-	//				if (profile.getProfileId().equals(profileId) && !watchedFolder.getAbsolutePath().equals(folderName)) {
-	//					manager.removeRepository(repositories[i]);
-	//				}
-	//			}
-	//		} finally {
-	//			context.ungetService(reference);
-	//		}
-	//	}
-	//
-	//	private void removeUnwatchedMetadataRepositories(BundleContext context, Profile profile, File watchedFolder) {
-	//		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-	//		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) context.getService(reference);
-	//		try {
-	//			IMetadataRepository[] repositories = manager.getKnownRepositories();
-	//			for (int i = 0; i < repositories.length; i++) {
-	//				Map properties = repositories[i].getProperties();
-	//				String profileId = (String) properties.get("profileId");
-	//				if (profile.getProfileId().equals(profileId)) {
-	//					String folderName = (String) properties.get("folder");
-	//					if ((folderName != null) && !watchedFolder.getAbsolutePath().equals(folderName)) {
-	//						manager.removeRepository(repositories[i].getLocation());
-	//					}
-	//				}
-	//			}
-	//		} finally {
-	//			context.ungetService(reference);
-	//		}
-	//	}
-
 	public static IProfile getCurrentProfile(BundleContext context) {
 		ServiceReference reference = context.getServiceReference(IProfileRegistry.class.getName());
 		if (reference == null)
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
index de869d5..f090428 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
@@ -26,6 +26,11 @@ import org.eclipse.osgi.service.datalocation.Location;
 import org.eclipse.osgi.util.NLS;
 
 /**
+ * This class watches a platform.xml file. Note that we don't really need to use the DirectoryChangeListener
+ * framework since we are doing a single poll on startup, but we will leave the code here in case we
+ * want to watch for changes during a session. Note that the code to actually synchronize the repositories
+ * is on the Activator so we will need to call out to that if this behaviour is changed.
+ * 
  * @since 1.0
  */
 public class PlatformXmlListener extends DirectoryChangeListener {
@@ -123,6 +128,11 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		return configRepositories;
 	}
 
+	/*
+	 * Look through the given list of repositories and see if there is one
+	 * currently associated with the given url string. Return null if one could not
+	 * be found.
+	 */
 	private IMetadataRepository getMatchingRepo(Collection repositoryList, String urlString) {
 		if (repositoryList == null)
 			return null;
@@ -136,6 +146,9 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		return null;
 	}
 
+	/*
+	 * Ensure that we have a repository for each site in the given configuration.
+	 */
 	protected void synchronizeConfiguration(Configuration config) {
 		List sites = config.getSites();
 		Set newRepos = new LinkedHashSet();
@@ -144,13 +157,12 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 			String siteURL = site.getUrl();
 			if (siteURL.startsWith("file:") && siteURL.endsWith("/eclipse/")) //$NON-NLS-1$//$NON-NLS-2$
 				siteURL = siteURL.substring(0, siteURL.length() - 8);
-			IMetadataRepository match = getMatchingRepo(Activator.getConfigurationRepositories(), siteURL);
-			if (match == null)
-				match = getMatchingRepo(configRepositories, siteURL);
+			IMetadataRepository match = getMatchingRepo(configRepositories, siteURL);
 			if (match == null) {
 				try {
 					URL repoURL = new URL(siteURL);
 					IMetadataRepository newRepo = new ExtensionLocationMetadataRepository(repoURL, site, null);
+					Activator.addRepository(newRepo);
 					Activator.loadArtifactRepository(repoURL);
 					newRepos.add(newRepo);
 				} catch (MalformedURLException e) {
@@ -158,10 +170,10 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 				} catch (ProvisionException e) {
 					LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.errorLoadingRepository, siteURL), e));
 				}
+			} else {
+				newRepos.add(match);
 			}
 		}
-		// if we didn't add any new repos then there is no work to do
-		if (!newRepos.isEmpty())
-			configRepositories = newRepos;
+		configRepositories = newRepos;
 	}
 }
commit a4608d99db890fb36fd32e7d396b38bc6ea63ddf
Author: DJ Houghton <dj>
Date:   Fri Apr 25 21:10:50 2008 +0000

    Bug 228523 - Multiple repositories on same location

13	19	bundles/org.eclipse.equinox.p2.extensionlocation/plugin.xml
21	26	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
21	2	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
23	33	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
17	2	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
19	10	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
77	60	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
26	23	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
22	21	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
1	1	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
77	60	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
26	23	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
22	21	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
1	1	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
109	64	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
108	63	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/plugin.xml b/bundles/org.eclipse.equinox.p2.extensionlocation/plugin.xml
index 81c2c8e..21d41e2 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/plugin.xml
@@ -1,23 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <?eclipse version="3.2"?>
 <plugin>
-      <extension
-      id="extensionRepository"
-         point="org.eclipse.equinox.p2.metadata.repository.metadataRepositories">
-      <factory
-            class="org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepositoryFactory">
-      </factory>
-      <filter
-            suffix="eclipse">
-      </filter>
-   </extension>
-      <extension
-            point="org.eclipse.equinox.p2.artifact.repository.artifactRepositories">
-         <factory
-               class="org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepositoryFactory">
-         </factory>
-         <filter
-               suffix="eclipse">
-         </filter>
-      </extension>
+	<extension
+			id="metadataRepository"
+			point="org.eclipse.equinox.p2.metadata.repository.metadataRepositories">
+		<factory class="org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepositoryFactory" />
+		<filter suffix="eclipse" />
+	</extension>
+
+	<extension 
+			id="artifactRepository"
+			point="org.eclipse.equinox.p2.artifact.repository.artifactRepositories">
+		<factory class="org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepositoryFactory" />
+        <filter suffix="eclipse" />
+	</extension>
 </plugin>
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index 9f520b9..68d0816 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -19,12 +19,12 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.directorywatcher.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
-import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.core.repository.AbstractRepository;
 import org.osgi.framework.BundleContext;
 
 public class ExtensionLocationArtifactRepository extends AbstractRepository implements IFileArtifactRepository {
 
+	public static final String TYPE = "org.eclipse.equinox.p2.extensionlocation.artifactRepository"; //$NON-NLS-1$
 	private static final String POOLED = ".pooled"; //$NON-NLS-1$
 	//private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
@@ -33,29 +33,37 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 	private static final String FILE = "file"; //$NON-NLS-1$
 	private final IFileArtifactRepository artifactRepository;
 
-	public ExtensionLocationArtifactRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
-		super("Extension: " + location.toExternalForm(), null, null, location, null, null, null); //$NON-NLS-1$
-
-		File base = getBaseDirectory(location);
-		File plugins = new File(base, PLUGINS);
-		File features = new File(base, FEATURES);
-
+	/*
+	 * Return the location of a local repository based on
+	 * the given URL.
+	 */
+	public static URL getLocalRepositoryLocation(URL location) {
 		BundleContext context = Activator.getContext();
 		String stateDirName = Integer.toString(location.toExternalForm().hashCode());
 		File bundleData = context.getDataFile(null);
 		File stateDir = new File(bundleData, stateDirName);
-		URL localRepositoryURL;
 		try {
-			localRepositoryURL = stateDir.toURL();
+			return stateDir.toURL();
 		} catch (MalformedURLException e) {
 			// unexpected
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_repo, e));
+			return null;
 		}
+	}
 
-		artifactRepository = (IFileArtifactRepository) initializeArtifactRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
+	/*
+	 * Constuctor for the class. Return a new extension location repository based on 
+	 * the given url and nested repository.
+	 */
+	public ExtensionLocationArtifactRepository(URL location, IFileArtifactRepository repository, IProgressMonitor monitor) throws ProvisionException {
+		super("Extension: " + location.toExternalForm(), null, null, location, null, null, null); //$NON-NLS-1$
+		this.artifactRepository = repository;
+
+		File base = getBaseDirectory(location);
+		File plugins = new File(base, PLUGINS);
+		File features = new File(base, FEATURES);
 
 		DirectoryWatcher watcher = new DirectoryWatcher(new File[] {plugins, features});
-		DirectoryChangeListener listener = new RepositoryListener(context, null, artifactRepository);
+		DirectoryChangeListener listener = new RepositoryListener(Activator.getContext(), null, artifactRepository);
 		if (location.getPath().endsWith(POOLED))
 			listener = new BundlePoolFilteredListener(listener);
 
@@ -63,19 +71,6 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		watcher.poll();
 	}
 
-	private IArtifactRepository initializeArtifactRepository(URL stateDirURL, String repositoryName) {
-		SimpleArtifactRepositoryFactory factory = new SimpleArtifactRepositoryFactory();
-		try {
-			return factory.load(stateDirURL, null);
-
-		} catch (ProvisionException e) {
-			//fall through and create a new repository
-		}
-		IArtifactRepository repository = factory.create(stateDirURL, repositoryName, null, null);
-		//repository.setProperty(PROFILE_EXTENSION, "true");
-		return repository;
-	}
-
 	public static void validate(URL location, IProgressMonitor monitor) throws ProvisionException {
 		getBaseDirectory(location);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
index 5063f4e..55bf2e4 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
@@ -14,17 +14,36 @@ import java.net.URL;
 import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 
 public class ExtensionLocationArtifactRepositoryFactory implements IArtifactRepositoryFactory {
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
+	 */
 	public IArtifactRepository create(URL location, String name, String type, Map properties) throws ProvisionException {
-		return null;
+		URL repoLocation = ExtensionLocationArtifactRepository.getLocalRepositoryLocation(location);
+		// unexpected
+		if (repoLocation == null)
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
+		IFileArtifactRepository repo = (IFileArtifactRepository) new SimpleArtifactRepositoryFactory().create(repoLocation, name, type, properties);
+		return new ExtensionLocationArtifactRepository(location, repo, null);
 	}
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 */
 	public IArtifactRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
-		return new ExtensionLocationArtifactRepository(location, monitor);
+		URL repoLocation = ExtensionLocationArtifactRepository.getLocalRepositoryLocation(location);
+		// unexpected
+		if (repoLocation == null)
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
+		// TODO proper progress monitoring
+		IFileArtifactRepository repo = (IFileArtifactRepository) new SimpleArtifactRepositoryFactory().load(repoLocation, null);
+		return new ExtensionLocationArtifactRepository(location, repo, monitor);
 	}
 
 	public IStatus validate(URL location, IProgressMonitor monitor) {
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index bd044dd..e97f881 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -15,7 +15,6 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Map;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.update.Site;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.directorywatcher.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -23,60 +22,54 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.AbstractMetadataRepository;
-import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
 import org.osgi.framework.BundleContext;
 
 public class ExtensionLocationMetadataRepository extends AbstractMetadataRepository {
 
-	private static final String POOLED = ".pooled"; //$NON-NLS-1$
+	public static final String TYPE = "org.eclipse.equinox.p2.extensionlocation.metadataRepository"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
 	private static final String PLUGINS = "plugins"; //$NON-NLS-1$
 	private static final String FILE = "file"; //$NON-NLS-1$
-	private final IMetadataRepository metadataRepository;
-
-	public ExtensionLocationMetadataRepository(URL location, Site site, IProgressMonitor monitor) throws ProvisionException {
-		super("Extension: " + location.toExternalForm(), null, null, location, null, null, null); //$NON-NLS-1$
-
-		File base = getBaseDirectory(location);
-		File plugins = new File(base, PLUGINS);
-		File features = new File(base, FEATURES);
+	private IMetadataRepository metadataRepository;
 
+	/*
+	 * Return the URL for this repo's nested local repository.
+	 */
+	public static URL getLocalRepositoryLocation(URL location) {
 		BundleContext context = Activator.getContext();
 		String stateDirName = Integer.toString(location.toExternalForm().hashCode());
 		File bundleData = context.getDataFile(null);
 		File stateDir = new File(bundleData, stateDirName);
-		URL localRepositoryURL;
 		try {
-			localRepositoryURL = stateDir.toURL();
+			return stateDir.toURL();
 		} catch (MalformedURLException e) {
 			// unexpected
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository, e));
+			return null;
 		}
+	}
 
-		metadataRepository = initializeMetadataRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
+	/*
+	 * Constructor for the class. Return a new extension location repository based on the 
+	 * given location and specified nested repo.
+	 */
+	public ExtensionLocationMetadataRepository(URL location, IMetadataRepository repository, IProgressMonitor monitor) throws ProvisionException {
+		super("Extension: " + location.toExternalForm(), null, null, location, null, null, null); //$NON-NLS-1$
+		this.metadataRepository = repository;
+
+		File base = getBaseDirectory(location);
+		File plugins = new File(base, PLUGINS);
+		File features = new File(base, FEATURES);
 
 		DirectoryWatcher watcher = new DirectoryWatcher(new File[] {plugins, features});
-		DirectoryChangeListener listener = new RepositoryListener(context, metadataRepository, null);
-		if (location.getPath().endsWith(POOLED))
-			listener = new BundlePoolFilteredListener(listener);
-		if (site != null)
-			listener = new SiteListener(site, new BundlePoolFilteredListener(listener));
+		DirectoryChangeListener listener = new RepositoryListener(Activator.getContext(), metadataRepository, null);
+		if (getProperties().get(SiteListener.SITE_POLICY) != null)
+			listener = new SiteListener(getProperties(), location.toExternalForm(), new BundlePoolFilteredListener(listener));
 
 		watcher.addListener(listener);
 		watcher.poll();
 	}
 
-	private IMetadataRepository initializeMetadataRepository(URL stateDirURL, String repositoryName) {
-		SimpleMetadataRepositoryFactory factory = new SimpleMetadataRepositoryFactory();
-		try {
-			return factory.load(stateDirURL, null);
-		} catch (ProvisionException e) {
-			//fall through and create a new repository
-		}
-		return factory.create(stateDirURL, repositoryName, null, null);
-	}
-
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository#addInstallableUnits(org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit[])
 	 */
@@ -115,9 +108,6 @@ public class ExtensionLocationMetadataRepository extends AbstractMetadataReposit
 
 		String path = url.getPath();
 		File base = new File(path);
-		if (path.endsWith(POOLED)) {
-			base = base.getParentFile();
-		}
 
 		if (!base.isDirectory())
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_directory, null));
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
index 29bc839..65393fc 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
@@ -16,18 +16,33 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
 
 public class ExtensionLocationMetadataRepositoryFactory implements IMetadataRepositoryFactory {
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
+	 */
 	public IMetadataRepository create(URL location, String name, String type, Map properties) throws ProvisionException {
-		return null;
+		URL repoLocation = ExtensionLocationMetadataRepository.getLocalRepositoryLocation(location);
+		// unexpected
+		if (repoLocation == null)
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
+		IMetadataRepository repository = new SimpleMetadataRepositoryFactory().create(repoLocation, name, null, properties);
+		return new ExtensionLocationMetadataRepository(location, repository, null);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IMetadataRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
-		return new ExtensionLocationMetadataRepository(location, null, monitor);
+		URL repoLocation = ExtensionLocationMetadataRepository.getLocalRepositoryLocation(location);
+		// unexpected
+		if (repoLocation == null)
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
+		// TODO proper progress monitoring
+		IMetadataRepository repository = new SimpleMetadataRepositoryFactory().load(repoLocation, null);
+		return new ExtensionLocationMetadataRepository(location, repository, monitor);
 	}
 
 	/* (non-Javadoc)
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
index 7b85b0e..fca1f7e 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/SiteListener.java
@@ -31,10 +31,14 @@ import org.osgi.framework.ServiceReference;
  */
 public class SiteListener extends RepositoryListener {
 
+	public static final String SITE_POLICY = "org.eclipse.update.site.policy"; //$NON-NLS-1$
+	public static final String SITE_LIST = "org.eclipse.update.site.list"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
 	private static final String PLUGINS = "plugins"; //$NON-NLS-1$
+	private String policy;
+	private String[] list;
+	private String url;
 	private DirectoryChangeListener delegate;
-	private Site site;
 	private String[] managedFiles;
 
 	/*
@@ -52,10 +56,17 @@ public class SiteListener extends RepositoryListener {
 	/*
 	 * Create a new site listener on the given site.
 	 */
-	public SiteListener(Site site, DirectoryChangeListener delegate) {
-		super(Activator.getContext(), site.getUrl());
+	public SiteListener(Map properties, String url, DirectoryChangeListener delegate) {
+		super(Activator.getContext(), url);
+		this.url = url;
 		this.delegate = delegate;
-		this.site = site;
+		this.policy = (String) properties.get(SITE_POLICY);
+		Collection listCollection = new HashSet();
+		String listString = (String) properties.get(SITE_LIST);
+		if (listString != null)
+			for (StringTokenizer tokenizer = new StringTokenizer(listString, ","); tokenizer.hasMoreTokens();) //$NON-NLS-1$
+				listCollection.add(tokenizer.nextToken());
+		this.list = (String[]) listCollection.toArray(new String[listCollection.size()]);
 	}
 
 	/* (non-Javadoc)
@@ -66,17 +77,15 @@ public class SiteListener extends RepositoryListener {
 		// the file before we consider it
 		if (!delegate.isInterested(file) || !super.isInterested(file))
 			return false;
-		String policy = site.getPolicy();
-		String[] plugins = site.getList();
 		if (Site.POLICY_MANAGED_ONLY.equals(policy)) {
 			// we only want plug-ins referenced by features
 			return contains(getManagedFiles(), file);
 		} else if (Site.POLICY_USER_EXCLUDE.equals(policy)) {
 			// ensure the file doesn't refer to a plug-in in our list
-			return plugins.length == 0 ? true : !contains(plugins, file);
+			return list.length == 0 ? true : !contains(list, file);
 		} else if (Site.POLICY_USER_INCLUDE.equals(policy)) {
 			// we are only interested in plug-ins in the list
-			return plugins.length == 0 ? false : contains(plugins, file);
+			return list.length == 0 ? false : contains(list, file);
 		}
 		return false;
 	}
@@ -92,9 +101,9 @@ public class SiteListener extends RepositoryListener {
 		List result = new ArrayList();
 		File siteLocation;
 		try {
-			siteLocation = URLUtil.toFile(new URL(site.getUrl()));
+			siteLocation = URLUtil.toFile(new URL(url));
 		} catch (MalformedURLException e) {
-			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Unable to create a URL from site locatin: " + site.getUrl(), e));
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Unable to create a URL from site locatin: " + url, e));
 			return new String[0];
 		}
 		Map pluginCache = getPlugins(siteLocation);
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index 3d6b7a5..87e2a31 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -10,13 +10,11 @@
 package org.eclipse.equinox.internal.p2.reconciler.dropins;
 
 import java.io.File;
-import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
-import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -46,64 +44,53 @@ public class Activator implements BundleActivator {
 	private static IMetadataRepository eclipseProductRepository;
 
 	/**
-	 * Helper method to load a metadata repository from the specified URL.
-	 * This method never returns <code>null</code>.
+	 * Helper method to load a metadata repository from the specified URL. If none
+	 * exists then create one if requested. This method never returns <code>null</code>.
 	 * 
 	 * @throws IllegalStateException
 	 * @throws ProvisionException 
 	 */
-	public static IMetadataRepository loadMetadataRepository(URL repoURL) throws ProvisionException {
-		BundleContext context = getContext();
-		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-		IMetadataRepositoryManager manager = null;
-		if (reference != null)
-			manager = (IMetadataRepositoryManager) context.getService(reference);
-		if (manager == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
-		try {
-			return manager.loadRepository(repoURL, null);
-		} finally {
-			context.ungetService(reference);
-		}
-	}
-
-	/*
-	 * Helper method to add the given metadata repository to the manager's list.
-	 */
-	public static void addRepository(IMetadataRepository repo) {
+	public static IMetadataRepository getMetadataRepository(URL location, String name, String type, Map properties, boolean create) throws ProvisionException {
 		BundleContext context = getContext();
-		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-		IMetadataRepositoryManager manager = null;
-		if (reference != null)
-			manager = (IMetadataRepositoryManager) context.getService(reference);
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(context, IMetadataRepositoryManager.class.getName());
 		if (manager == null)
 			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
 		try {
-			((MetadataRepositoryManager) manager).addRepository(repo);
-		} finally {
-			context.ungetService(reference);
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			if (create) {
+				IMetadataRepository repository = manager.createRepository(location, name, type, properties);
+				manager.addRepository(location);
+				return repository;
+			}
+			// if we didn't want to create in the failure case then return the reason for the failure
+			throw e;
 		}
 	}
 
 	/**
-	 * Helper method to load an artifact repository from the given URL.
+	 * Helper method to load an artifact repository from the given URL. If none
+	 * exists then we will create one at the given location, if specified to do so.
 	 * This method never returns <code>null</code>.
 	 * 
 	 * @throws IllegalStateException
-	 * @throws ProvisionException
+	 * @throws ProvisionException 
 	 */
-	public static IArtifactRepository loadArtifactRepository(URL repoURL) throws ProvisionException {
+	public static IArtifactRepository getArtifactRepository(URL location, String name, String type, Map properties, boolean create) throws ProvisionException {
 		BundleContext context = getContext();
-		ServiceReference reference = context.getServiceReference(IArtifactRepositoryManager.class.getName());
-		IArtifactRepositoryManager manager = null;
-		if (reference != null)
-			manager = (IArtifactRepositoryManager) context.getService(reference);
+		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(context, IArtifactRepositoryManager.class.getName());
 		if (manager == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
+			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
 		try {
-			return manager.loadRepository(repoURL, null);
-		} finally {
-			context.ungetService(reference);
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			if (create) {
+				IArtifactRepository repository = manager.createRepository(location, name, type, properties);
+				manager.addRepository(location);
+				return repository;
+			}
+			// if we didn't want to create in the failure case then return the reason for the failure
+			throw e;
 		}
 	}
 
@@ -125,8 +112,9 @@ public class Activator implements BundleActivator {
 		if (profile == null)
 			return;
 
-		// create a watcher for the main plugins and features directories
-		watchEclipseProduct();
+		// TODO i-build to i-build backwards compatibility code to remove the
+		// old .pooled repositories. Remove this call soon.
+		removeOldRepos();
 		// create the watcher for the "drop-ins" folder
 		watchDropins(profile);
 		// keep an eye on the platform.xml
@@ -143,24 +131,31 @@ public class Activator implements BundleActivator {
 		eclipseProductRepository = null;
 	}
 
-	private void watchEclipseProduct() {
+	/*
+	 * TODO Backwards compatibility code to remove the
+	 * old .pooled repositories from the saved list. Remove
+	 * this method soon.
+	 */
+	private void removeOldRepos() {
+		URL osgiInstallArea = getOSGiInstallArea();
+		if (osgiInstallArea == null)
+			return;
+		URL location = null;
 		try {
-			File configurationLocation = getConfigurationLocation();
-			if (configurationLocation == null) {
-				LogHelper.log(new Status(IStatus.ERROR, ID, "Unable to determine configuration location."));
-				return;
-			}
-			File pool = new File(configurationLocation, "../.pooled").getCanonicalFile(); //$NON-NLS-1$
-			URL pooledURL = pool.toURL();
-			loadArtifactRepository(pooledURL);
-			eclipseProductRepository = loadMetadataRepository(pooledURL);
+			location = new URL(getOSGiInstallArea(), ".pooled"); //$NON-NLS-1$
 		} catch (MalformedURLException e) {
-			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
-		} catch (ProvisionException e) {
-			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
-		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
+			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while removing old repositories.", e)); //$NON-NLS-1$
+			return;
 		}
+		BundleContext context = getContext();
+		IArtifactRepositoryManager artifactManager = (IArtifactRepositoryManager) ServiceHelper.getService(context, IArtifactRepositoryManager.class.getName());
+		if (artifactManager == null)
+			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
+		artifactManager.removeRepository(location);
+		IMetadataRepositoryManager metadataManager = (IMetadataRepositoryManager) ServiceHelper.getService(context, IMetadataRepositoryManager.class.getName());
+		if (metadataManager == null)
+			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
+		metadataManager.removeRepository(location);
 	}
 
 	private boolean startEarly(String bundleName) throws BundleException {
@@ -231,7 +226,6 @@ public class Activator implements BundleActivator {
 			return;
 
 		DropinsRepositoryListener listener = new DropinsRepositoryListener(Activator.getContext(), "dropins:" + dropinsDirectory.getAbsolutePath());
-		//		listener.getArtifactRepository().setProperty(PROFILE_EXTENSION, profile.getProfileId());
 		DirectoryWatcher watcher = new DirectoryWatcher((File[]) directories.toArray(new File[directories.size()]));
 		watcher.addListener(listener);
 		watcher.poll();
@@ -274,6 +268,18 @@ public class Activator implements BundleActivator {
 	}
 
 	/*
+	 * Do a look-up and return the OSGi install area if it is set.
+	 */
+	public static URL getOSGiInstallArea() {
+		Location location = (Location) ServiceHelper.getService(Activator.getContext(), Location.class.getName(), Location.INSTALL_FILTER);
+		if (location == null)
+			return null;
+		if (!location.isSet())
+			return null;
+		return location.getURL();
+	}
+
+	/*
 	 * Helper method to return the eclipse.home location. Return
 	 * null if it is unavailable.
 	 */
@@ -287,11 +293,17 @@ public class Activator implements BundleActivator {
 		return URLUtil.toFile(url);
 	}
 
+	/*
+	 * Return the location of the links directory, or null if it is not available.
+	 */
 	private static File getLinksDirectory() {
 		File root = getEclipseHome();
 		return root == null ? null : new File(root, LINKS);
 	}
 
+	/*
+	 * Return the location of the dropins directory, or null if it is not available.
+	 */
 	private static File getDropinsDirectory() {
 		String watchedDirectoryProperty = bundleContext.getProperty(DROPINS_DIRECTORY);
 		if (watchedDirectoryProperty != null)
@@ -300,6 +312,9 @@ public class Activator implements BundleActivator {
 		return root == null ? null : new File(root, DROPINS);
 	}
 
+	/*
+	 * Return the current profile or null if it cannot be retrieved.
+	 */
 	public static IProfile getCurrentProfile(BundleContext context) {
 		ServiceReference reference = context.getServiceReference(IProfileRegistry.class.getName());
 		if (reference == null)
@@ -316,10 +331,12 @@ public class Activator implements BundleActivator {
 		packageAdmin = service;
 	}
 
+	/*
+	 * Return the bundle with the given symbolic name, or null if it cannot be found.
+	 */
 	static synchronized Bundle getBundle(String symbolicName) {
 		if (packageAdmin == null)
 			return null;
-
 		Bundle[] bundles = packageAdmin.getBundles(symbolicName, null);
 		if (bundles == null)
 			return null;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
index b3b7aac..09808c8 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
@@ -14,6 +14,11 @@ import java.io.*;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepository;
+import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -56,8 +61,8 @@ public class DropinsRepositoryListener extends RepositoryListener {
 
 		URL repositoryURL = createRepositoryURL(file);
 		if (repositoryURL != null) {
-			loadMetadataRepository(repositoryURL);
-			loadArtifactRepository(repositoryURL);
+			getMetadataRepository(repositoryURL);
+			getArtifactRepository(repositoryURL);
 		}
 		return true;
 	}
@@ -68,8 +73,8 @@ public class DropinsRepositoryListener extends RepositoryListener {
 
 		URL repositoryURL = createRepositoryURL(file);
 		if (repositoryURL != null) {
-			loadMetadataRepository(repositoryURL);
-			loadArtifactRepository(repositoryURL);
+			getMetadataRepository(repositoryURL);
+			getArtifactRepository(repositoryURL);
 		}
 		return true;
 	}
@@ -108,7 +113,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 			if (file.getName().endsWith(LINK)) {
 				File linkFile = file;
 				String path = getLinkPath(linkFile);
-				// todo log
+				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Unable to determine link location from file: " + file.getAbsolutePath())); //$NON-NLS-1$
 				if (path == null)
 					return null;
 				file = new File(path);
@@ -127,34 +132,34 @@ public class DropinsRepositoryListener extends RepositoryListener {
 			}
 			return repositoryURL;
 		} catch (IOException e) {
-			// todo log			
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error occurred while building repository location.", e)); //$NON-NLS-1$
 		}
 		return null;
 	}
 
-	public void loadMetadataRepository(URL repoURL) {
+	public void getMetadataRepository(URL repoURL) {
 		try {
-			metadataRepositories.add(Activator.loadMetadataRepository(repoURL));
-		} catch (ProvisionException e) {
-			//TODO: log
-			// ignore
+			Map properties = new HashMap();
+			properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			metadataRepositories.add(Activator.getMetadataRepository(repoURL, "dropins metadata repo: " + repoURL.toExternalForm(), ExtensionLocationMetadataRepository.TYPE, properties, true)); //$NON-NLS-1$
+		} catch (ProvisionException ex) {
+			LogHelper.log(ex);
 		}
 	}
 
-	public void loadArtifactRepository(URL repoURL) {
+	public void getArtifactRepository(URL repoURL) {
 		try {
-			artifactRepositories.add(Activator.loadArtifactRepository(repoURL));
-		} catch (ProvisionException e) {
-			//TODO: log
-			// ignore
+			Map properties = new HashMap();
+			properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			artifactRepositories.add(Activator.getArtifactRepository(repoURL, "dropins artifact repo: " + repoURL.toExternalForm(), ExtensionLocationArtifactRepository.TYPE, properties, true)); //$NON-NLS-1$
+		} catch (ProvisionException ex) {
+			LogHelper.log(ex);
 		}
 	}
 
 	public void stopPoll() {
-
 		synchronizeDropinMetadataRepositories();
 		synchronizeDropinArtifactRepositories();
-
 		super.stopPoll();
 	}
 
@@ -185,8 +190,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		try {
 			manager.removeRepository(new URL(urlString));
 		} catch (MalformedURLException e) {
-			// TODO: log
-			// ignore
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error occurred while creating URL from: " + urlString, e)); //$NON-NLS-1$
 		} finally {
 			context.ungetService(reference);
 		}
@@ -219,8 +223,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		try {
 			manager.removeRepository(new URL(urlString));
 		} catch (MalformedURLException e) {
-			//TODO: log
-			// ignore
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error occurred while creating URL from: " + urlString, e)); //$NON-NLS-1$
 		} finally {
 			context.ungetService(reference);
 		}
@@ -230,7 +233,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		List listProperty = new ArrayList();
 		String dropinRepositories = (String) repository.getProperties().get(key);
 		if (dropinRepositories != null) {
-			StringTokenizer tokenizer = new StringTokenizer(dropinRepositories, PIPE); //$NON-NLS-1$			
+			StringTokenizer tokenizer = new StringTokenizer(dropinRepositories, PIPE);
 			while (tokenizer.hasMoreTokens()) {
 				listProperty.add(tokenizer.nextToken());
 			}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
index f090428..5bad4e8 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
@@ -16,13 +16,12 @@ import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepository;
+import org.eclipse.equinox.internal.p2.extensionlocation.*;
 import org.eclipse.equinox.internal.p2.update.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryChangeListener;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.osgi.service.datalocation.Location;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -41,6 +40,18 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 	private long lastModified = -1l;
 	private Set configRepositories;
 
+	private String toString(String[] list) {
+		if (list == null || list.length == 0)
+			return ""; //$NON-NLS-1$
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0; i < list.length; i++) {
+			buffer.append(list[i]);
+			if (list.length < i + 1)
+				buffer.append(',');
+		}
+		return buffer.toString();
+	}
+
 	/*
 	 * Construct a new listener based on the given platform.xml file.
 	 */
@@ -51,18 +62,6 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		this.root = file;
 	}
 
-	/*
-	 * Do a look-up and return the OSGi install area if it is set.
-	 */
-	private static URL getOSGiInstallArea() {
-		Location location = (Location) ServiceHelper.getService(Activator.getContext(), Location.class.getName(), Location.INSTALL_FILTER);
-		if (location == null)
-			return null;
-		if (!location.isSet())
-			return null;
-		return location.getURL();
-	}
-
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.directorywatcher.IDirectoryChangeListener#added(java.io.File)
 	 */
@@ -115,7 +114,7 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		if (changed) {
 			lastModified = root.lastModified();
 			try {
-				Configuration configuration = ConfigurationParser.parse(root, getOSGiInstallArea());
+				Configuration configuration = ConfigurationParser.parse(root, Activator.getOSGiInstallArea());
 				synchronizeConfiguration(configuration);
 			} catch (ProvisionException e) {
 				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, Messages.errorProcessingConfg, e));
@@ -160,11 +159,13 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 			IMetadataRepository match = getMatchingRepo(configRepositories, siteURL);
 			if (match == null) {
 				try {
-					URL repoURL = new URL(siteURL);
-					IMetadataRepository newRepo = new ExtensionLocationMetadataRepository(repoURL, site, null);
-					Activator.addRepository(newRepo);
-					Activator.loadArtifactRepository(repoURL);
-					newRepos.add(newRepo);
+					URL location = new URL(siteURL);
+					Map properties = new HashMap();
+					properties.put(SiteListener.SITE_POLICY, site.getPolicy());
+					properties.put(SiteListener.SITE_LIST, toString(site.getList()));
+					properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+					newRepos.add(Activator.getMetadataRepository(location, "extension location metadata repository: " + location.toExternalForm(), ExtensionLocationMetadataRepository.TYPE, properties, true)); //$NON-NLS-1$
+					Activator.getArtifactRepository(location, "extension location artifact repository:  " + location.toExternalForm(), ExtensionLocationArtifactRepository.TYPE, properties, true); //$NON-NLS-1$
 				} catch (MalformedURLException e) {
 					LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.errorLoadingRepository, siteURL), e));
 				} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
index d22d362..a423b60 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -215,7 +215,7 @@ public class ProfileSynchronizer {
 		for (Iterator it = repositoryMap.keySet().iterator(); it.hasNext();) {
 			String repositoryId = (String) it.next();
 			try {
-				IArtifactRepository repository = Activator.loadArtifactRepository(new URL(repositoryId));
+				IArtifactRepository repository = Activator.getArtifactRepository(new URL(repositoryId), null, null, null, false);
 
 				if (repository instanceof IFileArtifactRepository) {
 					currentExtensions.add(repositoryId);
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index 3d6b7a5..87e2a31 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -10,13 +10,11 @@
 package org.eclipse.equinox.internal.p2.reconciler.dropins;
 
 import java.io.File;
-import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
-import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -46,64 +44,53 @@ public class Activator implements BundleActivator {
 	private static IMetadataRepository eclipseProductRepository;
 
 	/**
-	 * Helper method to load a metadata repository from the specified URL.
-	 * This method never returns <code>null</code>.
+	 * Helper method to load a metadata repository from the specified URL. If none
+	 * exists then create one if requested. This method never returns <code>null</code>.
 	 * 
 	 * @throws IllegalStateException
 	 * @throws ProvisionException 
 	 */
-	public static IMetadataRepository loadMetadataRepository(URL repoURL) throws ProvisionException {
-		BundleContext context = getContext();
-		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-		IMetadataRepositoryManager manager = null;
-		if (reference != null)
-			manager = (IMetadataRepositoryManager) context.getService(reference);
-		if (manager == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
-		try {
-			return manager.loadRepository(repoURL, null);
-		} finally {
-			context.ungetService(reference);
-		}
-	}
-
-	/*
-	 * Helper method to add the given metadata repository to the manager's list.
-	 */
-	public static void addRepository(IMetadataRepository repo) {
+	public static IMetadataRepository getMetadataRepository(URL location, String name, String type, Map properties, boolean create) throws ProvisionException {
 		BundleContext context = getContext();
-		ServiceReference reference = context.getServiceReference(IMetadataRepositoryManager.class.getName());
-		IMetadataRepositoryManager manager = null;
-		if (reference != null)
-			manager = (IMetadataRepositoryManager) context.getService(reference);
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(context, IMetadataRepositoryManager.class.getName());
 		if (manager == null)
 			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
 		try {
-			((MetadataRepositoryManager) manager).addRepository(repo);
-		} finally {
-			context.ungetService(reference);
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			if (create) {
+				IMetadataRepository repository = manager.createRepository(location, name, type, properties);
+				manager.addRepository(location);
+				return repository;
+			}
+			// if we didn't want to create in the failure case then return the reason for the failure
+			throw e;
 		}
 	}
 
 	/**
-	 * Helper method to load an artifact repository from the given URL.
+	 * Helper method to load an artifact repository from the given URL. If none
+	 * exists then we will create one at the given location, if specified to do so.
 	 * This method never returns <code>null</code>.
 	 * 
 	 * @throws IllegalStateException
-	 * @throws ProvisionException
+	 * @throws ProvisionException 
 	 */
-	public static IArtifactRepository loadArtifactRepository(URL repoURL) throws ProvisionException {
+	public static IArtifactRepository getArtifactRepository(URL location, String name, String type, Map properties, boolean create) throws ProvisionException {
 		BundleContext context = getContext();
-		ServiceReference reference = context.getServiceReference(IArtifactRepositoryManager.class.getName());
-		IArtifactRepositoryManager manager = null;
-		if (reference != null)
-			manager = (IArtifactRepositoryManager) context.getService(reference);
+		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(context, IArtifactRepositoryManager.class.getName());
 		if (manager == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
+			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
 		try {
-			return manager.loadRepository(repoURL, null);
-		} finally {
-			context.ungetService(reference);
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			if (create) {
+				IArtifactRepository repository = manager.createRepository(location, name, type, properties);
+				manager.addRepository(location);
+				return repository;
+			}
+			// if we didn't want to create in the failure case then return the reason for the failure
+			throw e;
 		}
 	}
 
@@ -125,8 +112,9 @@ public class Activator implements BundleActivator {
 		if (profile == null)
 			return;
 
-		// create a watcher for the main plugins and features directories
-		watchEclipseProduct();
+		// TODO i-build to i-build backwards compatibility code to remove the
+		// old .pooled repositories. Remove this call soon.
+		removeOldRepos();
 		// create the watcher for the "drop-ins" folder
 		watchDropins(profile);
 		// keep an eye on the platform.xml
@@ -143,24 +131,31 @@ public class Activator implements BundleActivator {
 		eclipseProductRepository = null;
 	}
 
-	private void watchEclipseProduct() {
+	/*
+	 * TODO Backwards compatibility code to remove the
+	 * old .pooled repositories from the saved list. Remove
+	 * this method soon.
+	 */
+	private void removeOldRepos() {
+		URL osgiInstallArea = getOSGiInstallArea();
+		if (osgiInstallArea == null)
+			return;
+		URL location = null;
 		try {
-			File configurationLocation = getConfigurationLocation();
-			if (configurationLocation == null) {
-				LogHelper.log(new Status(IStatus.ERROR, ID, "Unable to determine configuration location."));
-				return;
-			}
-			File pool = new File(configurationLocation, "../.pooled").getCanonicalFile(); //$NON-NLS-1$
-			URL pooledURL = pool.toURL();
-			loadArtifactRepository(pooledURL);
-			eclipseProductRepository = loadMetadataRepository(pooledURL);
+			location = new URL(getOSGiInstallArea(), ".pooled"); //$NON-NLS-1$
 		} catch (MalformedURLException e) {
-			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
-		} catch (ProvisionException e) {
-			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
-		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while loading repository.", e));
+			LogHelper.log(new Status(IStatus.ERROR, ID, "Error occurred while removing old repositories.", e)); //$NON-NLS-1$
+			return;
 		}
+		BundleContext context = getContext();
+		IArtifactRepositoryManager artifactManager = (IArtifactRepositoryManager) ServiceHelper.getService(context, IArtifactRepositoryManager.class.getName());
+		if (artifactManager == null)
+			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
+		artifactManager.removeRepository(location);
+		IMetadataRepositoryManager metadataManager = (IMetadataRepositoryManager) ServiceHelper.getService(context, IMetadataRepositoryManager.class.getName());
+		if (metadataManager == null)
+			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
+		metadataManager.removeRepository(location);
 	}
 
 	private boolean startEarly(String bundleName) throws BundleException {
@@ -231,7 +226,6 @@ public class Activator implements BundleActivator {
 			return;
 
 		DropinsRepositoryListener listener = new DropinsRepositoryListener(Activator.getContext(), "dropins:" + dropinsDirectory.getAbsolutePath());
-		//		listener.getArtifactRepository().setProperty(PROFILE_EXTENSION, profile.getProfileId());
 		DirectoryWatcher watcher = new DirectoryWatcher((File[]) directories.toArray(new File[directories.size()]));
 		watcher.addListener(listener);
 		watcher.poll();
@@ -274,6 +268,18 @@ public class Activator implements BundleActivator {
 	}
 
 	/*
+	 * Do a look-up and return the OSGi install area if it is set.
+	 */
+	public static URL getOSGiInstallArea() {
+		Location location = (Location) ServiceHelper.getService(Activator.getContext(), Location.class.getName(), Location.INSTALL_FILTER);
+		if (location == null)
+			return null;
+		if (!location.isSet())
+			return null;
+		return location.getURL();
+	}
+
+	/*
 	 * Helper method to return the eclipse.home location. Return
 	 * null if it is unavailable.
 	 */
@@ -287,11 +293,17 @@ public class Activator implements BundleActivator {
 		return URLUtil.toFile(url);
 	}
 
+	/*
+	 * Return the location of the links directory, or null if it is not available.
+	 */
 	private static File getLinksDirectory() {
 		File root = getEclipseHome();
 		return root == null ? null : new File(root, LINKS);
 	}
 
+	/*
+	 * Return the location of the dropins directory, or null if it is not available.
+	 */
 	private static File getDropinsDirectory() {
 		String watchedDirectoryProperty = bundleContext.getProperty(DROPINS_DIRECTORY);
 		if (watchedDirectoryProperty != null)
@@ -300,6 +312,9 @@ public class Activator implements BundleActivator {
 		return root == null ? null : new File(root, DROPINS);
 	}
 
+	/*
+	 * Return the current profile or null if it cannot be retrieved.
+	 */
 	public static IProfile getCurrentProfile(BundleContext context) {
 		ServiceReference reference = context.getServiceReference(IProfileRegistry.class.getName());
 		if (reference == null)
@@ -316,10 +331,12 @@ public class Activator implements BundleActivator {
 		packageAdmin = service;
 	}
 
+	/*
+	 * Return the bundle with the given symbolic name, or null if it cannot be found.
+	 */
 	static synchronized Bundle getBundle(String symbolicName) {
 		if (packageAdmin == null)
 			return null;
-
 		Bundle[] bundles = packageAdmin.getBundles(symbolicName, null);
 		if (bundles == null)
 			return null;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
index b3b7aac..09808c8 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
@@ -14,6 +14,11 @@ import java.io.*;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepository;
+import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -56,8 +61,8 @@ public class DropinsRepositoryListener extends RepositoryListener {
 
 		URL repositoryURL = createRepositoryURL(file);
 		if (repositoryURL != null) {
-			loadMetadataRepository(repositoryURL);
-			loadArtifactRepository(repositoryURL);
+			getMetadataRepository(repositoryURL);
+			getArtifactRepository(repositoryURL);
 		}
 		return true;
 	}
@@ -68,8 +73,8 @@ public class DropinsRepositoryListener extends RepositoryListener {
 
 		URL repositoryURL = createRepositoryURL(file);
 		if (repositoryURL != null) {
-			loadMetadataRepository(repositoryURL);
-			loadArtifactRepository(repositoryURL);
+			getMetadataRepository(repositoryURL);
+			getArtifactRepository(repositoryURL);
 		}
 		return true;
 	}
@@ -108,7 +113,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 			if (file.getName().endsWith(LINK)) {
 				File linkFile = file;
 				String path = getLinkPath(linkFile);
-				// todo log
+				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Unable to determine link location from file: " + file.getAbsolutePath())); //$NON-NLS-1$
 				if (path == null)
 					return null;
 				file = new File(path);
@@ -127,34 +132,34 @@ public class DropinsRepositoryListener extends RepositoryListener {
 			}
 			return repositoryURL;
 		} catch (IOException e) {
-			// todo log			
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error occurred while building repository location.", e)); //$NON-NLS-1$
 		}
 		return null;
 	}
 
-	public void loadMetadataRepository(URL repoURL) {
+	public void getMetadataRepository(URL repoURL) {
 		try {
-			metadataRepositories.add(Activator.loadMetadataRepository(repoURL));
-		} catch (ProvisionException e) {
-			//TODO: log
-			// ignore
+			Map properties = new HashMap();
+			properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			metadataRepositories.add(Activator.getMetadataRepository(repoURL, "dropins metadata repo: " + repoURL.toExternalForm(), ExtensionLocationMetadataRepository.TYPE, properties, true)); //$NON-NLS-1$
+		} catch (ProvisionException ex) {
+			LogHelper.log(ex);
 		}
 	}
 
-	public void loadArtifactRepository(URL repoURL) {
+	public void getArtifactRepository(URL repoURL) {
 		try {
-			artifactRepositories.add(Activator.loadArtifactRepository(repoURL));
-		} catch (ProvisionException e) {
-			//TODO: log
-			// ignore
+			Map properties = new HashMap();
+			properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			artifactRepositories.add(Activator.getArtifactRepository(repoURL, "dropins artifact repo: " + repoURL.toExternalForm(), ExtensionLocationArtifactRepository.TYPE, properties, true)); //$NON-NLS-1$
+		} catch (ProvisionException ex) {
+			LogHelper.log(ex);
 		}
 	}
 
 	public void stopPoll() {
-
 		synchronizeDropinMetadataRepositories();
 		synchronizeDropinArtifactRepositories();
-
 		super.stopPoll();
 	}
 
@@ -185,8 +190,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		try {
 			manager.removeRepository(new URL(urlString));
 		} catch (MalformedURLException e) {
-			// TODO: log
-			// ignore
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error occurred while creating URL from: " + urlString, e)); //$NON-NLS-1$
 		} finally {
 			context.ungetService(reference);
 		}
@@ -219,8 +223,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		try {
 			manager.removeRepository(new URL(urlString));
 		} catch (MalformedURLException e) {
-			//TODO: log
-			// ignore
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error occurred while creating URL from: " + urlString, e)); //$NON-NLS-1$
 		} finally {
 			context.ungetService(reference);
 		}
@@ -230,7 +233,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		List listProperty = new ArrayList();
 		String dropinRepositories = (String) repository.getProperties().get(key);
 		if (dropinRepositories != null) {
-			StringTokenizer tokenizer = new StringTokenizer(dropinRepositories, PIPE); //$NON-NLS-1$			
+			StringTokenizer tokenizer = new StringTokenizer(dropinRepositories, PIPE);
 			while (tokenizer.hasMoreTokens()) {
 				listProperty.add(tokenizer.nextToken());
 			}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
index f090428..5bad4e8 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
@@ -16,13 +16,12 @@ import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepository;
+import org.eclipse.equinox.internal.p2.extensionlocation.*;
 import org.eclipse.equinox.internal.p2.update.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryChangeListener;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.osgi.service.datalocation.Location;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -41,6 +40,18 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 	private long lastModified = -1l;
 	private Set configRepositories;
 
+	private String toString(String[] list) {
+		if (list == null || list.length == 0)
+			return ""; //$NON-NLS-1$
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0; i < list.length; i++) {
+			buffer.append(list[i]);
+			if (list.length < i + 1)
+				buffer.append(',');
+		}
+		return buffer.toString();
+	}
+
 	/*
 	 * Construct a new listener based on the given platform.xml file.
 	 */
@@ -51,18 +62,6 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		this.root = file;
 	}
 
-	/*
-	 * Do a look-up and return the OSGi install area if it is set.
-	 */
-	private static URL getOSGiInstallArea() {
-		Location location = (Location) ServiceHelper.getService(Activator.getContext(), Location.class.getName(), Location.INSTALL_FILTER);
-		if (location == null)
-			return null;
-		if (!location.isSet())
-			return null;
-		return location.getURL();
-	}
-
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.directorywatcher.IDirectoryChangeListener#added(java.io.File)
 	 */
@@ -115,7 +114,7 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		if (changed) {
 			lastModified = root.lastModified();
 			try {
-				Configuration configuration = ConfigurationParser.parse(root, getOSGiInstallArea());
+				Configuration configuration = ConfigurationParser.parse(root, Activator.getOSGiInstallArea());
 				synchronizeConfiguration(configuration);
 			} catch (ProvisionException e) {
 				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, Messages.errorProcessingConfg, e));
@@ -160,11 +159,13 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 			IMetadataRepository match = getMatchingRepo(configRepositories, siteURL);
 			if (match == null) {
 				try {
-					URL repoURL = new URL(siteURL);
-					IMetadataRepository newRepo = new ExtensionLocationMetadataRepository(repoURL, site, null);
-					Activator.addRepository(newRepo);
-					Activator.loadArtifactRepository(repoURL);
-					newRepos.add(newRepo);
+					URL location = new URL(siteURL);
+					Map properties = new HashMap();
+					properties.put(SiteListener.SITE_POLICY, site.getPolicy());
+					properties.put(SiteListener.SITE_LIST, toString(site.getList()));
+					properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+					newRepos.add(Activator.getMetadataRepository(location, "extension location metadata repository: " + location.toExternalForm(), ExtensionLocationMetadataRepository.TYPE, properties, true)); //$NON-NLS-1$
+					Activator.getArtifactRepository(location, "extension location artifact repository:  " + location.toExternalForm(), ExtensionLocationArtifactRepository.TYPE, properties, true); //$NON-NLS-1$
 				} catch (MalformedURLException e) {
 					LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.errorLoadingRepository, siteURL), e));
 				} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
index d22d362..a423b60 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -215,7 +215,7 @@ public class ProfileSynchronizer {
 		for (Iterator it = repositoryMap.keySet().iterator(); it.hasNext();) {
 			String repositoryId = (String) it.next();
 			try {
-				IArtifactRepository repository = Activator.loadArtifactRepository(new URL(repositoryId));
+				IArtifactRepository repository = Activator.getArtifactRepository(new URL(repositoryId), null, null, null, false);
 
 				if (repository instanceof IFileArtifactRepository) {
 					currentExtensions.add(repositoryId);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
index f6ddc69..bce748d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
@@ -15,6 +15,7 @@ import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.core.runtime.FileLocator;
+import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepository;
 import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -50,88 +51,103 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		return new File(FileLocator.toFileURL(fileURL).getPath());
 	}
 
-	public void testNonFileURL() throws MalformedURLException {
-		URL nonFileURL = new URL("http://www.eclipse.org");
+	public void testNonFileURL() {
 		try {
-			factory.load(nonFileURL, null);
+			URL nonFileURL = new URL("http://www.eclipse.org");
+			factory.load(nonFileURL, getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
-		fail();
 	}
 
-	public void testNonExistentFile() throws MalformedURLException {
+	public void testNonExistentFile() {
 		File directory = new File(tempDirectory, "nonexistent");
 		delete(directory);
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
-		fail();
 	}
 
-	public void testNotDirectory() throws IOException {
+	public void testNotDirectory() {
 		File file = new File(tempDirectory, "exists.file");
-		file.createNewFile();
 		try {
-			factory.load(file.toURL(), null);
+			file.createNewFile();
+			factory.load(file.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
+		} catch (IOException e) {
+			fail("0.100", e);
 		}
-		fail();
 	}
 
-	public void testNoFeatureOrPluginsDirectory() throws MalformedURLException {
+	public void testNoFeatureOrPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
-		fail();
 	}
 
-	public void testEmptyFeatureAndPluginsDirectory() throws MalformedURLException {
+	public void testEmptyFeatureAndPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		new File(directory, "plugins").mkdir();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testEmptyFeaturesDirectory() throws MalformedURLException {
+	public void testEmptyFeaturesDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testEmptyPluginsDirectory() throws MalformedURLException {
+	public void testEmptyPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		new File(directory, "plugins").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testEclipseBaseEmptyFeatureAndPluginsDirectory() throws MalformedURLException {
+	public void testEclipseBaseEmptyFeatureAndPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		File eclipseDirectory = new File(directory, "eclipse");
@@ -139,13 +155,16 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testNotEclipseBaseEmptyFeatureAndPluginsDirectory() throws MalformedURLException {
+	public void testNotEclipseBaseEmptyFeatureAndPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		File eclipseDirectory = new File(directory, "noteclipse");
@@ -153,72 +172,98 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
-		fail();
 	}
 
-	public void testNormalFeaturesandPluginsDirectory() throws IOException {
+	public void testNormalFeaturesandPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), directory);
-		IArtifactRepository repo = null;
 		try {
-			repo = factory.load(directory.toURL(), null);
+			URL location = directory.toURL();
+			IArtifactRepository repo = null;
+			try {
+				repo = factory.load(location, getMonitor());
+				fail("2.0");
+			} catch (ProvisionException ex) {
+				repo = factory.create(location, "testNormalFeaturesandPluginsDirectory", ExtensionLocationArtifactRepository.TYPE, null);
+				if (repo.getArtifactKeys().length != 2)
+					fail("2.1");
+			}
 		} catch (ProvisionException e) {
-			fail();
+			fail("3.5");
+		} catch (MalformedURLException e) {
+			fail("3.99", e);
 		}
-		if (repo.getArtifactKeys().length != 2)
-			fail();
 	}
 
-	public void testNormalFeaturesDirectory() throws IOException {
+	public void testNormalFeaturesDirectory() {
 		File directory = new File(tempDirectory, "exists/features");
 		directory.mkdirs();
 		File features = new File(directory, "features");
 		features.mkdir();
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/features"), features);
-		IArtifactRepository repo = null;
 		try {
-			repo = factory.load(directory.toURL(), null);
+			URL location = directory.toURL();
+			IArtifactRepository repo = null;
+			try {
+				repo = factory.load(location, getMonitor());
+				fail("2.0");
+			} catch (ProvisionException ex) {
+				repo = factory.create(location, "testNormalFeaturesDirectory", ExtensionLocationArtifactRepository.TYPE, null);
+				if (repo.getArtifactKeys().length != 1)
+					fail("2.1");
+			}
 		} catch (ProvisionException e) {
-			fail();
+			fail("3.5", e);
+		} catch (MalformedURLException e) {
+			fail("3.99", e);
 		}
-		if (repo.getArtifactKeys().length != 1)
-			fail();
 	}
 
-	public void testNormalPluginsDirectory() throws IOException {
+	public void testNormalPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists/plugins");
 		directory.mkdirs();
 		File plugins = new File(directory, "plugins");
 		plugins.mkdir();
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/plugins"), plugins);
-		IArtifactRepository repo = null;
 		try {
-			repo = factory.load(directory.toURL(), null);
+			URL location = directory.toURL();
+			IArtifactRepository repo = null;
+			try {
+				repo = factory.load(location, getMonitor());
+				fail("2.0");
+			} catch (ProvisionException ex) {
+				repo = factory.create(location, "testNormalFeaturesDirectory", ExtensionLocationArtifactRepository.TYPE, null);
+				if (repo.getArtifactKeys().length != 1)
+					fail("2.1");
+			}
 		} catch (ProvisionException e) {
-			fail();
+			fail("3.5", e);
+		} catch (MalformedURLException e) {
+			fail("3.99", e);
 		}
-		if (repo.getArtifactKeys().length != 1)
-			fail();
 	}
 
-	public void testEclipseBaseNormalFeaturesandPluginsDirectory() throws IOException {
+	public void testEclipseBaseNormalFeaturesandPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		File eclipseDirectory = new File(directory, "eclipse");
-		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), eclipseDirectory);
-		IArtifactRepository repo = null;
+		copy("1.1", getTestData("1.1", "/testData/extensionlocation"), eclipseDirectory);
 		try {
-			repo = factory.load(directory.toURL(), null);
+			IArtifactRepository repo = factory.load(directory.toURL(), getMonitor());
+			if (repo.getArtifactKeys().length != 2)
+				fail("1.0");
 		} catch (ProvisionException e) {
-			fail();
+			fail("0.5", e);
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
-		if (repo.getArtifactKeys().length != 2)
-			fail();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
index 113bd48..01d496b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
@@ -14,6 +14,7 @@ import java.io.File;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
+import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepository;
 import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
@@ -44,88 +45,103 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		factory = new ExtensionLocationMetadataRepositoryFactory();
 	}
 
-	public void testNonFileURL() throws MalformedURLException {
-		URL nonFileURL = new URL("http://www.eclipse.org");
+	public void testNonFileURL() {
 		try {
-			factory.load(nonFileURL, null);
+			URL nonFileURL = new URL("http://www.eclipse.org");
+			factory.load(nonFileURL, getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.3", e);
 		}
-		fail();
 	}
 
-	public void testNonExistentFile() throws MalformedURLException {
+	public void testNonExistentFile() {
 		File directory = new File(tempDirectory, "nonexistent");
 		delete(directory);
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.3", e);
 		}
-		fail();
 	}
 
-	public void testNotDirectory() throws IOException {
+	public void testNotDirectory() {
 		File file = new File(tempDirectory, "exists.file");
-		file.createNewFile();
 		try {
-			factory.load(file.toURL(), null);
+			file.createNewFile();
+			factory.load(file.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.3", e);
+		} catch (IOException e) {
+			fail("0.4", e);
 		}
-		fail();
 	}
 
-	public void testNoFeatureOrPluginsDirectory() throws MalformedURLException {
+	public void testNoFeatureOrPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.3", e);
 		}
-		fail();
 	}
 
-	public void testEmptyFeatureAndPluginsDirectory() throws MalformedURLException {
+	public void testEmptyFeatureAndPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		new File(directory, "plugins").mkdir();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			// expected
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testEmptyFeaturesDirectory() throws MalformedURLException {
+	public void testEmptyFeaturesDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		new File(directory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			// expected
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testEmptyPluginsDirectory() throws MalformedURLException {
+	public void testEmptyPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		new File(directory, "plugins").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			// expected
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testEclipseBaseEmptyFeatureAndPluginsDirectory() throws MalformedURLException {
+	public void testEclipseBaseEmptyFeatureAndPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		File eclipseDirectory = new File(directory, "eclipse");
@@ -133,13 +149,16 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			fail();
+			// expected
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
 	}
 
-	public void testNotEclipseBaseEmptyFeatureAndPluginsDirectory() throws MalformedURLException {
+	public void testNotEclipseBaseEmptyFeatureAndPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		File eclipseDirectory = new File(directory, "noteclipse");
@@ -147,72 +166,98 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "plugins").mkdir();
 		new File(eclipseDirectory, "features").mkdir();
 		try {
-			factory.load(directory.toURL(), null);
+			factory.load(directory.toURL(), getMonitor());
+			fail("0.1");
 		} catch (ProvisionException e) {
-			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-				return;
+			assertEquals("0.2", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+		} catch (MalformedURLException e) {
+			fail("0.99", e);
 		}
-		fail();
 	}
 
-	public void testNormalFeaturesandPluginsDirectory() throws IOException {
+	public void testNormalFeaturesandPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), directory);
-		IMetadataRepository repo = null;
 		try {
-			repo = factory.load(directory.toURL(), null);
+			URL location = directory.toURL();
+			IMetadataRepository repo = null;
+			try {
+				repo = factory.load(location, getMonitor());
+				fail("2.0");
+			} catch (ProvisionException ex) {
+				repo = factory.create(location, "testNormalFeaturesandPluginsDirectory", ExtensionLocationMetadataRepository.TYPE, null);
+				if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 3)
+					fail("2.99");
+			}
 		} catch (ProvisionException e) {
-			fail();
+			fail("3.99");
+		} catch (MalformedURLException e) {
+			fail("4.99", e);
 		}
-		if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 3)
-			fail();
 	}
 
-	public void testNormalFeaturesDirectory() throws IOException {
+	public void testNormalFeaturesDirectory() {
 		File directory = new File(tempDirectory, "exists/features");
 		directory.mkdirs();
 		File features = new File(directory, "features");
 		features.mkdir();
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/features"), features);
-		IMetadataRepository repo = null;
 		try {
-			repo = factory.load(directory.toURL(), null);
+			URL location = directory.toURL();
+			IMetadataRepository repo = null;
+			try {
+				repo = factory.load(location, getMonitor());
+				fail("2.0");
+			} catch (ProvisionException ex) {
+				repo = factory.create(location, "testNormalFeaturesDirectory", ExtensionLocationMetadataRepository.TYPE, null);
+				if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 2)
+					fail("3.0");
+			}
 		} catch (ProvisionException e) {
-			fail();
+			fail("4.0");
+		} catch (MalformedURLException e) {
+			fail("4.99", e);
 		}
-		if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 2)
-			fail();
 	}
 
-	public void testNormalPluginsDirectory() throws IOException {
+	public void testNormalPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists/plugins");
 		directory.mkdirs();
 		File plugins = new File(directory, "plugins");
 		plugins.mkdir();
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/plugins"), plugins);
-		IMetadataRepository repo = null;
 		try {
-			repo = factory.load(directory.toURL(), null);
+			URL location = directory.toURL();
+			IMetadataRepository repo = null;
+			try {
+				repo = factory.load(location, getMonitor());
+				fail("2.0");
+			} catch (ProvisionException ex) {
+				repo = factory.create(location, "testNormalPluginsDirectory", ExtensionLocationMetadataRepository.TYPE, null);
+				if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 1)
+					fail("3.0");
+			}
 		} catch (ProvisionException e) {
-			fail();
+			fail("4.0");
+		} catch (MalformedURLException e) {
+			fail("4.99", e);
 		}
-		if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 1)
-			fail();
 	}
 
-	public void testEclipseBaseNormalFeaturesandPluginsDirectory() throws IOException {
+	public void testEclipseBaseNormalFeaturesandPluginsDirectory() {
 		File directory = new File(tempDirectory, "exists");
 		directory.mkdirs();
 		File eclipseDirectory = new File(directory, "eclipse");
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), eclipseDirectory);
-		IMetadataRepository repo = null;
 		try {
-			repo = factory.load(directory.toURL(), null);
+			IMetadataRepository repo = factory.load(directory.toURL(), getMonitor());
+			if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 3)
+				fail("3.0");
 		} catch (ProvisionException e) {
-			fail();
+			fail("2.0");
+		} catch (MalformedURLException e) {
+			fail("2.99", e);
 		}
-		if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 3)
-			fail();
 	}
 }

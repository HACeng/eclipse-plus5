commit 251c03de2a05677ca921d28bd94aa656b2461001
Author: Susan Franklin <sfranklin>
Date:   Tue Mar 3 21:57:53 2009 +0000

    Bug 263593 - [ui] "Install New Software" should open immediately

2	3	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
1	1	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AnyRequiredCapabilityTest.java
1	1	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
9	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/InstallNewSoftwareHandler.java
23	11	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/PreloadingRepositoryHandler.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
47	17	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
10	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
32	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementContentProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
index e796e93..51b304c 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
@@ -40,12 +40,11 @@ public class InstallWizardTest extends AbstractProvisioningUITest {
 	 * Tests the wizard
 	 */
 	public void testWizard() {
-		QueryableMetadataRepositoryManager manager = new QueryableMetadataRepositoryManager(Policy.getDefault(), false);
-		manager.loadAll(getMonitor());
-
 		Policy policy = Policy.getDefault();
 		IUViewQueryContext context = policy.getQueryContext();
 		context.setViewType(IUViewQueryContext.AVAILABLE_VIEW_FLAT);
+		QueryableMetadataRepositoryManager manager = new QueryableMetadataRepositoryManager(context, false);
+		manager.loadAll(getMonitor());
 		InstallWizard wizard = new InstallWizard(policy, TESTPROFILE, null, null, manager);
 		WizardDialog dialog = new WizardDialog(ProvUI.getDefaultParentShell(), wizard);
 
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AnyRequiredCapabilityTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AnyRequiredCapabilityTest.java
index 20e5264..e0d6ee1 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AnyRequiredCapabilityTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AnyRequiredCapabilityTest.java
@@ -51,7 +51,7 @@ public class AnyRequiredCapabilityTest extends AbstractQueryTest {
 		}
 		IMetadataRepositoryManager metadataRepositoryManager = getMetadataRepositoryManager();
 		metadataRepositoryManager.addRepository(location);
-		QueryableMetadataRepositoryManager manager = new QueryableMetadataRepositoryManager(Policy.getDefault(), false);
+		QueryableMetadataRepositoryManager manager = new QueryableMetadataRepositoryManager(Policy.getDefault().getQueryContext(), false);
 		IRequiredCapability[] requires = createRequiredCapabilities("org.eclipse.equinox.p2.iu", "test.bundle", null);
 		AnyRequiredCapabilityQuery query = new AnyRequiredCapabilityQuery(requires);
 		Collector result = manager.query(query, new Collector(), getMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
index 50d023e..b1765a8 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
@@ -177,6 +177,6 @@ public class QueryableMetadataRepositoryManagerTest extends AbstractQueryTest {
 	}
 
 	private QueryableMetadataRepositoryManager getQueryableManager() {
-		return new QueryableMetadataRepositoryManager(Policy.getDefault(), false);
+		return new QueryableMetadataRepositoryManager(Policy.getDefault().getQueryContext(), false);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/InstallNewSoftwareHandler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/InstallNewSoftwareHandler.java
index a166d13..001cc80 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/InstallNewSoftwareHandler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/InstallNewSoftwareHandler.java
@@ -39,4 +39,13 @@ public class InstallNewSoftwareHandler extends PreloadingRepositoryHandler {
 
 		dialog.open();
 	}
+
+	protected boolean waitForPreload() {
+		// If there is no way for the user to manipulate repositories,
+		// then we may as well wait for existing repos to load so that
+		// content is available.  If the user can manipulate the
+		// repositories, then we don't wait, because we don't know which
+		// ones they want to work with.
+		return Policy.getDefault().getRepositoryManipulator() == null;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/PreloadingRepositoryHandler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/PreloadingRepositoryHandler.java
index 57fd1e8..6c6a195 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/PreloadingRepositoryHandler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/PreloadingRepositoryHandler.java
@@ -59,18 +59,20 @@ abstract class PreloadingRepositoryHandler extends AbstractHandler {
 	}
 
 	void doExecuteAndLoad(final String profileId, boolean preloadRepositories) {
-		final QueryableMetadataRepositoryManager queryableManager = new QueryableMetadataRepositoryManager(Policy.getDefault(), false);
+		if (loadJob != null)
+			loadJob.cancel();
+		loadJob = null;
+		final QueryableMetadataRepositoryManager queryableManager = new QueryableMetadataRepositoryManager(Policy.getDefault().getQueryContext(), false);
 		if (preloadRepositories) {
-			if (loadJob == null) {
+			loadJob = new Job(ProvSDKMessages.InstallNewSoftwareHandler_LoadRepositoryJobLabel) {
 
-				loadJob = new Job(ProvSDKMessages.InstallNewSoftwareHandler_LoadRepositoryJobLabel) {
-
-					protected IStatus run(IProgressMonitor monitor) {
-						queryableManager.loadAll(monitor);
-						return Status.OK_STATUS;
-					}
+				protected IStatus run(IProgressMonitor monitor) {
+					queryableManager.loadAll(monitor);
+					return Status.OK_STATUS;
+				}
 
-				};
+			};
+			if (waitForPreload()) {
 				loadJob.addJobChangeListener(new JobChangeAdapter() {
 					public void done(IJobChangeEvent event) {
 						loadJob = null;
@@ -86,10 +88,16 @@ abstract class PreloadingRepositoryHandler extends AbstractHandler {
 				});
 				loadJob.setUser(true);
 				loadJob.schedule();
+
+			} else {
+				loadJob.setSystem(true);
+				loadJob.setUser(false);
+				loadJob.schedule();
+				doExecute(profileId, queryableManager);
 			}
-			return;
+		} else {
+			doExecute(profileId, queryableManager);
 		}
-		doExecute(profileId, queryableManager);
 	}
 
 	protected abstract void doExecute(String profileId, QueryableMetadataRepositoryManager manager);
@@ -98,6 +106,10 @@ abstract class PreloadingRepositoryHandler extends AbstractHandler {
 		return true;
 	}
 
+	protected boolean waitForPreload() {
+		return true;
+	}
+
 	/**
 	 * Return a shell appropriate for parenting dialogs of this handler.
 	 * @return a Shell
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
index 048e42c..812e9fd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
@@ -59,7 +59,7 @@ public class DefaultQueryProvider extends QueryProvider {
 		}
 		switch (queryType) {
 			case QueryProvider.ARTIFACT_REPOS :
-				queryable = new QueryableArtifactRepositoryManager(policy, false);
+				queryable = new QueryableArtifactRepositoryManager(context, false);
 				return new ElementQueryDescriptor(queryable, new RepositoryLocationQuery(), new Collector() {
 					public boolean accept(Object object) {
 						if (object instanceof URI)
@@ -165,7 +165,7 @@ public class DefaultQueryProvider extends QueryProvider {
 			case QueryProvider.METADATA_REPOS :
 				if (element instanceof MetadataRepositories) {
 					if (queryable == null) {
-						queryable = new QueryableMetadataRepositoryManager(policy, ((MetadataRepositories) element).getIncludeDisabledRepositories());
+						queryable = new QueryableMetadataRepositoryManager(context, ((MetadataRepositories) element).getIncludeDisabledRepositories());
 						element.setQueryable(queryable);
 					}
 					return new ElementQueryDescriptor(element.getQueryable(), new RepositoryLocationQuery(), new MetadataRepositoryElementCollector(element.getQueryable(), element));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 5cf1f27..d030133 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -167,6 +167,8 @@ public class ProvUIMessages extends NLS {
 	public static String AvailableIUsPage_GotoProperties;
 	public static String AvailableIUsPage_GroupByCategory;
 	public static String AvailableIUsPage_HideInstalledItems;
+	public static String AvailableIUsPage_LocalSites;
+	public static String AvailableIUsPage_NoSites;
 	public static String AvailableIUsPage_RepoFilterInstructions;
 	public static String AvailableIUsPage_RepoFilterLabel;
 	public static String AvailableIUsPage_ShowLatestVersions;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index e283b7e..2e74a05 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -18,13 +18,13 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AddRepositoryDialog;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AvailableIUGroup;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.AddRepositoryOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.Action;
@@ -52,8 +52,11 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 	private static final String HIDE_INSTALLED_IUS = "HideInstalledContent"; //$NON-NLS-1$
 	private static final String LINKACTION = "linkAction"; //$NON-NLS-1$
 	private static final int DEFAULT_WIDTH = 300;
-	private static final String ALL = ProvUIMessages.AvailableIUsPage_AllSites;
-	private static final int INDEX_ALL = 0;
+	private static final String SITE_NONE = ProvUIMessages.AvailableIUsPage_NoSites;
+	private static final int INDEX_SITE_NONE = 0;
+	private static final String SITE_ALL = ProvUIMessages.AvailableIUsPage_AllSites;
+	private static final int INDEX_SITE_ALL = 1;
+	private static final String SITE_LOCAL = ProvUIMessages.AvailableIUsPage_LocalSites;
 	private static final int DEC_MARGIN_WIDTH = 2;
 
 	String profileId;
@@ -384,14 +387,18 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		if (initialSelections != null)
 			availableIUGroup.setChecked(initialSelections);
 
+		// Focus should go on site combo unless it's not there.  In that case, go to the filter text.
 		Control focusControl = null;
-		focusControl = availableIUGroup.getDefaultFocusControl();
+		if (repoCombo != null)
+			focusControl = repoCombo;
+		else
+			focusControl = availableIUGroup.getDefaultFocusControl();
 		if (focusControl != null)
 			focusControl.setFocus();
 		updateDetails();
 		iuDetailsGroup.enablePropertyLink(availableIUGroup.getSelectedIUElements().length == 1);
 		validateNextButton();
-		fillRepoCombo(ALL);
+		fillRepoCombo(SITE_NONE);
 		setRepoComboDecoration(null);
 	}
 
@@ -602,10 +609,20 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		if (repoCombo == null || policy.getRepositoryManipulator() == null)
 			return;
 		comboRepos = policy.getRepositoryManipulator().getKnownRepositories();
-		final String[] items = new String[comboRepos.length + 1];
-		items[INDEX_ALL] = ALL;
+		boolean hasLocalSites = localSitesAvailable();
+		final String[] items;
+		if (hasLocalSites)
+			// None, All, repo1, repo2....repo n, Local
+			items = new String[comboRepos.length + 3];
+		else
+			// None, All, repo1, repo2....repo n
+			items = new String[comboRepos.length + 2];
+		items[INDEX_SITE_NONE] = SITE_NONE;
+		items[INDEX_SITE_ALL] = SITE_ALL;
 		for (int i = 0; i < comboRepos.length; i++)
-			items[i + 1] = comboRepos[i].toString();
+			items[i + 2] = comboRepos[i].toString();
+		if (hasLocalSites)
+			items[items.length - 1] = SITE_LOCAL;
 		display.asyncExec(new Runnable() {
 			public void run() {
 				if (repoCombo == null || repoCombo.isDisposed())
@@ -620,13 +637,23 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 						break;
 					}
 				if (!selected)
-					repoCombo.select(INDEX_ALL);
+					repoCombo.select(INDEX_SITE_NONE);
 				repoComboSelectionChanged();
 			}
 		});
 
 	}
 
+	private boolean localSitesAvailable() {
+		// use our current visibility flags plus the local filter
+		int flags = queryContext.getMetadataRepositoryFlags() | IRepositoryManager.REPOSITORIES_LOCAL;
+		try {
+			return ProvisioningUtil.getMetadataRepositories(flags).length > 0;
+		} catch (ProvisionException e) {
+			return false;
+		}
+	}
+
 	int getComboIndex(String repoText) {
 		int index = -1;
 		if (repoText.length() > 0) {
@@ -642,13 +669,16 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 
 	void repoComboSelectionChanged() {
 		int selection = repoCombo.getSelectionIndex();
-		if (comboRepos == null || selection > comboRepos.length)
-			selection = INDEX_ALL;
-
-		if (selection == INDEX_ALL) {
-			availableIUGroup.setRepositoryFilter(null);
-		} else if (selection > 0) {
-			availableIUGroup.setRepositoryFilter(comboRepos[selection - 1]);
+		if (comboRepos == null || selection < 0)
+			selection = INDEX_SITE_NONE;
+		if (selection == INDEX_SITE_NONE) {
+			availableIUGroup.setRepositoryFilter(AvailableIUGroup.AVAILABLE_NONE, null);
+		} else if (selection == INDEX_SITE_ALL) {
+			availableIUGroup.setRepositoryFilter(AvailableIUGroup.AVAILABLE_ALL, null);
+		} else if (selection - 2 >= comboRepos.length) {
+			availableIUGroup.setRepositoryFilter(AvailableIUGroup.AVAILABLE_LOCAL, null);
+		} else {
+			availableIUGroup.setRepositoryFilter(AvailableIUGroup.AVAILABLE_SPECIFIED, comboRepos[selection - 2]);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 79d2239..f85015a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -202,6 +202,8 @@ AvailableIUsPage_GotoInstallInfo=What is <a>already installed</a>?
 AvailableIUsPage_GotoProperties=<a>More...</a>
 AvailableIUsPage_GroupByCategory=&Group items by category
 AvailableIUsPage_HideInstalledItems=&Hide items that are already installed
+AvailableIUsPage_LocalSites=Only Local Sites
+AvailableIUsPage_NoSites=type or select a site
 AvailableIUsPage_RepoFilterInstructions=You can type a new site name and press 'Enter' to view software from that site.
 AvailableIUsPage_RepoFilterLabel=&Work with:
 AvailableIUsPage_ShowLatestVersions=Show only the &latest versions of available software
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
index f6bd25a..112888a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
@@ -22,19 +22,19 @@ import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 
 /**
  * An object that adds provides queryable support 
- * for an artifact repository manager.  The policy determines which 
+ * for an artifact repository manager.  The query context determines which 
  * repositories are included in the query.  Since artifact repositories
  * do not support queries, the query will be performed over the repository
  * locations.
  */
 public class QueryableArtifactRepositoryManager extends QueryableRepositoryManager {
 
-	public QueryableArtifactRepositoryManager(Policy policy, boolean includeDisabledRepos) {
-		super(policy, includeDisabledRepos);
+	public QueryableArtifactRepositoryManager(IUViewQueryContext queryContext, boolean includeDisabledRepos) {
+		super(queryContext, includeDisabledRepos);
 	}
 
 	protected IRepositoryManager getRepositoryManager() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
index fc68ee4..74b79dc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
@@ -24,22 +24,22 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
  * An object that adds provides specialized/optimized queryable support 
- * for a metadata repository.  The policy determines which repositories are included in 
- * the query.  Callers interested in only the resulting repository URIs
+ * for a metadata repository.  The query context determines which repositories 
+ * are included in the query.  Callers interested in only the resulting repository URIs
  * should specify a {@link RepositoryLocationQuery}, in which case the 
  * query is performed over the URI's.  Otherwise the query is performed over
  * the repositories themselves.
  */
 public class QueryableMetadataRepositoryManager extends QueryableRepositoryManager {
 
-	public QueryableMetadataRepositoryManager(Policy policy, boolean includeDisabledRepos) {
-		super(policy, includeDisabledRepos);
+	public QueryableMetadataRepositoryManager(IUViewQueryContext queryContext, boolean includeDisabledRepos) {
+		super(queryContext, includeDisabledRepos);
 	}
 
 	protected IRepository getRepository(IRepositoryManager manager, URI location) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
index b0dc105..2ebf9a7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
@@ -19,7 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.ui.statushandlers.StatusManager;
 
@@ -45,11 +45,12 @@ public abstract class QueryableRepositoryManager implements IQueryable {
 
 	private MultiStatus accumulatedNotFound = null;
 	private boolean includeDisabledRepos;
-	private Policy policy;
+	private IUViewQueryContext queryContext;
 
-	public QueryableRepositoryManager(Policy policy, boolean includeDisabledRepos) {
+	public QueryableRepositoryManager(IUViewQueryContext queryContext, boolean includeDisabledRepos) {
 		this.includeDisabledRepos = includeDisabledRepos;
-		this.policy = policy;
+		Assert.isNotNull(queryContext);
+		this.queryContext = queryContext;
 	}
 
 	/**
@@ -126,7 +127,7 @@ public abstract class QueryableRepositoryManager implements IQueryable {
 	 */
 	private Collection getRepoLocations(IRepositoryManager manager) {
 		Set locations = new HashSet();
-		int flags = policy.getQueryContext().getMetadataRepositoryFlags();
+		int flags = queryContext.getMetadataRepositoryFlags();
 		locations.addAll(Arrays.asList(manager.getKnownRepositories(flags)));
 		if (includeDisabledRepos) {
 			locations.addAll(Arrays.asList(manager.getKnownRepositories(IRepositoryManager.REPOSITORIES_DISABLED | flags)));
@@ -242,4 +243,8 @@ public abstract class QueryableRepositoryManager implements IQueryable {
 
 	protected abstract Collector query(URI uri, Query query, Collector collector, IProgressMonitor monitor);
 
+	public void setQueryContext(IUViewQueryContext queryContext) {
+		this.queryContext = queryContext;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index 1afb4fe..21dc7b2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -132,7 +132,7 @@ public class InstallAction extends ProfileModificationAction {
 	}
 
 	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
-		InstallWizard wizard = new InstallWizard(getPolicy(), targetProfileId, ius, resolution, new QueryableMetadataRepositoryManager(getPolicy(), false));
+		InstallWizard wizard = new InstallWizard(getPolicy(), targetProfileId, ius, resolution, new QueryableMetadataRepositoryManager(getPolicy().getQueryContext(), false));
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.INSTALL_WIZARD);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 2f9ed49..a5a381a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.p2.ui.model.MetadataRepositoryElement;
 import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryContentProvider;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
@@ -52,9 +53,15 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	private static final int SITE_COLUMN_WIDTH_IN_DLUS = 300;
 	private static final int OTHER_COLUMN_WIDTH_IN_DLUS = 350;
 
+	public static final int AVAILABLE_ALL = 1;
+	public static final int AVAILABLE_NONE = 2;
+	public static final int AVAILABLE_LOCAL = 3;
+	public static final int AVAILABLE_SPECIFIED = 4;
+
 	QueryableMetadataRepositoryManager queryableManager;
 
 	IUViewQueryContext queryContext;
+	int filterConstant = AVAILABLE_ALL;
 	URI repositoryFilter;
 	// We restrict the type of the filter used because PatternFilter does
 	// unnecessary accesses of children that cause problems with the deferred
@@ -93,14 +100,14 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	public AvailableIUGroup(Policy policy, final Composite parent, Font font, QueryableMetadataRepositoryManager queryable, IUViewQueryContext queryContext, IUColumnConfig[] columnConfig) {
 		super(policy, parent, font, columnConfig);
 		this.display = parent.getDisplay();
-		if (queryable == null)
-			this.queryableManager = new QueryableMetadataRepositoryManager(policy, false);
-		else
-			this.queryableManager = queryable;
 		if (queryContext == null)
 			this.queryContext = policy.getQueryContext();
 		else
 			this.queryContext = queryContext;
+		if (queryable == null)
+			this.queryableManager = new QueryableMetadataRepositoryManager(this.queryContext, false);
+		else
+			this.queryableManager = queryable;
 		this.filter = new AvailableIUPatternFilter(getColumnConfig());
 		createGroupComposite(parent);
 	}
@@ -198,8 +205,12 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	Object getNewInput() {
 		if (repositoryFilter != null) {
 			return new MetadataRepositoryElement(queryContext, getPolicy(), repositoryFilter, true);
+		} else if (filterConstant == AVAILABLE_NONE)
+			return new Object();
+		else {
+			queryableManager.setQueryContext(queryContext);
+			return new MetadataRepositories(queryContext, getPolicy(), queryableManager);
 		}
-		return new MetadataRepositories(queryContext, getPolicy(), queryableManager);
 	}
 
 	/**
@@ -395,8 +406,22 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		checkViewer.fireCheckStateChanged(element, true);
 	}
 
-	public void setRepositoryFilter(URI repoLocation) {
-		repositoryFilter = repoLocation;
+	public void setRepositoryFilter(int filterFlag, URI repoLocation) {
+		filterConstant = filterFlag;
+
+		switch (filterFlag) {
+			case AVAILABLE_ALL :
+			case AVAILABLE_NONE :
+				repositoryFilter = null;
+				queryContext.setMetadataRepositoryFlags(queryContext.getMetadataRepositoryFlags() & ~IRepositoryManager.REPOSITORIES_LOCAL);
+				break;
+			case AVAILABLE_LOCAL :
+				repositoryFilter = null;
+				queryContext.setMetadataRepositoryFlags(queryContext.getMetadataRepositoryFlags() | IRepositoryManager.REPOSITORIES_LOCAL);
+				break;
+			default :
+				repositoryFilter = repoLocation;
+		}
 		updateAvailableViewState();
 		filteredTree.clearCheckStateCache();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
index 8129f99..ddf5f98 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
@@ -37,7 +37,7 @@ public class InstallWizard extends WizardWithLicenses {
 	}
 
 	public InstallWizard(Policy policy, String profileId) {
-		this(policy, profileId, null, null, new QueryableMetadataRepositoryManager(policy, false));
+		this(policy, profileId, null, null, new QueryableMetadataRepositoryManager(policy.getQueryContext(), false));
 	}
 
 	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementContentProvider.java
index 6ab1397..613a08a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementContentProvider.java
@@ -38,7 +38,7 @@ public class ProvElementContentProvider implements ITreeContentProvider {
 		if (input instanceof ProvElement) {
 			return getChildren(input);
 		}
-		return null;
+		return new Object[0];
 	}
 
 	/*
@@ -70,7 +70,7 @@ public class ProvElementContentProvider implements ITreeContentProvider {
 		if (parent instanceof ProvElement) {
 			return ((ProvElement) parent).getChildren(parent);
 		}
-		return null;
+		return new Object[0];
 	}
 
 	/* (non-Javadoc)

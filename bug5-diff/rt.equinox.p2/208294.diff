commit f51e4df59f5a943a13a1f6d9c33971927ef3865b
Author: Susan Franklin <sfranklin>
Date:   Wed Jan 30 19:42:24 2008 +0000

    Bug 208294 - [prov] [ui] summary info in the update/install wizards

1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
1	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
1	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
1	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
11	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/actions/ProfileModificationAction.java
6	31	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
107	28	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
6	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
6	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
17	10	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
5	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
6	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
9	15	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
6	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
5	14	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUGeneralInfoPropertyPage.java
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallWizard.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java
5	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallWizard.java
9	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
0	35	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 85d8dad..584ad27 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -235,7 +235,7 @@ public class ProfilesView extends ProvView {
 		return list;
 	}
 
-	private String[] getKnownProfileIds() {
+	String[] getKnownProfileIds() {
 		try {
 			Profile[] allProfiles = ProvisioningUtil.getProfiles();
 			String[] ids = new String[allProfiles.length];
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index 8a6fa61..3071b50 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -107,6 +107,7 @@ public class ProvSDKMessages extends NLS {
 	public static String ProvisioningPreferencePage_enableGC;
 	public static String ProvisioningPreferencePage_gcImmediately;
 	public static String ProvisioningPreferencePage_gcRetentionTime;
+	public static String ProvSDKUIActivator_ErrorWritingLicenseRegistry;
 	public static String ProvSDKUIActivator_LicenseManagerReadError;
 	public static String ProvSDKUIActivator_NoSelfProfile;
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index 4e02bdd..4d63870 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -105,7 +105,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 			getLicenseManager().write(stream);
 			stream.close();
 		} catch (IOException e) {
-			ProvUI.reportStatus(new Status(IStatus.ERROR, PLUGIN_ID, 0, "Error writing license registry.  Accepted licenses will not be remembered.", e));
+			ProvUI.reportStatus(new Status(IStatus.ERROR, PLUGIN_ID, 0, ProvSDKMessages.ProvSDKUIActivator_ErrorWritingLicenseRegistry, e));
 		}
 	}
 
@@ -133,7 +133,6 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 	 * left to the client, who must check for a null return.
 	 */
 	public static String getProfileId() throws ProvisionException {
-		String profileId = null;
 		// Get the profile of the running system.
 		Profile profile = ProvisioningUtil.getProfile(IProfileRegistry.SELF);
 		if (profile == null) {
@@ -142,7 +141,6 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 			if (profiles.length > 0)
 				return profiles[0].getProfileId();
 			return ProfileFactory.makeProfile(DEFAULT_PROFILE_ID).getProfileId();
-
 		}
 		return profile.getProfileId();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index ba16742..679e9d9 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -84,6 +84,7 @@ AutomaticUpdatesPreferencePage_RemindGroup=&When updates are found
 AutomaticUpdatesPreferencePage_RemindSchedule=&Remind me about updates every:
 AutomaticUpdatesPreferencePage_RemindOnce=Notify me &once about updates
 AutomaticUpdatesJob_Updates=Updates
+ProvSDKUIActivator_ErrorWritingLicenseRegistry=Error writing license registry.  Accepted licenses will not be remembered.
 ProvSDKUIActivator_LicenseManagerReadError=Error reading license registry.  Accepted licenses will not be remembered.
 ProvSDKUIActivator_NoSelfProfile=Could not locate the running profile instance
 ProvisioningPreferencePage_BrowsingPrefsGroup=Browsing for updates
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 0bcd3fe..21978d8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -53,7 +53,10 @@ public class ProvUIMessages extends NLS {
 	public static String IUGeneralInfoPropertyPage_VersionLabel;
 	public static String IULicensePropertyPage_NoLicense;
 	public static String ProfileElement_InvalidProfile;
+	public static String ProfileModificationWizardPage_DetailsLabel;
+	public static String ProfileModificationWizardPage_NothingSelected;
 	public static String ProfileModificationWizardPage_ProfileNotFound;
+	public static String ProfileModificationWizardPage_UnexpectedError;
 	// utility error messages
 	public static String ProvisioningUtil_NoRepositoryManager;
 	public static String ProvisioningUtil_AddRepositoryFailure;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/actions/ProfileModificationAction.java
index cff020a..388355e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/actions/ProfileModificationAction.java
@@ -15,7 +15,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.List;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
@@ -58,11 +58,11 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 		}
 
 		final IInstallableUnit[] ius = (IInstallableUnit[]) iusList.toArray(new IInstallableUnit[iusList.size()]);
-		final IStatus[] status = new IStatus[1];
+		final ProvisioningPlan[] plan = new ProvisioningPlan[1];
 		final String id = targetProfileId;
 		IRunnableWithProgress runnable = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) {
-				status[0] = validateOperation(ius, id, monitor);
+				plan[0] = getProvisioningPlan(ius, id, monitor);
 			}
 		};
 		try {
@@ -73,22 +73,20 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 			ProvUI.handleException(e.getCause(), null);
 		}
 
-		if (status[0].isOK())
-			performOperation(ius, id);
-		else
-			ProvUI.reportStatus(status[0]);
+		if (plan[0] != null)
+			if (plan[0].getStatus().isOK())
+				performOperation(ius, id, plan[0]);
+			else
+				ProvUI.reportStatus(plan[0].getStatus());
 
 	}
 
 	/*
-	 * Validate whether the proposed profile modification operation can run.
+	 * Get a provisioning plan for this action.
 	 */
-	protected abstract IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor);
+	protected abstract ProvisioningPlan getProvisioningPlan(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor);
 
-	/*
-	 * Run the operation, opening any dialogs, etc. 
-	 */
-	protected abstract void performOperation(IInstallableUnit[] ius, String targetProfileId);
+	protected abstract void performOperation(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan);
 
 	protected abstract String getTaskName();
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
index c304de4..cc5058f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
@@ -10,49 +10,28 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.engine.phases.Sizing;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.model.IUElement;
-import org.eclipse.equinox.p2.ui.operations.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
 public class InstallWizardPage extends UpdateOrInstallWizardPage {
 
-	public InstallWizardPage(IInstallableUnit[] ius, String profileId, UpdateOrInstallWizard wizard) {
-		super("InstallWizardPage", ius, profileId, wizard); //$NON-NLS-1$
+	public InstallWizardPage(IInstallableUnit[] ius, String profileId, ProvisioningPlan plan, UpdateOrInstallWizard wizard) {
+		super("InstallWizardPage", ius, profileId, plan, wizard); //$NON-NLS-1$
 		setTitle(ProvUIMessages.InstallIUOperationLabel);
 		setDescription(ProvUIMessages.InstallDialog_InstallSelectionMessage);
 	}
 
-	protected long getSize(IInstallableUnit iu, IProgressMonitor monitor) {
-		long size;
-		SubMonitor sub = SubMonitor.convert(monitor);
-		sub.setWorkRemaining(100);
-		try {
-			ProfileChangeRequest changeRequest = ProfileChangeRequest.createByProfileId(getProfileId());
-			changeRequest.addInstallableUnits(new IInstallableUnit[] {iu});
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, getProvisioningContext(), sub.newChild(50));
-			Sizing info = ProvisioningUtil.getSizeInfo(plan, getProfileId(), sub.newChild(50));
-			if (info == null)
-				size = IUElement.SIZE_UNKNOWN;
-			else
-				size = info.getDiskSize();
-		} catch (ProvisionException e) {
-			size = IUElement.SIZE_UNKNOWN;
-		}
-		return size;
-	}
-
 	protected String getOperationLabel() {
 		return ProvUIMessages.InstallIUOperationLabel;
 	}
 
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
+	protected ProvisioningPlan computeProvisioningPlan(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
 			IInstallableUnit[] selected = elementsToIUs(selectedElements);
 			ProfileChangeRequest changeRequest = ProfileChangeRequest.createByProfileId(getProfileId());
@@ -60,11 +39,7 @@ public class InstallWizardPage extends UpdateOrInstallWizardPage {
 			for (int i = 0; i < selected.length; i++) {
 				changeRequest.setInstallableUnitProfileProperty(selected[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 			}
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, getProvisioningContext(), monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK())
-				return new InstallOperation(getOperationLabel(), getProfile().getProfileId(), plan, selected);
-			ProvUI.reportStatus(status);
+			return ProvisioningUtil.getProvisioningPlan(changeRequest, getProvisioningContext(), monitor);
 		} catch (ProvisionException e) {
 			ProvUI.handleException(e, null);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index bf94ca8..836598d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -14,12 +14,14 @@ import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.List;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningContext;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
@@ -29,6 +31,7 @@ import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
 import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IMessageProvider;
 import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.wizard.WizardPage;
@@ -40,17 +43,21 @@ import org.eclipse.swt.widgets.*;
 public abstract class ProfileModificationWizardPage extends WizardPage {
 	private static final int DEFAULT_HEIGHT = 20;
 	private static final int DEFAULT_WIDTH = 120;
+	private static final int DEFAULT_DESCRIPTION_HEIGHT = 3;
 	private static final int DEFAULT_COLUMN_WIDTH = 50;
 	private static final int DEFAULT_SMALL_COLUMN_WIDTH = 20;
 	private IInstallableUnit[] ius;
+	ProvisioningPlan currentPlan;
 	private String profileId;
 	CheckboxTableViewer listViewer;
+	Text detailsArea;
 	StaticContentProvider contentProvider;
 
-	protected ProfileModificationWizardPage(String id, IInstallableUnit[] ius, String profileID) {
+	protected ProfileModificationWizardPage(String id, IInstallableUnit[] ius, String profileID, ProvisioningPlan initialPlan) {
 		super(id);
 		this.ius = ius;
 		this.profileId = profileID;
+		this.currentPlan = initialPlan;
 	}
 
 	public void createControl(Composite parent) {
@@ -63,6 +70,8 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		composite.setLayoutData(data);
 		initializeDialogUnits(composite);
 
+		// The viewer allows selection of IU's for browsing the details,
+		// and checking to include in the provisioning operation.
 		listViewer = CheckboxTableViewer.newCheckList(composite, SWT.BORDER | SWT.FULL_SELECTION);
 		data = new GridData(GridData.FILL_BOTH);
 		data.heightHint = convertHeightInCharsToPixels(DEFAULT_HEIGHT);
@@ -86,15 +95,36 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 
 		listViewer.addCheckStateListener(new ICheckStateListener() {
 			public void checkStateChanged(CheckStateChangedEvent event) {
-				selectedIUsChanged();
+				checkedIUsChanged();
+			}
+		});
+
+		listViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				updateDetailsArea(detailsArea, getSelectedIU());
 			}
 		});
 		contentProvider = new StaticContentProvider(list.toArray());
 		listViewer.setContentProvider(contentProvider);
 		listViewer.setInput(new Object());
 		listViewer.setLabelProvider(new IUDetailsLabelProvider(getColumnConfig(), getShell()));
-		setInitialSelections();
-		selectedIUsChanged();
+		setInitialCheckState();
+		// If the initial provisioning plan was already calculated,
+		// no need to repeat it until the user changes selections
+		if (currentPlan == null)
+			checkedIUsChanged();
+
+		// The text area shows a description of the selected IU.
+		Group group = new Group(composite, SWT.NONE);
+		group.setText(ProvUIMessages.ProfileModificationWizardPage_DetailsLabel);
+		group.setLayout(new GridLayout());
+		group.setLayoutData(new GridData(GridData.FILL_BOTH));
+		detailsArea = new Text(group, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY | SWT.WRAP);
+		data = new GridData(GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
+		data.heightHint = convertHeightInCharsToPixels(DEFAULT_DESCRIPTION_HEIGHT);
+		detailsArea.setLayoutData(data);
+
+		updateDetailsArea(detailsArea, getSelectedIU());
 		setControl(composite);
 		Dialog.applyDialogFont(composite);
 	}
@@ -106,28 +136,22 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 	}
 
 	public boolean performFinish() {
-
-		final ProfileModificationOperation[] op = new ProfileModificationOperation[1];
-		try {
-			final Object[] selections = getSelectedElements();
-			getContainer().run(true, true, new IRunnableWithProgress() {
-				public void run(IProgressMonitor monitor) {
-					op[0] = createProfileModificationOperation(selections, monitor);
-				}
-			});
-			ProvisioningOperationRunner.schedule(op[0], getShell());
-		} catch (InterruptedException e) {
-			// don't report thread interruption
-		} catch (InvocationTargetException e) {
-			ProvUI.handleException(e.getCause(), null);
+		if (currentPlan != null && currentPlan.getStatus().isOK()) {
+			ProfileModificationOperation op = createProfileModificationOperation(currentPlan);
+			ProvisioningOperationRunner.schedule(op, getShell());
+			return true;
 		}
-		return true;
+		return false;
 	}
 
-	protected Object[] getSelectedElements() {
+	private Object[] getCheckedElements() {
 		return listViewer.getCheckedElements();
 	}
 
+	protected Object[] getSelectedElements() {
+		return ((IStructuredSelection) listViewer.getSelection()).toArray();
+	}
+
 	protected IInstallableUnit[] elementsToIUs(Object[] elements) {
 		IInstallableUnit[] theIUs = new IInstallableUnit[elements.length];
 		for (int i = 0; i < elements.length; i++) {
@@ -136,8 +160,15 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		return theIUs;
 	}
 
-	public IInstallableUnit[] getSelectedIUs() {
-		return elementsToIUs(getSelectedElements());
+	protected IInstallableUnit getSelectedIU() {
+		IInstallableUnit[] units = elementsToIUs(getSelectedElements());
+		if (units.length == 0)
+			return null;
+		return units[0];
+	}
+
+	protected IInstallableUnit[] getCheckedIUs() {
+		return elementsToIUs(getCheckedElements());
 	}
 
 	protected Profile getProfile() {
@@ -157,8 +188,6 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		return ius;
 	}
 
-	protected abstract ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor);
-
 	protected IUColumnConfig[] getColumnConfig() {
 		return ProvUI.getIUColumnConfig();
 	}
@@ -167,12 +196,50 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		return IUElement.SIZE_UNKNOWN;
 	}
 
-	protected void selectedIUsChanged() {
-		setPageComplete(getSelectedIUs().length > 0);
+	protected void checkedIUsChanged() {
+		try {
+			final Object[] selections = getCheckedElements();
+			if (selections.length == 0) {
+				currentPlan = null;
+				setMessage(ProvUIMessages.ProfileModificationWizardPage_NothingSelected, IMessageProvider.WARNING);
+			} else
+				getContainer().run(true, true, new IRunnableWithProgress() {
+					public void run(IProgressMonitor monitor) {
+						currentPlan = computeProvisioningPlan(selections, monitor);
+					}
+				});
+		} catch (InterruptedException e) {
+			// Nothing to report if thread was interrupted
+		} catch (InvocationTargetException e) {
+			currentPlan = null;
+			ProvUI.handleException(e.getCause(), null);
+			setMessage(ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, IMessageProvider.ERROR);
+		}
+		if (currentPlan != null)
+			if (currentPlan.getStatus().isOK()) {
+				setPageComplete(true);
+				setMessage(getDescription(), IMessageProvider.NONE);
+
+			} else {
+				int messageType = IMessageProvider.INFORMATION;
+				int severity = currentPlan.getStatus().getSeverity();
+				if (severity == IStatus.ERROR)
+					messageType = IMessageProvider.ERROR;
+				else if (severity == IStatus.WARNING)
+					messageType = IMessageProvider.WARNING;
+				setMessage(currentPlan.getStatus().getMessage(), messageType);
+				setPageComplete(false);
+			}
+	}
+
+	private ProfileModificationOperation createProfileModificationOperation(ProvisioningPlan plan) {
+		return new ProfileModificationOperation(getOperationLabel(), profileId, plan);
 	}
 
-	protected void setInitialSelections() {
-		// The default is to select everything because 
+	protected abstract ProvisioningPlan computeProvisioningPlan(Object[] checkedElements, IProgressMonitor monitor);
+
+	protected void setInitialCheckState() {
+		// The default is to check everything because 
 		// in most cases, the user has selected exactly
 		// what they want before this page opens.
 		listViewer.setAllChecked(true);
@@ -183,4 +250,16 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 	protected ProvisioningContext getProvisioningContext() {
 		return new ProvisioningContext();
 	}
+
+	protected void updateDetailsArea(Text details, IInstallableUnit iu) {
+		String description = null;
+		if (iu != null)
+			description = iu.getProperty(IInstallableUnit.PROP_DESCRIPTION);
+		if (description == null)
+			description = ""; //$NON-NLS-1$
+		details.setText(description);
+	}
+
+	protected abstract String getOperationLabel();
+
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
index 1e84520..3e9c13a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
@@ -69,7 +69,7 @@ public abstract class StructuredIUGroup {
 		layout.marginHeight = 0;
 		composite.setLayout(layout);
 
-		viewer = createViewer(composite, queryProvider);
+		viewer = createViewer(composite);
 
 		GridData data = new GridData(GridData.FILL_BOTH);
 		data.grabExcessHorizontalSpace = true;
@@ -78,7 +78,7 @@ public abstract class StructuredIUGroup {
 
 	}
 
-	protected abstract StructuredViewer createViewer(Composite parent, IQueryProvider queryProvider);
+	protected abstract StructuredViewer createViewer(Composite parent);
 
 	public Composite getComposite() {
 		return composite;
@@ -111,4 +111,8 @@ public abstract class StructuredIUGroup {
 	protected int convertHorizontalDLUsToPixels(int dlus) {
 		return Dialog.convertHorizontalDLUsToPixels(fm, dlus);
 	}
+
+	protected IQueryProvider getQueryProvider() {
+		return queryProvider;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
index dec74cd..425f8b4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
@@ -11,40 +11,34 @@
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
 public class UninstallWizardPage extends ProfileModificationWizardPage {
 
-	public UninstallWizardPage(IInstallableUnit[] ius, String profileId) {
-		super("UninstallWizard", ius, profileId); //$NON-NLS-1$
+	public UninstallWizardPage(IInstallableUnit[] ius, String profileId, ProvisioningPlan plan) {
+		super("UninstallWizard", ius, profileId, plan); //$NON-NLS-1$
 		setTitle(ProvUIMessages.UninstallIUOperationLabel);
 		setDescription(ProvUIMessages.UninstallDialog_UninstallMessage);
 	}
 
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
+	protected ProvisioningPlan computeProvisioningPlan(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
 			request.removeInstallableUnits(elementsToIUs(selectedElements));
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, getProvisioningContext(), monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK())
-				return new ProfileModificationOperation(ProvUIMessages.UninstallIUOperationLabel, getProfileId(), plan);
-			ProvUI.reportStatus(status);
+			return ProvisioningUtil.getProvisioningPlan(request, getProvisioningContext(), monitor);
 		} catch (ProvisionException e) {
 			ProvUI.handleException(e, null);
 		}
 		return null;
 	}
 
-	protected String getOkButtonString() {
-		return ProvUIMessages.UninstallIUOperationLabelWithMnemonic;
+	protected String getOperationLabel() {
+		return ProvUIMessages.UninstallIUOperationLabel;
 	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
index 737c865..6362d55 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
 
@@ -19,22 +20,20 @@ public abstract class UpdateOrInstallWizardPage extends ProfileModificationWizar
 	protected UpdateOrInstallWizard wizard;
 	private static final int DEFAULT_COLUMN_WIDTH = 150;
 
-	protected UpdateOrInstallWizardPage(String id, IInstallableUnit[] ius, String profileId, UpdateOrInstallWizard wizard) {
-		super(id, ius, profileId);
+	protected UpdateOrInstallWizardPage(String id, IInstallableUnit[] ius, String profileId, ProvisioningPlan plan, UpdateOrInstallWizard wizard) {
+		super(id, ius, profileId, plan);
 		this.wizard = wizard;
 	}
 
-	protected abstract String getOperationLabel();
-
 	protected IUColumnConfig[] getColumnConfig() {
 		initializeDialogUnits(getShell());
 		int pixels = convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH);
 		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_SizeColumnTitle, IUColumnConfig.COLUMN_SIZE, pixels / 2)};
 	}
 
-	protected void selectedIUsChanged() {
-		wizard.iusChanged(getSelectedIUs());
-		super.selectedIUsChanged();
+	protected void checkedIUsChanged() {
+		wizard.iusChanged(getCheckedIUs());
+		super.checkedIUsChanged();
 	}
 
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 00b8cb7..e72429e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -12,19 +12,19 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.IUpdateDescriptor;
 import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+import org.eclipse.swt.widgets.Text;
 
 public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 
@@ -32,7 +32,7 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 	Object[] initialSelections = new Object[0];
 
 	public UpdateWizardPage(IInstallableUnit[] ius, String profileId, IQueryProvider queryProvider, UpdateOrInstallWizard wizard) {
-		super("UpdateWizardPage", ius, profileId, wizard); //$NON-NLS-1$
+		super("UpdateWizardPage", ius, profileId, null, wizard); //$NON-NLS-1$
 		this.queryProvider = queryProvider;
 		setTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
 		setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
@@ -77,23 +77,30 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 		return ProvUIMessages.UpdateIUOperationLabel;
 	}
 
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
+	protected ProvisioningPlan computeProvisioningPlan(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
 			request.removeInstallableUnits(getIUsToReplace(selectedElements));
 			request.addInstallableUnits(elementsToIUs(selectedElements));
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, getProvisioningContext(), monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK())
-				return new ProfileModificationOperation(getOperationLabel(), getProfile().getProfileId(), plan);
-			ProvUI.reportStatus(status);
+			return ProvisioningUtil.getProvisioningPlan(request, getProvisioningContext(), monitor);
 		} catch (ProvisionException e) {
 			ProvUI.handleException(e, null);
 		}
 		return null;
 	}
 
-	protected void setInitialSelections() {
+	protected void setInitialCheckState() {
 		listViewer.setCheckedElements(initialSelections);
 	}
+
+	protected void updateDetailsArea(Text details, IInstallableUnit iu) {
+		if (iu != null) {
+			IUpdateDescriptor updateDescriptor = iu.getUpdateDescriptor();
+			if (updateDescriptor != null && updateDescriptor.getDescription() != null && updateDescriptor.getDescription().length() > 0) {
+				details.setText(updateDescriptor.getDescription());
+				return;
+			}
+		}
+		super.updateDetailsArea(details, iu);
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index a8ca866..a0c6b71 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -10,7 +10,10 @@
 ###############################################################################
 
 ProfileElement_InvalidProfile=Invalid profile ID {0}
+ProfileModificationWizardPage_DetailsLabel=Details
+ProfileModificationWizardPage_NothingSelected=You must check some items in order to continue.
 ProfileModificationWizardPage_ProfileNotFound=Could not resolve profile ID.
+ProfileModificationWizardPage_UnexpectedError=An unexpected error occurred.  This wizard is no longer valid with the current selections.
 ProvisioningUtil_NoRepositoryManager=No repository manager was found
 ProvisioningUtil_AddRepositoryFailure=Unable to add repository {0}
 ProvisioningUtil_CreateRepositoryFailure=Unable to create repository {0}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index 7ad5fe6..a1f75c5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -79,9 +79,13 @@ public class AvailableIUElement extends ProvElement implements IUElement {
 		try {
 			ProvisioningPlan plan = getSizingPlan();
 			Sizing info = ProvisioningUtil.getSizeInfo(plan, profileID, null);
-			size = info.getDiskSize();
+			if (info == null)
+				size = IUElement.SIZE_UNAVAILABLE;
+			else
+				size = info.getDiskSize();
 		} catch (ProvisionException e) {
 			handleException(e, ProvUIMessages.AvailableIUElement_ProfileNotFound);
+			size = IUElement.SIZE_UNAVAILABLE;
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
index 133a781..e021500 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -109,7 +109,8 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 
 	private String getIUSize(final IUElement element) {
 		long size = element.getSize();
-		// If size is already known, return it
+		// If size is already known, or we already tried
+		// to get it, don't try again
 		if (size != IUElement.SIZE_UNKNOWN)
 			return getFormattedSize(size);
 		if (!jobs.containsKey(element)) {
@@ -150,7 +151,7 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 	}
 
 	private String getFormattedSize(long size) {
-		if (size == IUElement.SIZE_UNKNOWN)
+		if (size == IUElement.SIZE_UNKNOWN || size == IUElement.SIZE_UNAVAILABLE)
 			return ProvUIMessages.IUDetailsLabelProvider_Unknown;
 		if (size > 1000L) {
 			long kb = size / 1000L;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
index 7e5388e..e081999 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
@@ -12,7 +12,6 @@
 package org.eclipse.equinox.p2.ui.actions;
 
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
@@ -60,20 +59,21 @@ public class InstallAction extends ProfileModificationAction {
 		return ProvUIMessages.InstallIUProgress;
 	}
 
-	protected void performOperation(IInstallableUnit[] ius, String targetProfileId) {
-		InstallWizard wizard = new InstallWizard(targetProfileId, ius, getLicenseManager());
+	protected void performOperation(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
+		InstallWizard wizard = new InstallWizard(targetProfileId, ius, plan, getLicenseManager());
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.open();
 	}
 
-	protected IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
+	protected ProvisioningPlan getProvisioningPlan(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
 		try {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
 			request.addInstallableUnits(ius);
 			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
-			return plan.getStatus();
+			return plan;
 		} catch (ProvisionException e) {
-			return ProvUI.handleException(e, null);
+			ProvUI.handleException(e, null);
+			return null;
 		}
 	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
index 0f71b16..9985fe1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
@@ -11,7 +11,7 @@
 
 package org.eclipse.equinox.p2.ui.actions;
 
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
@@ -30,28 +30,22 @@ public class RevertAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.REVERT_COMMAND_TOOLTIP);
 	}
 
-	protected IStatus validateOperation(IInstallableUnit[] toRevert, String targetProfileId, IProgressMonitor monitor) {
+	protected ProvisioningPlan getProvisioningPlan(IInstallableUnit[] toRevert, String targetProfileId, IProgressMonitor monitor) {
 		if (toRevert.length == 1) {
 			try {
-				ProvisioningPlan plan = ProvisioningUtil.getRevertPlan(toRevert[0], monitor);
-				return plan.getStatus();
+				return ProvisioningUtil.getRevertPlan(toRevert[0], monitor);
 			} catch (ProvisionException e) {
-				return ProvUI.handleException(e, null);
+				ProvUI.handleException(e, null);
+				return null;
 			}
 		}
 		// should never happen
-		return Status.OK_STATUS;
+		return null;
 	}
 
-	protected void performOperation(IInstallableUnit[] toBecome, String targetProfileId) {
-		// TODO bogus because we do this twice...
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getRevertPlan(toBecome[0], null);
-			ProvisioningOperation op = new ProfileModificationOperation(ProvUIMessages.RevertIUOperationLabel, targetProfileId, plan);
-			ProvisioningOperationRunner.schedule(op, getShell());
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-		}
+	protected void performOperation(IInstallableUnit[] toBecome, String targetProfileId, ProvisioningPlan plan) {
+		ProvisioningOperation op = new ProfileModificationOperation(ProvUIMessages.RevertIUOperationLabel, targetProfileId, plan);
+		ProvisioningOperationRunner.schedule(op, getShell());
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
index b7aa9c3..72e74bc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
@@ -12,7 +12,6 @@
 package org.eclipse.equinox.p2.ui.actions;
 
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
@@ -69,22 +68,21 @@ public class UninstallAction extends ProfileModificationAction {
 		return ProvUIMessages.UninstallIUProgress;
 	}
 
-	protected void performOperation(IInstallableUnit[] ius, String targetProfileId) {
-		UninstallWizard wizard = new UninstallWizard(targetProfileId, ius);
+	protected void performOperation(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
+		UninstallWizard wizard = new UninstallWizard(targetProfileId, ius, plan);
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.open();
 	}
 
-	protected IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
+	protected ProvisioningPlan getProvisioningPlan(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
 		try {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
 			request.removeInstallableUnits(ius);
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
-			return plan.getStatus();
+			return ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
 		} catch (ProvisionException e) {
-			return ProvUI.handleException(e, null);
+			ProvUI.handleException(e, null);
+			return null;
 		}
-
 	}
 
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
index e016025..dfbf981 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
@@ -12,11 +12,11 @@
 package org.eclipse.equinox.p2.ui.actions;
 
 import java.util.ArrayList;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.dialogs.UpdateWizard;
@@ -38,7 +38,7 @@ public class UpdateAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.UPDATE_COMMAND_TOOLTIP);
 	}
 
-	protected void performOperation(IInstallableUnit[] ius, String targetProfileId) {
+	protected void performOperation(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
 		// Collect the replacements for each IU individually so that 
 		// the user can decide what to update
 		try {
@@ -59,17 +59,8 @@ public class UpdateAction extends ProfileModificationAction {
 		}
 	}
 
-	protected IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
-		try {
-			IInstallableUnit[] updates = ProvisioningUtil.updatesFor(ius, monitor);
-			if (updates.length <= 0) {
-				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, ProvUIMessages.UpdateOperation_NothingToUpdate);
-			}
-			return Status.OK_STATUS;
-		} catch (ProvisionException e) {
-			return ProvUI.handleException(e, null);
-		}
-
+	protected ProvisioningPlan getProvisioningPlan(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
+		return null;
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
index 05db67d..7b297fa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
@@ -52,7 +52,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		this.createGroupComposite(parent);
 	}
 
-	protected StructuredViewer createViewer(Composite parent, IQueryProvider queryProvider) {
+	protected StructuredViewer createViewer(Composite parent) {
 		// Table of available IU's
 		final TreeViewer availableIUViewer = new TreeViewer(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
 
@@ -64,14 +64,14 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		availableIUViewer.setComparer(new ProvElementComparer());
 
 		// Now the content.
-		availableIUViewer.setContentProvider(new AvailableIUContentProvider(queryProvider));
+		availableIUViewer.setContentProvider(new AvailableIUContentProvider(getQueryProvider()));
 		availableIUViewer.setInput(new MetadataRepositories(getProvisioningContext().getMetadataRepositories()));
 
 		// Now the presentation, columns before label provider.
 		setTreeColumns(availableIUViewer.getTree());
 		availableIUViewer.setLabelProvider(labelProvider);
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY, queryProvider) {
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY, getQueryProvider()) {
 			protected void refreshAll() {
 				// The content provider caches the children unless input changes,
 				// so a viewer.refresh() is not enough.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUGeneralInfoPropertyPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUGeneralInfoPropertyPage.java
index 444c4ac..05c5776 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUGeneralInfoPropertyPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUGeneralInfoPropertyPage.java
@@ -74,7 +74,7 @@ public class IUGeneralInfoPropertyPage extends IUPropertyPage {
 			group.setLayout(new GridLayout());
 			group.setLayoutData(new GridData(GridData.FILL_BOTH));
 
-			Text text = new Text(group, SWT.MULTI | SWT.WRAP);
+			Text text = new Text(group, SWT.MULTI | SWT.WRAP | SWT.READ_ONLY);
 			GridData gd = new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
 			gd.widthHint = computeWidthLimit(text, 80);
 			gd.heightHint = 200;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallWizard.java
index 48f2cb7..0188ff5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallWizard.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.LicenseManager;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
@@ -21,13 +22,16 @@ import org.eclipse.equinox.p2.ui.ProvUIImages;
  */
 public class InstallWizard extends UpdateOrInstallWizard {
 
-	public InstallWizard(String profileId, IInstallableUnit[] ius, LicenseManager licenseManager) {
+	ProvisioningPlan plan;
+
+	public InstallWizard(String profileId, IInstallableUnit[] ius, ProvisioningPlan initialProvisioningPlan, LicenseManager licenseManager) {
 		super(profileId, ius, licenseManager);
 		setWindowTitle(ProvUIMessages.InstallIUOperationLabel);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL));
+		this.plan = initialProvisioningPlan;
 	}
 
 	protected UpdateOrInstallWizardPage createMainPage(String profileId, IInstallableUnit[] ius) {
-		return new InstallWizardPage(ius, profileId, this);
+		return new InstallWizardPage(ius, profileId, plan, this);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java
index 85d6497..3f97a82 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java
@@ -56,7 +56,7 @@ public class InstalledIUGroup extends StructuredIUGroup {
 		this.createGroupComposite(parent);
 	}
 
-	protected StructuredViewer createViewer(Composite parent, IQueryProvider queryProvider) {
+	protected StructuredViewer createViewer(Composite parent) {
 		// Table of installed IU's
 		TableViewer installedIUViewer = new TableViewer(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
 
@@ -65,14 +65,14 @@ public class InstalledIUGroup extends StructuredIUGroup {
 		installedIUViewer.setComparer(new ProvElementComparer());
 
 		// Now the content.
-		installedIUViewer.setContentProvider(new DeferredQueryContentProvider(queryProvider));
+		installedIUViewer.setContentProvider(new DeferredQueryContentProvider(getQueryProvider()));
 		installedIUViewer.setInput(new ProfileElement(profileId));
 
 		// Now the visuals, columns before labels.
 		setTableColumns(installedIUViewer.getTable());
 		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, queryProvider);
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, getQueryProvider());
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
 		installedIUViewer.getControl().addDisposeListener(new DisposeListener() {
 			public void widgetDisposed(DisposeEvent e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallWizard.java
index f4c7c1d..20273af 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallWizard.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.UninstallWizardPage;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.jface.wizard.Wizard;
@@ -24,17 +25,19 @@ public class UninstallWizard extends Wizard {
 	UninstallWizardPage page;
 	String profileId;
 	IInstallableUnit[] ius;
+	ProvisioningPlan plan;
 
-	public UninstallWizard(String profileId, IInstallableUnit[] ius) {
+	public UninstallWizard(String profileId, IInstallableUnit[] ius, ProvisioningPlan initialProvisioningPlan) {
 		super();
 		setWindowTitle(ProvUIMessages.UninstallIUOperationLabel);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_UNINSTALL));
 		this.profileId = profileId;
 		this.ius = ius;
+		this.plan = initialProvisioningPlan;
 	}
 
 	public void addPages() {
-		page = new UninstallWizardPage(ius, profileId);
+		page = new UninstallWizardPage(ius, profileId, plan);
 		addPage(page);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
index eb87ebc..b1a857f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUElement.java
@@ -19,8 +19,17 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
  */
 public interface IUElement {
 
+	/**
+	 * Indicates that the size is currently unknown
+	 */
 	public static final long SIZE_UNKNOWN = -1L;
 
+	/**
+	 * Indicates that the size is unavailable (it was
+	 * unknown but could not be computed.)
+	 */
+	public static final long SIZE_UNAVAILABLE = -2L;
+
 	public IInstallableUnit getIU();
 
 	public boolean shouldShowSize();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java
deleted file mode 100644
index 74897cc..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.ui.operations;
-
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-
-/**
- * An operation that installs the specified IU's into the specified profile
- * 
- * @since 3.4
- */
-public class InstallOperation extends ProfileModificationOperation {
-
-	IInstallableUnit[] installRoots;
-
-	public InstallOperation(String label, String profileID, ProvisioningPlan plan, IInstallableUnit[] ius) {
-		super(label, profileID, plan);
-		this.installRoots = ius;
-	}
-
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
-		return ProvisioningUtil.performProvisioningPlan(plan, null, getProfile(), monitor);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
index 0433b7a..474c7cc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
@@ -27,14 +27,14 @@ public class ProfileModificationOperation extends ProvisioningOperation {
 	PhaseSet phaseSet;
 	boolean isUser = true;
 
-	public ProfileModificationOperation(String label, String id, ProvisioningPlan plan) {
-		this(label, id, plan, null, true);
+	public ProfileModificationOperation(String label, String profileId, ProvisioningPlan plan) {
+		this(label, profileId, plan, null, true);
 	}
 
-	public ProfileModificationOperation(String label, String id, ProvisioningPlan plan, PhaseSet set, boolean isUser) {
+	public ProfileModificationOperation(String label, String profileId, ProvisioningPlan plan, PhaseSet set, boolean isUser) {
 		super(label);
 		this.plan = plan;
-		this.profileId = id;
+		this.profileId = profileId;
 		this.isUser = isUser;
 		if (set == null)
 			phaseSet = new DefaultPhaseSet();

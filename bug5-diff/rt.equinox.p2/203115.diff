commit eca93efd9f46975a488a85bbe4e60c1a82da176a
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 20 23:19:14 2007 +0000

    Bug 203115 - [prov] [ui] should metadata repositories support the equivalent of site categories?

1	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
index c7fc3a7..d297947 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
@@ -38,6 +38,7 @@ public interface IInstallableUnit extends Comparable {
 	//TODO This is not the ideal location for these constants
 	public static final String PROP_PROFILE_IU_KEY = "profileIU"; //$NON-NLS-1$	 
 	public static final String PROP_PROFILE_ROOT_IU = "profileRootIU"; //$NON-NLS-1$
+	public static final String PROP_CATEGORY_IU = "categoryIU"; //$NON-NLS-1$
 
 	/**
 	 * A property key (value <code>"equinox.p2.contact"</code>) representing a 
commit e787eb537fef69f19d98d3cdcf4b3d421d1f28b0
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 27 00:07:30 2007 +0000

    Bug 203115 - [prov] [ui] should metadata repositories support the equivalent of site categories?

1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
3	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AnyRequiredCapabilityQuery.java
25	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index 669ea94..13916c1 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -80,7 +80,7 @@ public class ProvAdminQueryProvider implements IProvElementQueryProvider {
 
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
-						return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {groupQuery, membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionCollector(this, element.getQueryable()) : new Collector());
+						return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionCollector(this, element.getQueryable()) : new Collector());
 					if (showLatest)
 						// We are not querying groups, but we are showing the latest version only
 						return new ElementQueryDescriptor(element.getQueryable(), membersOfCategoryQuery, new LatestIUVersionCollector(this, element.getQueryable()));
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index 688d65f..699cad7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -38,8 +38,9 @@ public class ProvSDKQueryProvider implements IProvElementQueryProvider {
 				return new ElementQueryDescriptor(queryable, new RepositoryPropertyQuery(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.toString(true), false), new QueriedElementCollector(this, queryable));
 			case IProvElementQueryProvider.AVAILABLE_IUS :
 				CapabilityQuery groupQuery = new CapabilityQuery(new RequiredCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", null, null, false, false)); //$NON-NLS-1$
+				Query categoryQuery = new IUPropertyQuery(IInstallableUnit.PROP_CATEGORY_IU, Boolean.toString(true));
 				if (element instanceof MetadataRepositoryElement) {
-					return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {groupQuery, new IUPropertyQuery(IInstallableUnit.PROP_CATEGORY_IU, Boolean.toString(true))}, true), new CategoryElementCollector(this, element.getQueryable(), false));
+					return new ElementQueryDescriptor(element.getQueryable(), categoryQuery, new CategoryElementCollector(this, element.getQueryable(), false));
 				}
 				if (element instanceof CategoryElement) {
 					Query membersOfCategoryQuery;
@@ -57,8 +58,7 @@ public class ProvSDKQueryProvider implements IProvElementQueryProvider {
 						collector = new LatestIUVersionCollector(this, element.getQueryable());
 					else
 						collector = new AvailableIUCollector(this, element.getQueryable());
-					return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {membersOfCategoryQuery, new CapabilityQuery(new RequiredCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", null, null, false, false))}, true), //$NON-NLS-1$ 
-							collector);
+					return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {membersOfCategoryQuery, new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false)}, true), collector);
 				}
 				// If we are showing only the latest version, we never represent other versions as children.
 				if (element instanceof IUVersionsElement) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AnyRequiredCapabilityQuery.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AnyRequiredCapabilityQuery.java
index e7a6b8b..ebf0bc9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AnyRequiredCapabilityQuery.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AnyRequiredCapabilityQuery.java
@@ -22,7 +22,7 @@ public class AnyRequiredCapabilityQuery extends Query {
 	private RequiredCapability[] requirements;
 
 	/**
-	 * Creates a new query on the given property name and value.
+	 * Creates a new query for the capabilities of the given IU.
 	 */
 	public AnyRequiredCapabilityQuery(IInstallableUnit iu) {
 		this.requirements = iu.getRequiredCapabilities();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
index 5a8e73d..4f10319 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
@@ -10,10 +10,9 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.query;
 
-import java.util.Iterator;
+import java.util.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.MetadataFactory;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.model.CategoryElement;
@@ -29,6 +28,7 @@ import org.osgi.framework.Version;
 public class CategoryElementCollector extends QueriedElementCollector {
 
 	private boolean allowEmpty;
+	private Set referredIUs = new HashSet();
 
 	public CategoryElementCollector(IProvElementQueryProvider queryProvider, IQueryable queryable, boolean allowEmpty) {
 		super(queryProvider, queryable);
@@ -45,18 +45,27 @@ public class CategoryElementCollector extends QueriedElementCollector {
 	public boolean accept(Object match) {
 		if (!(match instanceof IInstallableUnit))
 			return true;
-		return super.accept(new CategoryElement((IInstallableUnit) match));
+		IInstallableUnit iu = (IInstallableUnit) match;
+		RequiredCapability[] requirements = iu.getRequiredCapabilities();
+		for (int i = 0; i < requirements.length; i++) {
+			if (requirements[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU)) {
+				referredIUs.add(requirements[i].getName());
+			}
+		}
+		return super.accept(new CategoryElement(iu));
 	}
 
 	public Iterator iterator() {
-		if (!allowEmpty)
+		if (!allowEmpty && getList().isEmpty())
 			createDummyCategory();
+		removeNestedCategories();
 		return super.iterator();
 	}
 
 	public Object[] toArray(Class clazz) {
-		if (!allowEmpty)
+		if (!allowEmpty && getList().isEmpty())
 			createDummyCategory();
+		removeNestedCategories();
 		return super.toArray(clazz);
 	}
 
@@ -71,4 +80,14 @@ public class CategoryElementCollector extends QueriedElementCollector {
 		element.setQueryProvider(queryProvider);
 		getList().add(element);
 	}
+
+	private void removeNestedCategories() {
+		CategoryElement[] ius = (CategoryElement[]) getList().toArray(new CategoryElement[getList().size()]);
+		// If any other element refers to a category element, remove it from the list
+		for (int i = 0; i < ius.length; i++) {
+			if (referredIUs.contains(ius[i].getIU().getId())) {
+				getList().remove(ius[i]);
+			}
+		}
+	}
 }

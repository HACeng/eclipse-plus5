commit 7b9c0908b74a0116761b8136164012bf0a5841b3
Author: John Arthorne <johna>
Date:   Tue Jun 22 14:37:05 2010 +0000

    Bug 313447 -  Avoid MD5 computation for publishing from dropins reconciler

1	1	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
7	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherInfo.java
9	4	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
1	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
23	5	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
index e8213ed..36302dd 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
@@ -73,7 +73,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 		info.setArtifactRepository(artifactRepository);
 		info.setMetadataRepository(metadataRepository);
 		info.addAdvice(advice);
-		info.setArtifactOptions(IPublisherInfo.A_INDEX);
+		info.setArtifactOptions(IPublisherInfo.A_INDEX | IPublisherInfo.A_NO_MD5);
 	}
 
 	protected CachingArtifactRepository initializeArtifactRepository(String repositoryName, URI repositoryLocation, boolean hidden) {
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherInfo.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherInfo.java
index e804e2d..bba320f 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherInfo.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherInfo.java
@@ -35,6 +35,13 @@ public interface IPublisherInfo {
 	public static final int A_OVERWRITE = 4;
 
 	/**
+	 * A bitwise flag indicating that MD5 hash should not be generated when 
+	 * publishing an artifact. When this flag is not specified the MD5 hash will
+	 * be generated by default.
+	 */
+	public static final int A_NO_MD5 = 8;
+
+	/**
 	 * Returns the artifact repository into which any publishable artifacts are published
 	 * or <code>null</code> if none.
 	 * @return a destination artifact repository or <code>null</code>
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
index e64e63c..3da9abb 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
@@ -116,8 +116,8 @@ public class BundlesAction extends AbstractPublisherAction {
 		Version hostVersion = Version.parseVersion(configInfo.getVersion());
 		VersionRange range = hostVersion == Version.emptyVersion ? VersionRange.emptyRange : new VersionRange(hostVersion, true, Version.MAX_VERSION, true);
 		cu.setHost(new IRequirement[] { //
-				MetadataFactory.createRequirement(CAPABILITY_NS_OSGI_BUNDLE, hostId, range, null, false, false, true), //
-						MetadataFactory.createRequirement(PublisherHelper.NAMESPACE_ECLIPSE_TYPE, TYPE_ECLIPSE_BUNDLE, new VersionRange(Version.createOSGi(1, 0, 0), true, Version.createOSGi(2, 0, 0), false), null, false, false, false)});
+		MetadataFactory.createRequirement(CAPABILITY_NS_OSGI_BUNDLE, hostId, range, null, false, false, true), //
+				MetadataFactory.createRequirement(PublisherHelper.NAMESPACE_ECLIPSE_TYPE, TYPE_ECLIPSE_BUNDLE, new VersionRange(Version.createOSGi(1, 0, 0), true, Version.createOSGi(2, 0, 0), false), null, false, false, false)});
 
 		//Adds capabilities for fragment, self, and describing the flavor supported
 		cu.setProperty(InstallableUnitDescription.PROP_TYPE_FRAGMENT, Boolean.TRUE.toString());
@@ -593,7 +593,7 @@ public class BundlesAction extends AbstractPublisherAction {
 		try {
 			if (bundles == null)
 				bundles = getBundleDescriptions(expandLocations(locations), monitor);
-			generateBundleIUs(bundles, results, monitor);
+			generateBundleIUs(bundles, publisherInfo, results, monitor);
 			bundles = null;
 		} catch (OperationCanceledException e) {
 			return Status.CANCEL_STATUS;
@@ -659,7 +659,12 @@ public class BundlesAction extends AbstractPublisherAction {
 		}
 	}
 
+	//TODO remove this method
 	protected void generateBundleIUs(BundleDescription[] bundleDescriptions, IPublisherResult result, IProgressMonitor monitor) {
+		generateBundleIUs(bundleDescriptions, null, result, monitor);
+	}
+
+	protected void generateBundleIUs(BundleDescription[] bundleDescriptions, IPublisherInfo info, IPublisherResult result, IProgressMonitor monitor) {
 
 		// This assumes that hosts are processed before fragments because for each fragment the host
 		// is queried for the strings that should be translated.
@@ -679,7 +684,7 @@ public class BundlesAction extends AbstractPublisherAction {
 				}
 
 				File location = new File(bd.getLocation());
-				IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(info.getArtifactRepository(), key, location);
+				IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(info, key, location);
 				processArtifactPropertiesAdvice(bundleIU, ad, info);
 
 				// Publish according to the shape on disk
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index 892c9d5..72f059c 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -605,7 +605,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 		Collection<IArtifactKey> artifacts = featureIU.getArtifacts();
 		for (IArtifactKey artifactKey : artifacts) {
 			File file = new File(feature.getLocation());
-			ArtifactDescriptor ad = (ArtifactDescriptor) PublisherHelper.createArtifactDescriptor(info.getArtifactRepository(), artifactKey, file);
+			ArtifactDescriptor ad = (ArtifactDescriptor) PublisherHelper.createArtifactDescriptor(info, artifactKey, file);
 			processArtifactPropertiesAdvice(featureIU, ad, publisherInfo);
 			ad.setProperty(IArtifactDescriptor.DOWNLOAD_CONTENTTYPE, IArtifactDescriptor.TYPE_ZIP);
 			// if the artifact is a dir then zip it up.
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
index 6d2e2f0..9136fa8 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- *  Copyright (c) 2007, 2009 IBM Corporation and others.
+ *  Copyright (c) 2007, 2010 IBM Corporation and others.
  *  All rights reserved. This program and the accompanying materials
  *  are made available under the terms of the Eclipse Public License v1.0
  *  which accompanies this distribution, and is available at
@@ -88,10 +88,26 @@ public class PublisherHelper {
 	public static final IProvidedCapability FEATURE_CAPABILITY = MetadataFactory.createProvidedCapability(NAMESPACE_ECLIPSE_TYPE, TYPE_ECLIPSE_FEATURE, Version.createOSGi(1, 0, 0));
 
 	public static IArtifactDescriptor createArtifactDescriptor(IArtifactKey key, File pathOnDisk) {
-		return createArtifactDescriptor(null, key, pathOnDisk);
+		return createArtifactDescriptor(null, null, key, pathOnDisk);
 	}
 
+	//TODO remove because the method with IPublisherInfo is more powerful
 	public static IArtifactDescriptor createArtifactDescriptor(IArtifactRepository artifactRepo, IArtifactKey key, File pathOnDisk) {
+		return createArtifactDescriptor(null, artifactRepo, key, pathOnDisk);
+	}
+
+	/**
+	 * Creates an artifact descriptor for the given key and path.
+	 * @param info the publisher info
+	 * @param key the key of the artifact to publish
+	 * @param pathOnDisk the path of the artifact on disk
+	 * @return a new artifact descriptor
+	 */
+	public static IArtifactDescriptor createArtifactDescriptor(IPublisherInfo info, IArtifactKey key, File pathOnDisk) {
+		return createArtifactDescriptor(info, info.getArtifactRepository(), key, pathOnDisk);
+	}
+
+	private static IArtifactDescriptor createArtifactDescriptor(IPublisherInfo info, IArtifactRepository artifactRepo, IArtifactKey key, File pathOnDisk) {
 		IArtifactDescriptor result = artifactRepo != null ? artifactRepo.createArtifactDescriptor(key) : new ArtifactDescriptor(key);
 		if (result instanceof ArtifactDescriptor) {
 			ArtifactDescriptor descriptor = (ArtifactDescriptor) result;
@@ -99,9 +115,11 @@ public class PublisherHelper {
 				descriptor.setProperty(IArtifactDescriptor.ARTIFACT_SIZE, Long.toString(pathOnDisk.length()));
 				descriptor.setProperty(IArtifactDescriptor.DOWNLOAD_SIZE, Long.toString(pathOnDisk.length()));
 			}
-			String md5 = computeMD5(pathOnDisk);
-			if (md5 != null)
-				descriptor.setProperty(IArtifactDescriptor.DOWNLOAD_MD5, md5);
+			if (info == null || (info.getArtifactOptions() & IPublisherInfo.A_NO_MD5) == 0) {
+				String md5 = computeMD5(pathOnDisk);
+				if (md5 != null)
+					descriptor.setProperty(IArtifactDescriptor.DOWNLOAD_MD5, md5);
+			}
 		}
 		return result;
 	}

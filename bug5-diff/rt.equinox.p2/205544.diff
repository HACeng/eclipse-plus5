commit af4870e6c33b398a4c1a4f29995e3ed1ae1b8c64
Author: Simon Kaegi <skaegi>
Date:   Fri Oct 5 03:36:16 2007 +0000

    Bug 205544
     [prov] Touchpoint and Actions should be abstract classes

8	14	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/NullTouchpoint.java
13	13	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
0	135	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/AbstractProvisioningTransaction.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
0	36	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningAction.java
0	33	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpoint.java
0	21	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpointAction.java
4	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
12	12	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
21	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningAction.java
36	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
5	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
10	10	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
5	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/SizingPhase.java
10	10	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
5	5	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
7	15	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/NullTouchpoint.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/NullTouchpoint.java
index bfcb661..1d155fe 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/NullTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/NullTouchpoint.java
@@ -11,15 +11,17 @@
 package org.eclipse.equinox.internal.p2.engine;
 
 import java.util.Map;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.p2.engine.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.p2.engine.Touchpoint;
+import org.eclipse.equinox.p2.engine.ProvisioningAction;
 import org.eclipse.equinox.p2.metadata.TouchpointType;
 
 /**
  * A touchpoint that performs no processing.
  */
-public class NullTouchpoint implements ITouchpoint {
-	public static final ITouchpoint INSTANCE = new NullTouchpoint();
+public class NullTouchpoint extends Touchpoint {
+	public static final Touchpoint INSTANCE = new NullTouchpoint();
 
 	/**
 	 * Public constructor only intended to be called by extension registry.
@@ -38,8 +40,8 @@ public class NullTouchpoint implements ITouchpoint {
 		return false;
 	}
 
-	public ITouchpointAction getAction(String actionId) {
-		return new ITouchpointAction() {
+	public ProvisioningAction getAction(String actionId) {
+		return new ProvisioningAction() {
 			public IStatus execute(Map parameters) {
 				return Status.OK_STATUS;
 			}
@@ -49,12 +51,4 @@ public class NullTouchpoint implements ITouchpoint {
 			}
 		};
 	}
-
-	public IStatus completePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
-		return null;
-	}
-
-	public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
-		return null;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
index dc6c188..3c95e8b 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
@@ -14,7 +14,7 @@ import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.p2.core.helpers.MultiStatus;
-import org.eclipse.equinox.p2.engine.ITouchpoint;
+import org.eclipse.equinox.p2.engine.Touchpoint;
 import org.eclipse.equinox.p2.metadata.TouchpointType;
 import org.eclipse.osgi.util.NLS;
 
@@ -40,7 +40,7 @@ public class TouchpointManager implements IRegistryChangeListener {
 
 		private IConfigurationElement element;
 		private boolean createdExtension;
-		private ITouchpoint touchpoint;
+		private Touchpoint touchpoint;
 
 		public TouchpointEntry(IConfigurationElement element) {
 			super();
@@ -49,7 +49,7 @@ public class TouchpointManager implements IRegistryChangeListener {
 			this.createdExtension = false;
 		}
 
-		public TouchpointEntry(IConfigurationElement element, ITouchpoint touchpoint) {
+		public TouchpointEntry(IConfigurationElement element, Touchpoint touchpoint) {
 			super();
 			this.element = element;
 			this.touchpoint = touchpoint;
@@ -60,11 +60,11 @@ public class TouchpointManager implements IRegistryChangeListener {
 			return (this.touchpoint != null);
 		}
 
-		public ITouchpoint getTouchpoint() {
+		public Touchpoint getTouchpoint() {
 			if (!createdExtension) {
 				String id = element.getAttribute(ATTRIBUTE_TYPE);
 				try {
-					ITouchpoint touchpoint = (ITouchpoint) element.createExecutableExtension(ATTRIBUTE_CLASS);
+					Touchpoint touchpoint = (Touchpoint) element.createExecutableExtension(ATTRIBUTE_CLASS);
 					if (touchpoint != null) {
 						if (!id.equals(touchpoint.getTouchpointType().getId())) {
 							reportError(NLS.bind(Messages.TouchpointManager_Touchpoint_Type_Mismatch, id, touchpoint.getTouchpointType().getId()), null);
@@ -109,7 +109,7 @@ public class TouchpointManager implements IRegistryChangeListener {
 	 * Return the touchpoint which is registered for the given id,
 	 * or <code>null</code> if none are registered.
 	 */
-	public ITouchpoint getTouchpoint(TouchpointType id) {
+	public Touchpoint getTouchpoint(TouchpointType id) {
 		if (id == null || CommonDef.EmptyString.equals(id.getId()))
 			throw new IllegalArgumentException(Messages.TouchpointManager_Null_Touchpoint_Type_Argument);
 		if (touchpointEntries == null) {
@@ -119,7 +119,7 @@ public class TouchpointManager implements IRegistryChangeListener {
 		return entry == null ? null : entry.getTouchpoint();
 	}
 
-	public ITouchpoint[] getAllTouchpoints() {
+	public Touchpoint[] getAllTouchpoints() {
 		if (touchpointEntries == null) {
 			initializeTouchpoints();
 		}
@@ -128,30 +128,30 @@ public class TouchpointManager implements IRegistryChangeListener {
 		ArrayList touchpoints = new ArrayList(adapters.size());
 		for (Iterator iter = adapters.iterator(); iter.hasNext();) {
 			TouchpointEntry entry = (TouchpointEntry) iter.next();
-			ITouchpoint touchpoint = entry.getTouchpoint();
+			Touchpoint touchpoint = entry.getTouchpoint();
 			if (touchpoint != null) {
 				touchpoints.add(touchpoint);
 			}
 		}
-		return (ITouchpoint[]) touchpoints.toArray(new ITouchpoint[touchpoints.size()]);
+		return (Touchpoint[]) touchpoints.toArray(new Touchpoint[touchpoints.size()]);
 	}
 
-	public ITouchpoint[] getCreatedTouchpoints() {
+	public Touchpoint[] getCreatedTouchpoints() {
 		if (touchpointEntries == null)
-			return new ITouchpoint[0];
+			return new Touchpoint[0];
 		Collection adapters = touchpointEntries.values();
 
 		ArrayList touchpoints = new ArrayList(adapters.size());
 		for (Iterator iter = adapters.iterator(); iter.hasNext();) {
 			TouchpointEntry entry = (TouchpointEntry) iter.next();
 			if (entry.hasTouchpoint()) {
-				ITouchpoint touchpoint = entry.getTouchpoint();
+				Touchpoint touchpoint = entry.getTouchpoint();
 				if (touchpoint != null) {
 					touchpoints.add(touchpoint);
 				}
 			}
 		}
-		return (ITouchpoint[]) touchpoints.toArray(new ITouchpoint[touchpoints.size()]);
+		return (Touchpoint[]) touchpoints.toArray(new Touchpoint[touchpoints.size()]);
 	}
 
 	public IStatus validateTouchpoints(String[] requiredTypes) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/AbstractProvisioningTransaction.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/AbstractProvisioningTransaction.java
deleted file mode 100644
index 8de7ea9..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/AbstractProvisioningTransaction.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.p2.engine;
-
-import java.util.ArrayList;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.engine.EngineActivator;
-import org.eclipse.equinox.p2.core.helpers.MultiStatus;
-import org.eclipse.equinox.p2.core.helpers.MultiStatusUtil;
-import org.eclipse.osgi.util.NLS;
-
-/**
- * An abstract provisioning transaction specifies a simple mechanism
- * for atomicity of a sequence of actions, based on the ability to
- * revert the consequences of those actions.
- * 
- * TODO: Implementation(s) of transactions should be registered via
- * 		 an extension point by classes that extended this class.
- * 		 This class should really be abstract.
- */
-public abstract class AbstractProvisioningTransaction {
-
-	private ArrayList actions = new ArrayList();
-
-	private String description;
-
-	private boolean isUndoable;
-
-	private MultiStatus result;
-
-	private IProgressMonitor progressMonitor;
-
-	public AbstractProvisioningTransaction(String description, boolean isUndoable, MultiStatus result, IProgressMonitor monitor) {
-		this.description = description;
-		this.isUndoable = isUndoable;
-		this.result = (result != null ? result : new MultiStatus());
-		this.progressMonitor = monitor;
-	}
-
-	public IStatus performActions(IProvisioningAction[] ops, int[] weights, IProgressMonitor monitor) {
-		SubMonitor pm = SubMonitor.convert(monitor, weights.length);
-		IStatus status = Status.OK_STATUS;
-		try {
-			for (int i = 0; i < ops.length; i += 1) {
-				IProvisioningAction action = ops[i];
-				IProgressMonitor sub = (i < weights.length ? (IProgressMonitor) pm.newChild(weights[i]) : new NullProgressMonitor());
-				status = performAction(action, sub);
-				if (MultiStatusUtil.isErrorOrCancel(status)) {
-					break;
-				}
-			}
-		} finally {
-			pm.done();
-		}
-		return status;
-	}
-
-	protected IStatus performAction(IProvisioningAction action, IProgressMonitor monitor) {
-		actions.add(action);
-		IStatus opStatus = action.perform(this, monitor);
-		IStatus status = opStatus;
-
-		if (!isUndoable) {
-			result.add(opStatus);
-			status = Status.OK_STATUS;
-		} else if (MultiStatusUtil.isErrorOrCancel(opStatus)) {
-			int length = actions.size();
-			IProvisioningAction lastAction = (IProvisioningAction) actions.get(length - 1);
-			if (!lastAction.shouldRevertOnError()) {
-				actions.remove(length - 1);
-			}
-		} else if (monitor.isCanceled()) {
-			// first time we noticed cancellation
-			opStatus = new Status(IStatus.CANCEL, EngineActivator.ID, 0, ""/*Messages.Engine_Operation_Canceled_By_User*/, null);
-		}
-
-		if (opStatus.matches(IStatus.ERROR) && result.getMessage().length() == 0) {
-			result.setMessage(NLS.bind("Errors occurred during the transaction {0}", //$NON-NLS-1$
-					description));
-		} else if (opStatus.matches(IStatus.CANCEL) && result.getMessage().length() == 0) {
-			result.setMessage(NLS.bind("The transaction {0} was canceled", //$NON-NLS-1$
-					description));
-		}
-
-		monitor.done();
-		return status;
-	}
-
-	public void rollback(IProgressMonitor monitor) {
-		if (!isUndoable)
-			return;
-		isUndoable = false;
-
-		// TODO: is it necessary to allow support rollback that does NOT reverse the order
-		//		 of the actions?  Consider phases.
-
-		SubMonitor pm = SubMonitor.convert(monitor, actions.size());
-		for (int i = actions.size() - 1; i >= 0; i--) {
-			IProvisioningAction action = (IProvisioningAction) actions.get(i);
-			try {
-				IStatus status = action.revert(this, pm.newChild(10));
-				// log.statusNotOK(status);
-			} catch (Exception e) {
-				// log.exception
-			}
-		}
-	}
-
-	public IProgressMonitor getProgressMonitor() {
-		return progressMonitor;
-	}
-
-	public boolean isUndoable() {
-		return isUndoable;
-	}
-
-	public String toString() {
-		StringBuffer sb = new StringBuffer();
-		sb.append("Transaction: "); //$NON-NLS-1$
-		sb.append(description);
-		sb.append(", ").append(actions.size()).append( //$NON-NLS-1$
-				" actions performed"); //$NON-NLS-1$
-		if (!isUndoable) {
-			sb.append(", isUndoable=").append(isUndoable); //$NON-NLS-1$
-		}
-		return sb.toString();
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
index 2727cc9..1d3e64d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
@@ -68,7 +68,7 @@ public class EngineSession {
 
 		for (ListIterator it = actionRecords.listIterator(actionRecords.size()); it.hasPrevious();) {
 			ActionsRecord record = (ActionsRecord) it.previous();
-			ITouchpointAction[] actions = (ITouchpointAction[]) record.actions.toArray(new ITouchpointAction[record.actions.size()]);
+			ProvisioningAction[] actions = (ProvisioningAction[]) record.actions.toArray(new ProvisioningAction[record.actions.size()]);
 			phase.undoActions(result, actions, record.operand);
 		}
 		phase.postPerform(result, profile, new NullProgressMonitor());
@@ -99,7 +99,7 @@ public class EngineSession {
 		currentRecord = null;
 	}
 
-	void recordAction(ITouchpointAction action, Operand operand) {
+	void recordAction(ProvisioningAction action, Operand operand) {
 		if (action == null || operand == null)
 			throw new IllegalArgumentException("Action and Operand must not be null.");
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningAction.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningAction.java
deleted file mode 100644
index a76a8a7..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProvisioningAction.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.p2.engine;
-
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
-
-/**
- * The provisioning action interface represents a unit of work
- * that can be performed during a provisioning activity.
- * The granularity of the action can vary from a simple,
- * indivisible unit of work to a complex, organized collection
- * of steps.
- * <p>
- * The results of an provisioning activity must be revert-able
- * an error or if a cancellation occurs. A provisioning action
- * that will return an error or cancel status may choose to revert
- * any work performed before returning or may indicate that
- * the caller must explicitly revert.
- */
-public interface IProvisioningAction {
-
-	public IStatus perform(AbstractProvisioningTransaction transaction, IProgressMonitor monitor);
-
-	public IStatus revert(AbstractProvisioningTransaction transaction, IProgressMonitor monitor);
-
-	public boolean shouldRevertOnError();
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpoint.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpoint.java
deleted file mode 100644
index b48a7c6..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpoint.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.engine;
-
-import java.util.Map;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.equinox.p2.metadata.TouchpointType;
-
-/**
- * A touchpoint is responsible for executing a given phase for a given 
- * targeted system (eclipse, native). The order of phases is defined in the {@link PhaseSet}.  
- */
-public interface ITouchpoint {
-
-	public TouchpointType getTouchpointType();
-
-	public boolean supports(String phaseId);
-
-	public ITouchpointAction getAction(String actionId);
-
-	public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters);
-
-	public IStatus completePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters);
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpointAction.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpointAction.java
deleted file mode 100644
index 43b918a..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ITouchpointAction.java
+++ /dev/null
@@ -1,21 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.engine;
-
-import java.util.Map;
-import org.eclipse.core.runtime.IStatus;
-
-public interface ITouchpointAction {
-
-	IStatus execute(Map parameters);
-
-	IStatus undo(Map parameters);
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
index 031cbef..f7f86e1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
@@ -24,15 +24,15 @@ public class InstallableUnitEvent extends EventObject {
 
 	private Profile profile;
 	private Operand operand;
-	private ITouchpoint touchpoint;
+	private Touchpoint touchpoint;
 	private IStatus result;
 	private int type;
 
-	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, Operand operand, int type, ITouchpoint touchpoint) {
+	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, Operand operand, int type, Touchpoint touchpoint) {
 		this(phaseId, prePhase, profile, operand, type, touchpoint, null);
 	}
 
-	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, Operand operand, int type, ITouchpoint touchpoint, IStatus result) {
+	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, Operand operand, int type, Touchpoint touchpoint, IStatus result) {
 		super(touchpoint); //TODO not sure if the touchpoint should be the source
 		this.phaseId = phaseId;
 		this.prePhase = prePhase;
@@ -45,7 +45,7 @@ public class InstallableUnitEvent extends EventObject {
 
 	}
 
-	public ITouchpoint getTouchpoint() {
+	public Touchpoint getTouchpoint() {
 		return touchpoint;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
index 0d01469..450e17e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
@@ -62,14 +62,14 @@ public abstract class Phase {
 		return status;
 	}
 
-	void undoActions(MultiStatus status, ITouchpointAction[] actions, Operand operand) {
-		ITouchpoint touchpoint = getTouchpoint(operand);
+	void undoActions(MultiStatus status, ProvisioningAction[] actions, Operand operand) {
+		Touchpoint touchpoint = getTouchpoint(operand);
 		Map touchpointParameters = (Map) touchpointToTouchpointParameters.get(touchpoint);
 		Map parameters = new HashMap(touchpointParameters);
 		parameters.put("operand", operand);
 		parameters = Collections.unmodifiableMap(parameters);
 		for (int j = 0; j < actions.length; j++) {
-			ITouchpointAction action = actions[j];
+			ProvisioningAction action = actions[j];
 			IStatus actionStatus = action.undo(parameters);
 			status.add(actionStatus);
 		}
@@ -78,7 +78,7 @@ public abstract class Phase {
 	void perform(MultiStatus status, EngineSession session, Profile profile, Operand[] operands, IProgressMonitor monitor) {
 		touchpointToTouchpointParameters = new HashMap();
 		for (int i = 0; i < operands.length; i++) {
-			ITouchpoint touchpoint = getTouchpoint(operands[i]);
+			Touchpoint touchpoint = getTouchpoint(operands[i]);
 			if (touchpoint == null)
 				continue;
 
@@ -115,7 +115,7 @@ public abstract class Phase {
 
 		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
 			Entry entry = (Entry) it.next();
-			ITouchpoint touchpoint = (ITouchpoint) entry.getKey();
+			Touchpoint touchpoint = (Touchpoint) entry.getKey();
 			Map touchpointParameters = new HashMap(phaseParameters);
 			touchpointParameters.put("touchpoint", touchpoint);
 			status.add(touchpoint.initializePhase(monitor, profile, phaseId, touchpointParameters));
@@ -133,7 +133,7 @@ public abstract class Phase {
 			if (!isApplicable(operand))
 				continue;
 
-			ITouchpoint touchpoint = getTouchpoint(operand);
+			Touchpoint touchpoint = getTouchpoint(operand);
 			if (touchpoint == null || !touchpoint.supports(phaseId))
 				continue;
 
@@ -141,9 +141,9 @@ public abstract class Phase {
 			Map parameters = new HashMap(touchpointParameters);
 			parameters.put("operand", operand);
 			parameters = Collections.unmodifiableMap(parameters);
-			ITouchpointAction[] actions = getActions(touchpoint, profile, operand);
+			ProvisioningAction[] actions = getActions(touchpoint, profile, operand);
 			for (int j = 0; j < actions.length; j++) {
-				ITouchpointAction action = actions[j];
+				ProvisioningAction action = actions[j];
 				IStatus actionStatus = action.execute(parameters);
 				status.add(actionStatus);
 				if (actionStatus != null && !actionStatus.isOK())
@@ -157,7 +157,7 @@ public abstract class Phase {
 	void postPerform(MultiStatus status, Profile profile, IProgressMonitor monitor) {
 		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
 			Entry entry = (Entry) it.next();
-			ITouchpoint touchpoint = (ITouchpoint) entry.getKey();
+			Touchpoint touchpoint = (Touchpoint) entry.getKey();
 			Map touchpointParameters = (Map) entry.getValue();
 			status.add(touchpoint.completePhase(monitor, profile, phaseId, touchpointParameters));
 			entry.setValue(null);
@@ -166,7 +166,7 @@ public abstract class Phase {
 		phaseParameters = null;
 	}
 
-	private static ITouchpoint getTouchpoint(Operand operand) {
+	private static Touchpoint getTouchpoint(Operand operand) {
 		IInstallableUnit unit = operand.second();
 		if (unit == null)
 			unit = operand.first();
@@ -174,7 +174,7 @@ public abstract class Phase {
 		if (unit == null)
 			return null;
 		TouchpointManager touchpointManager = TouchpointManager.getInstance();
-		ITouchpoint touchpoint = touchpointManager.getTouchpoint(unit.getTouchpointType());
+		Touchpoint touchpoint = touchpointManager.getTouchpoint(unit.getTouchpointType());
 		return touchpoint;
 	}
 
@@ -190,6 +190,6 @@ public abstract class Phase {
 		return Status.OK_STATUS;
 	}
 
-	protected abstract ITouchpointAction[] getActions(ITouchpoint touchpoint, Profile profile, Operand currentOperand);
+	protected abstract ProvisioningAction[] getActions(Touchpoint touchpoint, Profile profile, Operand currentOperand);
 
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningAction.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningAction.java
new file mode 100644
index 0000000..b4594fe
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProvisioningAction.java
@@ -0,0 +1,21 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.engine;
+
+import java.util.Map;
+import org.eclipse.core.runtime.IStatus;
+
+public abstract class ProvisioningAction {
+
+	public abstract IStatus execute(Map parameters);
+
+	public abstract IStatus undo(Map parameters);
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
new file mode 100644
index 0000000..3112c48
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.engine;
+
+import java.util.Map;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.p2.metadata.TouchpointType;
+
+/**
+ * A touchpoint is responsible for executing a given phase for a given 
+ * targeted system (eclipse, native). The order of phases is defined in the {@link PhaseSet}.  
+ */
+public abstract class Touchpoint {
+
+	public abstract TouchpointType getTouchpointType();
+
+	public abstract boolean supports(String phaseId);
+
+	public abstract ProvisioningAction getAction(String actionId);
+
+	public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
+		return Status.OK_STATUS;
+	}
+
+	public IStatus completePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
+		return Status.OK_STATUS;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
index 177d748..ea03abd 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
@@ -38,9 +38,9 @@ public class Collect extends Phase {
 	//			// TODO: Need do progress reporting
 	//
 	//			// Ask all the touchpoints if they need to download an artifact
-	//			ITouchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
+	//			Touchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
 	//			if (touchpoint.supports(PHASE_ID)) {
-	//				ITouchpointAction[] actions = touchpoint.getActions(PHASE_ID, profile, operand);
+	//				ProvisioningAction[] actions = touchpoint.getActions(PHASE_ID, profile, operand);
 	//				for (int i = 0; i < actions.length; i++) {
 	//					Object result = actions[i].execute();
 	//					if (result != null)
@@ -62,9 +62,9 @@ public class Collect extends Phase {
 		return false;
 	}
 
-	protected ITouchpointAction[] getActions(ITouchpoint touchpoint, Profile profile, Operand currentOperand) {
-		ITouchpointAction action = touchpoint.getAction("collect");
-		return new ITouchpointAction[] {action};
+	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Profile profile, Operand currentOperand) {
+		ProvisioningAction action = touchpoint.getAction("collect");
+		return new ProvisioningAction[] {action};
 	}
 
 	protected IStatus completePhase(IProgressMonitor monitor, Profile profile, Map parameters) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
index f39fee6..58ca1aa 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
@@ -19,11 +19,11 @@ import org.eclipse.equinox.p2.engine.*;
 
 public class Install extends Phase {
 
-	final static class BeforeInstallEventAction implements ITouchpointAction {
+	final static class BeforeInstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
@@ -32,18 +32,18 @@ public class Install extends Phase {
 		public IStatus undo(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 	}
 
-	final static class AfterInstallEventAction implements ITouchpointAction {
+	final static class AfterInstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
@@ -52,7 +52,7 @@ public class Install extends Phase {
 		public IStatus undo(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
@@ -70,13 +70,13 @@ public class Install extends Phase {
 	//
 	//		monitor.subTask(NLS.bind(Messages.Engine_Installing_IU, unit.getId()));
 	//
-	//		ITouchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
+	//		Touchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
 	//		if (!touchpoint.supports(PHASE_ID))
 	//			return Status.OK_STATUS;
 	//
 	//		((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(PHASE_ID, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 	//
-	//		ITouchpointAction[] actions = getActions();
+	//		ProvisioningAction[] actions = getActions();
 	//		MultiStatus result = new MultiStatus();
 	//		for (int i = 0; i < actions.length; i++) {
 	//			IStatus actionStatus = (IStatus) actions[i].execute();
@@ -96,10 +96,10 @@ public class Install extends Phase {
 		return false;
 	}
 
-	protected ITouchpointAction[] getActions(ITouchpoint touchpoint, Profile profile, Operand currentOperand) {
+	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Profile profile, Operand currentOperand) {
 		//TODO: monitor.subTask(NLS.bind(Messages.Engine_Installing_IU, unit.getId()));
 
-		ITouchpointAction[] actions = new ITouchpointAction[3];
+		ProvisioningAction[] actions = new ProvisioningAction[3];
 		actions[0] = new BeforeInstallEventAction();
 		actions[1] = touchpoint.getAction("install");
 		actions[2] = new AfterInstallEventAction();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/SizingPhase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/SizingPhase.java
index 96577d6..099b84c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/SizingPhase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/SizingPhase.java
@@ -41,9 +41,9 @@ public class SizingPhase extends Phase {
 	//			// TODO: Need do progress reporting
 	//
 	//			// Ask all the touchpoints if they need to download an artifact
-	//			ITouchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
+	//			Touchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
 	//			if (touchpoint.supports(TP_DATA)) {
-	//				ITouchpointAction[] actions = touchpoint.getActions(TP_DATA, profile, operand);
+	//				ProvisioningAction[] actions = touchpoint.getActions(TP_DATA, profile, operand);
 	//				for (int i = 0; i < actions.length; i++) {
 	//					Object result = actions[i].execute();
 	//					if (result != null) {
@@ -96,9 +96,9 @@ public class SizingPhase extends Phase {
 		return dlSize;
 	}
 
-	protected ITouchpointAction[] getActions(ITouchpoint touchpoint, Profile profile, Operand currentOperand) {
-		ITouchpointAction action = touchpoint.getAction("collect");
-		return new ITouchpointAction[] {action};
+	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Profile profile, Operand currentOperand) {
+		ProvisioningAction action = touchpoint.getAction("collect");
+		return new ProvisioningAction[] {action};
 	}
 
 	protected IStatus completePhase(IProgressMonitor monitor, Profile profile, Map parameters) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
index 18e0abe..c5c05a9 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
@@ -19,11 +19,11 @@ import org.eclipse.equinox.p2.engine.*;
 
 public class Uninstall extends Phase {
 
-	final static class BeforeUninstallEventAction implements ITouchpointAction {
+	final static class BeforeUninstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
@@ -32,18 +32,18 @@ public class Uninstall extends Phase {
 		public IStatus undo(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
 	}
 
-	final static class AfterUninstallEventAction implements ITouchpointAction {
+	final static class AfterUninstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
@@ -52,7 +52,7 @@ public class Uninstall extends Phase {
 		public IStatus undo(Map parameters) {
 			Profile profile = (Profile) parameters.get("profile");
 			String phaseId = (String) parameters.get("phaseId");
-			ITouchpoint touchpoint = (ITouchpoint) parameters.get("touchpoint");
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
 			Operand operand = (Operand) parameters.get("operand");
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
@@ -70,14 +70,14 @@ public class Uninstall extends Phase {
 	//
 	//		monitor.subTask(NLS.bind(Messages.Engine_Uninstalling_IU, unit.getId()));
 	//
-	//		ITouchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
+	//		Touchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
 	//		if (!touchpoint.supports(PHASE_ID))
 	//			return Status.OK_STATUS;
 	//
 	//		((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(PHASE_ID, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 	//
 	//		//TODO need to protect the actual operation on a try / catch to ensure the delivery of event. 
-	//		ITouchpointAction[] actions = touchpoint.getActions(PHASE_ID, profile, operand);
+	//		ProvisioningAction[] actions = touchpoint.getActions(PHASE_ID, profile, operand);
 	//		MultiStatus result = new MultiStatus();
 	//		for (int i = 0; i < actions.length; i++) {
 	//			result.add((IStatus) actions[i].execute());
@@ -94,10 +94,10 @@ public class Uninstall extends Phase {
 		return false;
 	}
 
-	protected ITouchpointAction[] getActions(ITouchpoint touchpoint, Profile profile, Operand currentOperand) {
+	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Profile profile, Operand currentOperand) {
 		//TODO: monitor.subTask(NLS.bind(Messages.Engine_Uninstalling_IU, unit.getId()));
 
-		ITouchpointAction[] actions = new ITouchpointAction[3];
+		ProvisioningAction[] actions = new ProvisioningAction[3];
 		actions[0] = new BeforeUninstallEventAction();
 		actions[1] = touchpoint.getAction("uninstall");
 		actions[2] = new AfterUninstallEventAction();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
index d7107ba..42967fc 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
@@ -88,7 +88,7 @@ public class PhaseTest extends TestCase {
 			super(phaseId, weight, phaseName);
 		}
 
-		protected ITouchpointAction[] getActions(ITouchpoint touchpoint, Profile profile, Operand currentOperand) {
+		protected ProvisioningAction[] getActions(Touchpoint touchpoint, Profile profile, Operand currentOperand) {
 			return null;
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index 5c18239..f688089 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -25,7 +25,7 @@ import org.mozilla.javascript.*;
 import org.osgi.framework.*;
 import org.osgi.util.tracker.ServiceTracker;
 
-public class EclipseTouchpoint implements ITouchpoint {
+public class EclipseTouchpoint extends Touchpoint {
 	private final static String ID = "org.eclipse.equinox.p2.touchpoint.eclipse"; //$NON-NLS-1$
 	private final static String CONFIG_FOLDER = "eclipse.configurationFolder";
 	private final static String CACHE_PATH = "eclipse.p2.cache";
@@ -55,9 +55,9 @@ public class EclipseTouchpoint implements ITouchpoint {
 		supportedPhases.add("uninstall");
 	}
 
-	public ITouchpointAction getAction(String actionId) {
+	public ProvisioningAction getAction(String actionId) {
 		if (actionId.equals("collect")) {
-			return new ITouchpointAction() {
+			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
 					Operand operand = (Operand) parameters.get("operand");
@@ -74,7 +74,7 @@ public class EclipseTouchpoint implements ITouchpoint {
 			};
 		}
 		if (actionId.equals("install")) {
-			return new ITouchpointAction() {
+			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
 					Operand operand = (Operand) parameters.get("operand");
@@ -89,7 +89,7 @@ public class EclipseTouchpoint implements ITouchpoint {
 			};
 		}
 		if (actionId.equals("uninstall")) {
-			return new ITouchpointAction() {
+			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
 					Operand operand = (Operand) parameters.get("operand");
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
index 09f65af..832e2c1 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
@@ -13,7 +13,8 @@ package org.eclipse.equinox.internal.p2.touchpoint.natives;
 import java.io.File;
 import java.net.URL;
 import java.util.*;
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
@@ -22,7 +23,7 @@ import org.eclipse.equinox.p2.metadata.*;
 import org.mozilla.javascript.*;
 import org.osgi.framework.Version;
 
-public class NativeTouchpoint implements ITouchpoint {
+public class NativeTouchpoint extends Touchpoint {
 	private final static String CONFIGURATION_DATA = "configurationData";
 	private static final String ID = "org.eclipse.equinox.p2.touchpoint.natives"; //$NON-NLS-1$
 
@@ -37,9 +38,9 @@ public class NativeTouchpoint implements ITouchpoint {
 		return supportedPhases.contains(phaseId);
 	}
 
-	public ITouchpointAction getAction(String actionId) {
+	public ProvisioningAction getAction(String actionId) {
 		if (actionId.equals("collect")) {
-			return new ITouchpointAction() {
+			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
 					Operand operand = (Operand) parameters.get("operand");
@@ -57,7 +58,7 @@ public class NativeTouchpoint implements ITouchpoint {
 		}
 
 		if (actionId.equals("install")) {
-			return new ITouchpointAction() {
+			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
 					Operand operand = (Operand) parameters.get("operand");
@@ -72,7 +73,7 @@ public class NativeTouchpoint implements ITouchpoint {
 			};
 		}
 		if (actionId.equals("uninstall")) {
-			return new ITouchpointAction() {
+			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
 					Operand operand = (Operand) parameters.get("operand");
@@ -183,13 +184,4 @@ public class NativeTouchpoint implements ITouchpoint {
 			return null;
 		return location.getArtifactRepositoryURL();
 	}
-
-	public IStatus completePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
-		return null;
-	}
-
-	public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
-		return null;
-	}
-
 }

commit 150d237102f11c6ee5ef67b827e76a587d175617
Author: Susan Franklin <sfranklin>
Date:   Thu Feb 19 21:52:28 2009 +0000

    Bug 227220 - [ui] copy/paste support for installed software list

11	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
38	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyHandler.java
48	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyPopup.java
84	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyUtils.java
23	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ICopyable.java
39	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java
9	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
16	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
16	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index 2122315..19e7d60 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -16,6 +16,7 @@ import java.net.URISyntaxException;
 import java.util.EventObject;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
@@ -40,7 +41,6 @@ import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.window.SameShellProvider;
-import org.eclipse.jface.wizard.WizardPage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.dnd.*;
 import org.eclipse.swt.events.*;
@@ -50,7 +50,7 @@ import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.statushandlers.StatusManager;
 
-public class AvailableIUsPage extends WizardPage implements ISelectableIUsPage {
+public class AvailableIUsPage extends ProvisioningWizardPage implements ISelectableIUsPage {
 	private static final String DIALOG_SETTINGS_SECTION = "AvailableIUsPage"; //$NON-NLS-1$
 	private static final String AVAILABLE_VIEW_TYPE = "AvailableViewType"; //$NON-NLS-1$
 	private static final String SHOW_LATEST_VERSIONS_ONLY = "ShowLatestVersionsOnly"; //$NON-NLS-1$
@@ -133,6 +133,7 @@ public class AvailableIUsPage extends WizardPage implements ISelectableIUsPage {
 
 		availableIUGroup.setUseBoldFontForFilteredItems(queryContext.getViewType() != IUViewQueryContext.AVAILABLE_VIEW_FLAT);
 		setDropTarget(availableIUGroup.getStructuredViewer().getControl());
+		activateCopy(availableIUGroup.getStructuredViewer().getControl());
 
 		// Details area
 		Group detailsComposite = new Group(composite, SWT.NONE);
@@ -773,4 +774,12 @@ public class AvailableIUsPage extends WizardPage implements ISelectableIUsPage {
 		repoDec.setShowOnlyOnFocus(false);
 		repoDec.showHoverText(status.getMessage());
 	}
+
+	protected String getClipboardText(Control control) {
+		// The default label provider constructor uses the default column config.
+		// since we passed the default column config to the available iu group,
+		// we know that this label provider matches the one used there.
+		return CopyUtils.getIndentedClipboardText(getSelectedIUElements(), new IUDetailsLabelProvider());
+
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyHandler.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyHandler.java
new file mode 100644
index 0000000..1337a8d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyHandler.java
@@ -0,0 +1,38 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.core.commands.AbstractHandler;
+import org.eclipse.core.commands.ExecutionEvent;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.ui.ISources;
+import org.eclipse.ui.handlers.HandlerUtil;
+
+public class CopyHandler extends AbstractHandler {
+
+	public static final String ID = "org.eclipse.ui.edit.copy"; //$NON-NLS-1$
+	ICopyable copySource;
+
+	public CopyHandler(ICopyable copyable) {
+		this.copySource = copyable;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
+	 */
+	public Object execute(ExecutionEvent event) {
+		Object control = HandlerUtil.getVariable(event, ISources.ACTIVE_FOCUS_CONTROL_NAME);
+		if (control instanceof Control)
+			copySource.copyToClipboard((Control) control);
+		return null;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyPopup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyPopup.java
new file mode 100644
index 0000000..98cf824
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyPopup.java
@@ -0,0 +1,48 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.jface.resource.JFaceResources;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.events.SelectionListener;
+import org.eclipse.swt.widgets.*;
+
+public class CopyPopup {
+
+	ICopyable copySource;
+	Control control;
+
+	public CopyPopup(ICopyable copyable, final Control control) {
+		this.copySource = copyable;
+		this.control = control;
+		Menu copyMenu = new Menu(control);
+		MenuItem copyItem = new MenuItem(copyMenu, SWT.NONE);
+		copyItem.addSelectionListener(new SelectionListener() {
+			/*
+			 * @see SelectionListener.widgetSelected (SelectionEvent)
+			 */
+			public void widgetSelected(SelectionEvent e) {
+				copySource.copyToClipboard(control);
+			}
+
+			/*
+			 * @see SelectionListener.widgetDefaultSelected(SelectionEvent)
+			 */
+			public void widgetDefaultSelected(SelectionEvent e) {
+				copySource.copyToClipboard(control);
+			}
+		});
+		copyItem.setText(JFaceResources.getString("copy")); //$NON-NLS-1$
+		control.setMenu(copyMenu);
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyUtils.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyUtils.java
new file mode 100644
index 0000000..b34874a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/CopyUtils.java
@@ -0,0 +1,84 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.core.expressions.*;
+import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.swt.events.DisposeEvent;
+import org.eclipse.swt.events.DisposeListener;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.ui.ISources;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.handlers.IHandlerActivation;
+import org.eclipse.ui.handlers.IHandlerService;
+import org.eclipse.ui.swt.IFocusService;
+
+public class CopyUtils {
+	public static final String NEWLINE = System.getProperty("line.separator"); //$NON-NLS-1$
+	public static final String DELIMITER = "\t"; //$NON-NLS-1$
+	private static final String NESTING_INDENT = "  "; //$NON-NLS-1$
+
+	// We never test the control ID so we can use the same ID for all controls
+	private static final String CONTROL_ID = "org.eclipse.equinox.p2.ui.CopyControlId"; //$NON-NLS-1$
+
+	public static String getIndentedClipboardText(Object[] elements, IUDetailsLabelProvider labelProvider) {
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0; i < elements.length; i++) {
+			if (i > 0)
+				buffer.append(NEWLINE);
+			appendIndention(buffer, elements[i]);
+			buffer.append(labelProvider.getClipboardText(elements[i], DELIMITER));
+		}
+		return buffer.toString();
+	}
+
+	/**
+	 * Install a copy popup menu on the specified control and activate the copy handler for the control when
+	 * the control has focus.  The handler will be deactivated when the control is disposed.
+	 * 
+	 * @param copyable the copyable that will perform the copy
+	 * @param control  the control on which to install the menu and handler
+	 */
+	public static void activateCopy(ICopyable copyable, final Control control) {
+		IFocusService fs = (IFocusService) PlatformUI.getWorkbench().getService(IFocusService.class);
+		final IHandlerService hs = (IHandlerService) PlatformUI.getWorkbench().getService(IHandlerService.class);
+		new CopyPopup(copyable, control);
+		if (fs != null && hs != null) {
+			fs.addFocusTracker(control, CONTROL_ID);
+			final IHandlerActivation handlerActivation = hs.activateHandler(CopyHandler.ID, new CopyHandler(copyable), new Expression() {
+				public EvaluationResult evaluate(IEvaluationContext context) {
+					return context.getVariable(ISources.ACTIVE_FOCUS_CONTROL_NAME) == control ? EvaluationResult.TRUE : EvaluationResult.FALSE;
+				}
+
+				public void collectExpressionInfo(final ExpressionInfo info) {
+					info.addVariableNameAccess(ISources.ACTIVE_FOCUS_CONTROL_NAME);
+				}
+
+			});
+			control.addDisposeListener(new DisposeListener() {
+				public void widgetDisposed(DisposeEvent e) {
+					hs.deactivateHandler(handlerActivation);
+				}
+			});
+		}
+	}
+
+	private static void appendIndention(StringBuffer buffer, Object element) {
+		Object parent;
+		while (element instanceof ProvElement && (parent = ((ProvElement) element).getParent(element)) != null) {
+			buffer.append(NESTING_INDENT);
+			element = parent;
+		}
+
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ICopyable.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ICopyable.java
new file mode 100644
index 0000000..aec0065
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ICopyable.java
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.swt.widgets.Control;
+
+/**
+ * ICopyable defines an interface for UI elements that provide
+ * copy support.
+ * 
+ * @since 3.5
+ */
+public interface ICopyable {
+	public void copyToClipboard(Control activeControl);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java
new file mode 100644
index 0000000..14a6790
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.jface.wizard.WizardPage;
+import org.eclipse.swt.dnd.*;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.ui.PlatformUI;
+
+abstract class ProvisioningWizardPage extends WizardPage implements ICopyable {
+
+	protected ProvisioningWizardPage(String pageName) {
+		super(pageName);
+	}
+
+	protected void activateCopy(Control control) {
+		CopyUtils.activateCopy(this, control);
+
+	}
+
+	public void copyToClipboard(Control activeControl) {
+		String text = getClipboardText(activeControl);
+		if (text.length() == 0)
+			return;
+		Clipboard clipboard = new Clipboard(PlatformUI.getWorkbench().getDisplay());
+		clipboard.setContents(new Object[] {text}, new Transfer[] {TextTransfer.getInstance()});
+		clipboard.dispose();
+	}
+
+	protected abstract String getClipboardText(Control control);
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
index 1ba8d57..7fc93ee 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
@@ -30,14 +30,13 @@ import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.dialogs.IMessageProvider;
 import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.viewers.*;
-import org.eclipse.jface.wizard.WizardPage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.statushandlers.StatusManager;
 
-public abstract class ResolutionWizardPage extends WizardPage {
+public abstract class ResolutionWizardPage extends ProvisioningWizardPage {
 	protected IUElementListRoot input;
 	PlannerResolutionOperation resolvedOperation;
 	ResolutionResult resolutionResult;
@@ -47,6 +46,7 @@ public abstract class ResolutionWizardPage extends WizardPage {
 	TreeViewer treeViewer;
 	Text detailsArea;
 	ProvElementContentProvider contentProvider;
+	IUDetailsLabelProvider labelProvider;
 	protected Display display;
 
 	protected ResolutionWizardPage(Policy policy, IUElementListRoot input, String profileID, PlannerResolutionOperation initialResolution) {
@@ -86,6 +86,7 @@ public abstract class ResolutionWizardPage extends WizardPage {
 		Tree tree = treeViewer.getTree();
 		tree.setLayoutData(data);
 		tree.setHeaderVisible(true);
+		activateCopy(tree);
 		IUColumnConfig[] columns = getColumnConfig();
 		for (int i = 0; i < columns.length; i++) {
 			TreeColumn tc = new TreeColumn(tree, SWT.LEFT, i);
@@ -106,7 +107,8 @@ public abstract class ResolutionWizardPage extends WizardPage {
 
 		contentProvider = new ProvElementContentProvider();
 		treeViewer.setContentProvider(contentProvider);
-		treeViewer.setLabelProvider(new IUDetailsLabelProvider(null, getColumnConfig(), getShell()));
+		labelProvider = new IUDetailsLabelProvider(null, getColumnConfig(), getShell());
+		treeViewer.setLabelProvider(labelProvider);
 
 		if (resolvedOperation == null)
 			// this will also set the input on the viewer
@@ -351,4 +353,8 @@ public abstract class ResolutionWizardPage extends WizardPage {
 	}
 
 	protected abstract IQueryable getQueryable(ProvisioningPlan plan);
+
+	protected String getClipboardText(Control control) {
+		return CopyUtils.getIndentedClipboardText(getSelectedElements(), labelProvider);
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index 6160fe9..9764bd7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -21,7 +21,6 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.viewers.*;
-import org.eclipse.jface.wizard.WizardPage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.layout.*;
@@ -35,13 +34,14 @@ import org.eclipse.swt.widgets.*;
  * @since 3.5
  *
  */
-public class SelectableIUsPage extends WizardPage implements ISelectableIUsPage {
+public class SelectableIUsPage extends ProvisioningWizardPage implements ISelectableIUsPage {
 
 	IUElementListRoot root;
 	Object[] initialSelections;
 	CheckboxTableViewer tableViewer;
 	Text detailsArea;
 	ProvElementContentProvider contentProvider;
+	IUDetailsLabelProvider labelProvider;
 	protected Display display;
 	protected Policy policy;
 	String profileId;
@@ -80,6 +80,7 @@ public class SelectableIUsPage extends WizardPage implements ISelectableIUsPage
 		Table table = tableViewer.getTable();
 		table.setLayoutData(data);
 		table.setHeaderVisible(true);
+		activateCopy(table);
 		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
 		for (int i = 0; i < columns.length; i++) {
 			TableColumn tc = new TableColumn(table, SWT.LEFT, i);
@@ -112,7 +113,8 @@ public class SelectableIUsPage extends WizardPage implements ISelectableIUsPage
 		contentProvider = new ProvElementContentProvider();
 		tableViewer.setContentProvider(contentProvider);
 		tableViewer.setInput(root);
-		tableViewer.setLabelProvider(new IUDetailsLabelProvider(null, ProvUI.getIUColumnConfig(), getShell()));
+		labelProvider = new IUDetailsLabelProvider(null, ProvUI.getIUColumnConfig(), getShell());
+		tableViewer.setLabelProvider(labelProvider);
 		setInitialCheckState();
 
 		// The text area shows a description of the selected IU, or error detail if applicable.
@@ -192,4 +194,15 @@ public class SelectableIUsPage extends WizardPage implements ISelectableIUsPage
 	public boolean canFlipToNextPage() {
 		return isPageComplete();
 	}
+
+	protected String getClipboardText(Control control) {
+		StringBuffer buffer = new StringBuffer();
+		Object[] elements = getSelectedElements();
+		for (int i = 0; i < elements.length; i++) {
+			if (i > 0)
+				buffer.append(CopyUtils.NEWLINE);
+			buffer.append(labelProvider.getClipboardText(elements[i], CopyUtils.DELIMITER));
+		}
+		return buffer.toString();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
index d9d6705..7c46f07 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -66,11 +66,11 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 	}
 
 	public String getText(Object obj) {
-		return getColumnText(obj, 0);
+		return getColumnText(obj, PRIMARY_COLUMN);
 	}
 
 	public Image getImage(Object obj) {
-		return getColumnImage(obj, columnConfig[0].columnField);
+		return getColumnImage(obj, PRIMARY_COLUMN);
 	}
 
 	public String getColumnText(Object element, int columnIndex) {
@@ -196,12 +196,12 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 		toolTipProperty = propertyName;
 	}
 
-	public String getClipboardText(Object element) {
+	public String getClipboardText(Object element, String columnDelimiter) {
 		StringBuffer result = new StringBuffer();
 		for (int i = 0; i < columnConfig.length; i++) {
 			if (i != 0)
-				result.append(" "); //$NON-NLS-1$
-			result.append(getColumnText(element, columnConfig[i].columnField));
+				result.append(columnDelimiter);
+			result.append(getColumnText(element, i));
 		}
 		return result.toString();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
index a3cbaa5..15aeaf1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
@@ -67,7 +67,7 @@ public class InstalledIUGroup extends StructuredIUGroup {
 
 		// Now the visuals, columns before labels.
 		setTreeColumns(installedIUViewer.getTree());
-		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
+		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider(null, getColumnConfig(), null));
 
 		// Input last.
 		installedIUViewer.setInput(getInput());
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
index de9508e..a01bc3d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
@@ -12,7 +12,8 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.dialogs.ILayoutConstants;
+import org.eclipse.equinox.internal.p2.ui.dialogs.*;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.*;
@@ -25,10 +26,10 @@ import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.window.SameShellProvider;
 import org.eclipse.jface.window.Window;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.dnd.*;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.about.*;
 import org.eclipse.ui.menus.*;
@@ -38,7 +39,7 @@ import org.eclipse.ui.services.IServiceLocator;
  * @since 3.4
  *
  */
-public class InstalledSoftwarePage extends InstallationPage {
+public class InstalledSoftwarePage extends InstallationPage implements ICopyable {
 
 	private static final int DEFAULT_WIDTH = 300;
 	private static final int DEFAULT_COLUMN_WIDTH = 150;
@@ -84,6 +85,8 @@ public class InstalledSoftwarePage extends InstallationPage {
 
 		});
 
+		CopyUtils.activateCopy(this, installedIUGroup.getStructuredViewer().getControl());
+
 		gd = new GridData(SWT.FILL, SWT.FILL, true, false);
 		gd.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_DESCRIPTION_HEIGHT);
 		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
@@ -182,4 +185,13 @@ public class InstalledSoftwarePage extends InstallationPage {
 		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, pixels / 3), new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, pixels * 2 / 3)};
 
 	}
+	public void copyToClipboard(Control activeControl) {
+		Object[] elements = installedIUGroup.getSelectedIUElements();
+		if (elements.length == 0)
+			return;
+		String text = CopyUtils.getIndentedClipboardText(elements, new IUDetailsLabelProvider(null, getColumnConfig(), null));
+		Clipboard clipboard = new Clipboard(PlatformUI.getWorkbench().getDisplay());
+		clipboard.setContents(new Object[] {text}, new Transfer[] {TextTransfer.getInstance()});
+		clipboard.dispose();
+	}
 }

commit 43014e3a84df2c6d062666c54ec284d7f3eb2551
Author: John Arthorne <johna>
Date:   Thu Jan 10 20:19:37 2008 +0000

    Bug 214704 [prov] Consistency of repository index compression

32	14	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
22	9	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java
6	3	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
14	11	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
10	7	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
2	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
4	3	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
90	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 420e962..752ed4d 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -12,7 +12,8 @@ import java.io.*;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
-import java.util.zip.GZIPOutputStream;
+import java.util.jar.JarEntry;
+import java.util.jar.JarOutputStream;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
@@ -25,7 +26,7 @@ import org.eclipse.equinox.spi.p2.artifact.repository.AbstractArtifactRepository
 public class SimpleArtifactRepository extends AbstractArtifactRepository implements IArtifactRepository, IFileArtifactRepository {
 
 	static final private String BLOBSTORE = ".blobstore/"; //$NON-NLS-1$
-	static final private String CONTENT_FILENAME = "artifacts.xml"; //$NON-NLS-1$
+	static final private String CONTENT_FILENAME = "artifacts"; //$NON-NLS-1$
 	static final private String REPOSITORY_TYPE = "org.eclipse.equinox.p2.artifact.repository.simpleRepository"; //$NON-NLS-1$
 	static final private Integer REPOSITORY_VERSION = new Integer(1);
 	static final public String[][] DEFAULT_MAPPING_RULES = { {"(& (namespace=eclipse) (classifier=plugin))", "${repoUrl}/plugins/${id}_${version}.jar"}, //$NON-NLS-1$//$NON-NLS-2$
@@ -35,7 +36,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	private static final String ARTIFACT_FOLDER = "artifact.folder"; //$NON-NLS-1$
 	private static final String ARTIFACT_REFERENCE = "artifact.reference"; //$NON-NLS-1$
 	private static final String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
-	private static final String GZIP_EXTENSION = ".gz"; //$NON-NLS-1$
+	private static final String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 
 	transient private Mapper mapper = new Mapper();
 	protected String[][] mappingRules = DEFAULT_MAPPING_RULES;
@@ -43,8 +44,8 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	private boolean signatureVerification = false;
 	private transient BlobStore blobStore;
 
-	public static URL getActualLocation(URL base, boolean gzip) {
-		return getActualLocation(base, gzip ? GZIP_EXTENSION : ""); //$NON-NLS-1$
+	public static URL getActualLocation(URL base, boolean compress) {
+		return getActualLocation(base, compress ? JAR_EXTENSION : XML_EXTENSION);
 	}
 
 	private static URL getActualLocation(URL base, String extension) {
@@ -432,22 +433,39 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	}
 
 	public void save() {
-		save(true);
+		boolean compress = "true".equalsIgnoreCase((String) properties.get(PROP_COMPRESSED)); //$NON-NLS-1$
+		save(compress);
 	}
 
-	public void save(boolean gzip) {
+	public void save(boolean compress) {
 		OutputStream os = null;
 		try {
 			try {
-				URL actualLocation = getActualLocation(location, gzip);
+				URL actualLocation = getActualLocation(location, false);
 				File artifactsFile = new File(actualLocation.getPath());
-				if (!artifactsFile.exists()) {
-					// create parent folders
-					artifactsFile.getParentFile().mkdirs();
+				File jarFile = new File(getActualLocation(location, true).getPath());
+				if (!compress) {
+					if (jarFile.exists()) {
+						jarFile.delete();
+					}
+					if (!artifactsFile.exists()) {
+						// create parent folders
+						artifactsFile.getParentFile().mkdirs();
+					}
+					os = new FileOutputStream(artifactsFile);
+				} else {
+					if (artifactsFile.exists()) {
+						artifactsFile.delete();
+					}
+					if (!jarFile.exists()) {
+						if (!jarFile.getParentFile().exists())
+							jarFile.getParentFile().mkdirs();
+						jarFile.createNewFile();
+					}
+					JarOutputStream jOs = new JarOutputStream(new FileOutputStream(jarFile));
+					jOs.putNextEntry(new JarEntry(new Path(actualLocation.getFile()).lastSegment()));
+					os = jOs;
 				}
-				os = new FileOutputStream(artifactsFile);
-				if (gzip)
-					os = new GZIPOutputStream(os);
 				new SimpleArtifactRepositoryIO().write(this, os);
 			} catch (IOException e) {
 				// TODO proper exception handling
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java
index ec37d1d..fdf38b1 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryFactory.java
@@ -12,8 +12,10 @@ package org.eclipse.equinox.internal.p2.artifact.repository.simple;
 
 import java.io.*;
 import java.net.URL;
-import java.util.zip.GZIPInputStream;
+import java.util.jar.JarEntry;
+import java.util.jar.JarInputStream;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.p2.artifact.repository.ECFTransport;
 import org.eclipse.equinox.internal.p2.artifact.repository.Transport;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
@@ -30,15 +32,15 @@ public class SimpleArtifactRepositoryFactory implements IArtifactRepositoryFacto
 			// TODO This temporary file stuff is not very elegant. 
 			OutputStream artifacts = null;
 			temp = File.createTempFile("artifacts", ".xml"); //$NON-NLS-1$ //$NON-NLS-2$
-			// try with gzip
-			boolean gzip = true;
+			// try with compressed
+			boolean compress = true;
 			try {
 				artifacts = new BufferedOutputStream(new FileOutputStream(temp));
-				IStatus status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, gzip).toExternalForm(), artifacts, null);
+				IStatus status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, compress).toExternalForm(), artifacts, null);
 				if (!status.isOK()) {
-					// retry unzipped
-					gzip = false;
-					status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, gzip).toExternalForm(), artifacts, null);
+					// retry uncompressed
+					compress = false;
+					status = getTransport().download(SimpleArtifactRepository.getActualLocation(location, compress).toExternalForm(), artifacts, null);
 					if (!status.isOK())
 						return null;
 				}
@@ -49,8 +51,19 @@ public class SimpleArtifactRepositoryFactory implements IArtifactRepositoryFacto
 			InputStream descriptorStream = null;
 			try {
 				descriptorStream = new BufferedInputStream(new FileInputStream(temp));
-				if (gzip)
-					descriptorStream = new GZIPInputStream(descriptorStream);
+				if (compress) {
+					URL actualFile = SimpleArtifactRepository.getActualLocation(location, false);
+					JarInputStream jInStream = new JarInputStream(descriptorStream);
+					JarEntry jarEntry = jInStream.getNextJarEntry();
+					String filename = new Path(actualFile.getFile()).lastSegment();
+					while (jarEntry != null && !(filename.equals(jarEntry.getName()))) {
+						jarEntry = jInStream.getNextJarEntry();
+					}
+					if (jarEntry == null) {
+						throw new FileNotFoundException("Repository not found in " + actualFile.getPath()); //$NON-NLS-1$
+					}
+					descriptorStream = jInStream;
+				}
 				SimpleArtifactRepositoryIO io = new SimpleArtifactRepositoryIO();
 				SimpleArtifactRepository result = (SimpleArtifactRepository) io.read(descriptorStream);
 				result.initializeAfterLoad(location);
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index dc7d854..e892458 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -105,8 +105,10 @@ public class EclipseGeneratorApplication implements IApplication {
 		// TODO for now create a Simple repo by default.
 		String repositoryName = artifactLocation + " - artifacts"; //$NON-NLS-1$
 		IArtifactRepository result = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$
-		if (result != null)
+		if (result != null) {
 			provider.setArtifactRepository(result);
+			result.setProperty(IRepository.PROP_COMPRESSED, compress);
+		}
 	}
 
 	public void initializeForInplace(EclipseInstallGeneratorInfoProvider provider) {
@@ -147,9 +149,10 @@ public class EclipseGeneratorApplication implements IApplication {
 		// TODO for now create a random repo by default.
 		String repositoryName = metadataLocation + " - metadata"; //$NON-NLS-1$
 		IMetadataRepository result = manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-		result.setProperty(IRepository.PROP_COMPRESSED, compress);
-		if (result != null)
+		if (result != null) {
+			result.setProperty(IRepository.PROP_COMPRESSED, compress);
 			provider.setMetadataRepository(result);
+		}
 	}
 
 	private void initializeRepositories(EclipseInstallGeneratorInfoProvider provider) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 6b66746..67b4c70 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
+import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.osgi.service.resolver.*;
 import org.osgi.framework.Version;
 
@@ -32,16 +33,6 @@ public class Generator {
 
 	//	private static String[][] defaultMappingRules = new String[][] { {"(& (namespace=eclipse) (classifier=feature))", "${repoUrl}/feature/${id}_${version}"}, {"(& (namespace=eclipse) (classifier=plugin))", "${repoUrl}/plugin/${id}_${version}"}, {"(& (namespace=eclipse) (classifier=native))", "${repoUrl}/native/${id}_${version}"}};
 
-	private final IGeneratorInfo info;
-
-	/**
-	 * Short term fix to ensure IUs that have no corresponding category are not lost.
-	 * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=211521.
-	 */
-	protected final Set rootCategory = new HashSet();
-
-	private StateObjectFactory stateObjectFactory;
-
 	/**
 	 * Convert a list of tokens into an array. The list separator has to be
 	 * specified.
@@ -58,6 +49,16 @@ public class Generator {
 		return (String[]) result.toArray(new String[result.size()]);
 	}
 
+	private final IGeneratorInfo info;
+
+	/**
+	 * Short term fix to ensure IUs that have no corresponding category are not lost.
+	 * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=211521.
+	 */
+	protected final Set rootCategory = new HashSet();
+
+	private StateObjectFactory stateObjectFactory;
+
 	public Generator(IGeneratorInfo infoProvider) {
 		this.info = infoProvider;
 		// TODO need to figure a better way of configuring the generator...
@@ -170,7 +171,9 @@ public class Generator {
 		//		if (info.publishArtifacts() || info.publishArtifactRepository()) {
 		//			persistence.saveArtifactRepository();
 		//		}
-		info.getMetadataRepository().addInstallableUnits((IInstallableUnit[]) ius.toArray(new IInstallableUnit[ius.size()]));
+		IMetadataRepository metadataRepository = info.getMetadataRepository();
+		if (metadataRepository != null)
+			metadataRepository.addInstallableUnits((IInstallableUnit[]) ius.toArray(new IInstallableUnit[ius.size()]));
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
index fcc02b1..5c7d6eb 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
@@ -29,10 +29,11 @@ import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository
  * and combine any metadata repository files that are found.
  */
 public class LocalMetadataRepository extends AbstractMetadataRepository {
-	static final private String CONTENT_FILENAME = "content.xml"; //$NON-NLS-1$
+	static final private String CONTENT_FILENAME = "content"; //$NON-NLS-1$
 	static final private String REPOSITORY_TYPE = LocalMetadataRepository.class.getName();
 	static final private Integer REPOSITORY_VERSION = new Integer(1);
 	static final private String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
+	static final private String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 
 	protected HashSet units = new LinkedHashSet();
 
@@ -48,7 +49,7 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 	}
 
 	public static File getActualLocation(URL location) {
-		return getActualLocation(location, ""); //$NON-NLS-1$
+		return getActualLocation(location, XML_EXTENSION); //$NON-NLS-1$
 	}
 
 	/**
@@ -127,22 +128,24 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 
 	private void save() {
 		File file = getActualLocation(location);
-		boolean jar = "true".equalsIgnoreCase((String) properties.get(PROP_COMPRESSED)); //$NON-NLS-1$
+		File jarFile = getActualLocation(location, JAR_EXTENSION);
+		boolean compress = "true".equalsIgnoreCase((String) properties.get(PROP_COMPRESSED)); //$NON-NLS-1$
 		try {
 			OutputStream output = null;
-			if (!jar) {
+			if (!compress) {
+				if (jarFile.exists()) {
+					jarFile.delete();
+				}
 				if (!file.exists()) {
 					if (!file.getParentFile().exists())
 						file.getParentFile().mkdirs();
 					file.createNewFile();
 				}
 				output = new FileOutputStream(file);
-			}
-			if (jar) {
+			} else {
 				if (file.exists()) {
 					file.delete();
 				}
-				File jarFile = getActualLocation(location, JAR_EXTENSION);
 				if (!jarFile.exists()) {
 					if (!jarFile.getParentFile().exists())
 						jarFile.getParentFile().mkdirs();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
index 1671f5d..8fafc90 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
@@ -25,6 +25,7 @@ import org.eclipse.equinox.spi.p2.metadata.repository.IMetadataRepositoryFactory
 public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFactory {
 
 	private static final String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
+	private static final String XML_EXTENSION = ".xml";
 
 	public IMetadataRepository create(URL location, String name, String type) {
 		if (location.getProtocol().equals("file")) //$NON-NLS-1$
@@ -37,7 +38,7 @@ public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFacto
 		IMetadataRepository result = load(location, JAR_EXTENSION);
 		// compressed file is not available, load the xml
 		if (result == null) {
-			result = load(location, null);
+			result = load(location, XML_EXTENSION);
 		}
 		return result;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
index 95be57e..d4756c9 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
@@ -25,7 +25,8 @@ import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository
  */
 public class URLMetadataRepository extends AbstractMetadataRepository {
 
-	static final protected String CONTENT_FILENAME = "content.xml"; //$NON-NLS-1$
+	static final protected String CONTENT_FILENAME = "content"; //$NON-NLS-1$
+	static final private String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 	static final private String REPOSITORY_TYPE = URLMetadataRepository.class.getName();
 	static final private Integer REPOSITORY_VERSION = new Integer(1);
 
@@ -33,12 +34,12 @@ public class URLMetadataRepository extends AbstractMetadataRepository {
 	protected HashSet units = new LinkedHashSet();
 
 	public static URL getActualLocation(URL base) {
-		return getActualLocation(base, null);
+		return getActualLocation(base, XML_EXTENSION);
 	}
 
 	public static URL getActualLocation(URL base, String extension) {
 		if (extension == null) {
-			extension = ""; //$NON-NLS-1$
+			extension = XML_EXTENSION;
 		}
 		String spec = base.toExternalForm();
 		if (spec.endsWith(CONTENT_FILENAME + extension))
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
index 1f86c21..fd6c16a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/SimpleArtifactRepositoryTest.java
@@ -10,10 +10,18 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.artifact.repository;
 
+import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 import junit.framework.TestCase;
 import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.repository.IRepository;
+import org.eclipse.equinox.p2.metadata.generator.EclipseInstallGeneratorInfoProvider;
+import org.eclipse.equinox.p2.metadata.generator.Generator;
+import org.eclipse.equinox.p2.tests.TestActivator;
 
 public class SimpleArtifactRepositoryTest extends TestCase {
 
@@ -32,19 +40,95 @@ public class SimpleArtifactRepositoryTest extends TestCase {
 		assertEquals(base, SimpleArtifactRepository.getActualLocation(base, false));
 	}
 
-	public void testGetActualLocationGzip1() throws MalformedURLException {
+	public void testGetActualLocationCompressed1() throws MalformedURLException {
 		URL base = new URL("http://localhost/artifactRepository");
-		assertEquals(new URL(base + "/artifacts.xml.gz"), SimpleArtifactRepository.getActualLocation(base, true));
+		assertEquals(new URL(base + "/artifacts.jar"), SimpleArtifactRepository.getActualLocation(base, true));
 	}
 
-	public void testGetActualLocationGzip2() throws MalformedURLException {
+	public void testGetActualLocationCompressed2() throws MalformedURLException {
 		URL base = new URL("http://localhost/artifactRepository/");
-		assertEquals(new URL(base + "artifacts.xml.gz"), SimpleArtifactRepository.getActualLocation(base, true));
+		assertEquals(new URL(base + "artifacts.jar"), SimpleArtifactRepository.getActualLocation(base, true));
 	}
 
-	public void testGetActualLocationGzip3() throws MalformedURLException {
-		URL base = new URL("http://localhost/artifactRepository/artifacts.xml.gz");
+	public void testGetActualLocationCompressed3() throws MalformedURLException {
+		URL base = new URL("http://localhost/artifactRepository/artifacts.jar");
 		assertEquals(base, SimpleArtifactRepository.getActualLocation(base, true));
 	}
 
+	private IArtifactRepositoryManager getArtifactRepositoryManager() {
+		return (IArtifactRepositoryManager) ServiceHelper.getService(TestActivator.getContext(), IArtifactRepositoryManager.class.getName());
+	}
+
+	public void testCompressedRepository() throws MalformedURLException {
+		IArtifactRepositoryManager artifactRepositoryManager = getArtifactRepositoryManager();
+		String tempDir = System.getProperty("java.io.tmpdir");
+		File repoLocation = new File(tempDir, "SimpleArtifactRepositoryTest");
+		IArtifactRepository repo = artifactRepositoryManager.createRepository(repoLocation.toURL(), "artifact name", "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
+		repo.setProperty(IRepository.PROP_COMPRESSED, "true");
+		EclipseInstallGeneratorInfoProvider provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setArtifactRepository(repo);
+		provider.initialize(repoLocation);
+		provider.setRootVersion("3.3");
+		provider.setRootId("sdk");
+		provider.setFlavor("tooling");
+		new Generator(provider).generate();
+		File files[] = repoLocation.listFiles();
+		boolean jarFilePresent = false;
+		boolean artifactFilePresent = false;
+		for (int i = 0; i < files.length; i++) {
+			if ("artifacts.jar".equalsIgnoreCase(files[i].getName())) {
+				jarFilePresent = true;
+			}
+			if ("artifacts.xml".equalsIgnoreCase(files[i].getName())) {
+				artifactFilePresent = false;
+			}
+		}
+		if (!jarFilePresent)
+			fail("Repository should create JAR for artifact.xml");
+		if (artifactFilePresent)
+			fail("Repository should not create artifact.xml");
+		delete(repoLocation);
+	}
+
+	public void testUncompressedRepository() throws MalformedURLException {
+		IArtifactRepositoryManager artifactRepositoryManager = getArtifactRepositoryManager();
+		String tempDir = System.getProperty("java.io.tmpdir");
+		File repoLocation = new File(tempDir, "SimpleArtifactRepositoryTest");
+		IArtifactRepository repo = artifactRepositoryManager.createRepository(repoLocation.toURL(), "artifact name", "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
+		repo.setProperty(IRepository.PROP_COMPRESSED, "false");
+		EclipseInstallGeneratorInfoProvider provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setArtifactRepository(repo);
+		provider.initialize(repoLocation);
+		provider.setRootVersion("3.3");
+		provider.setRootId("sdk");
+		provider.setFlavor("tooling");
+		new Generator(provider).generate();
+		File files[] = repoLocation.listFiles();
+		boolean jarFilePresent = false;
+		boolean artifactFilePresent = false;
+		for (int i = 0; i < files.length; i++) {
+			if ("artifacts.jar".equalsIgnoreCase(files[i].getName())) {
+				jarFilePresent = true;
+			}
+			if ("artifacts.xml".equalsIgnoreCase(files[i].getName())) {
+				artifactFilePresent = true;
+			}
+		}
+		if (jarFilePresent)
+			fail("Repository should not create JAR for artifact.xml");
+		if (!artifactFilePresent)
+			fail("Repository should create artifact.xml");
+		delete(repoLocation);
+	}
+
+	private boolean delete(File file) {
+		if (!file.exists())
+			return true;
+		if (file.isDirectory()) {
+			File[] children = file.listFiles();
+			for (int i = 0; i < children.length; i++)
+				delete(children[i]);
+		}
+		return file.delete();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
index bdc7c39..bced78d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
@@ -64,7 +64,7 @@ public class LocalMetadataRepositoryTest extends AbstractProvisioningTest {
 		boolean xmlFilePresent = false;
 		// one of the files in the repository should be the content.xml.jar
 		for (int i = 0; i < files.length; i++) {
-			if ("content.xml.jar".equalsIgnoreCase(files[i].getName())) {
+			if ("content.jar".equalsIgnoreCase(files[i].getName())) {
 				jarFilePresent = true;
 			}
 			if ("content.xml".equalsIgnoreCase(files[i].getName())) {
@@ -131,7 +131,7 @@ public class LocalMetadataRepositoryTest extends AbstractProvisioningTest {
 		boolean jarFilePresent = false;
 		// none of the files in the repository should be the content.xml.jar
 		for (int i = 0; i < files.length; i++) {
-			if ("content.xml.jar".equalsIgnoreCase(files[i].getName())) {
+			if ("content.jar".equalsIgnoreCase(files[i].getName())) {
 				jarFilePresent = true;
 			}
 		}

commit 747901281ac6b7ec11d18501ac299f6e5c223e99
Author: John Arthorne <johna>
Date:   Wed Feb 13 22:30:43 2008 +0000

    Bug 218252 [prov] All registered services should be service interfaces

5	5	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
2	10	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
164	0	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
26	0	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java
0	2	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java
0	163	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java
0	2	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
index b9a50c1..9451239 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
@@ -16,8 +16,8 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener;
-import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateChecker;
 import org.eclipse.ui.IStartup;
 import org.eclipse.ui.statushandlers.StatusManager;
 
@@ -37,7 +37,7 @@ public class AutomaticUpdateScheduler implements IStartup {
 			ProvSDKMessages.SchedulerStartup_8PM, ProvSDKMessages.SchedulerStartup_9PM, ProvSDKMessages.SchedulerStartup_10PM, ProvSDKMessages.SchedulerStartup_11PM, ProvSDKMessages.SchedulerStartup_12AM,};
 
 	private IUpdateListener listener = null;
-	private UpdateChecker checker = null;
+	private IUpdateChecker checker = null;
 	private String profileId;
 
 	/**
@@ -45,7 +45,7 @@ public class AutomaticUpdateScheduler implements IStartup {
 	 */
 	public AutomaticUpdateScheduler() {
 		ProvSDKUIActivator.getDefault().setScheduler(this);
-		checker = (UpdateChecker) ServiceHelper.getService(ProvSDKUIActivator.getContext(), UpdateChecker.class.getName());
+		checker = (IUpdateChecker) ServiceHelper.getService(ProvSDKUIActivator.getContext(), IUpdateChecker.SERVICE_NAME);
 		if (checker == null) {
 			// Something did not initialize properly
 			IStatus status = new Status(IStatus.ERROR, ProvSDKUIActivator.PLUGIN_ID, ProvSDKMessages.AutomaticUpdateScheduler_UpdateNotInitialized);
@@ -90,8 +90,8 @@ public class AutomaticUpdateScheduler implements IStartup {
 		if (pref.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED) == false)
 			return;
 		String schedule = pref.getString(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE);
-		long delay = UpdateChecker.ONE_TIME_CHECK;
-		long poll = UpdateChecker.ONE_TIME_CHECK;
+		long delay = IUpdateChecker.ONE_TIME_CHECK;
+		long poll = IUpdateChecker.ONE_TIME_CHECK;
 		if (!schedule.equals(PreferenceConstants.PREF_UPDATE_ON_STARTUP)) {
 			delay = computeDelay(pref);
 			poll = computePoll(pref);
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
index ecf2d50..9b56f6d 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
@@ -10,18 +10,15 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatechecker;
 
-import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateChecker;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker;
 import org.osgi.framework.*;
 
 /**
  * Activator class that registers the update checker service.
- * 
- * @since 3.4
  */
 public class Activator implements BundleActivator {
 
 	private static BundleContext context;
-	private UpdateChecker updateChecker;
 	private ServiceRegistration registrationChecker;
 
 	public static BundleContext getContext() {
@@ -30,15 +27,10 @@ public class Activator implements BundleActivator {
 
 	public void start(BundleContext bundleContext) throws Exception {
 		Activator.context = bundleContext;
-
-		updateChecker = new UpdateChecker();
-		registrationChecker = context.registerService(UpdateChecker.class.getName(), updateChecker, null);
-
+		registrationChecker = context.registerService(IUpdateChecker.SERVICE_NAME, new UpdateChecker(), null);
 	}
 
 	public void stop(BundleContext bundleContext) throws Exception {
 		registrationChecker.unregister();
-		updateChecker = null;
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
new file mode 100644
index 0000000..09939bd
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
@@ -0,0 +1,164 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.updatechecker;
+
+import java.text.SimpleDateFormat;
+import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.provisional.p2.director.IPlanner;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.*;
+
+/**
+ * Default implementation of {@link IUpdateChecker}.
+ * <p>
+ * This implementation is not optimized.  It doesn't optimize for multiple
+ * polls on the same profile, nor does it cache any info about a profile from
+ * poll to poll.
+ */
+public class UpdateChecker implements IUpdateChecker {
+	public static boolean DEBUG = false;
+	public static boolean TRACE = false;
+	private HashSet checkers = new HashSet(); // threads
+	IProfileRegistry profileRegistry;
+	IPlanner planner;
+
+	private class UpdateCheckThread extends Thread {
+		boolean done = false;
+		long poll, delay;
+		IUpdateListener listener;
+		String profileId;
+
+		UpdateCheckThread(String profileId, long delay, long poll, IUpdateListener listener) {
+			this.poll = poll;
+			this.delay = delay;
+			this.profileId = profileId;
+			this.listener = listener;
+		}
+
+		public void run() {
+			try {
+				if (delay != ONE_TIME_CHECK && delay > 0) {
+					Thread.sleep(delay);
+				}
+				while (!done) {
+
+					log("Checking for updates for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
+					IInstallableUnit[] iusWithUpdates = checkForUpdates(profileId);
+					if (iusWithUpdates.length > 0) {
+						log("Notifying listener of available updates"); //$NON-NLS-1$
+						UpdateEvent event = new UpdateEvent(profileId, iusWithUpdates);
+						if (!done)
+							listener.updatesAvailable(event);
+					} else {
+						log("No updates were available"); //$NON-NLS-1$
+					}
+					if (delay == ONE_TIME_CHECK || delay <= 0) {
+						done = true;
+					} else {
+						Thread.sleep(poll);
+					}
+				}
+			} catch (InterruptedException e) {
+				// nothing
+			} catch (Exception e) {
+				log("Exception in update check thread", e); //$NON-NLS-1$
+			}
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker#addUpdateCheck(java.lang.String, long, long, org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener)
+	 */
+	public void addUpdateCheck(String profileId, long delay, long poll, IUpdateListener listener) {
+		log("Adding update checker for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
+		UpdateCheckThread thread = new UpdateCheckThread(profileId, delay, poll, listener);
+		checkers.add(thread);
+		thread.start();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker#removeUpdateCheck(org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener)
+	 */
+	public void removeUpdateCheck(IUpdateListener listener) {
+		Iterator iter = checkers.iterator();
+		while (iter.hasNext()) {
+			UpdateCheckThread thread = (UpdateCheckThread) iter.next();
+			if (thread.listener == listener) {
+				thread.done = true;
+				checkers.remove(thread);
+				break;
+			}
+		}
+	}
+
+	/*
+	 * Return the array of ius in the profile that have updates
+	 * available.
+	 */
+	IInstallableUnit[] checkForUpdates(String profileId) {
+		// TODO this is naive.  We get all the ius every time whereas we
+		// could monitor changes in the profile.
+		IProfile profile = getProfileRegistry().getProfile(profileId);
+		ArrayList iusWithUpdates = new ArrayList();
+		if (profile == null)
+			return new IInstallableUnit[0];
+		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) iter.next();
+			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, new ProvisioningContext(), null);
+			if (replacements.length > 0)
+				iusWithUpdates.add(iu);
+		}
+		return (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]);
+	}
+
+	void log(String string, Throwable e) {
+		System.err.println(string + ": " + e); //$NON-NLS-1$
+		if (DEBUG)
+			e.printStackTrace();
+	}
+
+	void log(String string) {
+		if (TRACE)
+			System.out.println(string);
+	}
+
+	String getTimeStamp() {
+		Date d = new Date();
+		SimpleDateFormat df = new SimpleDateFormat("[MM/dd/yy;HH:mm:ss:SSS]"); //$NON-NLS-1$
+		return df.format(d);
+	}
+
+	IPlanner getPlanner() {
+		if (planner == null) {
+			planner = (IPlanner) ServiceHelper.getService(Activator.getContext(), IPlanner.class.getName());
+			if (planner == null) {
+				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
+			}
+		}
+		return planner;
+	}
+
+	IProfileRegistry getProfileRegistry() {
+		if (profileRegistry == null) {
+			profileRegistry = (IProfileRegistry) ServiceHelper.getService(Activator.getContext(), IProfileRegistry.class.getName());
+			if (profileRegistry == null) {
+				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
+			}
+		}
+		return profileRegistry;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java
new file mode 100644
index 0000000..335a82b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java
@@ -0,0 +1,26 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.updatechecker;
+
+/**
+ * An UpdateChecker periodically polls for updates to specified profiles and
+ * informs listeners if updates are available.  Listeners may then determine
+ * whether to retrieve the updates, inform the user, etc.
+ */
+public interface IUpdateChecker {
+	public static final String SERVICE_NAME = IUpdateChecker.class.getName();
+	public static long ONE_TIME_CHECK = -1L;
+
+	public abstract void addUpdateCheck(String profileId, long delay, long poll, IUpdateListener listener);
+
+	public abstract void removeUpdateCheck(IUpdateListener listener);
+
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java
index 5c9d807..7cde636 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java
@@ -14,8 +14,6 @@ package org.eclipse.equinox.internal.provisional.p2.updatechecker;
  * An IUpdateListener informs listeners that an update is available for
  * the specified profile.  Listeners should expect to receive this notification
  * from a background thread.
- * 
- * @since 3.4
  */
 public interface IUpdateListener {
 
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java
deleted file mode 100644
index 5489a8e..0000000
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.updatechecker;
-
-import java.text.SimpleDateFormat;
-import java.util.*;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.updatechecker.Activator;
-import org.eclipse.equinox.internal.provisional.p2.director.IPlanner;
-import org.eclipse.equinox.internal.provisional.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-
-/**
- * An UpdateChecker periodically polls for updates to specified profiles and
- * informs listeners if updates are available.  Listeners may then determine
- * whether to retrieve the updates, inform the user, etc.
- * 
- * This implementation is not optimized.  It doesn't optimize for multiple
- * polls on the same profile, nor does it cache any info about a profile from
- * poll to poll.
- *
- * @since 3.4
- */
-public class UpdateChecker {
-	public static long ONE_TIME_CHECK = -1L;
-	public static boolean DEBUG = false;
-	public static boolean TRACE = false;
-	private HashSet checkers = new HashSet(); // threads
-	IProfileRegistry profileRegistry;
-	IPlanner planner;
-
-	private class UpdateCheckThread extends Thread {
-		boolean done = false;
-		long poll, delay;
-		IUpdateListener listener;
-		String profileId;
-
-		UpdateCheckThread(String profileId, long delay, long poll, IUpdateListener listener) {
-			this.poll = poll;
-			this.delay = delay;
-			this.profileId = profileId;
-			this.listener = listener;
-		}
-
-		public void run() {
-			try {
-				if (delay != ONE_TIME_CHECK && delay > 0) {
-					Thread.sleep(delay);
-				}
-				while (!done) {
-
-					log("Checking for updates for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
-					IInstallableUnit[] iusWithUpdates = checkForUpdates(profileId);
-					if (iusWithUpdates.length > 0) {
-						log("Notifying listener of available updates"); //$NON-NLS-1$
-						UpdateEvent event = new UpdateEvent(profileId, iusWithUpdates);
-						if (!done)
-							listener.updatesAvailable(event);
-					} else {
-						log("No updates were available"); //$NON-NLS-1$
-					}
-					if (delay == ONE_TIME_CHECK || delay <= 0) {
-						done = true;
-					} else {
-						Thread.sleep(poll);
-					}
-				}
-			} catch (InterruptedException e) {
-				// nothing
-			} catch (Exception e) {
-				log("Exception in update check thread", e); //$NON-NLS-1$
-			}
-		}
-	}
-
-	public void addUpdateCheck(String profileId, long delay, long poll, IUpdateListener listener) {
-		log("Adding update checker for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
-		UpdateCheckThread thread = new UpdateCheckThread(profileId, delay, poll, listener);
-		checkers.add(thread);
-		thread.start();
-	}
-
-	public void removeUpdateCheck(IUpdateListener listener) {
-		Iterator iter = checkers.iterator();
-		while (iter.hasNext()) {
-			UpdateCheckThread thread = (UpdateCheckThread) iter.next();
-			if (thread.listener == listener) {
-				thread.done = true;
-				checkers.remove(thread);
-				break;
-			}
-		}
-	}
-
-	/*
-	 * Return the array of ius in the profile that have updates
-	 * available.
-	 */
-	IInstallableUnit[] checkForUpdates(String profileId) {
-		// TODO this is naive.  We get all the ius every time whereas we
-		// could monitor changes in the profile.
-		IProfile profile = getProfileRegistry().getProfile(profileId);
-		ArrayList iusWithUpdates = new ArrayList();
-		if (profile == null)
-			return new IInstallableUnit[0];
-		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
-		while (iter.hasNext()) {
-			IInstallableUnit iu = (IInstallableUnit) iter.next();
-			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, new ProvisioningContext(), null);
-			if (replacements.length > 0)
-				iusWithUpdates.add(iu);
-		}
-		return (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]);
-	}
-
-	void log(String string, Throwable e) {
-		System.err.println(string + ": " + e); //$NON-NLS-1$
-		if (DEBUG)
-			e.printStackTrace();
-	}
-
-	void log(String string) {
-		if (TRACE)
-			System.out.println(string);
-	}
-
-	String getTimeStamp() {
-		Date d = new Date();
-		SimpleDateFormat df = new SimpleDateFormat("[MM/dd/yy;HH:mm:ss:SSS]"); //$NON-NLS-1$
-		return df.format(d);
-	}
-
-	IPlanner getPlanner() {
-		if (planner == null) {
-			planner = (IPlanner) ServiceHelper.getService(Activator.getContext(), IPlanner.class.getName());
-			if (planner == null) {
-				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
-			}
-		}
-		return planner;
-	}
-
-	IProfileRegistry getProfileRegistry() {
-		if (profileRegistry == null) {
-			profileRegistry = (IProfileRegistry) ServiceHelper.getService(Activator.getContext(), IProfileRegistry.class.getName());
-			if (profileRegistry == null) {
-				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
-			}
-		}
-		return profileRegistry;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java
index 05c86bf..187b32c 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java
@@ -14,8 +14,6 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 
 /**
  * An UpdateEvent describes what IU's have updates for a given profile.
- * 
- * @since 3.4
  */
 public class UpdateEvent {
 
commit 69b6deff416041f878810af2f683205330ac4e1c
Author: John Arthorne <johna>
Date:   Wed Feb 13 22:49:03 2008 +0000

    Bug 218252 [prov] All registered services should be service interfaces

1	1	bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
99	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningEventBus.java
34	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/IProvisioningEventBus.java
0	81	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningEventBus.java
2	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineActivator.java
4	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
5	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
5	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
2	1	bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
4	3	bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
3	3	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
5	4	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
4	4	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
3	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
8	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
diff --git a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
index cdda4fe..8925032 100644
--- a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
@@ -16,7 +16,7 @@ Import-Package: org.eclipse.core.runtime.adaptor,
  org.osgi.framework;version="1.3.0",
  org.osgi.util.tracker;version="1.3.3",
  org.xml.sax
-Export-Package: org.eclipse.equinox.internal.p2.core;x-internal:=true,
+Export-Package: org.eclipse.equinox.internal.p2.core;x-friends:="org.eclipse.equinox.p2.metadata.generator",
  org.eclipse.equinox.internal.p2.core.helpers;
   x-friends:="org.eclipse.equinox.p2.director,
    org.eclipse.equinox.p2.artifact.processors,
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningEventBus.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningEventBus.java
new file mode 100644
index 0000000..08ff80e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningEventBus.java
@@ -0,0 +1,99 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.core;
+
+import java.util.EventObject;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.*;
+import org.eclipse.osgi.framework.eventmgr.*;
+
+/**
+ * Default implementation of the {@link IProvisioningEventBus} service.
+ */
+public class ProvisioningEventBus implements EventDispatcher, IProvisioningEventBus {
+	private EventListeners syncListeners = new EventListeners();
+	private EventListeners asyncListeners = new EventListeners();
+	private EventManager eventManager = new EventManager("Provisioning Event Dispatcher"); //$NON-NLS-1$
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus#addListener(org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener)
+	 */
+	public void addListener(ProvisioningListener toAdd) {
+		if (toAdd instanceof SynchronousProvisioningListener) {
+			synchronized (syncListeners) {
+				syncListeners.addListener(toAdd, toAdd);
+			}
+		} else {
+			synchronized (asyncListeners) {
+				asyncListeners.addListener(toAdd, toAdd);
+			}
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus#removeListener(org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener)
+	 */
+	public void removeListener(ProvisioningListener toRemove) {
+		if (toRemove instanceof SynchronousProvisioningListener) {
+			synchronized (syncListeners) {
+				if (syncListeners != null) {
+					syncListeners.removeListener(toRemove);
+				}
+			}
+		} else {
+			synchronized (asyncListeners) {
+				if (asyncListeners != null) {
+					asyncListeners.removeListener(toRemove);
+				}
+			}
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus#publishEvent(java.util.EventObject)
+	 */
+	public void publishEvent(EventObject event) {
+		/* queue to hold set of listeners */
+		ListenerQueue listeners = new ListenerQueue(eventManager);
+
+		/* synchronize while building the listener list */
+		synchronized (syncListeners) {
+			/* add set of BundleContexts w/ listeners to queue */
+			listeners.queueListeners(syncListeners, this);
+			/* synchronously dispatch to populate listeners queue */
+			listeners.dispatchEventSynchronous(0, event);
+		}
+
+		listeners = new ListenerQueue(eventManager);
+		synchronized (asyncListeners) {
+			listeners.queueListeners(asyncListeners, this);
+			listeners.dispatchEventAsynchronous(0, event);
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus#dispatchEvent(java.lang.Object, java.lang.Object, int, java.lang.Object)
+	 */
+	public void dispatchEvent(Object eventListener, Object listenerObject, int eventAction, Object eventObject) {
+		try {
+			((ProvisioningListener) eventListener).notify((EventObject) eventObject);
+		} catch (Exception e) {
+			e.printStackTrace();
+			//TODO Need to do the appropriate logging
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus#close()
+	 */
+	public void close() {
+		eventManager.close();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/IProvisioningEventBus.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/IProvisioningEventBus.java
new file mode 100644
index 0000000..2ff6ce3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/IProvisioningEventBus.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.core.eventbus;
+
+import java.util.EventObject;
+import org.eclipse.osgi.framework.eventmgr.EventDispatcher;
+
+/**
+ * The bus for events related to provisioning. This service can be used to register
+ * a listener to receive provisioning events, or to broadcast events.
+ */
+public interface IProvisioningEventBus extends EventDispatcher {
+	/**
+	 * The name used for obtaining a reference to the event bus service.
+	 */
+	public static final String SERVICE_NAME = IProvisioningEventBus.class.getName();
+
+	public abstract void addListener(ProvisioningListener toAdd);
+
+	public abstract void removeListener(ProvisioningListener toRemove);
+
+	public abstract void publishEvent(EventObject event);
+
+	public abstract void close();
+
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningEventBus.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningEventBus.java
deleted file mode 100644
index b6d73ff..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningEventBus.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.core.eventbus;
-
-import java.util.EventObject;
-import org.eclipse.osgi.framework.eventmgr.*;
-
-//TODO Need to clean up the lifecycle of this class
-public class ProvisioningEventBus implements EventDispatcher {
-	private EventListeners syncListeners = new EventListeners();
-	private EventListeners asyncListeners = new EventListeners();
-	private EventManager eventManager = new EventManager("Provisioning Event Dispatcher"); //$NON-NLS-1$
-
-	public void addListener(ProvisioningListener toAdd) {
-		if (toAdd instanceof SynchronousProvisioningListener) {
-			synchronized (syncListeners) {
-				syncListeners.addListener(toAdd, toAdd);
-			}
-		} else {
-			synchronized (asyncListeners) {
-				asyncListeners.addListener(toAdd, toAdd);
-			}
-		}
-	}
-
-	public void removeListener(ProvisioningListener toRemove) {
-		if (toRemove instanceof SynchronousProvisioningListener) {
-			synchronized (syncListeners) {
-				if (syncListeners != null) {
-					syncListeners.removeListener(toRemove);
-				}
-			}
-		} else {
-			synchronized (asyncListeners) {
-				if (asyncListeners != null) {
-					asyncListeners.removeListener(toRemove);
-				}
-			}
-		}
-	}
-
-	public void publishEvent(EventObject event) {
-		/* queue to hold set of listeners */
-		ListenerQueue listeners = new ListenerQueue(eventManager);
-
-		/* synchronize while building the listener list */
-		synchronized (syncListeners) {
-			/* add set of BundleContexts w/ listeners to queue */
-			listeners.queueListeners(syncListeners, this);
-			/* synchronously dispatch to populate listeners queue */
-			listeners.dispatchEventSynchronous(0, event);
-		}
-
-		listeners = new ListenerQueue(eventManager);
-		synchronized (asyncListeners) {
-			listeners.queueListeners(asyncListeners, this);
-			listeners.dispatchEventAsynchronous(0, event);
-		}
-	}
-
-	public void dispatchEvent(Object eventListener, Object listenerObject, int eventAction, Object eventObject) {
-		try {
-			((ProvisioningListener) eventListener).notify((EventObject) eventObject);
-		} catch (Exception e) {
-			e.printStackTrace();
-			//TODO Need to do the appropriate logging
-		}
-	}
-
-	public void close() {
-		eventManager.close();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 9dadb91..b67f6bf 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -15,7 +15,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.director.DirectorActivator;
 import org.eclipse.equinox.internal.p2.director.IUTransformationHelper;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
@@ -38,7 +38,7 @@ public class FormerState {
 	public FormerState(URL repoLocation) {
 		if (repoLocation == null)
 			throw new IllegalArgumentException("Repository location can't be null"); //$NON-NLS-1$
-		ProvisioningEventBus eventBus = (ProvisioningEventBus) ServiceHelper.getService(DirectorActivator.context, ProvisioningEventBus.class.getName());
+		IProvisioningEventBus eventBus = (IProvisioningEventBus) ServiceHelper.getService(DirectorActivator.context, IProvisioningEventBus.SERVICE_NAME);
 		location = repoLocation;
 
 		//listen for pre-event. to snapshot the profile
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineActivator.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineActivator.java
index 61483f4..bcab1eb 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineActivator.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/EngineActivator.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.engine;
 
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.engine.Engine;
 import org.eclipse.equinox.internal.provisional.p2.engine.IEngine;
 import org.osgi.framework.*;
@@ -31,7 +31,7 @@ public class EngineActivator implements BundleActivator, ServiceTrackerCustomize
 
 	public Object addingService(ServiceReference reference) {
 		if (registration == null) {
-			ProvisioningEventBus eventBus = (ProvisioningEventBus) context.getService(reference);
+			IProvisioningEventBus eventBus = (IProvisioningEventBus) context.getService(reference);
 			registration = context.registerService(IEngine.SERVICE_NAME, new Engine(eventBus), null);
 			return eventBus;
 		}
@@ -51,7 +51,7 @@ public class EngineActivator implements BundleActivator, ServiceTrackerCustomize
 
 	public void start(BundleContext aContext) throws Exception {
 		EngineActivator.context = aContext;
-		tracker = new ServiceTracker(aContext, ProvisioningEventBus.class.getName(), this);
+		tracker = new ServiceTracker(aContext, IProvisioningEventBus.SERVICE_NAME, this);
 		tracker.open();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
index 763f5ec..2b1772a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
@@ -16,8 +16,7 @@ import java.util.EventObject;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.*;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
@@ -29,7 +28,7 @@ import org.osgi.framework.ServiceReference;
 public class MetadataCache {
 	static final private String REPOSITORY_NAME = "Agent Metadata Cache"; //$NON-NLS-1$
 	private ServiceReference busReference;
-	private ProvisioningEventBus bus;
+	private IProvisioningEventBus bus;
 	private URL location;
 	//tracks the IUs that have been installed but not yet committed
 	//TODO: This will work if a single profile is being modified but we should consider how to handle multiple concurrent profile changes.OD
@@ -60,8 +59,8 @@ public class MetadataCache {
 
 	private void hookListener() {
 		// TODO: We should check for writing permission here, otherwise it may be too late
-		busReference = EngineActivator.getContext().getServiceReference(ProvisioningEventBus.class.getName());
-		bus = (ProvisioningEventBus) EngineActivator.getContext().getService(busReference);
+		busReference = EngineActivator.getContext().getServiceReference(IProvisioningEventBus.SERVICE_NAME);
+		bus = (IProvisioningEventBus) EngineActivator.getContext().getService(busReference);
 		bus.addListener(new ProvisioningListener() {
 			public void notify(EventObject o) {
 				if (o instanceof InstallableUnitEvent) { //TODO This dependency on InstallableUnitEvent is not great
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
index 7f573a3..affdd37 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
@@ -192,7 +192,7 @@ public class Profile implements IQueryable, IProfile {
 		// TODO this is not the ideal place for this.
 		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=206077
 		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=197701
-		//		ProvisioningEventBus bus = (ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName());
+		//		ProvisioningEventBus bus = (ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME);
 		//		if (bus != null)
 		//			bus.publishEvent(new ProfileEvent(this, ProfileEvent.CHANGED));
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index a6a3e1c..2a8a088 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -20,7 +20,7 @@ import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.internal.p2.installregistry.*;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -238,7 +238,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	}
 
 	private void broadcastChangeEvent(String profileId, byte reason) {
-		((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new ProfileEvent(profileId, reason));
+		((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new ProfileEvent(profileId, reason));
 	}
 
 	private URL getRegistryLocation() {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
index a22d185..b4346e4 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
@@ -483,7 +483,7 @@ public class InstallRegistry implements IInstallRegistry {
 
 	public InstallRegistry() {
 		/*	
-		busReference = EngineActivator.getContext().getServiceReference(ProvisioningEventBus.class.getName());
+		busReference = EngineActivator.getContext().getServiceReference(IProvisioningEventBus.SERVICE_NAME);
 		bus = (ProvisioningEventBus) EngineActivator.getContext().getService(busReference);
 
 		
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
index 9c94e38..b090055 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
@@ -15,14 +15,14 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 
 public class Engine implements IEngine {
 
-	private final ProvisioningEventBus eventBus;
+	private final IProvisioningEventBus eventBus;
 	private List lockedProfiles = new ArrayList();
 
-	public Engine(ProvisioningEventBus eventBus) {
+	public Engine(IProvisioningEventBus eventBus) {
 		this.eventBus = eventBus;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
index 1d0cc5b..75b04d3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
@@ -14,7 +14,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -29,7 +29,7 @@ public class Install extends Phase {
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
 			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
 
@@ -40,7 +40,7 @@ public class Install extends Phase {
 			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			profile.removeInstallableUnit(iu);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 	}
@@ -55,7 +55,7 @@ public class Install extends Phase {
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			IInstallableUnit preparedIU = touchpoint.prepareIU(iu, profile);
 			profile.addInstallableUnit(preparedIU);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
 
@@ -64,7 +64,7 @@ public class Install extends Phase {
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
 			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
index e007682..efff0a0 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
@@ -14,7 +14,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -27,7 +27,7 @@ public class Uninstall extends Phase {
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
 			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 
@@ -38,7 +38,7 @@ public class Uninstall extends Phase {
 			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			profile.addInstallableUnit(iu);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
 	}
@@ -51,7 +51,7 @@ public class Uninstall extends Phase {
 			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			profile.removeInstallableUnit(iu);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 
@@ -60,7 +60,7 @@ public class Uninstall extends Phase {
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
 			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
-			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
+			((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
index 11799d0..1060174 100644
--- a/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
@@ -5,7 +5,8 @@ Bundle-Name: %pluginName
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Bundle-Version: 0.1.0.qualifier
-Import-Package: org.eclipse.equinox.internal.p2.director,
+Import-Package: org.eclipse.equinox.internal.p2.core,
+ org.eclipse.equinox.internal.p2.director,
  org.eclipse.equinox.internal.p2.engine,
  org.eclipse.equinox.internal.p2.garbagecollector,
  org.eclipse.equinox.internal.p2.installregistry,
diff --git a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java b/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
index 804327c..a9ae332 100644
--- a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.exemplarysetup;
 
+import org.eclipse.equinox.internal.p2.core.ProvisioningEventBus;
 import org.eclipse.equinox.internal.p2.director.SimpleDirector;
 import org.eclipse.equinox.internal.p2.director.SimplePlanner;
 import org.eclipse.equinox.internal.p2.engine.MetadataCache;
@@ -18,7 +19,7 @@ import org.eclipse.equinox.internal.p2.garbagecollector.GarbageCollector;
 import org.eclipse.equinox.internal.p2.installregistry.IInstallRegistry;
 import org.eclipse.equinox.internal.p2.installregistry.InstallRegistry;
 import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.director.IDirector;
 import org.eclipse.equinox.internal.provisional.p2.director.IPlanner;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
@@ -28,7 +29,7 @@ import org.osgi.framework.*;
 public class Activator implements BundleActivator {
 	public static BundleContext context;
 
-	private ProvisioningEventBus bus;
+	private IProvisioningEventBus bus;
 	private ServiceRegistration registrationBus;
 
 	private IInstallRegistry installRegistry;
@@ -160,7 +161,7 @@ public class Activator implements BundleActivator {
 
 	private void registerEventBus() {
 		bus = new ProvisioningEventBus();
-		registrationBus = context.registerService(ProvisioningEventBus.class.getName(), bus, null);
+		registrationBus = context.registerService(IProvisioningEventBus.SERVICE_NAME, bus, null);
 	}
 
 	private void unregisterEventBus() {
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
index 0a442c4..8ed1c60 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GCActivator.java
@@ -15,7 +15,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.preferences.IPreferencesService;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.osgi.service.debug.DebugOptions;
@@ -51,7 +51,7 @@ public class GCActivator implements BundleActivator {
 
 	//	Register the listener used to trigger the GC.
 	private void registerGCTrigger() {
-		ProvisioningEventBus eventBus = (ProvisioningEventBus) getService(GCActivator.context, ProvisioningEventBus.class.getName());
+		IProvisioningEventBus eventBus = (IProvisioningEventBus) getService(GCActivator.context, IProvisioningEventBus.SERVICE_NAME);
 		if (eventBus == null) {
 			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.Missing_bus));
 			return;
@@ -83,7 +83,7 @@ public class GCActivator implements BundleActivator {
 	}
 
 	private void unregisterGCTrigger() {
-		ProvisioningEventBus eventBus = (ProvisioningEventBus) getService(GCActivator.context, ProvisioningEventBus.class.getName());
+		IProvisioningEventBus eventBus = (IProvisioningEventBus) getService(GCActivator.context, IProvisioningEventBus.SERVICE_NAME);
 		if (eventBus != null && busListener != null)
 			eventBus.removeListener(busListener);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index 5ec58ff..edc7465 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -17,12 +17,13 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.app.IApplication;
 import org.eclipse.equinox.app.IApplicationContext;
 import org.eclipse.equinox.internal.p2.artifact.repository.ArtifactRepositoryManager;
+import org.eclipse.equinox.internal.p2.core.ProvisioningEventBus;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.generator.EclipseInstallGeneratorInfoProvider;
 import org.eclipse.equinox.internal.provisional.p2.metadata.generator.Generator;
@@ -48,7 +49,7 @@ public class EclipseGeneratorApplication implements IApplication {
 	private ServiceRegistration registrationDefaultArtifactManager;
 	private MetadataRepositoryManager defaultMetadataManager;
 	private ServiceRegistration registrationDefaultMetadataManager;
-	private ProvisioningEventBus bus;
+	private IProvisioningEventBus bus;
 	private ServiceRegistration registrationBus;
 	private Generator.GeneratorResult incrementalResult = null;
 	private boolean generateRootIU = true;
@@ -292,9 +293,9 @@ public class EclipseGeneratorApplication implements IApplication {
 	}
 
 	private void registerEventBus() {
-		if (ServiceHelper.getService(Activator.getContext(), ProvisioningEventBus.class.getName()) == null) {
+		if (ServiceHelper.getService(Activator.getContext(), IProvisioningEventBus.SERVICE_NAME) == null) {
 			bus = new ProvisioningEventBus();
-			registrationBus = Activator.getContext().registerService(ProvisioningEventBus.class.getName(), bus, null);
+			registrationBus = Activator.getContext().registerService(IProvisioningEventBus.SERVICE_NAME, bus, null);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index aedd28c..18d850d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -14,7 +14,7 @@ import java.io.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.updates.AutomaticUpdater;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
@@ -134,11 +134,11 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		return scheduler;
 	}
 
-	public ProvisioningEventBus getProvisioningEventBus() {
-		ServiceReference busReference = context.getServiceReference(ProvisioningEventBus.class.getName());
+	public IProvisioningEventBus getProvisioningEventBus() {
+		ServiceReference busReference = context.getServiceReference(IProvisioningEventBus.SERVICE_NAME);
 		if (busReference == null)
 			return null;
-		return (ProvisioningEventBus) context.getService(busReference);
+		return (IProvisioningEventBus) context.getService(busReference);
 	}
 
 	public AutomaticUpdater getAutomaticUpdater() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index d970d3e..f1508c0 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -18,7 +18,7 @@ import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
@@ -296,7 +296,7 @@ public class AutomaticUpdater implements IUpdateListener {
 					}
 				}
 			};
-			ProvisioningEventBus bus = ProvSDKUIActivator.getDefault().getProvisioningEventBus();
+			IProvisioningEventBus bus = ProvSDKUIActivator.getDefault().getProvisioningEventBus();
 			if (bus != null)
 				bus.addListener(profileChangeListener);
 		}
@@ -326,7 +326,7 @@ public class AutomaticUpdater implements IUpdateListener {
 	public void shutdown() {
 		if (profileChangeListener == null)
 			return;
-		ProvisioningEventBus bus = ProvSDKUIActivator.getDefault().getProvisioningEventBus();
+		IProvisioningEventBus bus = ProvSDKUIActivator.getDefault().getProvisioningEventBus();
 		if (bus != null)
 			bus.removeListener(profileChangeListener);
 		profileChangeListener = null;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
index a3f3d43..4be5616 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
@@ -15,7 +15,7 @@ import java.util.EventObject;
 import org.eclipse.core.runtime.FileLocator;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
@@ -134,14 +134,14 @@ public class ProvUIActivator extends AbstractUIPlugin {
 				}
 			};
 		}
-		ProvisioningEventBus bus = getProvisioningEventBus();
+		IProvisioningEventBus bus = getProvisioningEventBus();
 		if (bus != null)
 			bus.addListener(profileChangeListener);
 	}
 
 	private void removeProfileChangeListener() {
 		if (profileChangeListener != null) {
-			ProvisioningEventBus bus = getProvisioningEventBus();
+			IProvisioningEventBus bus = getProvisioningEventBus();
 			if (bus != null)
 				bus.removeListener(profileChangeListener);
 		}
@@ -157,11 +157,11 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		}
 	}
 
-	private ProvisioningEventBus getProvisioningEventBus() {
-		ServiceReference busReference = context.getServiceReference(ProvisioningEventBus.class.getName());
+	private IProvisioningEventBus getProvisioningEventBus() {
+		ServiceReference busReference = context.getServiceReference(IProvisioningEventBus.SERVICE_NAME);
 		if (busReference == null)
 			return null;
-		return (ProvisioningEventBus) context.getService(busReference);
+		return (IProvisioningEventBus) context.getService(busReference);
 	}
 
 	public void notifyListeners(EventObject event) {
@@ -173,8 +173,8 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		if ((listener.getEventTypes() & StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY) == StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY) {
 			eventManager.removeListener(listener);
 		} else {
-			ServiceReference busReference = context.getServiceReference(ProvisioningEventBus.class.getName());
-			ProvisioningEventBus bus = (ProvisioningEventBus) context.getService(busReference);
+			ServiceReference busReference = context.getServiceReference(IProvisioningEventBus.SERVICE_NAME);
+			IProvisioningEventBus bus = (IProvisioningEventBus) context.getService(busReference);
 			bus.removeListener(listener);
 		}
 	}

commit 29d6bbdd0220bf272b50b471f66fa5ae842b3646
Author: Pascal Rapicault <prapicau>
Date:   Tue Apr 6 01:04:28 2010 +0000

    Bug 305334	 - MetadataFactory.InstallableUnitDescription - method name refactoring

2	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
3	3	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
4	4	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
2	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
25	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
5	5	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
1	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
2	2	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
1	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
1	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
2	2	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
7	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
14	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/AllMetaReqTests.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/IUWithFilter.java
7	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ORTesting.java
22	22	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
1	1	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 8144b73..52dd356 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -608,7 +608,7 @@ public class SimplePlanner implements IPlanner {
 		description.setId(id);
 		Version version = Version.createOSGi(1, 0, 0, Long.toString(profile.getTimestamp()));
 		description.setVersion(version);
-		description.addRequiredCapabilities(metaRequirements);
+		description.addRequirements(metaRequirements);
 
 		ArrayList<IProvidedCapability> providedCapabilities = new ArrayList<IProvidedCapability>();
 		IProvidedCapability providedCapability = MetadataFactory.createProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, id, version);
@@ -624,7 +624,7 @@ public class SimplePlanner implements IPlanner {
 		String time = Long.toString(System.currentTimeMillis());
 		iud.setId(time);
 		iud.setVersion(Version.createOSGi(0, 0, 0, time));
-		iud.setRequiredCapabilities(allRequirements.toArray(new IRequirement[allRequirements.size()]));
+		iud.setRequirements(allRequirements.toArray(new IRequirement[allRequirements.size()]));
 		return MetadataFactory.createInstallableUnit(iud);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index 28f54f7..f406356 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -240,7 +240,7 @@ public class Generator {
 		}
 		if (requires != null)
 			reqsConfigurationUnits.addAll(requires);
-		root.setRequiredCapabilities((IRequirement[]) reqsConfigurationUnits.toArray(new IRequirement[reqsConfigurationUnits.size()]));
+		root.setRequirements((IRequirement[]) reqsConfigurationUnits.toArray(new IRequirement[reqsConfigurationUnits.size()]));
 		root.setArtifacts(new IArtifactKey[0]);
 
 		root.setProperty("lineUp", "true"); //$NON-NLS-1$ //$NON-NLS-2$
@@ -711,7 +711,7 @@ public class Generator {
 			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			required.add(MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, iu.getId(), VersionRange.emptyRange, iu.getFilter(), false, false));
 		}
-		cat.setRequiredCapabilities((IRequirement[]) required.toArray(new IRequirement[required.size()]));
+		cat.setRequirements((IRequirement[]) required.toArray(new IRequirement[required.size()]));
 		cat.setCapabilities(new IProvidedCapability[] {MetadataFactory.createProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, categoryId, Version.emptyVersion)});
 		cat.setArtifacts(new IArtifactKey[0]);
 		cat.setProperty(InstallableUnitDescription.PROP_TYPE_CATEGORY, "true"); //$NON-NLS-1$
@@ -817,7 +817,7 @@ public class Generator {
 		String launcherFragment = ORG_ECLIPSE_EQUINOX_LAUNCHER + '.' + ws + '.' + os;
 		if (!(Constants.OS_MACOSX.equals(os) && !Constants.ARCH_X86_64.equals(arch)))
 			launcherFragment += '.' + arch;
-		iu.setRequiredCapabilities(new IRequirement[] {MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, launcherFragment, VersionRange.emptyRange, filter, false, false)});
+		iu.setRequirements(new IRequirement[] {MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, launcherFragment, VersionRange.emptyRange, filter, false, false)});
 		result.rootIUs.add(MetadataFactory.createInstallableUnit(iu));
 
 		//Create the CU
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
index c6a101e..aa9b1f4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -298,7 +298,7 @@ public class MetadataGeneratorHelper {
 			//TODO this needs to be refined to take into account all the attribute handled by imports
 			reqsDeps.add(MetadataFactory.createRequirement(CAPABILITY_NS_JAVA_PACKAGE, importPackageName, versionRange, null, isOptional(importSpec), false));
 		}
-		iu.setRequiredCapabilities((IRequirement[]) reqsDeps.toArray(new IRequirement[reqsDeps.size()]));
+		iu.setRequirements((IRequirement[]) reqsDeps.toArray(new IRequirement[reqsDeps.size()]));
 
 		// Create set of provided capabilities
 		ArrayList providedCapabilities = new ArrayList();
@@ -494,7 +494,7 @@ public class MetadataGeneratorHelper {
 		if (parentCategory != null) {
 			reqsConfigurationUnits.add(MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, parentCategory.getId(), VersionRange.emptyRange, parentCategory.getFilter() == null ? null : parentCategory.getFilter(), false, false));
 		}
-		cat.setRequiredCapabilities((IRequirement[]) reqsConfigurationUnits.toArray(new IRequirement[reqsConfigurationUnits.size()]));
+		cat.setRequirements((IRequirement[]) reqsConfigurationUnits.toArray(new IRequirement[reqsConfigurationUnits.size()]));
 
 		// Create set of provided capabilities
 		ArrayList providedCapabilities = new ArrayList();
@@ -783,7 +783,7 @@ public class MetadataGeneratorHelper {
 		// actual features.
 		if (featureIU != null)
 			required[entries.length] = MetadataFactory.createRequirement(IU_NAMESPACE, featureIU.getId(), new VersionRange(featureIU.getVersion(), true, featureIU.getVersion(), true), INSTALL_FEATURES_FILTER, false, false);
-		iu.setRequiredCapabilities(required);
+		iu.setRequirements(required);
 		iu.setTouchpointType(ITouchpointType.NONE);
 		iu.setProperty(InstallableUnitDescription.PROP_TYPE_GROUP, Boolean.TRUE.toString());
 		// TODO: shouldn't the filter for the group be constructed from os, ws, arch, nl
@@ -863,7 +863,7 @@ public class MetadataGeneratorHelper {
 		}
 		//Always add a requirement on the IU containing the feature jar
 		patchRequirements.add(MetadataFactory.createRequirement(IU_NAMESPACE, featureIU.getId(), new VersionRange(featureIU.getVersion(), true, featureIU.getVersion(), true), INSTALL_FEATURES_FILTER, false, false));
-		iu.setRequiredCapabilities((IRequirement[]) patchRequirements.toArray(new IRequirement[patchRequirements.size()]));
+		iu.setRequirements((IRequirement[]) patchRequirements.toArray(new IRequirement[patchRequirements.size()]));
 		iu.setApplicabilityScope(new IRequirement[][] {(IRequirement[]) applicabilityScope.toArray(new IRequirement[applicabilityScope.size()])});
 		iu.setRequirementChanges((IRequirementChange[]) requirementChanges.toArray(new IRequirementChange[requirementChanges.size()]));
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index 718a17b..964111e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -309,9 +309,9 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 				IProvidedCapability[] providedCapabilities = (providedCapabilitiesHandler == null ? new IProvidedCapability[0] : providedCapabilitiesHandler.getProvidedCapabilities());
 				currentUnit.setCapabilities(providedCapabilities);
 				IRequirement[] requiredCapabilities = (requiredCapabilitiesHandler == null ? new IRequirement[0] : requiredCapabilitiesHandler.getRequiredCapabilities());
-				currentUnit.setRequiredCapabilities(requiredCapabilities);
+				currentUnit.setRequirements(requiredCapabilities);
 				IRequirement[] metaRequiredCapabilities = (metaRequiredCapabilitiesHandler == null ? new IRequirement[0] : metaRequiredCapabilitiesHandler.getMetaRequiredCapabilities());
-				currentUnit.setMetaRequiredCapabilities(metaRequiredCapabilities);
+				currentUnit.setMetaRequirements(metaRequiredCapabilities);
 				if (filterHandler != null) {
 					currentUnit.setFilter(filterHandler.getText());
 				}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
index dbb25f8..3a3c768 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
@@ -70,7 +70,12 @@ public final class MetadataFactory {
 			unit().setCapabilities(all.toArray(new IProvidedCapability[all.size()]));
 		}
 
+		/** @deprecated Use addRequirements(additional) instead */
 		public void addRequiredCapabilities(Collection<IRequirement> additional) {
+			addRequirements(additional);
+		}
+
+		public void addRequirements(Collection<IRequirement> additional) {
 			if (additional == null || additional.size() == 0)
 				return;
 			List<IRequirement> current = unit().getRequirements();
@@ -93,11 +98,21 @@ public final class MetadataFactory {
 			return unit().getProvidedCapabilities();
 		}
 
+		/** @deprecated Use getRequirements() instead */
 		public List<IRequirement> getRequiredCapabilities() {
+			return getRequirements();
+		}
+
+		public List<IRequirement> getRequirements() {
 			return unit().getRequirements();
 		}
 
+		/** @deprecated Use getMetaRequirements() instead */
 		public Collection<IRequirement> getMetaRequiredCapabilities() {
+			return getMetaRequirements();
+		}
+
+		public Collection<IRequirement> getMetaRequirements() {
 			return unit().getMetaRequirements();
 		}
 
@@ -148,11 +163,21 @@ public final class MetadataFactory {
 			unit().setProperty(key, value);
 		}
 
+		/** @deprecated Use setRequirements(requirements) instead */
 		public void setRequiredCapabilities(IRequirement[] requirements) {
+			setRequirements(requirements);
+		}
+
+		public void setRequirements(IRequirement[] requirements) {
 			unit().setRequiredCapabilities(requirements);
 		}
 
+		/** @deprecated Use setMetaRequirements(requirements) instead */
 		public void setMetaRequiredCapabilities(IRequirement[] metaRequirements) {
+			setMetaRequirements(metaRequirements);
+		}
+
+		public void setMetaRequirements(IRequirement[] metaRequirements) {
 			unit().setMetaRequiredCapabilities(metaRequirements);
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
index 28744cd..5c2aa81 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
@@ -196,7 +196,7 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 
 	protected InstallableUnitDescription createParentIU(Collection<? extends IVersionedId> children, String id, Version version) {
 		InstallableUnitDescription root = createIUShell(id, version);
-		root.addRequiredCapabilities(createIURequirements(children));
+		root.addRequirements(createIURequirements(children));
 		addSelfCapability(root);
 		return root;
 	}
@@ -282,7 +282,7 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 			//process required capabilities
 			IRequirement[] requiredAdvice = entry.getRequiredCapabilities(iu);
 			if (requiredAdvice != null) {
-				List<IRequirement> current = iu.getRequiredCapabilities();
+				List<IRequirement> current = iu.getRequirements();
 				Set<IRequirement> resultRequiredCapabilities = new HashSet<IRequirement>(current);
 
 				// remove current required capabilities that match (same name and namespace) advice.
@@ -307,13 +307,13 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 				}
 				// add all advice
 				resultRequiredCapabilities.addAll(Arrays.asList(requiredAdvice));
-				iu.setRequiredCapabilities(resultRequiredCapabilities.toArray(new IRequirement[resultRequiredCapabilities.size()]));
+				iu.setRequirements(resultRequiredCapabilities.toArray(new IRequirement[resultRequiredCapabilities.size()]));
 			}
 
 			//process meta required capabilities
 			IRequirement[] metaRequiredAdvice = entry.getMetaRequiredCapabilities(iu);
 			if (metaRequiredAdvice != null) {
-				Collection<IRequirement> current = iu.getMetaRequiredCapabilities();
+				Collection<IRequirement> current = iu.getMetaRequirements();
 				Set<IRequirement> resultMetaRequiredCapabilities = new HashSet<IRequirement>(current);
 
 				// remove current meta-required capabilities that match (same name and namespace) advice.
@@ -338,7 +338,7 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 
 				// add all advice
 				resultMetaRequiredCapabilities.addAll(Arrays.asList(metaRequiredAdvice));
-				iu.setMetaRequiredCapabilities(resultMetaRequiredCapabilities.toArray(new IRequirement[resultMetaRequiredCapabilities.size()]));
+				iu.setMetaRequirements(resultMetaRequiredCapabilities.toArray(new IRequirement[resultMetaRequiredCapabilities.size()]));
 			}
 
 			//process provided capabilities
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
index 5f17e2e..00dd7b5 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
@@ -155,7 +155,7 @@ public class RootIUAction extends AbstractPublisherAction {
 		Collection<IRequirement> requiredCapabilities = createIURequirements(children);
 		if (requires != null)
 			requiredCapabilities.addAll(requires);
-		root.setRequiredCapabilities(requiredCapabilities.toArray(new IRequirement[requiredCapabilities.size()]));
+		root.setRequirements(requiredCapabilities.toArray(new IRequirement[requiredCapabilities.size()]));
 		root.setArtifacts(new IArtifactKey[0]);
 
 		root.setProperty("lineUp", "true"); //$NON-NLS-1$ //$NON-NLS-2$
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
index 9d4bae8..703c7c5 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
@@ -394,10 +394,10 @@ public class AdviceFileParser {
 			description.setCapabilities(unitProvides.toArray(new IProvidedCapability[unitProvides.size()]));
 
 		if (!unitRequires.isEmpty())
-			description.setRequiredCapabilities(unitRequires.toArray(new IRequirement[unitRequires.size()]));
+			description.setRequirements(unitRequires.toArray(new IRequirement[unitRequires.size()]));
 
 		if (!unitMetaRequirements.isEmpty())
-			description.setMetaRequiredCapabilities(unitMetaRequirements.toArray(new IRequirement[unitMetaRequirements.size()]));
+			description.setMetaRequirements(unitMetaRequirements.toArray(new IRequirement[unitMetaRequirements.size()]));
 
 		if (!unitInstructions.isEmpty())
 			description.addTouchpointData(MetadataFactory.createTouchpointData(unitInstructions));
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
index 0e5a42e..a057546 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
@@ -173,7 +173,7 @@ public class BundlesAction extends AbstractPublisherAction {
 			//TODO this needs to be refined to take into account all the attribute handled by imports
 			reqsDeps.add(MetadataFactory.createRequirement(PublisherHelper.CAPABILITY_NS_JAVA_PACKAGE, importPackageName, versionRange, null, isOptional(importSpec), false));
 		}
-		iu.setRequiredCapabilities(reqsDeps.toArray(new IRequirement[reqsDeps.size()]));
+		iu.setRequirements(reqsDeps.toArray(new IRequirement[reqsDeps.size()]));
 
 		// Create set of provided capabilities
 		ArrayList<IProvidedCapability> providedCapabilities = new ArrayList<IProvidedCapability>();
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
index 5b0484c..fe3e0b7 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
@@ -138,7 +138,7 @@ public class EquinoxExecutableAction extends AbstractPublisherAction {
 			String launcherFragment = EquinoxLauncherCUAction.ORG_ECLIPSE_EQUINOX_LAUNCHER + '.' + ws + '.' + os;
 			if (!(Constants.OS_MACOSX.equals(os) && !Constants.ARCH_X86_64.equals(arch)))
 				launcherFragment += '.' + arch;
-			iu.setRequiredCapabilities(new IRequirement[] {MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, launcherFragment, VersionRange.emptyRange, filter, false, false)});
+			iu.setRequirements(new IRequirement[] {MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, launcherFragment, VersionRange.emptyRange, filter, false, false)});
 		}
 		result.addIU(MetadataFactory.createInstallableUnit(iu), IPublisherResult.ROOT);
 		return publishCU;
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index a5ae5dd..892c9d5 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -254,7 +254,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 				required.add(MetadataFactory.createRequirement(PublisherHelper.IU_NAMESPACE, child.getId(), new VersionRange(child.getVersion(), true, child.getVersion(), true), filter, false, false));
 			}
 		}
-		iu.setRequiredCapabilities(required.toArray(new IRequirement[required.size()]));
+		iu.setRequirements(required.toArray(new IRequirement[required.size()]));
 		iu.setTouchpointType(ITouchpointType.NONE);
 		iu.setProperty(InstallableUnitDescription.PROP_TYPE_GROUP, Boolean.TRUE.toString());
 		processTouchpointAdvice(iu, null, publisherInfo);
@@ -338,7 +338,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 				patchRequirements.add(MetadataFactory.createRequirement(PublisherHelper.IU_NAMESPACE, child.getId(), new VersionRange(child.getVersion(), true, child.getVersion(), true), child.getFilter(), false, false));
 			}
 		}
-		iu.setRequiredCapabilities(patchRequirements.toArray(new IRequirement[patchRequirements.size()]));
+		iu.setRequirements(patchRequirements.toArray(new IRequirement[patchRequirements.size()]));
 		iu.setApplicabilityScope(new IRequirement[][] {applicabilityScope.toArray(new IRequirement[applicabilityScope.size()])});
 		iu.setRequirementChanges(requirementChanges.toArray(new IRequirementChange[requirementChanges.size()]));
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index c5bcdfb..c111b46 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -404,7 +404,7 @@ public abstract class AbstractProvisioningTest extends TestCase {
 			iu.setProperty(nextKey, nextValue);
 		}
 		iu.setCapabilities(provides);
-		iu.setRequiredCapabilities(required);
+		iu.setRequirements(required);
 		iu.setTouchpointType(tpType);
 		if (tpData != null)
 			iu.addTouchpointData(tpData);
@@ -413,7 +413,7 @@ public abstract class AbstractProvisioningTest extends TestCase {
 		iu.setRequirementChanges(reqChanges);
 		iu.setApplicabilityScope(scope);
 		iu.setLifeCycle(lifeCycle);
-		iu.setMetaRequiredCapabilities(metaRequirements);
+		iu.setMetaRequirements(metaRequirements);
 		return MetadataFactory.createInstallableUnitPatch(iu);
 	}
 
@@ -433,7 +433,7 @@ public abstract class AbstractProvisioningTest extends TestCase {
 			iu.setProperty(nextKey, nextValue);
 		}
 		iu.setCapabilities(provides);
-		iu.setRequiredCapabilities(required);
+		iu.setRequirements(required);
 		iu.setTouchpointType(tpType);
 		if (tpData != null)
 			iu.addTouchpointData(tpData);
@@ -441,7 +441,7 @@ public abstract class AbstractProvisioningTest extends TestCase {
 		iu.setUpdateDescriptor(update);
 		if (metaRequirements == null)
 			metaRequirements = NO_REQUIRES;
-		iu.setMetaRequiredCapabilities(metaRequirements);
+		iu.setMetaRequirements(metaRequirements);
 		return MetadataFactory.createInstallableUnit(iu);
 	}
 
@@ -462,7 +462,7 @@ public abstract class AbstractProvisioningTest extends TestCase {
 		fragment.setId(name);
 		fragment.setVersion(version);
 		fragment.setProperty(org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription.PROP_TYPE_FRAGMENT, Boolean.TRUE.toString());
-		fragment.setRequiredCapabilities(required);
+		fragment.setRequirements(required);
 		fragment.setTouchpointType(tpType);
 		if (tpData != null)
 			fragment.addTouchpointData(tpData);
@@ -497,9 +497,9 @@ public abstract class AbstractProvisioningTest extends TestCase {
 		Collection<ILicense> originalLicenses = prototype.getLicenses();
 		desc.setLicenses(originalLicenses.toArray(new ILicense[originalLicenses.size()]));
 		Collection<IRequirement> originalRequirements = prototype.getRequirements();
-		desc.setRequiredCapabilities(originalRequirements.toArray(new IRequirement[originalRequirements.size()]));
+		desc.setRequirements(originalRequirements.toArray(new IRequirement[originalRequirements.size()]));
 		originalRequirements = prototype.getMetaRequirements();
-		desc.setMetaRequiredCapabilities(originalRequirements.toArray(new IRequirement[originalRequirements.size()]));
+		desc.setMetaRequirements(originalRequirements.toArray(new IRequirement[originalRequirements.size()]));
 		desc.setSingleton(prototype.isSingleton());
 		desc.setTouchpointType(MetadataFactory.createTouchpointType(prototype.getTouchpointType().getId(), prototype.getTouchpointType().getVersion()));
 		desc.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(prototype.getUpdateDescriptor().getIUsBeingUpdated(), prototype.getUpdateDescriptor().getSeverity(), prototype.getUpdateDescriptor().getDescription(), null));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
index 010265b..7a11529 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
@@ -34,7 +34,7 @@ public class OracleTest2 extends AbstractProvisioningTest {
 
 		requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU_ID, "C", new VersionRange("[2.0.0, 3.0.0)"));
 		InstallableUnitDescription desc = new MetadataFactory.InstallableUnitDescription();
-		desc.setRequiredCapabilities(requires);
+		desc.setRequirements(requires);
 		desc.setId("A");
 		desc.setVersion(Version.createOSGi(2, 0, 0));
 		desc.setSingleton(true);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
index ed40207..f871ed5 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
@@ -319,7 +319,7 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 			iu1.setProperty(nextKey, nextValue);
 		}
 		iu1.setCapabilities(provides1);
-		iu1.setRequiredCapabilities(requirements);
+		iu1.setRequirements(requirements);
 		iu1.setTouchpointType(TOUCHPOINT_OSGI);
 		if (tpData != null)
 			iu1.addTouchpointData(tpData);
@@ -327,7 +327,7 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 		iu1.setUpdateDescriptor(update);
 		if (metaRequirements == null)
 			metaRequirements = NO_REQUIRES;
-		iu1.setMetaRequiredCapabilities(metaRequirements);
+		iu1.setMetaRequirements(metaRequirements);
 		IInstallableUnit iu = MetadataFactory.createInstallableUnit(iu1);
 		return iu;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
index 2b2db71..51f241f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
@@ -709,7 +709,7 @@ public class SPIMetadataRepositoryTest extends AbstractProvisioningTest {
 		IRequiredCapability spiRequiredCapability = new SPIRequiredCapability("com.example", "bar", new VersionRange(Version.createOSGi(1, 0, 0), true, Version.createOSGi(2, 0, 0), true));
 		Collection list = new ArrayList();
 		list.add(spiRequiredCapability);
-		iuDescription.addRequiredCapabilities(list);
+		iuDescription.addRequirements(list);
 
 		repo.addInstallableUnits(Arrays.asList(MetadataFactory.createInstallableUnit(iuDescription)));
 
@@ -770,7 +770,7 @@ public class SPIMetadataRepositoryTest extends AbstractProvisioningTest {
 
 		Collection requiredCapabilityList = new ArrayList();
 		requiredCapabilityList.add(spiRequiredCapability);
-		iuDescription.addRequiredCapabilities(requiredCapabilityList);
+		iuDescription.addRequirements(requiredCapabilityList);
 
 		Collection providedCapabilityList = new ArrayList();
 		providedCapabilityList.add(spiProvidedCapability);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/AllMetaReqTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/AllMetaReqTests.java
new file mode 100644
index 0000000..23cb2d2
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/AllMetaReqTests.java
@@ -0,0 +1,14 @@
+package org.eclipse.equinox.p2.tests.planner;
+
+import junit.framework.*;
+
+public class AllMetaReqTests extends TestCase {
+	public static Test suite() {
+		TestSuite suite = new TestSuite(AllMetaReqTests.class.getName());
+		suite.addTestSuite(AgentPlanTestInExternalInstance.class);
+		suite.addTestSuite(AgentPlanTestInExternalInstanceForCohostedMode.class);
+		suite.addTestSuite(AgentPlanTestInRunningInstance.class);
+		return suite;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/IUWithFilter.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/IUWithFilter.java
index ba11a4c..2ef6aec 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/IUWithFilter.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/IUWithFilter.java
@@ -29,7 +29,7 @@ public class IUWithFilter extends AbstractProvisioningTest {
 		iud.setId("A");
 		iud.setVersion(Version.create("1.0.0"));
 		iud.setCapabilities(new IProvidedCapability[] {MetadataFactory.createProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", Version.createOSGi(1, 0, 0))});
-		iud.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU_ID, "A", new VersionRange("[1.0.0, 1.0.0]")));
+		iud.setRequirements(createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU_ID, "A", new VersionRange("[1.0.0, 1.0.0]")));
 		iud.setFilter("(invalid=true)");
 		a1 = MetadataFactory.createInstallableUnit(iud);
 		createTestMetdataRepository(new IInstallableUnit[] {a1});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
index 7ae5621..dce9c67 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/NegationTesting.java
@@ -52,7 +52,7 @@ public class NegationTesting extends AbstractProvisioningTest {
 		Collection requirements = new ArrayList();
 		requirements.add(req1);
 		requirements.add(req2);
-		iud1.addRequiredCapabilities(requirements);
+		iud1.addRequirements(requirements);
 		Collection capabilities = new ArrayList();
 		capabilities.add(new ProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, "TestNegation4", Version.create("1.0.0")));
 		iud1.addProvidedCapabilities(capabilities);
@@ -110,7 +110,7 @@ public class NegationTesting extends AbstractProvisioningTest {
 		Collection requirements = new ArrayList();
 		requirements.add(req1);
 		requirements.add(req2);
-		iud1.addRequiredCapabilities(requirements);
+		iud1.addRequirements(requirements);
 		Collection capabilities = new ArrayList();
 		capabilities.add(new ProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, "TestNegation4", Version.create("1.0.0")));
 		iud1.addProvidedCapabilities(capabilities);
@@ -151,7 +151,7 @@ public class NegationTesting extends AbstractProvisioningTest {
 		Collection requirements = new ArrayList();
 		requirements.add(req1);
 		requirements.add(req2);
-		iud1.addRequiredCapabilities(requirements);
+		iud1.addRequirements(requirements);
 		Collection capabilities = new ArrayList();
 		capabilities.add(new ProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, "TestNegation4", Version.create("1.0.0")));
 		iud1.addProvidedCapabilities(capabilities);
@@ -193,7 +193,7 @@ public class NegationTesting extends AbstractProvisioningTest {
 		Collection requirements = new ArrayList();
 		requirements.add(req1);
 		requirements.add(req2);
-		iud1.addRequiredCapabilities(requirements);
+		iud1.addRequirements(requirements);
 		Collection capabilities = new ArrayList();
 		capabilities.add(new ProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, "TestNegation4", Version.create("1.0.0")));
 		iud1.addProvidedCapabilities(capabilities);
@@ -216,7 +216,7 @@ public class NegationTesting extends AbstractProvisioningTest {
 		iud3.addProvidedCapabilities(capabilities3);
 		Collection requirements3 = new ArrayList();
 		requirements3.add(MetadataFactory.createRequirement("DOES-NOT-EXIST", "NEVER", new VersionRange("[1.0.0, 2.0.0)"), null, false, false));
-		iud3.addRequiredCapabilities(requirements3);
+		iud3.addRequirements(requirements3);
 		IInstallableUnit iu3 = MetadataFactory.createInstallableUnit(iud3);
 
 		IMetadataRepository repo = createTestMetdataRepository(new IInstallableUnit[] {iu1, iu2, iu3});
@@ -254,7 +254,7 @@ public class NegationTesting extends AbstractProvisioningTest {
 		Collection requirements = new ArrayList();
 		requirements.add(req1);
 		requirements.add(req2);
-		iud1.addRequiredCapabilities(requirements);
+		iud1.addRequirements(requirements);
 		Collection capabilities = new ArrayList();
 		capabilities.add(new ProvidedCapability(IInstallableUnit.NAMESPACE_IU_ID, "TestNegation4", Version.create("1.0.0")));
 		iud1.addProvidedCapabilities(capabilities);
@@ -285,7 +285,7 @@ public class NegationTesting extends AbstractProvisioningTest {
 		iud4.addProvidedCapabilities(capabilities4);
 		Collection reqs4 = new ArrayList();
 		reqs4.add(new RequiredCapability(NS, N, new VersionRange("[1.1.1, 1.1.1]"), null, false, false));
-		iud4.addRequiredCapabilities(reqs4);
+		iud4.addRequirements(reqs4);
 		IInstallableUnit iu4 = MetadataFactory.createInstallableUnit(iud4);
 
 		IMetadataRepository repo = createTestMetdataRepository(new IInstallableUnit[] {iu1, iu2, iu3, iu4});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ORTesting.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ORTesting.java
index 9720e6e..a40350e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ORTesting.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/ORTesting.java
@@ -35,7 +35,7 @@ public class ORTesting extends AbstractProvisioningTest {
 		iudA.setCapabilities(new IProvidedCapability[] {MetadataFactory.createProvidedCapability("org.eclipse.equinox.p2.iu", "A", Version.parseVersion("1.0.0"))});
 		Collection reqs = new ArrayList();
 		reqs.add(orRequirement);
-		iudA.addRequiredCapabilities(reqs);
+		iudA.addRequirements(reqs);
 
 		IInstallableUnit mylyn34 = createIU("org.eclipse.mylyn34");
 		IInstallableUnit mylyn35 = createIU("org.eclipse.mylyn35");
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
index 6bcb368..9952f76 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
@@ -76,9 +76,9 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 	public void testAddCapabilities() {
 		InstallableUnitDescription iu = new InstallableUnitDescription();
 		iu.setId("test");
-		assertEquals(0, iu.getRequiredCapabilities().size());
+		assertEquals(0, iu.getRequirements().size());
 		assertEquals(0, iu.getProvidedCapabilities().size());
-		assertEquals(0, iu.getMetaRequiredCapabilities().size());
+		assertEquals(0, iu.getMetaRequirements().size());
 
 		IPublisherInfo info = new PublisherInfo();
 		IRequirement testRequiredCapability = MetadataFactory.createRequirement("ns1", "name1", null, null, false, false, false);
@@ -89,9 +89,9 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		TestAction action = new TestAction();
 		action.testProcessCapabilityAdvice(iu, info);
 
-		assertEquals("name1", ((IRequiredCapability) iu.getRequiredCapabilities().iterator().next()).getName());
+		assertEquals("name1", ((IRequiredCapability) iu.getRequirements().iterator().next()).getName());
 		assertEquals("name2", iu.getProvidedCapabilities().iterator().next().getName());
-		assertEquals("name3", ((IRequiredCapability) iu.getMetaRequiredCapabilities().iterator().next()).getName());
+		assertEquals("name3", ((IRequiredCapability) iu.getMetaRequirements().iterator().next()).getName());
 	}
 
 	public void testAddCapabilitiesIdentityCounts() {
@@ -104,7 +104,7 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		requiredCapabilities[2] = MetadataFactory.createRequirement("rtest2", "test2", new VersionRange("[1,2)"), null, false, false, false);
 		requiredCapabilities[3] = MetadataFactory.createRequirement("rtest2", "test2", new VersionRange("[2,3)"), null, false, false, false);
 		requiredCapabilities[4] = MetadataFactory.createRequirement("rtest3", "test3", null, null, false, false, false);
-		iu.setRequiredCapabilities(requiredCapabilities);
+		iu.setRequirements(requiredCapabilities);
 
 		IProvidedCapability[] providedCapabilities = new IProvidedCapability[5];
 		providedCapabilities[0] = MetadataFactory.createProvidedCapability("ptest1", "test1", Version.createOSGi(1, 0, 0));
@@ -120,11 +120,11 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		metaRequiredCapabilities[2] = MetadataFactory.createRequirement("mtest2", "test2", new VersionRange("[1,2)"), null, false, false, false);
 		metaRequiredCapabilities[3] = MetadataFactory.createRequirement("mtest2", "test2", new VersionRange("[2,3)"), null, false, false, false);
 		metaRequiredCapabilities[4] = MetadataFactory.createRequirement("mtest3", "test3", null, null, false, false, false);
-		iu.setMetaRequiredCapabilities(metaRequiredCapabilities);
+		iu.setMetaRequirements(metaRequiredCapabilities);
 
-		assertEquals(5, iu.getRequiredCapabilities().size());
+		assertEquals(5, iu.getRequirements().size());
 		assertEquals(5, iu.getProvidedCapabilities().size());
-		assertEquals(5, iu.getMetaRequiredCapabilities().size());
+		assertEquals(5, iu.getMetaRequirements().size());
 
 		IPublisherInfo info = new PublisherInfo();
 		IRequirement testRequiredCapability = MetadataFactory.createRequirement("ns1", "name1", null, null, false, false, false);
@@ -135,21 +135,21 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		TestAction action = new TestAction();
 		action.testProcessCapabilityAdvice(iu, info);
 
-		assertEquals(6, iu.getRequiredCapabilities().size());
+		assertEquals(6, iu.getRequirements().size());
 		assertEquals(6, iu.getProvidedCapabilities().size());
-		assertEquals(6, iu.getMetaRequiredCapabilities().size());
+		assertEquals(6, iu.getMetaRequirements().size());
 	}
 
 	public void testReplaceCapabilities() {
 		InstallableUnitDescription iu = new InstallableUnitDescription();
 		iu.setId("test");
-		iu.setRequiredCapabilities(createRequiredCapabilities("ns1", "name1", null, ""));
+		iu.setRequirements(createRequiredCapabilities("ns1", "name1", null, ""));
 		iu.setCapabilities(new IProvidedCapability[] {MetadataFactory.createProvidedCapability("ns2", "name2", null)});
-		iu.setMetaRequiredCapabilities(createRequiredCapabilities("ns3", "name3", null, ""));
+		iu.setMetaRequirements(createRequiredCapabilities("ns3", "name3", null, ""));
 
 		assertNotSame(9, PublisherHelper.toOSGiVersion(iu.getProvidedCapabilities().iterator().next().getVersion()).getMajor());
-		assertTrue(iu.getRequiredCapabilities().iterator().next().isGreedy());
-		assertTrue(iu.getMetaRequiredCapabilities().iterator().next().isGreedy());
+		assertTrue(iu.getRequirements().iterator().next().isGreedy());
+		assertTrue(iu.getMetaRequirements().iterator().next().isGreedy());
 
 		IPublisherInfo info = new PublisherInfo();
 		IRequirement testRequiredCapability = MetadataFactory.createRequirement("ns1", "name1", null, null, false, false, false);
@@ -161,8 +161,8 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		action.testProcessCapabilityAdvice(iu, info);
 
 		assertEquals(9, PublisherHelper.toOSGiVersion(iu.getProvidedCapabilities().iterator().next().getVersion()).getMajor());
-		assertFalse(iu.getRequiredCapabilities().iterator().next().isGreedy());
-		assertFalse(iu.getMetaRequiredCapabilities().iterator().next().isGreedy());
+		assertFalse(iu.getRequirements().iterator().next().isGreedy());
+		assertFalse(iu.getMetaRequirements().iterator().next().isGreedy());
 	}
 
 	public void testReplaceCapabilitiesIdentityCounts() {
@@ -175,7 +175,7 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		requiredCapabilities[2] = MetadataFactory.createRequirement("rtest2", "test2", new VersionRange("[1,2)"), null, false, false, false);
 		requiredCapabilities[3] = MetadataFactory.createRequirement("rtest2", "test2", new VersionRange("[2,3)"), null, false, false, false);
 		requiredCapabilities[4] = MetadataFactory.createRequirement("rtest3", "test3", null, null, false, false, false);
-		iu.setRequiredCapabilities(requiredCapabilities);
+		iu.setRequirements(requiredCapabilities);
 
 		IProvidedCapability[] providedCapabilities = new IProvidedCapability[5];
 		providedCapabilities[0] = MetadataFactory.createProvidedCapability("ptest1", "test1", Version.createOSGi(1, 0, 0));
@@ -191,11 +191,11 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		metaRequiredCapabilities[2] = MetadataFactory.createRequirement("mtest2", "test2", new VersionRange("[1,2)"), null, false, false, false);
 		metaRequiredCapabilities[3] = MetadataFactory.createRequirement("mtest2", "test2", new VersionRange("[2,3)"), null, false, false, false);
 		metaRequiredCapabilities[4] = MetadataFactory.createRequirement("mtest3", "test3", null, null, false, false, false);
-		iu.setMetaRequiredCapabilities(metaRequiredCapabilities);
+		iu.setMetaRequirements(metaRequiredCapabilities);
 
-		assertEquals(5, iu.getRequiredCapabilities().size());
+		assertEquals(5, iu.getRequirements().size());
 		assertEquals(5, iu.getProvidedCapabilities().size());
-		assertEquals(5, iu.getMetaRequiredCapabilities().size());
+		assertEquals(5, iu.getMetaRequirements().size());
 
 		IPublisherInfo info = new PublisherInfo();
 		IRequirement testRequiredCapability = MetadataFactory.createRequirement("rtest1", "test1", null, null, false, false, false);
@@ -206,9 +206,9 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		TestAction action = new TestAction();
 		action.testProcessCapabilityAdvice(iu, info);
 
-		assertEquals(4, iu.getRequiredCapabilities().size());
+		assertEquals(4, iu.getRequirements().size());
 		assertEquals(4, iu.getProvidedCapabilities().size());
-		assertEquals(4, iu.getMetaRequiredCapabilities().size());
+		assertEquals(4, iu.getMetaRequirements().size());
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
index 91f79f1..6e338ef 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
@@ -369,7 +369,7 @@ public class SiteXMLAction extends AbstractPublisherAction {
 		if (parentCategory != null) {
 			reqsConfigurationUnits.add(MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, parentCategory.getId(), VersionRange.emptyRange, parentCategory.getFilter(), false, false));
 		}
-		cat.setRequiredCapabilities(reqsConfigurationUnits.toArray(new IRequirement[reqsConfigurationUnits.size()]));
+		cat.setRequirements(reqsConfigurationUnits.toArray(new IRequirement[reqsConfigurationUnits.size()]));
 
 		// Create set of provided capabilities
 		ArrayList<IProvidedCapability> providedCapabilities = new ArrayList<IProvidedCapability>();

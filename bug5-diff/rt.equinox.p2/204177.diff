commit fe377d00bb44b01b0a3f4b06f058f016af0185d3
Author: Susan Franklin <sfranklin>
Date:   Thu Apr 10 18:00:02 2008 +0000

    Bug 204177 - [ui] Should have a refresh action in available features page
    Bug 216028 - (Addition of context menu)

10	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
9	4	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
5	5	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
36	7	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
64	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RefreshAction.java
26	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
22	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
63	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
63	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
index 41c35bd..6f5da93 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
@@ -15,9 +15,9 @@ import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddArtifactRepositoryDialog;
 import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveArtifactRepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.swt.widgets.Shell;
 
@@ -84,4 +84,12 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 		return StructuredViewerProvisioningListener.PROV_EVENT_ARTIFACT_REPOSITORY;
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.admin.ProvView#refreshUnderlyingModel()
+	 */
+	protected void refreshUnderlyingModel() {
+		ProvisioningOperationRunner.schedule(new RefreshArtifactRepositoriesOperation(ProvAdminUIMessages.ProvView_RefreshCommandLabel, getRepoFlags()), getShell());
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index 7752e9f..51100d1 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -18,13 +18,11 @@ import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddProfileDialog;
 import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.ui.IProfileChooser;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.RevertAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveMetadataRepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
@@ -166,4 +164,11 @@ public class MetadataRepositoriesView extends RepositoriesView {
 		return StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY;
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.admin.ProvView#refreshUnderlyingModel()
+	 */
+	protected void refreshUnderlyingModel() {
+		ProvisioningOperationRunner.schedule(new RefreshMetadataRepositoriesOperation(ProvAdminUIMessages.ProvView_RefreshCommandLabel, getRepoFlags()), getShell());
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
index 320356c..c61ce03 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
@@ -14,6 +14,7 @@ import java.util.ArrayList;
 import java.util.List;
 import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.RefreshAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.action.*;
 import org.eclipse.jface.preference.IPreferenceStore;
@@ -36,7 +37,7 @@ import org.eclipse.ui.part.ViewPart;
 abstract class ProvView extends ViewPart {
 	TreeViewer viewer;
 	private UndoRedoActionGroup undoRedoGroup;
-	Action refreshAction;
+	RefreshAction refreshAction;
 	private IPropertyChangeListener preferenceListener;
 	protected Display display;
 
@@ -122,8 +123,8 @@ abstract class ProvView extends ViewPart {
 
 	protected void makeActions() {
 		undoRedoGroup = new UndoRedoActionGroup(getSite(), ProvUI.getProvisioningUndoContext(), true);
-		refreshAction = new Action(ProvAdminUIMessages.ProvView_RefreshCommandLabel) {
-			public void run() {
+		refreshAction = new RefreshAction(viewer, viewer.getControl()) {
+			protected void refresh() {
 				refreshAll();
 			}
 		};
@@ -214,8 +215,7 @@ abstract class ProvView extends ViewPart {
 	}
 
 	protected void refreshUnderlyingModel() {
-		// TODO there should be some underlying API to call to refresh the underlying core object.
-		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=207678
+		// Default is to do nothing
 	}
 
 	protected List getVisualProperties() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 17447bd..5aa90c7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -306,9 +306,21 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 
 		// Add the buttons to the button bar.
 		installButton = createVerticalButton(composite, ProvUI.INSTALL_COMMAND_LABEL, false);
-		installButton.setData(BUTTONACTION, new InstallAction(availableIUGroup.getStructuredViewer(), profileId, null, ProvPolicies.getDefault(), getShell()));
+		IAction installAction = new InstallAction(availableIUGroup.getStructuredViewer(), profileId, null, ProvPolicies.getDefault(), getShell());
+		installButton.setData(BUTTONACTION, installAction);
 		availablePropButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_Properties, false);
-		availablePropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), availableIUGroup.getStructuredViewer()));
+
+		IAction propertiesAction = new PropertyDialogAction(new SameShellProvider(parent.getShell()), availableIUGroup.getStructuredViewer());
+		availablePropButton.setData(BUTTONACTION, propertiesAction);
+
+		IAction refreshAction = new RefreshAction(availableIUGroup.getStructuredViewer(), availableIUGroup.getStructuredViewer().getControl()) {
+			protected void refresh() {
+				availableIUGroup.refresh();
+			}
+		};
+		Button refreshButton = createVerticalButton(composite, refreshAction.getText(), false);
+		refreshButton.setData(BUTTONACTION, refreshAction);
+
 		manipulateRepoButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_ManageSites, false);
 		manipulateRepoButton.setData(BUTTONACTION, new Action() {
 			public void runWithEvent(Event event) {
@@ -319,6 +331,9 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		addRepoButton.setData(BUTTONACTION, new AddColocatedRepositoryAction(availableIUGroup.getStructuredViewer(), getShell()));
 		removeRepoButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_RemoveSiteButtonText, false);
 		removeRepoButton.setData(BUTTONACTION, new RemoveColocatedRepositoryAction(availableIUGroup.getStructuredViewer(), getShell()));
+
+		createMenu(availableIUGroup.getStructuredViewer().getControl(), new IAction[] {installAction, propertiesAction, refreshAction});
+
 		return composite;
 	}
 
@@ -397,11 +412,9 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		composite.setLayout(layout);
 
 		// Add the buttons to the button bar.
-		uninstallButton = createVerticalButton(composite, ProvUI.UNINSTALL_COMMAND_LABEL, false);
-		uninstallButton.setData(BUTTONACTION, new UninstallAction(installedIUGroup.getStructuredViewer(), profileId, null, ProvPolicies.getDefault(), parent.getShell()));
 		updateButton = createVerticalButton(composite, ProvUI.UPDATE_COMMAND_LABEL, false);
 		// For update only, we want it to check for all updates if there is nothing selected
-		updateButton.setData(BUTTONACTION, new UpdateAction(new ISelectionProvider() {
+		IAction updateAction = new UpdateAction(new ISelectionProvider() {
 			public void addSelectionChangedListener(ISelectionChangedListener listener) {
 				installedIUGroup.getStructuredViewer().addSelectionChangedListener(listener);
 			}
@@ -423,10 +436,16 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 			public void setSelection(ISelection selection) {
 				installedIUGroup.getStructuredViewer().setSelection(selection);
 			}
-		}, profileId, null, ProvPolicies.getDefault(), parent.getShell()));
+		}, profileId, null, ProvPolicies.getDefault(), parent.getShell());
+		updateButton.setData(BUTTONACTION, updateAction);
+
+		uninstallButton = createVerticalButton(composite, ProvUI.UNINSTALL_COMMAND_LABEL, false);
+		IAction uninstallAction = new UninstallAction(installedIUGroup.getStructuredViewer(), profileId, null, ProvPolicies.getDefault(), parent.getShell());
+		uninstallButton.setData(BUTTONACTION, uninstallAction);
 
 		installedPropButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_Properties, false);
-		installedPropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), installedIUGroup.getStructuredViewer()));
+		IAction propertiesAction = new PropertyDialogAction(new SameShellProvider(parent.getShell()), installedIUGroup.getStructuredViewer());
+		installedPropButton.setData(BUTTONACTION, propertiesAction);
 
 		// temporarily disabled.
 		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=224180
@@ -441,9 +460,19 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 				}
 			});
 		}
+		createMenu(installedIUGroup.getStructuredViewer().getControl(), new IAction[] {updateAction, uninstallAction, propertiesAction});
+
 		return composite;
 	}
 
+	private void createMenu(Control control, IAction[] actions) {
+		MenuManager menuManager = new MenuManager();
+		for (int i = 0; i < actions.length; i++)
+			menuManager.add(actions[i]);
+		Menu menu = menuManager.createContextMenu(control);
+		control.setMenu(menu);
+	}
+
 	void validateInstalledIUButtons(ISelection selection) {
 		// Note that this relies on the actions getting the selection notification
 		// before we do, since we rely on the action enablement to update
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index a0f38b7..c415da6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -89,6 +89,8 @@ public class ProvUIMessages extends NLS {
 	public static String UpdateIUCommandLabel;
 	public static String UpdateIUCommandTooltip;
 	public static String UpdateIUProgress;
+	public static String RefreshAction_Label;
+	public static String RefreshAction_Tooltip;
 	public static String RevertIUOperationLabel;
 	public static String RevertIUCommandLabel;
 	public static String RevertIUCommandTooltip;
@@ -116,6 +118,7 @@ public class ProvUIMessages extends NLS {
 	public static String AddRepositoryDialog_InvalidURL;
 	public static String AddRepositoryDialog_Title;
 	public static String AvailableIUElement_ProfileNotFound;
+	public static String AvailableIUGroup_RefreshOperationLabel;
 	public static String AvailableIUGroup_ViewByToolTipText;
 	public static String Label_Profiles;
 	public static String Label_Repositories;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index ff1ea82..c148d45 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -42,6 +42,8 @@ UpdateIUOperationLabel=Update
 UpdateIUCommandLabel=&Check for updates...
 UpdateIUCommandTooltip=See if updates are available for the selected items
 UpdateIUProgress=Updating...
+RefreshAction_Label=Re&fresh
+RefreshAction_Tooltip=Refresh
 RevertIUOperationLabel=Revert
 RevertIUCommandLabel=&Revert...
 RevertIUCommandTooltip=Revert to a previously installed configuration
@@ -121,6 +123,7 @@ but it may be possible to apply the changes you have made without restarting. \
 Would you like to restart now?
 ApplyProfileChangesDialog_ApplyChanges=Apply Changes
 AvailableIUElement_ProfileNotFound=Could not find profile to use for size computation.
+AvailableIUGroup_RefreshOperationLabel=Refresh
 AvailableIUGroup_ViewByToolTipText=View by
 Label_Profiles=All Software Profiles
 Label_Repositories=Known Repositories
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RefreshAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RefreshAction.java
new file mode 100644
index 0000000..3ecdd81
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RefreshAction.java
@@ -0,0 +1,64 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.provisional.p2.ui.actions;
+
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.jface.viewers.ISelectionProvider;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.KeyAdapter;
+import org.eclipse.swt.events.KeyEvent;
+import org.eclipse.swt.widgets.Control;
+
+/**
+ * @since 3.4
+ *
+ */
+public abstract class RefreshAction extends ProvisioningAction {
+
+	/**
+	 * @param text
+	 * @param selectionProvider
+	 * @param shell
+	 */
+	public RefreshAction(ISelectionProvider selectionProvider, Control control) {
+		super(ProvUIMessages.RefreshAction_Label, selectionProvider, control.getShell());
+		setToolTipText(ProvUIMessages.RefreshAction_Tooltip);
+		hookKeyListener(control);
+	}
+
+	private void hookKeyListener(Control control) {
+		control.addKeyListener(new KeyAdapter() {
+			public void keyReleased(KeyEvent e) {
+				handleKeyReleased(e);
+			}
+		});
+	}
+
+	public void run() {
+		refresh();
+	}
+
+	protected abstract void refresh();
+
+	/**
+	 * Handle a key released event.  Used internally and also
+	 * made available so that clients can watch key events from
+	 * any other controls and dispatch to this action.
+	 * 
+	 * @param event the key event
+	 */
+	public void handleKeyReleased(KeyEvent event) {
+		if (event.keyCode == SWT.F5 && event.stateMask == 0) {
+			refresh();
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 5b8c6c1..cc6fd0f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -10,14 +10,20 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
+import java.net.URL;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.DeferredFetchFilteredTree;
 import org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RefreshMetadataRepositoriesOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
@@ -47,6 +53,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	private IUDetailsLabelProvider labelProvider;
 	DeferredFetchFilteredTree filteredTree;
 	IUColumnConfig[] columnConfig;
+	private int refreshRepoFlags = IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM;
 
 	/**
 	 * Create a group that represents the available IU's but does not use any of the
@@ -168,6 +175,10 @@ public class AvailableIUGroup extends StructuredIUGroup {
 			getStructuredViewer().setInput(getInput());
 	}
 
+	public void setRepositoryRefreshFlags(int flags) {
+		refreshRepoFlags = flags;
+	}
+
 	/**
 	 * Set a boolean indicating whether a bold font should be used when
 	 * showing filtered items.  This method does not refresh the tree or 
@@ -208,4 +219,19 @@ public class AvailableIUGroup extends StructuredIUGroup {
 			return null;
 		return ((TreeViewer) getStructuredViewer()).getTree();
 	}
+
+	/**
+	 * Refresh the available view completely.
+	 */
+	public void refresh() {
+		URL[] urls = getProvisioningContext().getMetadataRepositories();
+		ProvisioningOperation op;
+		if (urls == null)
+			op = new RefreshMetadataRepositoriesOperation(ProvUIMessages.AvailableIUGroup_RefreshOperationLabel, refreshRepoFlags);
+		else
+			op = new RefreshMetadataRepositoriesOperation(ProvUIMessages.AvailableIUGroup_RefreshOperationLabel, urls);
+		ProvisioningOperationRunner.schedule(op, getShell());
+		// Calling this will create a new input and refresh the viewer
+		setQueryContext(queryContext);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
index f3dd7a0..7e476df 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
@@ -159,6 +159,17 @@ public class ProvisioningUtil {
 		return manager.getKnownRepositories(flags);
 	}
 
+	public static void refreshMetadataRepositories(URL[] urls, IProgressMonitor monitor) throws ProvisionException {
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
+		if (manager == null) {
+			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
+		}
+		SubMonitor mon = SubMonitor.convert(monitor, urls.length * 100);
+		for (int i = 0; i < urls.length; i++) {
+			manager.refreshRepository(urls[i], mon.newChild(100));
+		}
+	}
+
 	public static URL[] getArtifactRepositories(int flags) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null) {
@@ -167,6 +178,17 @@ public class ProvisioningUtil {
 		return manager.getKnownRepositories(flags);
 	}
 
+	public static void refreshArtifactRepositories(URL[] urls, IProgressMonitor monitor) throws ProvisionException {
+		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
+		if (manager == null) {
+			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
+		}
+		SubMonitor mon = SubMonitor.convert(monitor, urls.length * 100);
+		for (int i = 0; i < urls.length; i++) {
+			manager.refreshRepository(urls[i], mon.newChild(100));
+		}
+	}
+
 	/*
 	 * Get the plan for the specified install operation
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
new file mode 100644
index 0000000..865684a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
@@ -0,0 +1,63 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.provisional.p2.ui.operations;
+
+import java.net.URL;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+/**
+ * @since 3.4
+ *
+ */
+public class RefreshArtifactRepositoriesOperation extends RepositoryOperation {
+
+	/**
+	 * @param label
+	 * @param urls
+	 */
+	public RefreshArtifactRepositoriesOperation(String label, URL[] urls) {
+		super(label, urls);
+	}
+
+	public RefreshArtifactRepositoriesOperation(String label, int flags) {
+		super(label, new URL[0]);
+		try {
+			this.urls = ProvisioningUtil.getArtifactRepositories(flags);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null, StatusManager.LOG);
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doExecute(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	 */
+	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		ProvisioningUtil.refreshArtifactRepositories(urls, monitor);
+		return Status.OK_STATUS;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doUndo(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	 */
+	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		// Should never happen
+		return Status.CANCEL_STATUS;
+	}
+
+	public boolean canUndo() {
+		return false;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
new file mode 100644
index 0000000..d6ea96f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
@@ -0,0 +1,63 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.provisional.p2.ui.operations;
+
+import java.net.URL;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+/**
+ * @since 3.4
+ *
+ */
+public class RefreshMetadataRepositoriesOperation extends RepositoryOperation {
+
+	/**
+	 * @param label
+	 * @param urls
+	 */
+	public RefreshMetadataRepositoriesOperation(String label, URL[] urls) {
+		super(label, urls);
+	}
+
+	public RefreshMetadataRepositoriesOperation(String label, int flags) {
+		super(label, new URL[0]);
+		try {
+			this.urls = ProvisioningUtil.getMetadataRepositories(flags);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null, StatusManager.LOG);
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doExecute(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	 */
+	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		ProvisioningUtil.refreshMetadataRepositories(urls, monitor);
+		return Status.OK_STATUS;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doUndo(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	 */
+	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		// Should never happen
+		return Status.CANCEL_STATUS;
+	}
+
+	public boolean canUndo() {
+		return false;
+	}
+
+}

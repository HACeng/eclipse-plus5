commit 19c0b2301d3f315244e8db69d79372bb0df225b9
Author: John Arthorne <johna>
Date:   Fri Oct 17 19:19:27 2008 +0000

    Bug 250883 Artifact repository factory extension point cleanup

26	22	bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactRepositories.exsd
3	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
60	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java
0	55	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/IArtifactRepositoryFactory.java
1	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
4	4	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
4	4	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactRepositories.exsd b/bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactRepositories.exsd
index 62c0adc..003ec59 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactRepositories.exsd
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactRepositories.exsd
@@ -1,16 +1,21 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <!-- Schema file written by PDE -->
-<schema targetNamespace="org.eclipse.equinox.p2.artifact.repository">
+<schema targetNamespace="org.eclipse.equinox.p2.artifact.repository" xmlns="http://www.w3.org/2001/XMLSchema">
 <annotation>
-      <appInfo>
+      <appinfo>
          <meta.schema plugin="org.eclipse.equinox.p2.artifact.repository" id="artifactRepositories" name="Artifact Repositories"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          This extension point is used to provide artifact repository implementations
       </documentation>
    </annotation>
 
    <element name="extension">
+      <annotation>
+         <appinfo>
+            <meta.element />
+         </appinfo>
+      </annotation>
       <complexType>
          <sequence>
             <element ref="factory"/>
@@ -35,9 +40,9 @@
                <documentation>
                   
                </documentation>
-               <appInfo>
+               <appinfo>
                   <meta.attribute translatable="true"/>
-               </appInfo>
+               </appinfo>
             </annotation>
          </attribute>
       </complexType>
@@ -51,9 +56,9 @@
                   the fully-qualified name of a class which implements 
 &lt;samp&gt;org.eclipse.equinox.p2.artifact.repository.IArtifactRepository&lt;/samp&gt;.
                </documentation>
-               <appInfo>
+               <appinfo>
                   <meta.attribute kind="java" basedOn="org.eclipse.equinox.p2.artifact.repository.IArtifactRepository"/>
-               </appInfo>
+               </appinfo>
             </annotation>
          </attribute>
       </complexType>
@@ -72,48 +77,47 @@
    </element>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="since"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         org.eclipse.equinox.p2.artifact.repository 0.1.0
+         org.eclipse.equinox.p2.artifact.repository 1.0.0
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="examples"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter extension point usage example here.]
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="apiInfo"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         The value of the class attribute must represent an 
-implementor of &lt;tt&gt;org.eclipse.equinox.p2.artifact.repository.IArtifactRepository&lt;/tt&gt;
+         The value of the class attribute must represent a subclass of &lt;tt&gt;org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory&lt;/tt&gt;
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="implementation"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         [Enter information about supplied implementation of this extension point.]
+         This bundle provides an artifact repository factory for the IArtifactRepositoryManager#TYPE_SIMPLE_REPOSITORY repository type.
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="copyright"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         Copyright (c) 2007 IBM Corporation and others.&lt;br&gt;
+         Copyright (c) 2007, 2008 IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials are made 
 available under the terms of the Eclipse Public License v1.0 which 
 accompanies this distribution, and is available at &lt;a 
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index 656ba24..07056e1 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -19,7 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
-import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory;
 
 /**
  * Default implementation of {@link IArtifactRepositoryManager}.
@@ -55,7 +55,7 @@ public class ArtifactRepositoryManager extends AbstractRepositoryManager impleme
 			IExtension extension = RegistryFactory.getRegistry().getExtension(Activator.REPO_PROVIDER_XPT, type);
 			if (extension == null)
 				fail(location, ProvisionException.REPOSITORY_UNKNOWN_TYPE);
-			IArtifactRepositoryFactory factory = (IArtifactRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
+			ArtifactRepositoryFactory factory = (ArtifactRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
 			if (factory == null)
 				fail(location, ProvisionException.REPOSITORY_FAILED_READ);
 			IArtifactRepository result = factory.create(location, name, type, properties);
@@ -68,7 +68,7 @@ public class ArtifactRepositoryManager extends AbstractRepositoryManager impleme
 	}
 
 	protected IRepository factoryLoad(URI location, IExtension extension, SubMonitor monitor) throws ProvisionException {
-		IArtifactRepositoryFactory factory = (IArtifactRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
+		ArtifactRepositoryFactory factory = (ArtifactRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
 		if (factory == null)
 			return null;
 		return factory.load(location, monitor.newChild(10));
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java
new file mode 100644
index 0000000..4278404
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/ArtifactRepositoryFactory.java
@@ -0,0 +1,60 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository;
+
+import java.net.URI;
+import java.util.Map;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+
+/**
+ * An artifact repository factory is responsible for creating and loading instances
+ * of a particular type of artifact repository. Factories are provided via the 
+ * <tt>org.eclipse.equinox.p2.artifact.repository.artifactRepositories</tt> extension point.
+ */
+public abstract class ArtifactRepositoryFactory {
+
+	/**
+	 * Creates and returns a new empty artifact repository of the given type at 
+	 * the given location.
+	 * 
+	 * @param location the location for the new repository
+	 * @param name the name of the new repository
+	 * @param type the kind of repository to create
+	 * @param properties the properties to set on the repository
+	 * @return the newly created repository
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>The repository type is unknown.</li>
+	 * <li>There was an error writing to the given repository location.</li>
+	 * <li>A repository already exists at that location.</li>
+	 * </ul>
+	 */
+	public abstract IArtifactRepository create(URI location, String name, String type, Map properties) throws ProvisionException;
+
+	/**
+	 * Loads the repository at the given location.  The location is expected to contain 
+	 * data that describes a valid artifact repository of a known type.  If this manager
+	 * already knows a repository at the given location then that repository is returned.
+	 * 
+	 * @param location the location in which to look for a repository description
+	 * @param monitor a progress monitor, or <code>null</code> if progress
+	 *    reporting is not desired
+	 * @return a repository object for the given location
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>There is no existing repository at that location.</li>
+	 * <li>The repository at that location could not be read.</li>
+	 * </ul>
+	 */
+	public abstract IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException;
+}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/IArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/IArtifactRepositoryFactory.java
deleted file mode 100644
index 2a918ca..0000000
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/IArtifactRepositoryFactory.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository;
-
-import java.net.URI;
-import java.util.Map;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-
-public interface IArtifactRepositoryFactory {
-
-	/**
-	 * Creates and returns a new empty artifact repository of the given type at 
-	 * the given location.
-	 * 
-	 * @param location the location for the new repository
-	 * @param name the name of the new repository
-	 * @param type the kind of repository to create
-	 * @param properties the properties to set on the repository
-	 * @return the newly created repository
-	 * @throws ProvisionException if the repository could not be created.  Reasons include:
-	 * <ul>
-	 * <li>The repository type is unknown.</li>
-	 * <li>There was an error writing to the given repository location.</li>
-	 * <li>A repository already exists at that location.</li>
-	 * </ul>
-	 */
-	public IArtifactRepository create(URI location, String name, String type, Map properties) throws ProvisionException;
-
-	/**
-	 * Loads the repository at the given location.  The location is expected to contain 
-	 * data that describes a valid artifact repository of a known type.  If this manager
-	 * already knows a repository at the given location then that repository is returned.
-	 * 
-	 * @param location the location in which to look for a repository description
-	 * @param monitor a progress monitor, or <code>null</code> if progress
-	 *    reporting is not desired
-	 * @return a repository object for the given location
-	 * @throws ProvisionException if the repository could not be created.  Reasons include:
-	 * <ul>
-	 * <li>There is no existing repository at that location.</li>
-	 * <li>The repository at that location could not be read.</li>
-	 * </ul>
-	 */
-	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException;
-}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
index 1205541..bb08974 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/SimpleArtifactRepositoryFactory.java
@@ -25,7 +25,7 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifact
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.osgi.util.NLS;
 
-public class SimpleArtifactRepositoryFactory implements IArtifactRepositoryFactory {
+public class SimpleArtifactRepositoryFactory extends ArtifactRepositoryFactory {
 
 	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
 		final String PROTOCOL_FILE = "file"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
index 3c66167..917225c 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
@@ -16,14 +16,14 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.osgi.util.NLS;
 
-public class ExtensionLocationArtifactRepositoryFactory implements IArtifactRepositoryFactory {
+public class ExtensionLocationArtifactRepositoryFactory extends ArtifactRepositoryFactory {
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
 	 */
 	public IArtifactRepository create(URI location, String name, String type, Map properties) throws ProvisionException {
 		// TODO proper progress monitoring
@@ -52,7 +52,7 @@ public class ExtensionLocationArtifactRepositoryFactory implements IArtifactRepo
 	}
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
 		// TODO proper progress monitoring
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
index 98cea36..1eec9dc 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
@@ -20,15 +20,15 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
-import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 
-public class UpdateSiteArtifactRepositoryFactory implements IArtifactRepositoryFactory {
+public class UpdateSiteArtifactRepositoryFactory extends ArtifactRepositoryFactory {
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
 	 */
 	public IArtifactRepository create(URI location, String name, String type, Map properties) {
 		return null;
@@ -40,7 +40,7 @@ public class UpdateSiteArtifactRepositoryFactory implements IArtifactRepositoryF
 	private static final String PROTOCOL_FILE = "file"; //$NON-NLS-1$
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IArtifactRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
 		IArtifactRepository repository = loadRepository(location, monitor);
commit 90bc9989cbf39fd036dd56097efe4cdfd45c49b7
Author: John Arthorne <johna>
Date:   Fri Oct 17 19:51:09 2008 +0000

    Bug 250883 Artifact repository factory extension point cleanup

24	19	bundles/org.eclipse.equinox.p2.artifact.repository/schema/processingSteps.exsd
5	5	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
31	14	bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
27	22	bundles/org.eclipse.equinox.p2.metadata.repository/schema/metadataRepositories.exsd
4	4	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
0	77	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/IMetadataRepositoryFactory.java
82	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java
3	3	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
3	3	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/schema/processingSteps.exsd b/bundles/org.eclipse.equinox.p2.artifact.repository/schema/processingSteps.exsd
index 92dbb09..40786b8 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/schema/processingSteps.exsd
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/schema/processingSteps.exsd
@@ -1,16 +1,21 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <!-- Schema file written by PDE -->
-<schema targetNamespace="org.eclipse.equinox.p2.artifact.repository">
+<schema targetNamespace="org.eclipse.equinox.p2.artifact.repository" xmlns="http://www.w3.org/2001/XMLSchema">
 <annotation>
-      <appInfo>
+      <appinfo>
          <meta.schema plugin="org.eclipse.equinox.p2.artifact.repository" id="processingSteps" name="Processing Steps"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          This extension point is used to provide processing step implementations
       </documentation>
    </annotation>
 
    <element name="extension">
+      <annotation>
+         <appinfo>
+            <meta.element />
+         </appinfo>
+      </annotation>
       <complexType>
          <sequence>
             <element ref="step"/>
@@ -34,9 +39,9 @@
                <documentation>
                   
                </documentation>
-               <appInfo>
+               <appinfo>
                   <meta.attribute translatable="true"/>
-               </appInfo>
+               </appinfo>
             </annotation>
          </attribute>
       </complexType>
@@ -49,57 +54,57 @@
                <documentation>
                   
                </documentation>
-               <appInfo>
+               <appinfo>
                   <meta.attribute kind="java" basedOn="org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStep:"/>
-               </appInfo>
+               </appinfo>
             </annotation>
          </attribute>
       </complexType>
    </element>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="since"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          org.eclipse.equinox.p2.artifact.repository ?.?.?
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="examples"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter extension point usage example here.]
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="apiInfo"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          The value of the class attribute must represent an 
-implementor of &lt;tt&gt;org.eclipse.equinox.p2.artifact.processing.IProcessingStep&lt;/tt&gt;
+implementor of &lt;tt&gt;org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStep&lt;/tt&gt;
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="implementation"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter information about supplied implementation of this extension point.]
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="copyright"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         Copyright (c) 2007 compeople AG and others.&lt;br&gt;
+         Copyright (c) 2007, 2008 compeople AG and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials are made 
 available under the terms of the Eclipse Public License v1.0 which 
 accompanies this distribution, and is available at &lt;a 
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
index ce3a4fc..27f1a01 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
@@ -15,14 +15,14 @@ import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
 import org.eclipse.osgi.util.NLS;
 
-public class ExtensionLocationMetadataRepositoryFactory implements IMetadataRepositoryFactory {
+public class ExtensionLocationMetadataRepositoryFactory extends MetadataRepositoryFactory {
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
 	 */
 	public IMetadataRepository create(URI location, String name, String type, Map properties) throws ProvisionException {
 		// TODO proper progress monitoring
@@ -51,7 +51,7 @@ public class ExtensionLocationMetadataRepositoryFactory implements IMetadataRepo
 	}
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
 		// TODO proper progress monitoring
@@ -72,7 +72,7 @@ public class ExtensionLocationMetadataRepositoryFactory implements IMetadataRepo
 	}
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#validate(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#validate(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IStatus validate(URI location, IProgressMonitor monitor) {
 		try {
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd b/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
index be43922..4833df6 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
@@ -1,16 +1,21 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <!-- Schema file written by PDE -->
-<schema targetNamespace="org.eclipse.equinox.p2.garbagecollector">
+<schema targetNamespace="org.eclipse.equinox.p2.garbagecollector" xmlns="http://www.w3.org/2001/XMLSchema">
 <annotation>
-      <appInfo>
+      <appinfo>
          <meta.schema plugin="org.eclipse.equinox.p2.garbagecollector" id="marksetproviders" name="Profile-based mark set providers"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter description of this extension point.]
       </documentation>
    </annotation>
 
    <element name="extension">
+      <annotation>
+         <appinfo>
+            <meta.element />
+         </appinfo>
+      </annotation>
       <complexType>
          <sequence>
             <element ref="run"/>
@@ -39,49 +44,61 @@
                <documentation>
                   
                </documentation>
-               <appInfo>
+               <appinfo>
                   <meta.attribute kind="java" basedOn="org.eclipse.equinox.p2.garbagecollector.IMarkSetProvider"/>
-               </appInfo>
+               </appinfo>
             </annotation>
          </attribute>
       </complexType>
    </element>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="since"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         [Enter the first release in which this extension point appears.]
+         org.eclipse.equinox.p2.garbagecollector 1.0.0
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="examples"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter extension point usage example here.]
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="apiInfo"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter API information here.]
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="implementation"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter information about supplied implementation of this extension point.]
       </documentation>
    </annotation>
 
+   <annotation>
+      <appinfo>
+         <meta.section type="copyright"/>
+      </appinfo>
+      <documentation>
+         Copyright (c) 2007, 2008 IBM Corporation and others.&lt;br&gt;
+All rights reserved. This program and the accompanying materials are made 
+available under the terms of the Eclipse Public License v1.0 which 
+accompanies this distribution, and is available at &lt;a 
+href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
+      </documentation>
+   </annotation>
 
 </schema>
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/schema/metadataRepositories.exsd b/bundles/org.eclipse.equinox.p2.metadata.repository/schema/metadataRepositories.exsd
index 0612390..f32458c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/schema/metadataRepositories.exsd
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/schema/metadataRepositories.exsd
@@ -1,16 +1,21 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <!-- Schema file written by PDE -->
-<schema targetNamespace="org.eclipse.equinox.p2.metadata.repository">
+<schema targetNamespace="org.eclipse.equinox.p2.metadata.repository" xmlns="http://www.w3.org/2001/XMLSchema">
 <annotation>
-      <appInfo>
+      <appinfo>
          <meta.schema plugin="org.eclipse.equinox.p2.metadata.repository" id="metadataRepositories" name="Metadata Repositories"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         This extension point is used to provide artifact repository implementations
+         This extension point is used to provide metadata repository implementations
       </documentation>
    </annotation>
 
    <element name="extension">
+      <annotation>
+         <appinfo>
+            <meta.element />
+         </appinfo>
+      </annotation>
       <complexType>
          <sequence>
             <element ref="factory"/>
@@ -35,9 +40,9 @@
                <documentation>
                   
                </documentation>
-               <appInfo>
+               <appinfo>
                   <meta.attribute translatable="true"/>
-               </appInfo>
+               </appinfo>
             </annotation>
          </attribute>
       </complexType>
@@ -51,9 +56,9 @@
                   the fully-qualified name of a class which implements 
 &lt;samp&gt;org.eclipse.equinox.p2.artifact.repository.IArtifactRepository&lt;/samp&gt;.
                </documentation>
-               <appInfo>
+               <appinfo>
                   <meta.attribute kind="java" basedOn="org.eclipse.equinox.p2.artifact.repository.IArtifactRepository"/>
-               </appInfo>
+               </appinfo>
             </annotation>
          </attribute>
       </complexType>
@@ -72,48 +77,48 @@
    </element>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="since"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         org.eclipse.equinox.p2.artifact.repository 0.1.0
+         org.eclipse.equinox.p2.metadata.repository 1.0.0
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="examples"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          [Enter extension point usage example here.]
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="apiInfo"/>
-      </appInfo>
+      </appinfo>
       <documentation>
          The value of the class attribute must represent an 
-implementor of &lt;tt&gt;org.eclipse.equinox.p2.artifact.repository.IArtifactRepository&lt;/tt&gt;
+implementor of &lt;tt&gt;org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory&lt;/tt&gt;
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="implementation"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         [Enter information about supplied implementation of this extension point.]
+         This bundle provides an artifact repository factory for the IMetadataRepositoryManager#TYPE_SIMPLE_REPOSITORY repository type.
       </documentation>
    </annotation>
 
    <annotation>
-      <appInfo>
+      <appinfo>
          <meta.section type="copyright"/>
-      </appInfo>
+      </appinfo>
       <documentation>
-         Copyright (c) 2007 IBM Corporation and others.&lt;br&gt;
+         Copyright (c) 2007, 2008 IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials are made 
 available under the terms of the Eclipse Public License v1.0 which 
 accompanies this distribution, and is available at &lt;a 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index 91c291a..8857f77 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -20,7 +20,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
-import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -56,7 +56,7 @@ public class MetadataRepositoryManager extends AbstractRepositoryManager impleme
 		IExtension extension = RegistryFactory.getRegistry().getExtension(Activator.REPO_PROVIDER_XPT, type);
 		if (extension == null)
 			fail(location, ProvisionException.REPOSITORY_UNKNOWN_TYPE);
-		IMetadataRepositoryFactory factory = (IMetadataRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
+		MetadataRepositoryFactory factory = (MetadataRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
 		if (factory == null)
 			fail(location, ProvisionException.REPOSITORY_FAILED_READ);
 		IMetadataRepository result = factory.create(location, name, type, properties);
@@ -68,7 +68,7 @@ public class MetadataRepositoryManager extends AbstractRepositoryManager impleme
 	}
 
 	protected IRepository factoryLoad(URI location, IExtension extension, SubMonitor monitor) throws ProvisionException {
-		IMetadataRepositoryFactory factory = (IMetadataRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
+		MetadataRepositoryFactory factory = (MetadataRepositoryFactory) createExecutableExtension(extension, EL_FACTORY);
 		if (factory == null)
 			return null;
 		return factory.load(location, monitor.newChild(10));
@@ -158,7 +158,7 @@ public class MetadataRepositoryManager extends AbstractRepositoryManager impleme
 			// Loop over the candidates and return the first one that successfully loads
 			loopMonitor.beginTask("", providers.length * 10); //$NON-NLS-1$
 			for (int j = 0; j < providers.length; j++) {
-				IMetadataRepositoryFactory factory = (IMetadataRepositoryFactory) createExecutableExtension(providers[j], EL_FACTORY);
+				MetadataRepositoryFactory factory = (MetadataRepositoryFactory) createExecutableExtension(providers[j], EL_FACTORY);
 				if (factory != null) {
 					status = factory.validate(location, loopMonitor.newChild(10));
 					if (status.isOK()) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/IMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/IMetadataRepositoryFactory.java
deleted file mode 100644
index 639cdad..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/IMetadataRepositoryFactory.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository;
-
-import java.net.URI;
-import java.util.Map;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-
-public interface IMetadataRepositoryFactory {
-
-	/**
-	 * Creates and returns a new empty metadata repository of the given type at 
-	 * the given location.
-	 * 
-	 * @param location the location for the new repository
-	 * @param name the name of the new repository
-	 * @param type the kind of repository to create
-	 * @param properties the properties to set on the repository
-	 * @return the newly created repository
-	 * @throws ProvisionException if the repository could not be created.  Reasons include:
-	 * <ul>
-	 * <li>The repository type is not supported by this factory.</li>
-	 * <li>There was an error writing to the given repository location.</li>
-	 * </ul>
-	 */
-	public IMetadataRepository create(URI location, String name, String type, Map properties) throws ProvisionException;
-
-	/**
-	 * Loads a repository corresponding to the given URL.
-	 * 
-	 * @param location The location of the repository to load
-	 * @param monitor a progress monitor, or <code>null</code> if progress
-	 *    reporting is not desired
-	 * @return The loaded metadata repository
-	 * @throws ProvisionException if the repository could not be created.  Reasons include:
-	 * <ul>
-	 * <li>There is no existing repository at that location.</li>
-	 * <li>The repository at that location could not be read.</li>
-	 * </ul>
-	 */
-	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException;
-
-	/**
-	 * Validates a candidate repository URL and returns a status indicating the
-	 * likelihood of a valid repository being located at the location.  Implementors 
-	 * should make all attempts to validate the URL that can be made without 
-	 * actually loading the repository.  The computation for this method must be 
-	 * significantly faster than loading the repository.  Early detectable error 
-	 * conditions, such as the non-existence of the location, or an inability to read 
-	 * the location, should be determined in this method.
-	 * 
-	 * @param location The location of the repository to validate
-	 * @param monitor a progress monitor, or <code>null</code> if progress
-	 *    reporting is not desired
-	 * @return A status indicating whether a valid repository is likely located at the
-	 * location.  A status with severity <code>OK</code> indicates that the repository is
-	 * likely to be loadable, or that as much validation as could be done was successful.
-	 * Reasons for a non-OK status include:
-	 * <ul>
-	 * <li>The specified location is not a valid repository location.</li>
-	 * <li>There is no existing repository at that location.</li>
-	 * <li>The repository at that location could not be read.</li>
-	 * </ul>
-	 */
-	public IStatus validate(URI location, IProgressMonitor monitor);
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java
new file mode 100644
index 0000000..062048a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/MetadataRepositoryFactory.java
@@ -0,0 +1,82 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository;
+
+import java.net.URI;
+import java.util.Map;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
+
+/**
+ * A metadata repository factory is responsible for creating and loading instances
+ * of a particular type of metadata repository. Factories are provided via the 
+ * <tt>org.eclipse.equinox.p2.metadata.repository.metadataRepositories</tt> extension point.
+ */
+public abstract class MetadataRepositoryFactory {
+
+	/**
+	 * Creates and returns a new empty metadata repository of the given type at 
+	 * the given location.
+	 * 
+	 * @param location the location for the new repository
+	 * @param name the name of the new repository
+	 * @param type the kind of repository to create
+	 * @param properties the properties to set on the repository
+	 * @return the newly created repository
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>The repository type is not supported by this factory.</li>
+	 * <li>There was an error writing to the given repository location.</li>
+	 * </ul>
+	 */
+	public abstract IMetadataRepository create(URI location, String name, String type, Map properties) throws ProvisionException;
+
+	/**
+	 * Loads a repository corresponding to the given URL.
+	 * 
+	 * @param location The location of the repository to load
+	 * @param monitor a progress monitor, or <code>null</code> if progress
+	 *    reporting is not desired
+	 * @return The loaded metadata repository
+	 * @throws ProvisionException if the repository could not be created.  Reasons include:
+	 * <ul>
+	 * <li>There is no existing repository at that location.</li>
+	 * <li>The repository at that location could not be read.</li>
+	 * </ul>
+	 */
+	public abstract IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException;
+
+	/**
+	 * Validates a candidate repository URL and returns a status indicating the
+	 * likelihood of a valid repository being located at the location.  Implementors 
+	 * should make all attempts to validate the URL that can be made without 
+	 * actually loading the repository.  The computation for this method must be 
+	 * significantly faster than loading the repository.  Early detectable error 
+	 * conditions, such as the non-existence of the location, or an inability to read 
+	 * the location, should be determined in this method.
+	 * 
+	 * @param location The location of the repository to validate
+	 * @param monitor a progress monitor, or <code>null</code> if progress
+	 *    reporting is not desired
+	 * @return A status indicating whether a valid repository is likely located at the
+	 * location.  A status with severity <code>OK</code> indicates that the repository is
+	 * likely to be loadable, or that as much validation as could be done was successful.
+	 * Reasons for a non-OK status include:
+	 * <ul>
+	 * <li>The specified location is not a valid repository location.</li>
+	 * <li>There is no existing repository at that location.</li>
+	 * <li>The repository at that location could not be read.</li>
+	 * </ul>
+	 */
+	public abstract IStatus validate(URI location, IProgressMonitor monitor);
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
index 6bbb6d1..2310bea 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.osgi.util.NLS;
 
-public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFactory {
+public class SimpleMetadataRepositoryFactory extends MetadataRepositoryFactory {
 
 	private static final String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
 	private static final String XML_EXTENSION = ".xml"; //$NON-NLS-1$
@@ -68,7 +68,7 @@ public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFacto
 
 	/*
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#validate(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#validate(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IStatus validate(URI location, IProgressMonitor monitor) {
 		try {
@@ -80,7 +80,7 @@ public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFacto
 	}
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IMetadataRepository load(URI location, IProgressMonitor monitor) throws ProvisionException {
 		return validateAndLoad(location, true, monitor);
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
index 1f15faf..277cc52 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
@@ -21,11 +21,11 @@ import org.eclipse.equinox.internal.p2.updatesite.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory;
+import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
 import org.eclipse.equinox.p2.publisher.*;
 
-public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryFactory {
+public class UpdateSiteMetadataRepositoryFactory extends MetadataRepositoryFactory {
 	private static final String PROP_SITE_CHECKSUM = "site.checksum"; //$NON-NLS-1$
 
 	public static URI getLocalRepositoryLocation(URI location) throws ProvisionException {
@@ -36,7 +36,7 @@ public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryF
 	}
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
+	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
 	 */
 	public IMetadataRepository create(URI location, String name, String type, Map properties) {
 		return null;
commit 0af05c208447c7784425a4603ab3537c849badc1
Author: John Arthorne <johna>
Date:   Fri Oct 17 19:56:26 2008 +0000

    Bug 250883 Extension point cleanup

1	1	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
0	40	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/IMarkSetProvider.java
40	0	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/MarkSetProvider.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/plugin.xml
137	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseMarkSetProvider.java
0	137	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
index f0dc2c0..582a0a5 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/GarbageCollector.java
@@ -117,7 +117,7 @@ public class GarbageCollector {
 		}
 
 		public void run() throws Exception {
-			IMarkSetProvider aMarkSetProvider = (IMarkSetProvider) cfg.createExecutableExtension(ATTRIBUTE_CLASS);
+			MarkSetProvider aMarkSetProvider = (MarkSetProvider) cfg.createExecutableExtension(ATTRIBUTE_CLASS);
 			if (aMarkSetProvider == null) {
 				aProfileMarkSets = null;
 				return;
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/IMarkSetProvider.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/IMarkSetProvider.java
deleted file mode 100644
index 3bf2004..0000000
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/IMarkSetProvider.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.garbagecollector;
-
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-
-/** 
- * Any class which declares itself as an extension to the org.eclipse.equinox.internal.p2.garbagecollector.marksetproviders
- * extension point must implement this interface.  Given a Profile, implementors will need to provide an array of
- * MarkSet objects, each of which should contain an IArtifactRepository and the IArtifactKeys used by the given
- * Profile.
- */
-public interface IMarkSetProvider {
-
-	/**
-	 * Returns a MarkSet for each bundle pool used by a Profile p.  The MarkSet will contain
-	 * all of the IArtifactKeys found in p, as well as the IArtifactRepository over which the
-	 * root set of keys is being created.
-	 * @param profile A profile whose ArtifactRepositories require a garbage collection
-	 * @return An array of MarkSet object(s) containing p's IArtifactRepository and its root set of IArtifactKeys
-	 */
-	public MarkSet[] getMarkSets(IProfile profile);
-
-	/**
-	 * Returns the IArtifactRepository for which this IMarkSetProvider provides a MarkSet.
-	 * @param p The Profile whose IArtifactRepository is required
-	 * @return The IArtifactRepository for which this IMarkSetProvider provides a MarkSet.
-	 */
-	public IArtifactRepository getRepository(IProfile p);
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/MarkSetProvider.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/MarkSetProvider.java
new file mode 100644
index 0000000..edb21b3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/MarkSetProvider.java
@@ -0,0 +1,40 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.garbagecollector;
+
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+
+/** 
+ * Any class which declares itself as an extension to the <tt>org.eclipse.equinox.p2.garbagecollector.marksetproviders</tt>
+ * extension point must extend this base class.  Given a Profile, implementors are required
+ * to provide an array of MarkSet objects, each of which must contain an IArtifactRepository 
+ * and the IArtifactKeys used by the given Profile.
+ */
+public abstract class MarkSetProvider {
+
+	/**
+	 * Returns a MarkSet for each bundle pool used by a Profile p.  The MarkSet will contain
+	 * all of the IArtifactKeys found in p, as well as the IArtifactRepository over which the
+	 * root set of keys is being created.
+	 * @param profile A profile whose ArtifactRepositories require a garbage collection
+	 * @return An array of MarkSet object(s) containing p's IArtifactRepository and its root set of IArtifactKeys
+	 */
+	public abstract MarkSet[] getMarkSets(IProfile profile);
+
+	/**
+	 * Returns the IArtifactRepository for which this MarkSetProvider provides a MarkSet.
+	 * @param p The Profile whose IArtifactRepository is required
+	 * @return The IArtifactRepository for which this MarkSetProvider provides a MarkSet.
+	 */
+	public abstract IArtifactRepository getRepository(IProfile p);
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/plugin.xml b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/plugin.xml
index cd5d788..48c499b 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/plugin.xml
@@ -209,7 +209,7 @@
 			point="org.eclipse.equinox.p2.garbagecollector.marksetproviders"
 			id="EclipseTouchpoint">
 			<run 
-				class="org.eclipse.equinox.internal.p2.touchpoint.eclipse.MarkSetProvider"/>
+				class="org.eclipse.equinox.internal.p2.touchpoint.eclipse.EclipseMarkSetProvider"/>
 	</extension>
  <extension
        point="org.eclipse.equinox.p2.engine.actions">
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseMarkSetProvider.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseMarkSetProvider.java
new file mode 100644
index 0000000..5ef149a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseMarkSetProvider.java
@@ -0,0 +1,137 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.touchpoint.eclipse;
+
+import java.io.File;
+import java.util.*;
+import org.eclipse.equinox.internal.p2.garbagecollector.MarkSet;
+import org.eclipse.equinox.internal.p2.garbagecollector.MarkSetProvider;
+import org.eclipse.equinox.internal.p2.update.*;
+import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.osgi.framework.ServiceReference;
+import org.osgi.framework.Version;
+
+/**
+ * MarkSetProvider implementation for the Eclipse touchpoint.
+ */
+public class EclipseMarkSetProvider extends MarkSetProvider {
+	private static final String ARTIFACT_CLASSIFIER_OSGI_BUNDLE = "osgi.bundle"; //$NON-NLS-1$
+	private static final String ARTIFACT_CLASSIFIER_FEATURE = "org.eclipse.update.feature"; //$NON-NLS-1$
+
+	private Collection artifactKeyList = null;
+
+	public MarkSet[] getMarkSets(IProfile inProfile) {
+		artifactKeyList = new HashSet();
+		IArtifactRepository repositoryToGC = Util.getBundlePoolRepository(inProfile);
+		if (repositoryToGC == null)
+			return new MarkSet[0];
+		addArtifactKeys(inProfile);
+		IProfile currentProfile = getCurrentProfile();
+		if (currentProfile != null && inProfile.getProfileId().equals(currentProfile.getProfileId())) {
+			addRunningBundles(repositoryToGC);
+			addRunningFeatures(inProfile, repositoryToGC);
+		}
+		return new MarkSet[] {new MarkSet((IArtifactKey[]) artifactKeyList.toArray(new IArtifactKey[0]), repositoryToGC)};
+	}
+
+	private void addRunningFeatures(IProfile profile, IArtifactRepository repositoryToGC) {
+		try {
+			List allFeatures = getAllFeatures(Configuration.load(new File(Util.getConfigurationFolder(profile), "org.eclipse.update/platform.xml"), null)); //$NON-NLS-1$
+			for (Iterator iterator = allFeatures.iterator(); iterator.hasNext();) {
+				Feature f = (Feature) iterator.next();
+				IArtifactKey match = searchArtifact(f.getId(), new Version(f.getVersion()), ARTIFACT_CLASSIFIER_FEATURE, repositoryToGC);
+				if (match != null)
+					artifactKeyList.add(match);
+			}
+		} catch (ProvisionException e) {
+			//Ignore the exception
+		}
+	}
+
+	private List getAllFeatures(Configuration cfg) {
+		if (cfg == null)
+			return Collections.EMPTY_LIST;
+		List sites = cfg.getSites();
+		ArrayList result = new ArrayList();
+		for (Iterator iterator = sites.iterator(); iterator.hasNext();) {
+			Site object = (Site) iterator.next();
+			Feature[] features = object.getFeatures();
+			for (int i = 0; i < features.length; i++) {
+				result.add(features[i]);
+			}
+		}
+		return result;
+	}
+
+	private IProfile getCurrentProfile() {
+		ServiceReference sr = Activator.getContext().getServiceReference(IProfileRegistry.class.getName());
+		if (sr == null)
+			return null;
+		IProfileRegistry pr = (IProfileRegistry) Activator.getContext().getService(sr);
+		if (pr == null)
+			return null;
+		Activator.getContext().ungetService(sr);
+		return pr.getProfile(IProfileRegistry.SELF);
+	}
+
+	private void addArtifactKeys(IProfile aProfile) {
+		Iterator installableUnits = aProfile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		while (installableUnits.hasNext()) {
+			IArtifactKey[] keys = ((IInstallableUnit) installableUnits.next()).getArtifacts();
+			if (keys == null)
+				continue;
+			for (int i = 0; i < keys.length; i++) {
+				artifactKeyList.add(keys[i]);
+			}
+		}
+	}
+
+	public IArtifactRepository getRepository(IProfile aProfile) {
+		return Util.getBundlePoolRepository(aProfile);
+	}
+
+	private void addRunningBundles(IArtifactRepository repo) {
+		artifactKeyList.addAll(findCorrespondinArtifacts(new WhatIsRunning().getBundlesBeingRun(), repo));
+	}
+
+	private IArtifactKey searchArtifact(String searchedId, Version searchedVersion, String classifier, IArtifactRepository repo) {
+		//This is somewhat cheating since normally we should get the artifact key from the IUs that were representing the running system (e.g. we could get that info from the rollback repo)
+		IArtifactKey[] keys = repo.getArtifactKeys();
+		for (int i = 0; i < keys.length; i++) {
+			if (keys[i].getClassifier().equals(classifier)) {
+				String id = keys[i].getId();
+				Version v = keys[i].getVersion();
+				if (id != null && id.equals(searchedId) && v != null && v.equals(searchedVersion))
+					return keys[i];
+			}
+		}
+		return null;
+	}
+
+	//Find for each bundle info a corresponding artifact in repo 
+	private ArrayList findCorrespondinArtifacts(BundleInfo[] bis, IArtifactRepository repo) {
+		ArrayList toRetain = new ArrayList();
+		for (int i = 0; i < bis.length; i++) {
+			IArtifactKey match = searchArtifact(bis[i].getSymbolicName(), new Version(bis[i].getVersion()), ARTIFACT_CLASSIFIER_OSGI_BUNDLE, repo);
+			if (match != null)
+				toRetain.add(match);
+		}
+		return toRetain;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
deleted file mode 100644
index bb2087b..0000000
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.touchpoint.eclipse;
-
-import java.io.File;
-import java.util.*;
-import org.eclipse.equinox.internal.p2.garbagecollector.IMarkSetProvider;
-import org.eclipse.equinox.internal.p2.garbagecollector.MarkSet;
-import org.eclipse.equinox.internal.p2.update.*;
-import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.osgi.framework.ServiceReference;
-import org.osgi.framework.Version;
-
-/**
- * IMarkSetProvider implementation for the EclipseTouchPoint.
- */
-public class MarkSetProvider implements IMarkSetProvider {
-	private static final String ARTIFACT_CLASSIFIER_OSGI_BUNDLE = "osgi.bundle"; //$NON-NLS-1$
-	private static final String ARTIFACT_CLASSIFIER_FEATURE = "org.eclipse.update.feature"; //$NON-NLS-1$
-
-	private Collection artifactKeyList = null;
-
-	public MarkSet[] getMarkSets(IProfile inProfile) {
-		artifactKeyList = new HashSet();
-		IArtifactRepository repositoryToGC = Util.getBundlePoolRepository(inProfile);
-		if (repositoryToGC == null)
-			return new MarkSet[0];
-		addArtifactKeys(inProfile);
-		IProfile currentProfile = getCurrentProfile();
-		if (currentProfile != null && inProfile.getProfileId().equals(currentProfile.getProfileId())) {
-			addRunningBundles(repositoryToGC);
-			addRunningFeatures(inProfile, repositoryToGC);
-		}
-		return new MarkSet[] {new MarkSet((IArtifactKey[]) artifactKeyList.toArray(new IArtifactKey[0]), repositoryToGC)};
-	}
-
-	private void addRunningFeatures(IProfile profile, IArtifactRepository repositoryToGC) {
-		try {
-			List allFeatures = getAllFeatures(Configuration.load(new File(Util.getConfigurationFolder(profile), "org.eclipse.update/platform.xml"), null)); //$NON-NLS-1$
-			for (Iterator iterator = allFeatures.iterator(); iterator.hasNext();) {
-				Feature f = (Feature) iterator.next();
-				IArtifactKey match = searchArtifact(f.getId(), new Version(f.getVersion()), ARTIFACT_CLASSIFIER_FEATURE, repositoryToGC);
-				if (match != null)
-					artifactKeyList.add(match);
-			}
-		} catch (ProvisionException e) {
-			//Ignore the exception
-		}
-	}
-
-	private List getAllFeatures(Configuration cfg) {
-		if (cfg == null)
-			return Collections.EMPTY_LIST;
-		List sites = cfg.getSites();
-		ArrayList result = new ArrayList();
-		for (Iterator iterator = sites.iterator(); iterator.hasNext();) {
-			Site object = (Site) iterator.next();
-			Feature[] features = object.getFeatures();
-			for (int i = 0; i < features.length; i++) {
-				result.add(features[i]);
-			}
-		}
-		return result;
-	}
-
-	private IProfile getCurrentProfile() {
-		ServiceReference sr = Activator.getContext().getServiceReference(IProfileRegistry.class.getName());
-		if (sr == null)
-			return null;
-		IProfileRegistry pr = (IProfileRegistry) Activator.getContext().getService(sr);
-		if (pr == null)
-			return null;
-		Activator.getContext().ungetService(sr);
-		return pr.getProfile(IProfileRegistry.SELF);
-	}
-
-	private void addArtifactKeys(IProfile aProfile) {
-		Iterator installableUnits = aProfile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
-		while (installableUnits.hasNext()) {
-			IArtifactKey[] keys = ((IInstallableUnit) installableUnits.next()).getArtifacts();
-			if (keys == null)
-				continue;
-			for (int i = 0; i < keys.length; i++) {
-				artifactKeyList.add(keys[i]);
-			}
-		}
-	}
-
-	public IArtifactRepository getRepository(IProfile aProfile) {
-		return Util.getBundlePoolRepository(aProfile);
-	}
-
-	private void addRunningBundles(IArtifactRepository repo) {
-		artifactKeyList.addAll(findCorrespondinArtifacts(new WhatIsRunning().getBundlesBeingRun(), repo));
-	}
-
-	private IArtifactKey searchArtifact(String searchedId, Version searchedVersion, String classifier, IArtifactRepository repo) {
-		//This is somewhat cheating since normally we should get the artifact key from the IUs that were representing the running system (e.g. we could get that info from the rollback repo)
-		IArtifactKey[] keys = repo.getArtifactKeys();
-		for (int i = 0; i < keys.length; i++) {
-			if (keys[i].getClassifier().equals(classifier)) {
-				String id = keys[i].getId();
-				Version v = keys[i].getVersion();
-				if (id != null && id.equals(searchedId) && v != null && v.equals(searchedVersion))
-					return keys[i];
-			}
-		}
-		return null;
-	}
-
-	//Find for each bundle info a corresponding artifact in repo 
-	private ArrayList findCorrespondinArtifacts(BundleInfo[] bis, IArtifactRepository repo) {
-		ArrayList toRetain = new ArrayList();
-		for (int i = 0; i < bis.length; i++) {
-			IArtifactKey match = searchArtifact(bis[i].getSymbolicName(), new Version(bis[i].getVersion()), ARTIFACT_CLASSIFIER_OSGI_BUNDLE, repo);
-			if (match != null)
-				toRetain.add(match);
-		}
-		return toRetain;
-	}
-}

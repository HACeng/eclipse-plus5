commit 6b569ce031be20d0deb6db635c3a25fc1fbeb5ad
Author: Susan Franklin <sfranklin>
Date:   Tue Jan 20 19:45:17 2009 +0000

    Bug 260752 - [ui] IUProfilePropertyByIdQuery doesn't really cache the profile

42	9	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
45	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
6	31	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
index 9fbf0a3..4bdba9b 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
@@ -6,6 +6,7 @@
 *
 * Contributors:
 *   EclipseSource - initial API and implementation
+*   IBM Corporation - ongoing development
 ******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.query;
 
@@ -14,14 +15,14 @@ import java.util.Iterator;
 /**
  * This class represents the superclass of most of p2's queries.  Every element
  * in the query can be evaluated by calling isMatch on it. If {@link #isMatch(Object)} returns true, 
- * then the element WILL be included in the result set, if {@link #isMatch(Object)} returns false, then 
- * the element WILL NOT be included in the result set. <P>
- *
+ * then the element WILL be included in the query result.  If {@link #isMatch(Object)} returns false, then 
+ * the element WILL NOT be included in the query result.
+ * <p>
  * This class may be subclassed by clients. Subclasses should specify the type
  * of object they support querying on. Subclasses are also encouraged to clearly
  * specify their match algorithm, and expose the parameters involved in the match
  * computation, to allow {@link IQueryable} implementations to optimize their
- * execution of the query. <P>
+ * execution of the query. 
  */
 public abstract class MatchQuery implements IMatchQuery {
 
@@ -39,12 +40,44 @@ public abstract class MatchQuery implements IMatchQuery {
 	 * that match the criteria of this query to the given result.
 	 */
 	public final Collector perform(Iterator iterator, Collector result) {
-		while (iterator.hasNext()) {
-			Object candidate = iterator.next();
-			if (isMatch(candidate))
-				if (!result.accept(candidate))
-					break;
+		prepareToPerform();
+		try {
+			while (iterator.hasNext()) {
+				Object candidate = iterator.next();
+				if (isMatch(candidate))
+					if (!result.accept(candidate))
+						break;
+			}
+		} finally {
+			performComplete();
 		}
 		return result;
 	}
+
+	/**
+	 * Execute any pre-processing that must be done before this query is performed against
+	 * a particular iterator.  This method may be used by subclasses to do any calculations,
+	 * caching, or other preparation for the query.
+	 * <p>
+	 * This method is internal to the framework.  Subclasses may override this method, but
+	 * should not call this method.
+	 */
+	protected void prepareToPerform() {
+		// nothing to do by default
+	}
+
+	/**
+	 * Execute any post-processing that must be done after this query has been performed against
+	 * a particular iterator.  This method may be used by subclasses to clear caches or any other
+	 * cleanup that should occur after a query.  
+	 * <p>
+	 * This method will be called even if the query does not complete successfully.
+	 * <p>
+	 * This method is internal to the framework.  Subclasses may override this method, but
+	 * should not call this method.
+	 */
+
+	protected void performComplete() {
+		// nothing to do by default
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
index b760d0e..9f1f003 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
@@ -25,6 +25,25 @@ public class QueryTest extends TestCase {
 		}
 	}
 
+	static class PerformHookQuery extends AnyStringQuery {
+		boolean prepared = false;
+		boolean complete = false;
+
+		protected void prepareToPerform() {
+			prepared = true;
+		}
+
+		protected void performComplete() {
+			complete = true;
+		}
+
+		public boolean isMatch(Object candidate) {
+			if (!(candidate instanceof String))
+				throw new RuntimeException("Exception intentionally thrown by test");
+			return candidate instanceof String;
+		}
+	}
+
 	/**
 	 * A collector that only accepts the first element and then short-circuits.
 	 */
@@ -64,6 +83,32 @@ public class QueryTest extends TestCase {
 		assertTrue("1.1", result.contains("green"));
 	}
 
+	public void testPerformHooks() {
+		List items = Arrays.asList("red", "green", "blue");
+		PerformHookQuery query = new PerformHookQuery();
+		Collector collector = new Collector();
+		assertFalse("1.0", query.complete);
+		assertFalse("1.1", query.prepared);
+		query.perform(items.iterator(), collector);
+		assertTrue("1.2", query.complete);
+		assertTrue("1.3", query.prepared);
+	}
+
+	public void testPerformHooksOnQueryFail() {
+		List items = Arrays.asList("red", new Object());
+		PerformHookQuery query = new PerformHookQuery();
+		Collector collector = new Collector();
+		assertFalse("1.0", query.complete);
+		assertFalse("1.1", query.prepared);
+		try {
+			query.perform(items.iterator(), collector);
+		} catch (RuntimeException e) {
+			// expected
+		}
+		assertTrue("1.2", query.complete);
+		assertTrue("1.3", query.prepared);
+	}
+
 	/**
 	 * Tests a perform where the collector decides to short-circuit the query.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
index cc84362..d7103ea 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
@@ -19,11 +19,11 @@ import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.query.ContextQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
+import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.IStartup;
 import org.eclipse.ui.statushandlers.StatusManager;
 
@@ -56,17 +56,14 @@ public class AutomaticUpdateScheduler implements IStartup {
 	 * this query to the automatic update checker and it will be referenced during
 	 * the life of the platform.  
 	 */
-	private class IUProfilePropertyByIdQuery extends ContextQuery {
+	private class IUProfilePropertyByIdQuery extends IUPropertyQuery {
 		private IProfile cachedProfile;
-		private String propertyName;
-		private String propertyValue;
 
 		/**
 		 * Creates a new query on the given property name and value.
 		 */
 		public IUProfilePropertyByIdQuery(String propertyName, String propertyValue) {
-			this.propertyName = propertyName;
-			this.propertyValue = propertyValue;
+			super(propertyName, propertyValue);
 		}
 
 		protected String getProperty(IInstallableUnit iu, String name) {
@@ -80,36 +77,14 @@ public class AutomaticUpdateScheduler implements IStartup {
 			if (cachedProfile == null) {
 				IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(AutomaticUpdatePlugin.getContext(), IProfileRegistry.class.getName());
 				if (profileRegistry != null)
-					return profileRegistry.getProfile(profileId);
+					cachedProfile = profileRegistry.getProfile(profileId);
 			}
 			return cachedProfile;
 		}
 
-		/* (non-Javadoc)
-		 * @see org.eclipse.equinox.p2.query2.Query#isMatch(java.lang.Object)
-		 */
-		public boolean isMatch(Object object) {
-			if (!(object instanceof IInstallableUnit))
-				return false;
-			IInstallableUnit candidate = (IInstallableUnit) object;
-			if (propertyName == null)
-				return true;
-			String value = getProperty(candidate, propertyName);
-			if (value != null
-					&& (value.equals(propertyValue) || propertyValue == null))
-				return true;
-			return false;
-		}
-		
-		public Collector perform(Iterator iterator, Collector result) {
-			while (iterator.hasNext()) {
-				Object candidate = iterator.next();
-				if (isMatch(candidate))
-					if (!result.accept(candidate))
-						break;
-			}
+		// overridden to release profile cache
+		protected void performComplete() {
 			cachedProfile = null;
-			return result;
 		}
 	}
 
commit 04f284f4188ef00200deaf532a5f46d3e85d1704
Author: Susan Franklin <sfranklin>
Date:   Sat Jan 24 20:35:16 2009 +0000

    Bug 260752 - [query] pre and post perform hooks for match query iteration

22	5	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
28	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/IMatchQuery.java
11	4	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
6	14	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
137	12	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
31	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
1	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableProfileRegistry.java
1	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
4	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
index 167a9e7..d4e4fa7 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
@@ -115,14 +115,31 @@ public abstract class CompoundQuery implements Query {
 		 * that match the criteria of this query to the given result.
 		 */
 		public final Collector perform(Iterator iterator, Collector result) {
-			while (iterator.hasNext()) {
-				Object candidate = iterator.next();
-				if (isMatch(candidate))
-					if (!result.accept(candidate))
-						break;
+			prePerform();
+			try {
+				while (iterator.hasNext()) {
+					Object candidate = iterator.next();
+					if (isMatch(candidate))
+						if (!result.accept(candidate))
+							break;
+				}
+			} finally {
+				postPerform();
 			}
 			return result;
 		}
+
+		public void prePerform() {
+			for (int i = 0; i < queries.length; i++) {
+				((IMatchQuery) queries[i]).prePerform();
+			}
+		}
+
+		public void postPerform() {
+			for (int i = 0; i < queries.length; i++) {
+				((IMatchQuery) queries[i]).postPerform();
+			}
+		}
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/IMatchQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/IMatchQuery.java
index 3af11de..7c36c3d 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/IMatchQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/IMatchQuery.java
@@ -25,6 +25,34 @@ public interface IMatchQuery extends Query {
 	 * @param candidate The object to perform the query against
 	 * @return <code>true</code> if the unit satisfies the parameters
 	 * of this query, and <code>false</code> otherwise
+	 * 
+	 * @noreference This method is not intended to be referenced by clients.
 	 */
 	public boolean isMatch(Object candidate);
+
+	/**
+	 * Execute any pre-processing that must be done before this query is performed against
+	 * a particular iterator.  This method may be used by subclasses to do any calculations,
+	 * caching, or other preparation for the query.
+	 * <p>
+	 * This method is internal to the framework.  Subclasses may override this method, but
+	 * should not call this method.
+	 * 
+	 * @noreference This method is not intended to be referenced by clients.
+	 */
+	public void prePerform();
+
+	/**
+	 * Execute any post-processing that must be done after this query has been performed against
+	 * a particular iterator.  This method may be used by subclasses to clear caches or any other
+	 * cleanup that should occur after a query.  
+	 * <p>
+	 * This method will be called even if the query does not complete successfully.
+	 * <p>
+	 * This method is internal to the framework.  Subclasses may override this method, but
+	 * should not call this method.
+	 * 
+	 * @noreference This method is not intended to be referenced by clients.
+	 */
+	public void postPerform();
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
index 4957b70..a771303 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
@@ -32,6 +32,9 @@ public abstract class MatchQuery implements IMatchQuery {
 	 * @param candidate The object to perform the query against
 	 * @return <code>true</code> if the unit satisfies the parameters
 	 * of this query, and <code>false</code> otherwise
+	 * 
+	 * @noreference This method is not intended to be referenced by clients.
+	 * Clients should call {@link #perform(Iterator, Collector)}
 	 */
 	public abstract boolean isMatch(Object candidate);
 
@@ -40,7 +43,7 @@ public abstract class MatchQuery implements IMatchQuery {
 	 * that match the criteria of this query to the given result.
 	 */
 	public final Collector perform(Iterator iterator, Collector result) {
-		prepareToPerform();
+		prePerform();
 		try {
 			while (iterator.hasNext()) {
 				Object candidate = iterator.next();
@@ -49,7 +52,7 @@ public abstract class MatchQuery implements IMatchQuery {
 						break;
 			}
 		} finally {
-			performComplete();
+			postPerform();
 		}
 		return result;
 	}
@@ -61,8 +64,10 @@ public abstract class MatchQuery implements IMatchQuery {
 	 * <p>
 	 * This method is internal to the framework.  Subclasses may override this method, but
 	 * should not call this method.
+	 * 
+	 * @noreference This method is not intended to be referenced by clients.
 	 */
-	protected void prepareToPerform() {
+	public void prePerform() {
 		// nothing to do by default
 	}
 
@@ -75,8 +80,10 @@ public abstract class MatchQuery implements IMatchQuery {
 	 * <p>
 	 * This method is internal to the framework.  Subclasses may override this method, but
 	 * should not call this method.
+	 * 
+	 * @noreference This method is not intended to be referenced by clients.
 	 */
-	protected void performComplete() {
+	public void postPerform() {
 		// nothing to do by default
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
index 2d925dd..3afe581 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
@@ -25,7 +25,8 @@ import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.query.*;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.RepositoryReference;
 
@@ -153,19 +154,10 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 
 	public synchronized boolean removeInstallableUnits(Query query, IProgressMonitor monitor) {
 		boolean changed = false;
-		if (query instanceof IMatchQuery) {
-			IMatchQuery matchQuery = (IMatchQuery) query;
-			for (Iterator it = units.iterator(); it.hasNext();)
-				if (matchQuery.isMatch(it.next())) {
-					it.remove();
-					changed = true;
-				}
-		} else {
-			Collector results = query.perform(units.iterator(), new Collector());
-			if (results.size() > 0) {
-				changed = true;
-				units.removeAll(results.toCollection());
-			}
+		Collector results = query.perform(units.iterator(), new Collector());
+		if (results.size() > 0) {
+			changed = true;
+			units.removeAll(results.toCollection());
 		}
 		if (changed)
 			save();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
index 9f1f003..870c17c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.provisional.p2.query.*;
  * Tests for the {@link org.eclipse.equinox.internal.provisional.p2.query.Query} class.
  */
 public class QueryTest extends TestCase {
+
 	static class AnyStringQuery extends MatchQuery {
 		@Override
 		public boolean isMatch(Object candidate) {
@@ -26,18 +27,35 @@ public class QueryTest extends TestCase {
 	}
 
 	static class PerformHookQuery extends AnyStringQuery {
-		boolean prepared = false;
-		boolean complete = false;
+		private boolean prepared = false;
+		private boolean complete = false;
+
+		public boolean areHooksExecutedProperly() {
+			// Either they have both been called, or neither has been called
+			return (prepared & complete) || (!prepared & !complete);
+		}
+
+		public boolean isComplete() {
+			return this.complete;
+		}
 
-		protected void prepareToPerform() {
+		public boolean isPrepared() {
+			return this.prepared;
+		}
+
+		public void prePerform() {
 			prepared = true;
 		}
 
-		protected void performComplete() {
+		public void postPerform() {
+			if (!(prepared)) // Note:  is match might not be called if it can be determined it's not needed
+				fail("prePerform not called");
 			complete = true;
 		}
 
 		public boolean isMatch(Object candidate) {
+			if (!prepared)
+				fail("prePerform not called");
 			if (!(candidate instanceof String))
 				throw new RuntimeException("Exception intentionally thrown by test");
 			return candidate instanceof String;
@@ -87,26 +105,133 @@ public class QueryTest extends TestCase {
 		List items = Arrays.asList("red", "green", "blue");
 		PerformHookQuery query = new PerformHookQuery();
 		Collector collector = new Collector();
-		assertFalse("1.0", query.complete);
-		assertFalse("1.1", query.prepared);
+		assertFalse("1.0", query.isComplete());
+		assertFalse("1.1", query.isPrepared());
 		query.perform(items.iterator(), collector);
-		assertTrue("1.2", query.complete);
-		assertTrue("1.3", query.prepared);
+		assertTrue("1.2", query.isComplete());
+		assertTrue("1.3", query.isPrepared());
+		assertTrue("1.4", query.areHooksExecutedProperly());
 	}
 
 	public void testPerformHooksOnQueryFail() {
 		List items = Arrays.asList("red", new Object());
 		PerformHookQuery query = new PerformHookQuery();
 		Collector collector = new Collector();
-		assertFalse("1.0", query.complete);
-		assertFalse("1.1", query.prepared);
+		assertFalse("1.0", query.isComplete());
+		assertFalse("1.1", query.isPrepared());
 		try {
 			query.perform(items.iterator(), collector);
 		} catch (RuntimeException e) {
 			// expected
 		}
-		assertTrue("1.2", query.complete);
-		assertTrue("1.3", query.prepared);
+		assertTrue("1.2", query.isComplete());
+		assertTrue("1.3", query.isPrepared());
+		assertTrue("1.4", query.areHooksExecutedProperly());
+	}
+
+	public void testPreAndPostCompoundANDQuery() {
+		List items = Arrays.asList("red", "green", "blue");
+		Collector collector = new Collector();
+		PerformHookQuery query1 = new PerformHookQuery();
+		PerformHookQuery query2 = new PerformHookQuery();
+		CompoundQuery cQuery = CompoundQuery.createCompoundQuery(new Query[] {query1, query2}, true);
+		assertFalse("1.0", query1.isComplete());
+		assertFalse("1.1", query1.isPrepared());
+		assertFalse("1.2", query2.isComplete());
+		assertFalse("1.3", query2.isPrepared());
+		cQuery.perform(items.iterator(), collector);
+		assertTrue("1.4", query1.isComplete());
+		assertTrue("1.5", query1.isPrepared());
+		assertTrue("1.6", query2.isComplete());
+		assertTrue("1.7", query2.isPrepared());
+		assertTrue("1.8", query1.areHooksExecutedProperly());
+		assertTrue("1.9", query2.areHooksExecutedProperly());
+	}
+
+	public void testPreAndPostCompoundOrQuery() {
+		List items = Arrays.asList("red", "green", "blue");
+		Collector collector = new Collector();
+		PerformHookQuery query1 = new PerformHookQuery();
+		PerformHookQuery query2 = new PerformHookQuery();
+		CompoundQuery cQuery = CompoundQuery.createCompoundQuery(new Query[] {query1, query2}, false);
+		assertFalse("1.0", query1.isComplete());
+		assertFalse("1.1", query1.isPrepared());
+		assertFalse("1.2", query2.isComplete());
+		assertFalse("1.3", query2.isPrepared());
+		cQuery.perform(items.iterator(), collector);
+		assertTrue("1.4", query1.isComplete());
+		assertTrue("1.5", query1.isPrepared());
+		assertTrue("1.6", query2.isComplete());
+		assertTrue("1.7", query2.isPrepared());
+		assertTrue("1.8", query1.areHooksExecutedProperly());
+		assertTrue("1.9", query2.areHooksExecutedProperly());
+	}
+
+	public void testPreAndPostCompositeQuery() {
+		List items = Arrays.asList("red", "green", "blue");
+		Collector collector = new Collector();
+		PerformHookQuery query1 = new PerformHookQuery();
+		PerformHookQuery query2 = new PerformHookQuery();
+		CompositeQuery cQuery = new CompositeQuery(new Query[] {query1, query2});
+		assertFalse("1.0", query1.isComplete());
+		assertFalse("1.1", query1.isPrepared());
+		assertFalse("1.2", query2.isComplete());
+		assertFalse("1.3", query2.isPrepared());
+		cQuery.perform(items.iterator(), collector);
+		assertTrue("1.4", query1.isComplete());
+		assertTrue("1.5", query1.isPrepared());
+		assertTrue("1.6", query2.isComplete());
+		assertTrue("1.7", query2.isPrepared());
+		assertTrue("1.8", query1.areHooksExecutedProperly());
+		assertTrue("1.9", query2.areHooksExecutedProperly());
+	}
+
+	public void testPreAndPostCompoundQueryFail() {
+		List items = Arrays.asList("red", new Object());
+		Collector collector = new Collector();
+		PerformHookQuery query1 = new PerformHookQuery();
+		PerformHookQuery query2 = new PerformHookQuery();
+		CompoundQuery cQuery = CompoundQuery.createCompoundQuery(new Query[] {query1, query2}, true);
+		assertFalse("1.0", query1.isComplete());
+		assertFalse("1.1", query1.isPrepared());
+		assertFalse("1.2", query2.isComplete());
+		assertFalse("1.3", query2.isPrepared());
+		try {
+			cQuery.perform(items.iterator(), collector);
+			fail("This query is expected to fail");
+		} catch (RuntimeException e) {
+			// expected
+		}
+		assertTrue("1.4", query1.isComplete());
+		assertTrue("1.5", query1.isPrepared());
+		assertTrue("1.6", query2.isComplete());
+		assertTrue("1.7", query2.isPrepared());
+		assertTrue("1.8", query1.areHooksExecutedProperly());
+		assertTrue("1.9", query2.areHooksExecutedProperly());
+	}
+
+	public void testPreAndPostCompositeQueryFail() {
+		List items = Arrays.asList("red", new Object());
+		Collector collector = new Collector();
+		PerformHookQuery query1 = new PerformHookQuery();
+		PerformHookQuery query2 = new PerformHookQuery();
+		CompositeQuery cQuery = new CompositeQuery(new Query[] {query1, query2});
+		assertFalse("1.0", query1.isComplete());
+		assertFalse("1.1", query1.isPrepared());
+		assertFalse("1.2", query2.isComplete());
+		assertFalse("1.3", query2.isPrepared());
+		try {
+			cQuery.perform(items.iterator(), collector);
+			fail("This query is expected to fail");
+		} catch (RuntimeException e) {
+			// expected
+		}
+		assertTrue("1.4", query1.isComplete());
+		assertTrue("1.5", query1.isPrepared());
+		assertFalse("1.6", query2.isComplete()); // This should fail, the second query was never executed
+		assertFalse("1.7", query2.isPrepared()); // This should fail, the second query was never executed
+		assertTrue("1.8", query1.areHooksExecutedProperly());
+		assertTrue("1.9", query2.areHooksExecutedProperly());
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
index 9a7630e..2df7123 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
@@ -24,8 +24,10 @@ import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEve
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 /**
@@ -118,6 +120,35 @@ public class LocalMetadataRepositoryTest extends AbstractProvisioningTest {
 		assertTrue("1.4", !properties.containsKey(TEST_KEY));
 	}
 
+	public void testAddRemoveIUs() throws ProvisionException {
+		IMetadataRepositoryManager manager = getMetadataRepositoryManager();
+		IMetadataRepository repo = manager.createRepository(repoLocation.toURI(), "TestRepo", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY, null);
+		IInstallableUnit iu = createIU("foo");
+		repo.addInstallableUnits(new IInstallableUnit[] {iu});
+		Collector result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		assertTrue("1.0", result.size() == 1);
+		repo.removeAll();
+		result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		assertTrue("1.1", result.isEmpty());
+	}
+
+	public void testRemoveByQuery() throws ProvisionException {
+		IMetadataRepositoryManager manager = getMetadataRepositoryManager();
+		IMetadataRepository repo = manager.createRepository(repoLocation.toURI(), "TestRepo", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY, null);
+		IInstallableUnit iu = createIU("foo");
+		IInstallableUnit iu2 = createIU("bar");
+		repo.addInstallableUnits(new IInstallableUnit[] {iu, iu2});
+		Collector result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		assertTrue("1.0", result.size() == 2);
+		repo.removeInstallableUnits(new InstallableUnitQuery("foo"), getMonitor());
+		result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		assertTrue("1.1", result.size() == 1);
+		repo.removeInstallableUnits(new InstallableUnitQuery("bar"), getMonitor());
+		result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		assertTrue("1.2", result.isEmpty());
+
+	}
+
 	public void testUncompressedRepository() throws MalformedURLException, ProvisionException {
 		IMetadataRepositoryManager manager = getMetadataRepositoryManager();
 		Map properties = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
index 0c17140..40633f8 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
@@ -80,7 +80,7 @@ public class AutomaticUpdateScheduler implements IStartup {
 		}
 
 		// overridden to release profile cache
-		protected void performComplete() {
+		public void postPerform() {
 			cachedProfile = null;
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableProfileRegistry.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableProfileRegistry.java
index 21ab865..5e6f832 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableProfileRegistry.java
@@ -36,17 +36,7 @@ public class QueryableProfileRegistry implements IQueryable {
 		IProfile[] profiles = profileRegistry.getProfiles();
 		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.QueryableProfileRegistry_QueryProfileProgress, profiles.length);
 		try {
-			if (query instanceof IMatchQuery) {
-				IMatchQuery isMatchQuery = (IMatchQuery) query;
-				for (int i = 0; i < profiles.length; i++) {
-					if (isMatchQuery.isMatch(profiles[i]))
-						if (!result.accept(profiles[i]))
-							break;
-					sub.worked(1);
-				}
-			} else
-				query.perform(Arrays.asList(profiles).iterator(), result);
-
+			query.perform(Arrays.asList(profiles).iterator(), result);
 		} finally {
 			sub.done();
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
index a0ec684..6633eed 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
@@ -53,19 +53,7 @@ public class QueryableUpdates implements IQueryable {
 				for (int j = 0; j < updates.length; j++)
 					allUpdates.add(updates[j]);
 			}
-			if (query instanceof IMatchQuery) {
-				IMatchQuery isMatchQuery = (IMatchQuery) query;
-				for (int i = 0; i < allUpdates.size(); i++) {
-					if (monitor.isCanceled())
-						return result;
-					if (isMatchQuery.isMatch(allUpdates.get(i)))
-						if (!result.accept(allUpdates.get(i)))
-							break;
-					monitor.worked(totalWork / 2 / allUpdates.size());
-				}
-			} else
-				query.perform(allUpdates.iterator(), result);
-
+			query.perform(allUpdates.iterator(), result);
 		} catch (OperationCanceledException e) {
 			// Nothing more to do, return result
 		} finally {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
index de09015..6c6e532 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
@@ -65,18 +65,14 @@ public class QueryableArtifactRepositoryManager implements IQueryable {
 			monitor = new NullProgressMonitor();
 		monitor.beginTask(ProvUIMessages.QueryableArtifactRepositoryManager_RepositoryQueryProgress, repoLocations.length);
 		// If the query is null, all URI's are passed to the collector.
-		// If it's a match query, matching URI's are passed to the collector.
-		// Both cases require iteration over the repos.
-		if (query == null || query instanceof IMatchQuery) {
-			IMatchQuery isMatchQuery = (IMatchQuery) query;
+		if (query == null) {
 			for (int i = 0; i < repoLocations.length; i++) {
-				if (isMatchQuery == null || isMatchQuery.isMatch(repoLocations[i]))
-					if (!result.accept(repoLocations[i]))
-						break;
+				if (!result.accept(repoLocations[i]))
+					break;
 				monitor.worked(1);
 			}
 		} else
-			// We don't know how to interpret this query, so just perform it over all of the URI's.
+			// Perform query over all of the URI's.
 			query.perform(Arrays.asList(repoLocations).iterator(), result);
 
 		monitor.done();

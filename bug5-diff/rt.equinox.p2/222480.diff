commit cb1524c9a1ce6952377b3d6616abd750c7553cb4
Author: DJ Houghton <dj>
Date:   Wed Apr 16 22:32:54 2008 +0000

    Bug 222480 - Some features in platform.xml not showing up in "About" dialog

5	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
37	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
21	2	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
47	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
index 10c096a..04fa2b3 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
@@ -19,12 +19,17 @@ public interface ConfigurationConstants {
 	final String ELEMENT_FEATURE = "feature"; //$NON-NLS-1$
 	final String ELEMENT_SITE = "site"; //$NON-NLS-1$
 
+	final String ATTRIBUTE_APPLICATION = "application"; //$NON-NLS-1$
 	final String ATTRIBUTE_DATE = "date"; //$NON-NLS-1$
 	final String ATTRIBUTE_ENABLED = "enabled"; //$NON-NLS-1$
 	final String ATTRIBUTE_ID = "id"; //$NON-NLS-1$
 	final String ATTRIBUTE_LINKFILE = "linkfile"; //$NON-NLS-1$
 	final String ATTRIBUTE_LIST = "list"; //$NON-NLS-1$
+	final String ATTRIBUTE_PLUGIN_IDENTIFIER = "plugin-identifier"; //$NON-NLS-1$
+	final String ATTRIBUTE_PLUGIN_VERSION = "plugin-version"; //$NON-NLS-1$
+	final String ATTRIBUTE_PRIMARY = "primary"; //$NON-NLS-1$
 	final String ATTRIBUTE_POLICY = "policy"; //$NON-NLS-1$
+	final String ATTRIBUTE_ROOT = "root"; //$NON-NLS-1$
 	final String ATTRIBUTE_SHARED_UR = "shared_ur"; //$NON-NLS-1$
 	final String ATTRIBUTE_TRANSIENT = "transient"; //$NON-NLS-1$
 	final String ATTRIBUTE_UPDATEABLE = "updateable"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
index ec5526f..60379e4 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
@@ -11,7 +11,9 @@
 package org.eclipse.equinox.internal.p2.update;
 
 import java.io.*;
+import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.StringTokenizer;
 import javax.xml.parsers.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -54,6 +56,41 @@ public class ConfigurationParser implements ConfigurationConstants {
 		String version = getAttribute(node, ATTRIBUTE_VERSION);
 		if (version != null)
 			result.setVersion(version);
+		String pluginIdentifier = getAttribute(node, ATTRIBUTE_PLUGIN_IDENTIFIER);
+		if (pluginIdentifier != null)
+			result.setPluginIdentifier(pluginIdentifier);
+		String pluginVersion = getAttribute(node, ATTRIBUTE_PLUGIN_VERSION);
+		// plug-in version is the same as the feature version if it is missing
+		if (pluginVersion == null)
+			pluginVersion = version;
+		if (pluginVersion != null)
+			result.setPluginVersion(pluginVersion);
+		String application = getAttribute(node, ATTRIBUTE_APPLICATION);
+		if (application != null)
+			result.setApplication(application);
+
+		// get primary flag
+		String flag = getAttribute(node, ATTRIBUTE_PRIMARY);
+		if (flag != null && Boolean.valueOf(flag).booleanValue())
+			result.setPrimary(true);
+
+		// get install locations
+		String locations = getAttribute(node, ATTRIBUTE_ROOT);
+		if (locations != null) {
+			StringTokenizer tokenizer = new StringTokenizer(locations, ","); //$NON-NLS-1$
+			ArrayList rootList = new ArrayList();
+			while (tokenizer.hasMoreTokens()) {
+				try {
+					URL rootEntry = new URL(tokenizer.nextToken().trim());
+					rootList.add(rootEntry);
+				} catch (MalformedURLException e) {
+					// skip bad entries ...
+				}
+			}
+			URL[] roots = (URL[]) rootList.toArray(new URL[rootList.size()]);
+			result.setRoots(roots);
+		}
+
 		return result;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
index f3eda70..a0c3290 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
@@ -102,12 +102,12 @@ public class ConfigurationWriter implements ConfigurationConstants {
 	/*
 	 * Convert the given list to a comma-separated string.
 	 */
-	private static String toString(String[] list) {
+	private static String toString(Object[] list) {
 		if (list == null || list.length == 0)
 			return null;
 		StringBuffer buffer = new StringBuffer();
 		for (int i = 0; i < list.length; i++) {
-			buffer.append(list[i]);
+			buffer.append(list[i].toString());
 			if (i + 1 < list.length)
 				buffer.append(',');
 		}
@@ -132,6 +132,25 @@ public class ConfigurationWriter implements ConfigurationConstants {
 			value = feature.getVersion();
 			if (value != null)
 				args.put(ATTRIBUTE_VERSION, value);
+			value = feature.getPluginIdentifier();
+			// only write out the plug-in identifier if it is different from the feature id
+			if (value != null && !value.equals(feature.getId()))
+				args.put(ATTRIBUTE_PLUGIN_IDENTIFIER, value);
+			value = feature.getPluginVersion();
+			// only write out the plug-in version if it is different from the feature version
+			if (value != null && !value.equals(feature.getVersion()))
+				args.put(ATTRIBUTE_PLUGIN_VERSION, value);
+			if (feature.isPrimary())
+				args.put(ATTRIBUTE_PRIMARY, "true"); //$NON-NLS-1$
+			value = feature.getApplication();
+			if (value != null)
+				args.put(ATTRIBUTE_APPLICATION, value);
+
+			// collect the roots
+			URL[] roots = feature.getRoots();
+			if (roots != null && roots.length > 0)
+				args.put(ATTRIBUTE_ROOT, toString(roots));
+
 			writer.startTag(ELEMENT_FEATURE, args);
 			writer.endTag(ELEMENT_FEATURE);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
index 46e2a70..5ed8191 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.update;
 
+import java.net.URL;
+
 /*
  * Represents a feature entry in a platform.xml file.
  */
@@ -19,6 +21,11 @@ public class Feature {
 	private String url;
 	private String version;
 	private Site site;
+	private String pluginIdentifier;
+	private String pluginVersion;
+	private String application;
+	private URL[] roots;
+	private boolean primary = false;
 
 	public Feature(Site site) {
 		super();
@@ -27,10 +34,26 @@ public class Feature {
 		this.site = site;
 	}
 
+	public String getApplication() {
+		return application;
+	}
+
 	public String getId() {
 		return id;
 	}
 
+	public String getPluginIdentifier() {
+		return pluginIdentifier;
+	}
+
+	public String getPluginVersion() {
+		return pluginVersion;
+	}
+
+	public URL[] getRoots() {
+		return roots;
+	}
+
 	public Site getSite() {
 		return site;
 	}
@@ -43,10 +66,34 @@ public class Feature {
 		return version;
 	}
 
+	public boolean isPrimary() {
+		return primary;
+	}
+
+	public void setApplication(String application) {
+		this.application = application;
+	}
+
 	public void setId(String id) {
 		this.id = id;
 	}
 
+	public void setPluginIdentifier(String pluginIdentifier) {
+		this.pluginIdentifier = pluginIdentifier;
+	}
+
+	public void setPluginVersion(String pluginVersion) {
+		this.pluginVersion = pluginVersion;
+	}
+
+	public void setPrimary(boolean primary) {
+		this.primary = primary;
+	}
+
+	public void setRoots(URL[] roots) {
+		this.roots = roots;
+	}
+
 	public void setUrl(String url) {
 		this.url = url;
 	}
commit 9583510edc558e5ea1988ea6ab6b2a00c660a5c7
Author: DJ Houghton <dj>
Date:   Thu May 29 15:49:32 2008 +0000

    Bug 222480 - Some features in platform.xml not showing up in "About" dialog

6	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
45	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Feature.java
12	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
5	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
9	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/InstallFeatureAction.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
index 5cbe1a3..40107bf 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
@@ -251,6 +251,12 @@ public class FeatureParser extends DefaultHandler {
 			String arch = attributes.getValue("arch"); //$NON-NLS-1$
 			result.setEnvironment(os, ws, arch, nl);
 
+			result.setApplication(attributes.getValue("application")); //$NON-NLS-1$
+			result.setPlugin(attributes.getValue("plugin")); //$NON-NLS-1$
+			result.setExclusive(Boolean.valueOf(attributes.getValue("exclusive")).booleanValue()); //$NON-NLS-1$
+			result.setPrimary(Boolean.valueOf(attributes.getValue("primary")).booleanValue()); //$NON-NLS-1$
+			result.setColocationAffinity(attributes.getValue("colocation-affinity")); //$NON-NLS-1$
+
 			//TODO rootURLs
 			if (url != null && "file".equals(url.getProtocol())) { //$NON-NLS-1$
 				File f = new File(url.getFile().replace('/', File.separatorChar));
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Feature.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Feature.java
index 3db144d..fb6a12f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Feature.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Feature.java
@@ -23,6 +23,11 @@ public class Feature {
 	private String version;
 	private String label;
 	private String image;
+	private String pluginId;
+	private boolean primary = false;
+	private boolean exclusive = false;
+	private String application;
+	private String colocationAffinity;
 
 	private URLEntry description;
 	private URLEntry license;
@@ -70,10 +75,18 @@ public class Feature {
 		entries.add(plugin);
 	}
 
+	public String getApplication() {
+		return application;
+	}
+
 	public String getArch() {
 		return arch;
 	}
 
+	public String getColocationAffinity() {
+		return colocationAffinity;
+	}
+
 	public String getCopyright() {
 		if (copyright != null)
 			return copyright.getAnnotation();
@@ -162,6 +175,10 @@ public class Feature {
 		return os;
 	}
 
+	public String getPlugin() {
+		return pluginId;
+	}
+
 	public String getProviderName() {
 		return providerName;
 	}
@@ -186,6 +203,22 @@ public class Feature {
 		return ws;
 	}
 
+	public boolean isExclusive() {
+		return exclusive;
+	}
+
+	public boolean isPrimary() {
+		return primary;
+	}
+
+	public void setApplication(String application) {
+		this.application = application;
+	}
+
+	public void setColocationAffinity(String colocationAffinity) {
+		this.colocationAffinity = colocationAffinity;
+	}
+
 	public void setCopyright(String copyright) {
 		if (this.copyright == null)
 			this.copyright = new URLEntry();
@@ -217,6 +250,10 @@ public class Feature {
 		this.nl = nl;
 	}
 
+	public void setExclusive(boolean exclusive) {
+		this.exclusive = exclusive;
+	}
+
 	public void setImage(String image) {
 		this.image = image;
 	}
@@ -257,6 +294,14 @@ public class Feature {
 		this.location = location;
 	}
 
+	public void setPlugin(String pluginId) {
+		this.pluginId = pluginId;
+	}
+
+	public void setPrimary(boolean primary) {
+		this.primary = primary;
+	}
+
 	public void setProviderName(String value) {
 		providerName = value;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
index 223d0c1..5fc4df4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -96,6 +96,10 @@ public class MetadataGeneratorHelper {
 	private static final String LAUNCHER_ID_PREFIX = "org.eclipse.launcher"; //$NON-NLS-1$
 
 	private static final String ECLIPSE_INSTALL_HANDLER_PROP = "org.eclipse.update.installHandler"; //$NON-NLS-1$
+	private static final String UPDATE_FEATURE_APPLICATION_PROP = "org.eclipse.update.feature.application"; //$NON-NLS-1$
+	private static final String UPDATE_FEATURE_PLUGIN_PROP = "org.eclipse.update.feature.plugin"; //$NON-NLS-1$
+	private static final String UPDATE_FEATURE_EXCLUSIVE_PROP = "org.eclipse.update.feature.exclusive"; //$NON-NLS-1$
+	private static final String UPDATE_FEATURE_PRIMARY_PROP = "org.eclipse.update.feature.primary"; //$NON-NLS-1$
 
 	//TODO - need to come up with a way to infer launcher version
 	private static final Version LAUNCHER_VERSION = new Version(1, 0, 0);
@@ -571,6 +575,14 @@ public class MetadataGeneratorHelper {
 			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
 		if (feature.getCopyright() != null)
 			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+		if (feature.getApplication() != null)
+			iu.setProperty(UPDATE_FEATURE_APPLICATION_PROP, feature.getApplication());
+		if (feature.getPlugin() != null)
+			iu.setProperty(UPDATE_FEATURE_PLUGIN_PROP, feature.getPlugin());
+		if (feature.isExclusive())
+			iu.setProperty(UPDATE_FEATURE_EXCLUSIVE_PROP, Boolean.TRUE.toString());
+		if (feature.isPrimary())
+			iu.setProperty(UPDATE_FEATURE_PRIMARY_PROP, Boolean.TRUE.toString());
 
 		// The required capabilities are not specified at this level because we don't want the feature jar to be attractive to install.
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
index d55c7e6..67eae11 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
@@ -190,6 +190,11 @@ public class PlatformConfigurationWrapper {
 		addedFeature.setId(id);
 		addedFeature.setVersion(version);
 		addedFeature.setUrl(makeFeatureURL(id, version));
+		addedFeature.setApplication(application);
+		addedFeature.setPluginIdentifier(pluginIdentifier);
+		addedFeature.setPluginVersion(pluginVersion);
+		addedFeature.setRoots(root);
+		addedFeature.setPrimary(primary);
 		site.addFeature(addedFeature);
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/InstallFeatureAction.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/InstallFeatureAction.java
index b1b78e0..66021f2 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/InstallFeatureAction.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/InstallFeatureAction.java
@@ -20,6 +20,9 @@ import org.eclipse.osgi.util.NLS;
 
 public class InstallFeatureAction extends ProvisioningAction {
 	public static final String ID = "installFeature"; //$NON-NLS-1$
+	private static final String UPDATE_FEATURE_APPLICATION_PROP = "org.eclipse.update.feature.application"; //$NON-NLS-1$
+	private static final String UPDATE_FEATURE_PLUGIN_PROP = "org.eclipse.update.feature.plugin"; //$NON-NLS-1$
+	private static final String UPDATE_FEATURE_PRIMARY_PROP = "org.eclipse.update.feature.primary"; //$NON-NLS-1$
 
 	public IStatus execute(Map parameters) {
 		return InstallFeatureAction.installFeature(parameters);
@@ -65,6 +68,11 @@ public class InstallFeatureAction extends ProvisioningAction {
 		if (file == null || !file.exists()) {
 			return Util.createError(NLS.bind(Messages.artifact_file_not_found, artifactKey));
 		}
-		return configuration.addFeatureEntry(file, featureId, featureVersion, artifactKey.getId(), artifactKey.getVersion().toString(), /*primary*/false, /*application*/null, /*root*/null);
+		String pluginId = iu.getProperty(UPDATE_FEATURE_PLUGIN_PROP);
+		boolean isPrimary = Boolean.valueOf(iu.getProperty(UPDATE_FEATURE_PRIMARY_PROP)).booleanValue();
+		String application = iu.getProperty(UPDATE_FEATURE_APPLICATION_PROP);
+		// TODO this isn't right... but we will leave it for now because we don't actually use the value in the install
+		String pluginVersion = artifactKey.getVersion().toString();
+		return configuration.addFeatureEntry(file, featureId, featureVersion, pluginId, pluginVersion, isPrimary, application, /*root*/null);
 	}
 }
\ No newline at end of file

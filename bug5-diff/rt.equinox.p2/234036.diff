commit 816438aa25e48a800deb27531a5e11dc57b1ac31
Author: John Arthorne <johna>
Date:   Fri May 30 02:53:46 2008 +0000

    Bug 234036 [ui] Each keystroke in filter field gives error for missing repository

1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
35	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
20	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index e20c652..8af8d40 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -149,6 +149,7 @@ public class ProvUIMessages extends NLS {
 	public static String ProvUILicenseManager_ParsingError;
 	public static String OptionalPlatformRestartMessage;
 	public static String QueryableArtifactRepositoryManager_RepositoryQueryProgress;
+	public static String QueryableMetadataRepositoryManager_MultipleRepositoriesNotFound;
 	public static String QueryableMetadataRepositoryManager_RepositoryQueryProgress;
 	public static String QueryableProfileRegistry_QueryProfileProgress;
 	public static String QueryableUpdates_UpdateListProgress;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 4dc9b6d..d19e306 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -145,6 +145,7 @@ Label_Repositories=Known Repositories
 MetadataRepositoryElement_NotFound=This repository is currently not available.
 MetadataRepositoryElement_RepositoryLoadError=Error loading repository {0}
 QueryableArtifactRepositoryManager_RepositoryQueryProgress=Getting artifact repositories
+QueryableMetadataRepositoryManager_MultipleRepositoriesNotFound=Some repositories could not be found.  Check the details.
 QueryableMetadataRepositoryManager_RepositoryQueryProgress=Getting repositories
 QueryableProfileRegistry_QueryProfileProgress=Getting profiles
 QueryableUpdates_UpdateListProgress=Assembling list of updates
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
index 5c8f4fb..d4f918f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
@@ -12,6 +12,8 @@
 package org.eclipse.equinox.internal.provisional.p2.ui;
 
 import java.lang.reflect.InvocationTargetException;
+import java.net.URL;
+import java.util.*;
 import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.core.commands.operations.*;
 import org.eclipse.core.runtime.*;
@@ -48,6 +50,7 @@ public class ProvUI {
 	static ObjectUndoContext provisioningUndoContext;
 	private static final int DEFAULT_COLUMN_WIDTH = 200;
 	private static IUColumnConfig[] iuColumnConfig = new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, DEFAULT_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, DEFAULT_COLUMN_WIDTH)};
+	private static final List reposNotFound = Collections.synchronizedList(new ArrayList());
 
 	public static Shell getShell(IAdaptable uiInfo) {
 		Shell shell;
@@ -78,6 +81,38 @@ public class ProvUI {
 		return status;
 	}
 
+	public static void reportNotFoundStatus(URL url, IStatus status, int style) {
+		if (!hasNotFoundStatusBeenReported(url)) {
+			reposNotFound.add(url);
+			reportStatus(status, style);
+		}
+	}
+
+	// This assumes that callers already checked whether it *should*
+	// be reported so that we don't need to loop through the list
+	// when the caller just has done so in order to know whether
+	// to report.
+	public static void notFoundStatusReported(URL url) {
+		reposNotFound.add(url);
+	}
+
+	// We don't simply use a set data structure to keep the URLs unique
+	// because using equals() for URLs is notoriously slow
+	// We don't check for things like case variants or end slash variants
+	// because we know that the repository managers already did this.
+	public static boolean hasNotFoundStatusBeenReported(URL url) {
+		synchronized (reposNotFound) {
+			for (int i = 0; i < reposNotFound.size(); i++)
+				if (reposNotFound.get(i) instanceof URL && ((URL) reposNotFound.get(i)).toExternalForm().equals(url.toExternalForm()))
+					return true;
+		}
+		return false;
+	}
+
+	public static void clearRepositoriesNotFound() {
+		reposNotFound.clear();
+	}
+
 	public static void reportStatus(IStatus status, int style) {
 		// workaround for
 		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=211933
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
index b219b22..b5dc20b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
@@ -101,7 +101,7 @@ public class MetadataRepositoryElement extends RemoteQueriedElement implements I
 					if (!alreadyReportedNotFound) {
 						// report the status, not the exception, to the user because we
 						// do not want to show them stack trace and exception detail.
-						ProvUI.reportStatus(e.getStatus(), StatusManager.SHOW);
+						ProvUI.reportNotFoundStatus(url, e.getStatus(), StatusManager.SHOW);
 						alreadyReportedNotFound = true;
 					}
 				} else
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
index f3da806..15af09c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
@@ -41,6 +41,8 @@ public class RefreshMetadataRepositoriesOperation extends RepositoryOperation {
 	}
 
 	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		// Clear the not found cache so that repos not found are reported again.
+		ProvUI.clearRepositoriesNotFound();
 		ProvisioningUtil.refreshMetadataRepositories(urls, monitor);
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
index 16dcc4f..4dc1b19 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
@@ -145,24 +145,35 @@ public class QueryableMetadataRepositoryManager implements IQueryable {
 		// If we've already reported a URL is not found, don't report again.
 		if (notFound.contains(missingRepo.toExternalForm()))
 			return;
+		// If someone else reported a URL is not found, don't report again.
+		if (ProvUI.hasNotFoundStatusBeenReported(missingRepo)) {
+			notFound.add(missingRepo.toExternalForm());
+			return;
+		}
 		notFound.add(missingRepo.toExternalForm());
+		ProvUI.notFoundStatusReported(missingRepo);
+		// Empty multi statuses have a severity OK.  The platform status handler doesn't handle
+		// this well.  We correct this by recreating a status with error severity
+		// so that the platform status handler does the right thing.
+		IStatus status = e.getStatus();
+		if (status instanceof MultiStatus && ((MultiStatus) status).getChildren().length == 0)
+			status = new Status(IStatus.ERROR, status.getPlugin(), status.getCode(), status.getMessage(), status.getException());
 		if (accumulatedNotFound == null) {
-			accumulatedNotFound = new MultiStatus(ProvUIActivator.PLUGIN_ID, ProvisionException.REPOSITORY_NOT_FOUND, NLS.bind(ProvUIMessages.ProvisioningUtil_RepositoryNotFound, missingRepo.toExternalForm()), null);
+			accumulatedNotFound = new MultiStatus(ProvUIActivator.PLUGIN_ID, ProvisionException.REPOSITORY_NOT_FOUND, new IStatus[] {status}, ProvUIMessages.QueryableMetadataRepositoryManager_MultipleRepositoriesNotFound, null);
+		} else {
+			accumulatedNotFound.add(status);
 		}
-		accumulatedNotFound.add(e.getStatus());
 	}
 
 	private void reportAccumulatedStatus() {
 		// If we've discovered not found repos we didn't know about, report them
 		if (accumulatedNotFound != null) {
-			// If we didn't find several repos in one pass, use a more generic top level message.
-			if (accumulatedNotFound.getChildren().length > 1) {
-				MultiStatus multiples = new MultiStatus(ProvUIActivator.PLUGIN_ID, ProvisionException.REPOSITORY_NOT_FOUND, "Some repositories could not be found.  Check the details.", null);
-				multiples.addAll(accumulatedNotFound);
-				accumulatedNotFound = multiples;
-
+			// If there is only missing repo to report, use the specific message rather than the generic.
+			if (accumulatedNotFound.getChildren().length == 1) {
+				ProvUI.reportStatus(accumulatedNotFound.getChildren()[0], StatusManager.SHOW);
+			} else {
+				ProvUI.reportStatus(accumulatedNotFound, StatusManager.SHOW);
 			}
-			ProvUI.reportStatus(accumulatedNotFound, StatusManager.SHOW);
 		}
 		// Reset the accumulated status so that next time we only report the newly not found repos.
 		accumulatedNotFound = null;

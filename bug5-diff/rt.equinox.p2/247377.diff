commit 4ce89a4c891d8ce05aa6f03fcac78e9a3d067b2f
Author: John Arthorne <johna>
Date:   Tue Sep 16 00:28:55 2008 +0000

    Bug 247377 Remove dead locker classes

0	2	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
0	120	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
0	22	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker.java
0	53	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaIo.java
0	68	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaNio.java
0	28	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Messages.java
0	13	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
index a2e903d..e7d5f00 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
@@ -18,7 +18,6 @@ import java.util.Hashtable;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.osgi.framework.log.FrameworkLog;
-import org.eclipse.osgi.service.datalocation.Location;
 import org.osgi.framework.*;
 import org.osgi.util.tracker.ServiceTracker;
 
@@ -29,7 +28,6 @@ public class Activator implements BundleActivator {
 	public static BundleContext context;
 	private static final String DEFAULT_AGENT_LOCATION = "../p2"; //$NON-NLS-1$
 
-	public static Location downloadLocation = null;
 	private static Activator instance;
 	// Data mode constants for user, configuration and data locations.
 	private static final String NO_DEFAULT = "@noDefault"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
index f95a338..ba81879 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
@@ -10,89 +10,21 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.core;
 
-import java.io.File;
-import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
-import org.eclipse.osgi.service.datalocation.Location;
 
 /**
  * Internal class.
  */
 public class BasicLocation implements AgentLocation {
-	private static class MockLocker implements Locker {
-		public boolean lock() {
-			// locking always successful
-			return true;
-		}
 
-		public void release() {
-			// nothing to release
-		}
-	}
-
-	private boolean isReadOnly;
 	private URL location = null;
-	private Location parent;
 	private URL defaultValue;
 
-	// locking related fields
-	private File lockFile;
-	private Locker locker;
-	public static final String PROP_OSGI_LOCKING = "osgi.locking"; //$NON-NLS-1$
-	public static boolean DEBUG;
-
-	private static boolean isRunningWithNio() {
-		try {
-			Class.forName("java.nio.channels.FileLock"); //$NON-NLS-1$
-		} catch (ClassNotFoundException e) {
-			return false;
-		}
-		return true;
-	}
-
-	public static Locker createLocker(File lock, String lockMode) {
-		if (lockMode == null)
-			lockMode = Activator.context.getProperty(PROP_OSGI_LOCKING);
-
-		if ("none".equals(lockMode)) //$NON-NLS-1$
-			return new MockLocker();
-
-		if ("java.io".equals(lockMode)) //$NON-NLS-1$
-			return new Locker_JavaIo(lock);
-
-		if ("java.nio".equals(lockMode)) { //$NON-NLS-1$
-			if (isRunningWithNio())
-				return new Locker_JavaNio(lock);
-			else
-				// TODO should we return null here.  NIO was requested but we could not do it...
-				return new Locker_JavaIo(lock);
-		}
-
-		//	Backup case if an invalid value has been specified
-		if (isRunningWithNio())
-			return new Locker_JavaNio(lock);
-		else
-			return new Locker_JavaIo(lock);
-	}
-
 	public BasicLocation(String property, URL defaultValue, boolean isReadOnly) {
 		super();
 		this.defaultValue = defaultValue;
-		this.isReadOnly = isReadOnly;
-	}
-
-	public boolean allowsDefault() {
-		return defaultValue != null;
-	}
-
-	public URL getDefault() {
-		return defaultValue;
-	}
-
-	public synchronized Location getParentLocation() {
-		return parent;
 	}
 
 	public synchronized URL getURL() {
@@ -101,14 +33,6 @@ public class BasicLocation implements AgentLocation {
 		return location;
 	}
 
-	public synchronized boolean isSet() {
-		return location != null;
-	}
-
-	public boolean isReadOnly() {
-		return isReadOnly;
-	}
-
 	/**
 	 * @deprecated
 	 */
@@ -147,50 +71,6 @@ public class BasicLocation implements AgentLocation {
 		return lock;
 	}
 
-	public synchronized void setParent(Location value) {
-		parent = value;
-	}
-
-	public synchronized boolean lock() throws IOException {
-		if (!isSet())
-			return false;
-		return lock(lockFile);
-	}
-
-	private boolean lock(File lock) throws IOException {
-		if (lock == null || isReadOnly)
-			return false;
-
-		File parentFile = new File(lock.getParent());
-		if (!parentFile.exists())
-			if (!parentFile.mkdirs())
-				return false;
-
-		setLocker(lock);
-		if (locker == null)
-			return true;
-		boolean locked = false;
-		try {
-			locked = locker.lock();
-			return locked;
-		} finally {
-			if (!locked)
-				locker = null;
-		}
-	}
-
-	private void setLocker(File lock) {
-		if (locker != null)
-			return;
-		String lockMode = Activator.context.getProperty(PROP_OSGI_LOCKING);
-		locker = createLocker(lock, lockMode);
-	}
-
-	public synchronized void release() {
-		if (locker != null)
-			locker.release();
-	}
-
 	public URL getArtifactRepositoryURL() {
 		//the cache is a co-located repository
 		return getMetadataRepositoryURL();
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker.java
deleted file mode 100644
index 8976166..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2004, 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.core;
-
-import java.io.IOException;
-
-/**
- * Internal class.
- */
-public interface Locker {
-	public boolean lock() throws IOException;
-
-	public void release();
-}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaIo.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaIo.java
deleted file mode 100644
index 0f32523..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaIo.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2004, 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.core;
-
-import java.io.*;
-
-/**
- * Internal class.
- */
-public class Locker_JavaIo implements Locker {
-	private File lockFile;
-	private RandomAccessFile lockRAF;
-
-	public Locker_JavaIo(File lockFile) {
-		this.lockFile = lockFile;
-	}
-
-	public synchronized boolean lock() throws IOException {
-		//if the lock file already exists, try to delete,
-		//assume failure means another eclipse has it open
-		if (lockFile.exists())
-			lockFile.delete();
-		if (lockFile.exists())
-			return false;
-
-		//open the lock file so other instances can't co-exist
-		lockRAF = new RandomAccessFile(lockFile, "rw"); //$NON-NLS-1$
-		lockRAF.writeByte(0);
-
-		return true;
-	}
-
-	public synchronized void release() {
-		try {
-			if (lockRAF != null) {
-				lockRAF.close();
-				lockRAF = null;
-			}
-		} catch (IOException e) {
-			//don't complain, we're making a best effort to clean up
-		}
-		if (lockFile != null)
-			lockFile.delete();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaNio.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaNio.java
deleted file mode 100644
index ff4e3e8..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Locker_JavaNio.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2004, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.core;
-
-import java.io.*;
-import java.nio.channels.FileLock;
-import org.eclipse.osgi.util.NLS;
-
-/**
- * Internal class.
- */
-public class Locker_JavaNio implements Locker {
-	private File lockFile;
-	private FileLock fileLock;
-	private RandomAccessFile raFile;
-
-	public Locker_JavaNio(File lockFile) {
-		this.lockFile = lockFile;
-	}
-
-	public synchronized boolean lock() throws IOException {
-		raFile = new RandomAccessFile(lockFile, "rw"); //$NON-NLS-1$
-		try {
-			// Fix for bug http://bugs.sun.com/view_bug.do?bug_id=6628575 and
-			// https://bugs.eclipse.org/bugs/show_bug.cgi?id=44735
-			fileLock = raFile.getChannel().tryLock(0, 1, false);
-		} catch (IOException ioe) {
-			// print exception if debugging
-			if (BasicLocation.DEBUG)
-				System.out.println(NLS.bind(Messages.location_cannotLock, lockFile));
-			// produce a more specific message for clients
-			String specificMessage = NLS.bind(Messages.location_cannotLockNIO, new Object[] {lockFile, ioe.getMessage(), "\"-D" + BasicLocation.PROP_OSGI_LOCKING + "=none\""}); //$NON-NLS-1$ //$NON-NLS-2$
-			throw new IOException(specificMessage);
-		}
-		if (fileLock != null)
-			return true;
-		raFile.close();
-		raFile = null;
-		return false;
-	}
-
-	public synchronized void release() {
-		if (fileLock != null) {
-			try {
-				fileLock.release();
-			} catch (IOException e) {
-				//don't complain, we're making a best effort to clean up
-			}
-			fileLock = null;
-		}
-		if (raFile != null) {
-			try {
-				raFile.close();
-			} catch (IOException e) {
-				//don't complain, we're making a best effort to clean up
-			}
-			raFile = null;
-		}
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Messages.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Messages.java
deleted file mode 100644
index 213ab71..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Messages.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.core;
-
-import org.eclipse.osgi.util.NLS;
-
-public class Messages extends NLS {
-	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.core.messages"; //$NON-NLS-1$
-	static {
-		// initialize resource bundles
-		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
-	}
-
-	private Messages() {
-		// Do not instantiate
-	}
-
-	public static String location_cannotLock;
-	public static String location_cannotLockNIO;
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/messages.properties b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/messages.properties
deleted file mode 100644
index 352e40c..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/messages.properties
+++ /dev/null
@@ -1,13 +0,0 @@
-###############################################################################
-# Copyright (c) 2008 IBM Corporation and others.
-# All rights reserved. This program and the accompanying materials
-# are made available under the terms of the Eclipse Public License v1.0
-# which accompanies this distribution, and is available at
-# http://www.eclipse.org/legal/epl-v10.html
-#
-# Contributors:
-#     IBM Corporation - initial API and implementation
-###############################################################################
-
-location_cannotLockNIO = An error occurred while locking file \"{0}\": \"{1}\". A common reason is that the file system or Runtime Environment does not support file locking for that location. Please choose a different location, or disable file locking passing {2} as a VM argument.
-location_cannotLock = An error occurred while locking file \"{0}\".

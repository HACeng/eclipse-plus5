commit 47332ff64c76b4e84ce790ca928ba7845c57698c
Author: Susan Franklin <sfranklin>
Date:   Tue Oct 14 20:23:49 2008 +0000

    Bug 224472 - [ui] Installed Software list should provide more organization/nesting

25	15	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
17	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
14	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java
6	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
10	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
6	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
18	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
index f4fcbf6..011ad8d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
@@ -50,7 +50,9 @@ public class DefaultQueryProvider extends QueryProvider {
 	}
 
 	public ElementQueryDescriptor getQueryDescriptor(final QueriedElement element) {
-		IQueryable queryable;
+		// Initialize queryable, queryContext, and queryType from the element.
+		// In some cases we override this.
+		IQueryable queryable = element.getQueryable();
 		int queryType = element.getQueryType();
 		IUViewQueryContext context = element.getQueryContext();
 		if (context == null) {
@@ -90,8 +92,8 @@ public class DefaultQueryProvider extends QueryProvider {
 				if (element instanceof RollbackRepositoryElement) {
 					Query profileIdQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfileId());
 					Query rollbackIUQuery = new IUPropertyQuery(IInstallableUnit.PROP_TYPE_PROFILE, Boolean.toString(true));
-					availableIUCollector = new RollbackIUCollector(((RollbackRepositoryElement) element).getQueryable(), element.getParent(element));
-					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), availableIUCollector);
+					availableIUCollector = new RollbackIUCollector(queryable, element.getParent(element));
+					return new ElementQueryDescriptor(queryable, new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), availableIUCollector);
 				}
 
 				Query topLevelQuery = new IUPropertyQuery(context.getVisibleAvailableIUProperty(), Boolean.TRUE.toString());
@@ -99,8 +101,6 @@ public class DefaultQueryProvider extends QueryProvider {
 
 				// Showing child IU's of a group of repositories, or of a single repository
 				if (element instanceof MetadataRepositories || element instanceof MetadataRepositoryElement) {
-					queryable = element.getQueryable();
-
 					if (context.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_FLAT) {
 						AvailableIUCollector collector;
 						if (showLatest)
@@ -122,27 +122,28 @@ public class DefaultQueryProvider extends QueryProvider {
 				if (element instanceof UncategorizedCategoryElement) {
 					// Will have to look at all categories and groups and from there, figure out what's left
 					Query firstPassQuery = new CompoundQuery(new Query[] {topLevelQuery, categoryQuery}, false);
-					queryable = ((UncategorizedCategoryElement) element).getQueryable();
 					availableIUCollector = showLatest ? new LatestIUVersionElementCollector(queryable, element, false) : new AvailableIUCollector(queryable, element, false);
 					if (hideInstalled && installedQueryDescriptor != null)
 						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
 					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(queryable, element, availableIUCollector));
 
 				}
+				// If it's a category, we get the requirements and show all requirements
+				// that are also visible in the available list.  Note this same query could be used to drill
+				// down into any IU's requirements, but we choose not to do this (yet) in the available view.
+				// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=226577
+				// if (element instanceof IUElement) {
 				if (element instanceof CategoryElement) {
-					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getRequirements());
+					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IUElement) element).getRequirements());
 					if (showLatest)
-						availableIUCollector = new LatestIUVersionElementCollector(((CategoryElement) element).getQueryable(), element, true);
+						availableIUCollector = new LatestIUVersionElementCollector(queryable, element, true);
 					else
-						availableIUCollector = new AvailableIUCollector(((CategoryElement) element).getQueryable(), element, true);
+						availableIUCollector = new AvailableIUCollector(queryable, element, true);
 					if (hideInstalled && installedQueryDescriptor != null)
 						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
-					return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {topLevelQuery, categoryQuery}, false), membersOfCategoryQuery}, true), availableIUCollector);
-				}
-				// If we are showing only the latest version, we never represent other versions as children.
-				if (element instanceof IUVersionsElement) {
-					return null;
+					return new ElementQueryDescriptor(queryable, new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {topLevelQuery, categoryQuery}, false), meetsAnyRequirementQuery}, true), availableIUCollector);
 				}
+				return null;
 			case QueryProvider.AVAILABLE_UPDATES :
 				IProfile profile;
 				IInstallableUnit[] toUpdate = null;
@@ -171,6 +172,13 @@ public class DefaultQueryProvider extends QueryProvider {
 					collector = new Collector();
 				return new ElementQueryDescriptor(updateQueryable, allQuery, collector);
 			case QueryProvider.INSTALLED_IUS :
+				// Querying of IU's.  We are drilling down into the requirements.
+				if (element instanceof IUElement) {
+					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IUElement) element).getRequirements());
+					Query visibleAsAvailableQuery = new IUPropertyQuery(context.getVisibleAvailableIUProperty(), Boolean.TRUE.toString());
+					availableIUCollector = new AvailableIUCollector(queryable, element, true);
+					return new ElementQueryDescriptor(queryable, new CompoundQuery(new Query[] {visibleAsAvailableQuery, meetsAnyRequirementQuery}, true), new InstalledIUCollector(queryable, element));
+				}
 				profile = (IProfile) ProvUI.getAdapter(element, IProfile.class);
 				if (profile == null)
 					return null;
@@ -178,10 +186,12 @@ public class DefaultQueryProvider extends QueryProvider {
 				// Rollback profiles are specialized/temporary instances so we must use a query that uses the profile instance, not the id.
 				if (element instanceof RollbackProfileElement)
 					return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, context.getVisibleInstalledIUProperty(), Boolean.toString(true)), new InstalledIUCollector(profile, element));
+
+				// Just a normal query of the installed IU's, query the profile and look for the visible ones
 				return new ElementQueryDescriptor(profile, new IUProfilePropertyByIdQuery(profile.getProfileId(), context.getVisibleInstalledIUProperty(), Boolean.toString(true)), new InstalledIUCollector(profile, element));
 			case QueryProvider.METADATA_REPOS :
 				if (element instanceof MetadataRepositories) {
-					if (element.getQueryable() == null) {
+					if (queryable == null) {
 						queryable = new QueryableMetadataRepositoryManager(policy, ((MetadataRepositories) element).getIncludeDisabledRepositories());
 						element.setQueryable(queryable);
 					}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index bfd099f..380f136 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -19,8 +19,10 @@ import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
 
 /**
  * Element wrapper class for IU's that are available for installation.
@@ -29,7 +31,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUti
  * 
  * @since 3.4
  */
-public class AvailableIUElement extends ProvElement implements IUElement {
+public class AvailableIUElement extends QueriedElement implements IUElement {
 
 	IInstallableUnit iu;
 	// Currently this variable is not settable due to the
@@ -60,10 +62,6 @@ public class AvailableIUElement extends ProvElement implements IUElement {
 		return iu.getId();
 	}
 
-	public Object[] getChildren(Object o) {
-		return null;
-	}
-
 	public Object getAdapter(Class adapter) {
 		if (adapter == IInstallableUnit.class)
 			return iu;
@@ -108,4 +106,18 @@ public class AvailableIUElement extends ProvElement implements IUElement {
 	public boolean shouldShowVersion() {
 		return true;
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.QueriedElement#getDefaultQueryType()
+	 */
+	protected int getDefaultQueryType() {
+		return QueryProvider.AVAILABLE_IUS;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IUElement#getRequirements()
+	 */
+	public RequiredCapability[] getRequirements() {
+		return iu.getRequiredCapabilities();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
index a26279e..97ddcf7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
@@ -26,6 +26,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
 public class CategoryElement extends RemoteQueriedElement implements IUElement {
 
 	private ArrayList ius = new ArrayList(1);
+	private RequiredCapability[] requirements;
 
 	public CategoryElement(Object parent, IInstallableUnit iu) {
 		super(parent);
@@ -87,15 +88,20 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 	public RequiredCapability[] getRequirements() {
 		if (ius == null || ius.isEmpty())
 			return new RequiredCapability[0];
-		if (ius.size() == 1)
-			return getIU().getRequiredCapabilities();
-		ArrayList capabilities = new ArrayList();
-		Iterator iter = ius.iterator();
-		while (iter.hasNext()) {
-			IInstallableUnit iu = (IInstallableUnit) iter.next();
-			capabilities.addAll(Arrays.asList(iu.getRequiredCapabilities()));
+		if (requirements == null) {
+			if (ius.size() == 1)
+				requirements = getIU().getRequiredCapabilities();
+			else {
+				ArrayList capabilities = new ArrayList();
+				Iterator iter = ius.iterator();
+				while (iter.hasNext()) {
+					IInstallableUnit iu = (IInstallableUnit) iter.next();
+					capabilities.addAll(Arrays.asList(iu.getRequiredCapabilities()));
+				}
+				requirements = (RequiredCapability[]) capabilities.toArray(new RequiredCapability[capabilities.size()]);
+			}
 		}
-		return (RequiredCapability[]) capabilities.toArray(new RequiredCapability[capabilities.size()]);
+		return requirements;
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
index ebe04fb..afc331e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.model;
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 
 /**
  * Interface for elements that represent IU's.
@@ -47,4 +48,6 @@ public interface IUElement {
 	public long getSize();
 
 	public void computeSize(IProgressMonitor monitor);
+
+	public RequiredCapability[] getRequirements();
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
index a6e25d1..5d8f6f7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.model;
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
 
@@ -71,4 +72,11 @@ public class IUVersionsElement extends QueriedElement implements IUElement {
 	public void computeSize(IProgressMonitor monitor) {
 		// Should never be called, since shouldShowSize() returns false
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IUElement#getRequirements()
+	 */
+	public RequiredCapability[] getRequirements() {
+		return iu.getRequiredCapabilities();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
index c88635c..48b7900 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
@@ -129,4 +130,11 @@ public class RollbackProfileElement extends RemoteQueriedElement implements IUEl
 	public boolean knowsQueryable() {
 		return iu != null;
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IUElement#getRequirements()
+	 */
+	public RequiredCapability[] getRequirements() {
+		return iu.getRequiredCapabilities();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java
index 8cc2037..2346d61 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.query;
 import org.eclipse.equinox.internal.p2.ui.model.QueriedElementCollector;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
 
 /**
@@ -23,8 +24,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
  */
 public class InstalledIUCollector extends QueriedElementCollector {
 
-	public InstalledIUCollector(IProfile profile, Object parent) {
-		super(profile, parent);
+	public InstalledIUCollector(IQueryable queryable, Object parent) {
+		super(queryable, parent);
 	}
 
 	/**
@@ -39,7 +40,7 @@ public class InstalledIUCollector extends QueriedElementCollector {
 			return true;
 		if (queryable instanceof IProfile)
 			return super.accept(new InstalledIUElement(parent, ((IProfile) queryable).getProfileId(), (IInstallableUnit) match));
-		// shouldn't happen, but is possible if a client reset the queryable to a non-profile.
+		// Shouldn't happen, the queryable should typically be a profile
 		return super.accept(match);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
index b31151b..c16c4be 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
@@ -227,6 +227,12 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 		return IInstallableUnit.LOCK_NONE;
 	}
 
+	protected String getProfileProperty(IProfile profile, IInstallableUnit iu, String propertyName) {
+		if (profile == null || iu == null)
+			return null;
+		return profile.getInstallableUnitProperty(iu, propertyName);
+	}
+
 	protected IProfile getProfile(boolean chooseProfile) {
 		try {
 			String id = getProfileId(chooseProfile);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
index 83b9b42..651213a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UninstallAction.java
@@ -47,11 +47,19 @@ public class UninstallAction extends ProfileModificationAction {
 					int lock = getLock(profile, element.getIU());
 					if ((lock & IInstallableUnit.LOCK_UNINSTALL) == IInstallableUnit.LOCK_UNINSTALL)
 						return false;
+					// If the parents are different, then they are either from 
+					// different profiles or are nested in different parts of the tree.
+					// Either way, this makes the selection invalid.
 					if (parent == null) {
 						parent = element.getParent(null);
 					} else if (parent != element.getParent(null)) {
 						return false;
 					}
+					// If it is not a visible IU, it is not uninstallable by the user
+					String propName = getPolicy().getQueryContext().getVisibleInstalledIUProperty();
+					if (propName != null && getProfileProperty(profile, element.getIU(), propName) == null) {
+						return false;
+					}
 				} else {
 					return false;
 				}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
index 9b3ed58..6459ea8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
@@ -104,9 +104,7 @@ public class UpdateAction extends ProfileModificationAction {
 	protected boolean isEnabledFor(Object[] selectionArray) {
 		Object parent = null;
 		// We cache the profile for performance reasons rather than get it for
-		// each IU.  Note that below we reject any selection
-		// with different parents, so if there were IU's selected from multiple
-		// profiles, we catch this case and disable the action.
+		// each IU.  
 		IProfile profile = getProfile(false);
 		if (profile == null)
 			return false;
@@ -115,13 +113,22 @@ public class UpdateAction extends ProfileModificationAction {
 				if (selectionArray[i] instanceof InstalledIUElement) {
 					InstalledIUElement element = (InstalledIUElement) selectionArray[i];
 					int lock = getLock(profile, element.getIU());
+					// If it is locked for update, action is not allowed
 					if ((lock & IInstallableUnit.LOCK_UPDATE) == IInstallableUnit.LOCK_UPDATE)
 						return false;
+					// We reject any selection with different parents,
+					// so if there were IU's selected from multiple
+					// profiles, we catch this case and disable the action.
 					if (parent == null) {
 						parent = element.getParent(null);
 					} else if (parent != element.getParent(null)) {
 						return false;
 					}
+					// If it is not a visible IU, it is not updatable by the user
+					String propName = getPolicy().getQueryContext().getVisibleInstalledIUProperty();
+					if (propName != null && getProfileProperty(profile, element.getIU(), propName) == null) {
+						return false;
+					}
 				} else {
 					return false;
 				}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
index bb537c9..aa8853b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
@@ -19,7 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.viewers.StructuredViewer;
-import org.eclipse.jface.viewers.TableViewer;
+import org.eclipse.jface.viewers.TreeViewer;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.DisposeEvent;
 import org.eclipse.swt.events.DisposeListener;
@@ -55,7 +55,7 @@ public class InstalledIUGroup extends StructuredIUGroup {
 
 	protected StructuredViewer createViewer(Composite parent) {
 		// Table of installed IU's
-		TableViewer installedIUViewer = new TableViewer(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		TreeViewer installedIUViewer = new TreeViewer(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
 
 		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
 		installedIUViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
@@ -65,7 +65,7 @@ public class InstalledIUGroup extends StructuredIUGroup {
 		installedIUViewer.setContentProvider(new DeferredQueryContentProvider());
 
 		// Now the visuals, columns before labels.
-		setTableColumns(installedIUViewer.getTable());
+		setTreeColumns(installedIUViewer.getTree());
 		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
 
 		// Input last.
@@ -81,12 +81,12 @@ public class InstalledIUGroup extends StructuredIUGroup {
 		return installedIUViewer;
 	}
 
-	private void setTableColumns(Table table) {
+	private void setTreeColumns(Tree tree) {
 		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
-		table.setHeaderVisible(true);
+		tree.setHeaderVisible(true);
 
 		for (int i = 0; i < columns.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.NONE, i);
+			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
 			tc.setResizable(true);
 			tc.setText(columns[i].columnTitle);
 			tc.setWidth(convertHorizontalDLUsToPixels(columns[i].defaultColumnWidth));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
index b818190..27aa04b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
@@ -12,9 +12,11 @@ package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.model.IUElement;
-import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.internal.p2.ui.model.QueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
 
 /**
  * Element wrapper class for installed IU's. Used instead of the plain IU when
@@ -22,7 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
  * 
  * @since 3.4
  */
-public class InstalledIUElement extends ProvElement implements IUElement {
+public class InstalledIUElement extends QueriedElement implements IUElement {
 
 	String profileId;
 	IInstallableUnit iu;
@@ -46,10 +48,6 @@ public class InstalledIUElement extends ProvElement implements IUElement {
 		return iu.getId();
 	}
 
-	public Object[] getChildren(Object o) {
-		return null;
-	}
-
 	public Object getAdapter(Class adapter) {
 		if (adapter == IInstallableUnit.class)
 			return iu;
@@ -82,4 +80,18 @@ public class InstalledIUElement extends ProvElement implements IUElement {
 		return true;
 	}
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IUElement#getRequirements()
+	 */
+	public RequiredCapability[] getRequirements() {
+		return iu.getRequiredCapabilities();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.QueriedElement#getDefaultQueryType()
+	 */
+	protected int getDefaultQueryType() {
+		return QueryProvider.INSTALLED_IUS;
+	}
+
 }
commit b5a42972318859137a9bc6355aaca10792a94fc1
Author: Susan Franklin <sfranklin>
Date:   Tue Oct 14 20:54:37 2008 +0000

    Bug 224472 - [ui] Installed Software list should provide more organization/nesting

1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
13	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
7	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
10	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 389ef95..91104e6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -192,6 +192,7 @@ public class ProvUIMessages extends NLS {
 	public static String ProvUI_InformationTitle;
 	public static String ProvUI_InstallDialogError;
 	public static String ProvUI_NameColumnTitle;
+	public static String ProvUI_IdColumnTitle;
 	public static String ProvUI_SizeColumnTitle;
 	public static String ProvUI_VersionColumnTitle;
 	public static String ProvUI_WarningTitle;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
index b197ddf..362cb4d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
@@ -16,6 +16,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.jface.viewers.StructuredViewer;
@@ -37,6 +38,7 @@ public abstract class StructuredIUGroup {
 	protected StructuredViewer viewer;
 	private Composite composite;
 	private Policy policy;
+	private IUColumnConfig[] columnConfig;
 
 	/**
 	 * Create a group that represents the available IU's.
@@ -46,9 +48,15 @@ public abstract class StructuredIUGroup {
 	 * to retrieve elements in the viewer.
 	 * @param font The font to use for calculating pixel sizes.  This font is
 	 * not managed by the receiver.
+	 * @param columnConfig the columns to be shown
 	 */
-	protected StructuredIUGroup(Policy policy, Composite parent, Font font) {
+	protected StructuredIUGroup(Policy policy, Composite parent, Font font, IUColumnConfig[] columnConfig) {
 		this.policy = policy;
+		if (columnConfig == null)
+			this.columnConfig = ProvUI.getIUColumnConfig();
+		else
+			this.columnConfig = columnConfig;
+
 		// Set up a fontmetrics for calculations
 		GC gc = new GC(parent);
 		gc.setFont(font);
@@ -91,6 +99,10 @@ public abstract class StructuredIUGroup {
 		return viewer;
 	}
 
+	protected IUColumnConfig[] getColumnConfig() {
+		return columnConfig;
+	}
+
 	public IInstallableUnit[] getSelectedIUs() {
 		return elementsToIUs(((IStructuredSelection) viewer.getSelection()).toList());
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 37907ed..21ce58a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -160,6 +160,7 @@ ProvUI_ErrorDuringApplyConfig=Error while attempting to apply changes.  You must
 ProvUI_InformationTitle=Information
 ProvUI_InstallDialogError=Unable to open the Installation Information.
 ProvUI_NameColumnTitle=Name
+ProvUI_IdColumnTitle=Id
 ProvUI_SizeColumnTitle=Size
 ProvUI_VersionColumnTitle=Version
 ProvUI_WarningTitle=Warning
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 468fab6..e23480b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -91,7 +91,6 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	private IUDetailsLabelProvider labelProvider;
 	private Display display;
 	DeferredFetchFilteredTree filteredTree;
-	IUColumnConfig[] columnConfig;
 	private int refreshRepoFlags = IRepositoryManager.REPOSITORIES_NON_SYSTEM;
 	Job lastRequestedLoadJob;
 
@@ -117,7 +116,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 * will be used.
 	 */
 	public AvailableIUGroup(Policy policy, final Composite parent, Font font, QueryableMetadataRepositoryManager queryable, IUViewQueryContext queryContext, IUColumnConfig[] columnConfig) {
-		super(policy, parent, font);
+		super(policy, parent, font, columnConfig);
 		this.display = parent.getDisplay();
 		if (queryable == null)
 			this.queryableManager = new QueryableMetadataRepositoryManager(policy, false);
@@ -127,11 +126,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 			this.queryContext = policy.getQueryContext();
 		else
 			this.queryContext = queryContext;
-		if (columnConfig == null)
-			this.columnConfig = ProvUI.getIUColumnConfig();
-		else
-			this.columnConfig = columnConfig;
-		this.filter = new AvailableIUPatternFilter(this.columnConfig);
+		this.filter = new AvailableIUPatternFilter(getColumnConfig());
 		createGroupComposite(parent);
 	}
 
@@ -165,7 +160,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 			}
 		});
 
-		labelProvider = new IUDetailsLabelProvider(filteredTree, columnConfig, getShell());
+		labelProvider = new IUDetailsLabelProvider(filteredTree, getColumnConfig(), getShell());
 		labelProvider.setUseBoldFontForFilteredItems(useBold);
 		labelProvider.setToolTipProperty(IInstallableUnit.PROP_DESCRIPTION);
 
@@ -210,11 +205,12 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	private void setTreeColumns(Tree tree) {
 		tree.setHeaderVisible(true);
 
-		for (int i = 0; i < columnConfig.length; i++) {
+		IUColumnConfig[] cols = getColumnConfig();
+		for (int i = 0; i < cols.length; i++) {
 			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
 			tc.setResizable(true);
-			tc.setText(columnConfig[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(columnConfig[i].defaultColumnWidth));
+			tc.setText(cols[i].columnTitle);
+			tc.setWidth(convertHorizontalDLUsToPixels(cols[i].defaultColumnWidth));
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
index aa8853b..a3cbaa5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
@@ -43,9 +43,10 @@ public class InstalledIUGroup extends StructuredIUGroup {
 	 * @param font The font to use for calculating pixel sizes.  This font is
 	 * not managed by the receiver.
 	 * @param profileId the id of the profile whose content is being shown.
+	 * @param columnConfig the columns to be shown
 	 */
-	public InstalledIUGroup(Policy policy, final Composite parent, Font font, String profileId) {
-		super(policy, parent, font);
+	public InstalledIUGroup(Policy policy, final Composite parent, Font font, String profileId, IUColumnConfig[] columnConfig) {
+		super(policy, parent, font, columnConfig);
 		if (profileId == null)
 			this.profileId = policy.getProfileChooser().getProfileId(ProvUI.getDefaultParentShell());
 		else
@@ -82,7 +83,7 @@ public class InstalledIUGroup extends StructuredIUGroup {
 	}
 
 	private void setTreeColumns(Tree tree) {
-		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
+		IUColumnConfig[] columns = getColumnConfig();
 		tree.setHeaderVisible(true);
 
 		for (int i = 0; i < columns.length; i++) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
index 0a3b0af..ef11603 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
@@ -17,6 +17,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.ActionContributionItem;
 import org.eclipse.jface.dialogs.IDialogConstants;
@@ -42,6 +43,7 @@ import org.eclipse.ui.services.IServiceLocator;
 public class InstalledSoftwarePage extends InstallationPage {
 
 	private static final int DEFAULT_WIDTH = 300;
+	private static final int DEFAULT_COLUMN_WIDTH = 150;
 	IMenuService menuService;
 	IInstallationPageContainer pageContainer;
 	AbstractContributionFactory factory;
@@ -74,7 +76,7 @@ public class InstalledSoftwarePage extends InstallationPage {
 		composite.setLayout(layout);
 
 		// Table of installed IU's
-		installedIUGroup = new InstalledIUGroup(Policy.getDefault(), composite, JFaceResources.getDialogFont(), Policy.getDefault().getProfileChooser().getProfileId(ProvUI.getDefaultParentShell()));
+		installedIUGroup = new InstalledIUGroup(Policy.getDefault(), composite, JFaceResources.getDialogFont(), Policy.getDefault().getProfileChooser().getProfileId(ProvUI.getDefaultParentShell()), getColumnConfig());
 		installedIUGroup.getStructuredViewer().addSelectionChangedListener(new ISelectionChangedListener() {
 			public void selectionChanged(SelectionChangedEvent event) {
 				updateDetailsArea();
@@ -93,7 +95,7 @@ public class InstalledSoftwarePage extends InstallationPage {
 		gd = new GridData(SWT.FILL, SWT.FILL, true, false);
 		gd.verticalIndent = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
 		gd.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_DESCRIPTION_HEIGHT);
-		gd.widthHint = convertWidthInCharsToPixels(DEFAULT_WIDTH);
+		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
 
 		detailsArea = new Text(group, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY | SWT.WRAP);
 		detailsArea.setLayoutData(gd);
@@ -198,4 +200,10 @@ public class InstalledSoftwarePage extends InstallationPage {
 		super.dispose();
 		menuService.removeContributionFactory(factory);
 	}
+
+	private IUColumnConfig[] getColumnConfig() {
+		int pixels = convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH);
+		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, pixels / 3), new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, pixels * 2 / 3)};
+
+	}
 }
commit c88f54fc45593bd4bf077c39dcd03514f2719142
Author: Susan Franklin <sfranklin>
Date:   Tue Oct 14 21:14:35 2008 +0000

    Bug 224472 - [ui] Installed Software list should provide more organization/nesting

2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
13	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
11	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
index afc331e..d8d974a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUElement.java
@@ -50,4 +50,6 @@ public interface IUElement {
 	public void computeSize(IProgressMonitor monitor);
 
 	public RequiredCapability[] getRequirements();
+
+	public Object getParent(Object obj);
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index 9cda9ff..ae2373e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
+import org.eclipse.equinox.internal.p2.ui.model.IUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
@@ -22,6 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUni
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.InstallWizard;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.viewers.ISelectionProvider;
@@ -106,15 +108,23 @@ public class InstallAction extends ProfileModificationAction {
 			return false;
 		// We allow non-IU's to be selected at this point, but there
 		// must be at least one installable unit selected that is
-		// not a category.  
+		// not a category and is not nested underneath another IU.
 		for (int i = 0; i < selectionArray.length; i++) {
-			IInstallableUnit iu = getIU(selectionArray[i]);
-			if (iu != null && !ProvisioningUtil.isCategory(iu))
+			if (selectionArray[i] instanceof InstalledIUElement && isSelectable((IUElement) selectionArray[i]))
 				return true;
 		}
 		return false;
 	}
 
+	/*
+	 * Overridden to reject nested IU's
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.actions.ProfileModificationAction#isSelectable(org.eclipse.equinox.internal.p2.ui.model.IUElement)
+	 */
+	protected boolean isSelectable(IUElement element) {
+		return super.isSelectable(element) && !(element.getParent(element) instanceof IUElement);
+	}
+
 	protected String getTaskName() {
 		return ProvUIMessages.InstallIUProgress;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
index c16c4be..5a7c3b3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
@@ -16,6 +16,8 @@ import java.util.List;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.*;
+import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
+import org.eclipse.equinox.internal.p2.ui.model.IUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
@@ -173,14 +175,19 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 		List iusList = new ArrayList(elements.size());
 
 		for (int i = 0; i < elements.size(); i++) {
-			IInstallableUnit iu = getIU(elements.get(i));
-			if (iu != null && !ProvisioningUtil.isCategory(iu))
-				iusList.add(iu);
+			if (elements.get(i) instanceof IUElement) {
+				IUElement element = (IUElement) elements.get(i);
+				if (isSelectable(element))
+					iusList.add(getIU(element));
+			}
 		}
-
 		return (IInstallableUnit[]) iusList.toArray(new IInstallableUnit[iusList.size()]);
 	}
 
+	protected boolean isSelectable(IUElement element) {
+		return !(element instanceof CategoryElement);
+	}
+
 	protected LicenseManager getLicenseManager() {
 		return policy.getLicenseManager();
 	}
commit 6cac89011211ee28d268eb7962eff449de1c3926
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 25 18:40:22 2008 +0000

    Bug 224472 -   	[ui] Installed Software list should provide more organization/nesting

31	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
30	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
index 7afed44..4d5c9c5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/InstalledIUElement.java
@@ -94,4 +94,35 @@ public class InstalledIUElement extends QueriedElement implements IIUElement {
 		return QueryProvider.INSTALLED_IUS;
 	}
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IIUElement#shouldShowChildren()
+	 */
+	public boolean shouldShowChildren() {
+		return true;
+	}
+
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof InstalledIUElement))
+			return false;
+		if (iu == null)
+			return false;
+		return iu.equals(((InstalledIUElement) obj).getIU());
+	}
+
+	public int hashCode() {
+		if (iu == null)
+			return 0;
+		return iu.hashCode();
+	}
+
+	public String toString() {
+		if (iu == null)
+			return "NULL"; //$NON-NLS-1$
+		return iu.toString();
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
index c5da438..3ce6e97 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/policy/IUViewQueryContext.java
@@ -40,6 +40,12 @@ public class IUViewQueryContext {
 	// Whether to group items in repos by category.  Note this only makes sense when the
 	// view type is AVAILABLE_VIEW_BY_REPO
 	private boolean useCategories = true;
+	// Whether to drill down into installed items
+	private boolean showInstallChildren = true;
+	// Whether to drill down into available items
+	private boolean showAvailableChildren = false;
+	// Whether to drill down into items in a provisioning plan
+	private boolean showProvisioningPlanChildren = true;
 
 	private String profileId = null;
 	// What repositories to show
@@ -134,4 +140,28 @@ public class IUViewQueryContext {
 	public boolean getUseCategories() {
 		return useCategories;
 	}
+
+	public boolean getShowInstallChildren() {
+		return showInstallChildren;
+	}
+
+	public void setShowInstallChildren(boolean showChildren) {
+		showInstallChildren = showChildren;
+	}
+
+	public boolean getShowAvailableChildren() {
+		return showAvailableChildren;
+	}
+
+	public void setShowAvailableChildren(boolean showChildren) {
+		showAvailableChildren = showChildren;
+	}
+
+	public boolean getShowProvisioningPlanChildren() {
+		return showProvisioningPlanChildren;
+	}
+
+	public void setShowProvisioningPlanChildren(boolean showChildren) {
+		showProvisioningPlanChildren = showChildren;
+	}
 }

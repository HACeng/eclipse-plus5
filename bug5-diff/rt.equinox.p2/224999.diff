commit 60bbe13e118a1c2e4d4f58a2c2408f7541c377ad
Author: Susan Franklin <sfranklin>
Date:   Wed Apr 23 00:16:46 2008 +0000

    Bug 224999 - [ui] support importing old style update site bookmarks into p2 update manager

2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
10	11	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
3	3	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
51	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ColocatedRepositoryAction.java
3	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
9	11	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
5	26	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java
5	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
134	22	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/provisional/p2/ui/sdk/RepositoryManipulationDialog.java
34	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeBeginningEvent.java
35	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeCompleteEvent.java
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
223	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryPropertyPage.java
21	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositoryElement.java
55	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java
35	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IRepositoryElement.java
49	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
21	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
0	31	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RepositoryElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddColocatedRepositoryOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java
23	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
8	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
2	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveColocatedRepositoryOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java
31	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RepositoryOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
19	17	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
11	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
13	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
index 927c25e..a678bdd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
@@ -61,8 +61,8 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
 		ArrayList urls = new ArrayList();
 		for (int i = 0; i < elements.length; i++) {
-			if (elements[i] instanceof RepositoryElement)
-				urls.add(((RepositoryElement) elements[i]).getLocation());
+			if (elements[i] instanceof IRepositoryElement)
+				urls.add(((IRepositoryElement) elements[i]).getLocation());
 		}
 		return new RemoveArtifactRepositoryOperation(ProvAdminUIMessages.ArtifactRepositoriesView_RemoveRepositoryOperationLabel, (URL[]) urls.toArray(new URL[urls.size()]));
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index ef567b1..50b361d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -83,8 +83,8 @@ public class MetadataRepositoriesView extends RepositoriesView {
 	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
 		ArrayList urls = new ArrayList();
 		for (int i = 0; i < elements.length; i++) {
-			if (elements[i] instanceof RepositoryElement)
-				urls.add(((RepositoryElement) elements[i]).getLocation());
+			if (elements[i] instanceof IRepositoryElement)
+				urls.add(((IRepositoryElement) elements[i]).getLocation());
 		}
 		return new RemoveMetadataRepositoryOperation(ProvAdminUIMessages.ArtifactRepositoriesView_RemoveRepositoryOperationLabel, (URL[]) urls.toArray(new URL[urls.size()]));
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index 7d8ba80..97c5b28 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -97,10 +97,10 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 				}
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
-					if (metaRepos.getMetadataRepositories() != null)
-						queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
-					else
-						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+					if (metaRepos.getMetadataRepositories() == null)
+						metaRepos.setRepoFlags(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+					queryable = new QueryableMetadataRepositoryManager(metaRepos);
+
 					if (useCategories)
 						// We are using categories, group into categories first.
 						return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, queryContext, true));
@@ -177,13 +177,12 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 			case IQueryProvider.METADATA_REPOS :
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
-					if (metaRepos.getMetadataRepositories() != null)
-						queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
-					else
-						queryable = new QueryableMetadataRepositoryManager(hideSystem ? IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM : IMetadataRepositoryManager.REPOSITORIES_ALL);
-				} else
-					queryable = new QueryableMetadataRepositoryManager(hideSystem ? IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM : IMetadataRepositoryManager.REPOSITORIES_ALL);
-				return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this, queryContext));
+					if (metaRepos.getMetadataRepositories() == null)
+						metaRepos.setRepoFlags(hideSystem ? IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM : IMetadataRepositoryManager.REPOSITORIES_ALL);
+					queryable = new QueryableMetadataRepositoryManager(metaRepos);
+					return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this, queryContext));
+				}
+				return null;
 			case IQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
 				return new ElementQueryDescriptor(queryable, new Query() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index e3348e2..ebab434 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -15,7 +15,7 @@ import java.util.List;
 import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.RepositoryContentProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
@@ -62,8 +62,8 @@ abstract class RepositoriesView extends ProvView {
 			Object[] elements = ((ITreeContentProvider) viewer.getContentProvider()).getElements(getInput());
 			ArrayList urls = new ArrayList();
 			for (int i = 0; i < elements.length; i++)
-				if (elements[i] instanceof RepositoryElement)
-					urls.add(((RepositoryElement) elements[i]).getLocation());
+				if (elements[i] instanceof IRepositoryElement)
+					urls.add(((IRepositoryElement) elements[i]).getLocation());
 			openAddRepositoryDialog(getShell());
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ColocatedRepositoryAction.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ColocatedRepositoryAction.java
new file mode 100644
index 0000000..f7c2526
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ColocatedRepositoryAction.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.ProvisioningAction;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
+import org.eclipse.jface.viewers.ISelectionProvider;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+public abstract class ColocatedRepositoryAction extends ProvisioningAction {
+
+	public ColocatedRepositoryAction(String label, String tooltipText, ISelectionProvider selectionProvider, Shell shell) {
+		super(label, selectionProvider, shell);
+		setToolTipText(tooltipText);
+		init();
+	}
+
+	public void run() {
+		ProvisioningOperationRunner.schedule(getOperation(), getShell(), StatusManager.SHOW | StatusManager.LOG);
+	}
+
+	protected abstract ProvisioningOperation getOperation();
+
+	protected URL[] getSelectedURLs(Object[] selectionArray) {
+		List urls = new ArrayList();
+		for (int i = 0; i < selectionArray.length; i++) {
+			if (selectionArray[i] instanceof MetadataRepositoryElement)
+				urls.add(((MetadataRepositoryElement) selectionArray[i]).getLocation());
+		}
+		return (URL[]) urls.toArray(new URL[urls.size()]);
+	}
+
+	protected void checkEnablement(Object[] selectionArray) {
+		setEnabled(getSelectedURLs(selectionArray).length > 0);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index 83dcbf8..18ed03d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -45,6 +45,8 @@ public class ProvSDKMessages extends NLS {
 	public static String RemoveColocatedRepositoryAction_Label;
 	public static String RemoveColocatedRepositoryAction_Tooltip;
 	public static String RepositoryManipulationDialog_AddButton;
+	public static String RepositoryManipulationDialog_Export;
+	public static String RepositoryManipulationDialog_Import;
 	public static String RepositoryManipulationDialog_LocationColumnHeader;
 	public static String RepositoryManipulationDialog_NameColumnHeader;
 	public static String RepositoryManipulationDialog_PropertiesButton;
@@ -129,6 +131,7 @@ public class ProvSDKMessages extends NLS {
 	public static String AutomaticUpdatesPreferencePage_RemindOnce;
 	public static String AutomaticUpdatesPopup_ClickToReviewDownloaded;
 	public static String AutomaticUpdatesPopup_ClickToReviewNotDownloaded;
+	public static String RepositoryManipulationDialog_SelectMessage;
 	public static String ProvisioningPreferencePage_AlwaysOpenWizard;
 	public static String ProvisioningPreferencePage_BrowsingPrefsGroup;
 	public static String ProvisioningPreferencePage_ShowLatestVersions;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index bd826e1..b50fdea 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -101,10 +101,9 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 				// Showing child IU's of some repositories
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
-					if (metaRepos.getMetadataRepositories() != null)
-						queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
-					else
-						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+					if (metaRepos.getMetadataRepositories() == null)
+						metaRepos.setRepoFlags(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+					queryable = new QueryableMetadataRepositoryManager(metaRepos);
 
 					if (availableViewQueryContext != null) {
 						if (availableViewQueryContext.getViewType() == AvailableIUViewQueryContext.VIEW_FLAT) {
@@ -183,14 +182,13 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 			case IQueryProvider.METADATA_REPOS :
 				if (element instanceof MetadataRepositories) {
 					MetadataRepositories metaRepos = (MetadataRepositories) element;
-					if (metaRepos.getMetadataRepositories() != null)
-						queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
-					else
-						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+					if (metaRepos.getMetadataRepositories() == null)
+						metaRepos.setRepoFlags(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+					queryable = new QueryableMetadataRepositoryManager(metaRepos);
 					metaRepos.setQueryable(queryable);
-				} else
-					queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
-				return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this, queryContext));
+					return new ElementQueryDescriptor(queryable, null, new MetadataRepositoryElementCollector(this, queryContext));
+				}
+				return null;
 			case IQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
 				return new ElementQueryDescriptor(queryable, new Query() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java
index 0463a90..82924f8 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RemoveColocatedRepositoryAction.java
@@ -11,40 +11,19 @@
 
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
-import org.eclipse.equinox.internal.provisional.p2.ui.actions.ProvisioningAction;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveColocatedRepositoryOperation;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.statushandlers.StatusManager;
 
-public class RemoveColocatedRepositoryAction extends ProvisioningAction {
+public class RemoveColocatedRepositoryAction extends ColocatedRepositoryAction {
 
 	public RemoveColocatedRepositoryAction(ISelectionProvider selectionProvider, Shell shell) {
-		super(ProvSDKMessages.RemoveColocatedRepositoryAction_Label, selectionProvider, shell);
-		setToolTipText(ProvSDKMessages.RemoveColocatedRepositoryAction_Tooltip);
-		init();
-	}
-
-	public void run() {
-		RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvSDKMessages.RepositoryManipulationDialog_RemoveOperationLabel, getSelectedURLs(getStructuredSelection().toArray()));
-		ProvisioningOperationRunner.run(op, getShell(), StatusManager.SHOW | StatusManager.LOG);
-	}
+		super(ProvSDKMessages.RemoveColocatedRepositoryAction_Label, ProvSDKMessages.RemoveColocatedRepositoryAction_Tooltip, selectionProvider, shell);
 
-	private URL[] getSelectedURLs(Object[] selectionArray) {
-		List urls = new ArrayList();
-		for (int i = 0; i < selectionArray.length; i++) {
-			if (selectionArray[i] instanceof MetadataRepositoryElement)
-				urls.add(((MetadataRepositoryElement) selectionArray[i]).getLocation());
-		}
-		return (URL[]) urls.toArray(new URL[urls.size()]);
 	}
 
-	protected void checkEnablement(Object[] selectionArray) {
-		setEnabled(getSelectedURLs(selectionArray).length > 0);
+	protected ProvisioningOperation getOperation() {
+		return new RemoveColocatedRepositoryOperation(ProvSDKMessages.RepositoryManipulationDialog_RemoveOperationLabel, getSelectedURLs(getStructuredSelection().toArray()));
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 4a6fea6..0ec96b3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -51,12 +51,15 @@ UpdateHandler_SDKUpdateUIMessageTitle=Software Updates
 RemoveColocatedRepositoryAction_Label=&Remove site...
 RemoveColocatedRepositoryAction_Tooltip=Remove one or more sites used to access the available software
 RepositoryManipulationDialog_AddButton=&Add...
+RepositoryManipulationDialog_Export=E&xport...
+RepositoryManipulationDialog_Import=&Import...
 RepositoryManipulationDialog_LocationColumnHeader=Location
 RepositoryManipulationDialog_NameColumnHeader=Name
-RepositoryManipulationDialog_PropertiesButton=Properties...
+RepositoryManipulationDialog_PropertiesButton=&Properties...
 RepositoryManipulationDialog_RemoveButton=&Remove
 RepositoryManipulationDialog_RemoveOperationLabel=Remove
-RepositoryManipulationDialog_UpdateSitesDialogTitle=Update Sites
+RepositoryManipulationDialog_UpdateSitesDialogTitle=Available Software Sites
+RepositoryManipulationDialog_SelectMessage=Check each update site that should be used to find available software.
 SchedulerStartup_day=Every day
 SchedulerStartup_Monday=Every Monday
 SchedulerStartup_Tuesday=Every Tuesday
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/provisional/p2/ui/sdk/RepositoryManipulationDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/provisional/p2/ui/sdk/RepositoryManipulationDialog.java
index 911020f..c7a520f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/provisional/p2/ui/sdk/RepositoryManipulationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/provisional/p2/ui/sdk/RepositoryManipulationDialog.java
@@ -10,18 +10,25 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.sdk;
 
+import java.net.URL;
+import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.sdk.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.IRepositoryManipulator;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.RepositoryManipulatorDropTarget;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
+import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.viewers.TableViewer;
+import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.window.SameShellProvider;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.BusyIndicator;
 import org.eclipse.swt.dnd.*;
 import org.eclipse.swt.events.DisposeEvent;
 import org.eclipse.swt.events.DisposeListener;
@@ -30,6 +37,7 @@ import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.dialogs.PropertyDialogAction;
+import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
  * Dialog that allows users to update, add, or remove repositories.
@@ -37,14 +45,15 @@ import org.eclipse.ui.dialogs.PropertyDialogAction;
  * @since 3.4
  */
 public class RepositoryManipulationDialog extends TrayDialog {
-
 	private final static int WIDTH_IN_DLUS = 480;
 	private final static int HEIGHT_IN_DLUS = 240;
-	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
+	protected static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
 
 	StructuredViewerProvisioningListener listener;
-	TableViewer repositoryViewer;
-	IRepositoryManipulator manipulator;
+	private CheckboxTableViewer repositoryViewer;
+	private IRepositoryManipulator manipulator;
+	private RepositoryContentProvider contentProvider;
+	private boolean changed = false;
 
 	/**
 	 * Create an instance of this Dialog.
@@ -66,25 +75,45 @@ public class RepositoryManipulationDialog extends TrayDialog {
 
 		GridLayout layout = new GridLayout();
 		layout.numColumns = 2;
-		layout.marginWidth = convertHorizontalDLUsToPixels(2);
-		layout.marginHeight = convertVerticalDLUsToPixels(2);
-
+		layout.marginWidth = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
+		layout.marginHeight = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
+		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
+		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
 		composite.setLayout(layout);
 
+		Label label = new Label(composite, SWT.NONE);
+		label.setText(ProvSDKMessages.RepositoryManipulationDialog_SelectMessage);
+		GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
+		data.horizontalSpan = 2;
+		data.horizontalIndent = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
+		label.setLayoutData(data);
+
 		// Table of available repositories
-		repositoryViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		setTableColumns(repositoryViewer.getTable());
-		repositoryViewer.setContentProvider(new RepositoryContentProvider(ProvSDKUIActivator.getDefault().getQueryProvider()));
+		Table table = new Table(composite, SWT.CHECK | SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		repositoryViewer = new CheckboxTableViewer(table);
+		setTableColumns(table);
+		contentProvider = new RepositoryContentProvider(ProvSDKUIActivator.getDefault().getQueryProvider());
+		repositoryViewer.setComparer(new ProvElementComparer());
+		repositoryViewer.setContentProvider(contentProvider);
 		repositoryViewer.setLabelProvider(new ProvElementLabelProvider());
 
 		// Input last
 		repositoryViewer.setInput(getInput());
+		setCheckState();
 
+		repositoryViewer.addCheckStateListener(new ICheckStateListener() {
+			public void checkStateChanged(CheckStateChangedEvent event) {
+				if (event.getElement() instanceof MetadataRepositoryElement) {
+					((MetadataRepositoryElement) event.getElement()).setEnabled(event.getChecked());
+					changed = true;
+				}
+			}
+		});
 		DropTarget target = new DropTarget(repositoryViewer.getControl(), DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);
 		target.setTransfer(new Transfer[] {URLTransfer.getInstance(), FileTransfer.getInstance()});
 		target.addDropListener(new RepositoryManipulatorDropTarget(manipulator, repositoryViewer.getControl()));
 
-		GridData data = new GridData(GridData.FILL_BOTH);
+		data = new GridData(GridData.FILL_BOTH);
 		data.grabExcessHorizontalSpace = true;
 		data.grabExcessVerticalSpace = true;
 		data.widthHint = convertHorizontalDLUsToPixels(WIDTH_IN_DLUS);
@@ -94,8 +123,9 @@ public class RepositoryManipulationDialog extends TrayDialog {
 		// Vertical buttons
 		Composite verticalButtonBar = (Composite) createVerticalButtonBar(composite);
 		data = new GridData(GridData.FILL_VERTICAL);
+		data.verticalIndent = convertVerticalDLUsToPixels(IDialogConstants.BUTTON_BAR_HEIGHT);
 		verticalButtonBar.setLayoutData(data);
-		listener = new StructuredViewerProvisioningListener(repositoryViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, ProvSDKUIActivator.getDefault().getQueryProvider());
+		listener = getViewerProvisioningListener();
 		ProvUI.addProvisioningListener(listener);
 		composite.addDisposeListener(new DisposeListener() {
 			public void widgetDisposed(DisposeEvent event) {
@@ -169,6 +199,7 @@ public class RepositoryManipulationDialog extends TrayDialog {
 	private Control createVerticalButtonBar(Composite parent) {
 		// Create composite.
 		Composite composite = new Composite(parent, SWT.NULL);
+		initializeDialogUnits(composite);
 
 		// create a layout with spacing and margins appropriate for the font
 		// size.
@@ -180,20 +211,101 @@ public class RepositoryManipulationDialog extends TrayDialog {
 		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
 		composite.setLayout(layout);
 
-		// Add the buttons to the button bar.
-		Button button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_PropertiesButton, false);
+		createVerticalButtons(composite);
+		return composite;
+	}
+
+	private void createVerticalButtons(Composite parent) {
+		Button button = createVerticalButton(parent, ProvSDKMessages.RepositoryManipulationDialog_PropertiesButton, false);
 		button.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), repositoryViewer));
-		button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_AddButton, false);
+		// spacer
+		new Label(parent, SWT.NONE);
+
+		button = createVerticalButton(parent, ProvSDKMessages.RepositoryManipulationDialog_AddButton, false);
 		button.setData(BUTTONACTION, new AddColocatedRepositoryAction(repositoryViewer, getShell()));
-		button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_RemoveButton, false);
+		button = createVerticalButton(parent, ProvSDKMessages.RepositoryManipulationDialog_RemoveButton, false);
 		button.setData(BUTTONACTION, new RemoveColocatedRepositoryAction(repositoryViewer, getShell()));
-		return composite;
+
+		// spacer
+		new Label(parent, SWT.NONE);
+
+		button = createVerticalButton(parent, ProvSDKMessages.RepositoryManipulationDialog_Import, false);
+		button.setData(BUTTONACTION, new Action() {
+			public void run() {
+				BusyIndicator.showWhile(getShell().getDisplay(), new Runnable() {
+					public void run() {
+						UpdateManagerCompatibility.importSites(getShell());
+					}
+				});
+			}
+		});
+		button = createVerticalButton(parent, ProvSDKMessages.RepositoryManipulationDialog_Export, false);
+		button.setData(BUTTONACTION, new Action() {
+			public void run() {
+				final URL[] repos;
+				try {
+					MetadataRepositories input = (MetadataRepositories) repositoryViewer.getInput();
+					if (input.getMetadataRepositories() != null)
+						repos = input.getMetadataRepositories();
+					else
+						repos = ProvisioningUtil.getMetadataRepositories(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
+				} catch (ProvisionException e) {
+					ProvUI.handleException(e, null, StatusManager.LOG | StatusManager.SHOW);
+					return;
+				}
+				BusyIndicator.showWhile(getShell().getDisplay(), new Runnable() {
+					public void run() {
+						UpdateManagerCompatibility.exportSites(getShell(), getElements());
+					}
+				});
+			}
+		});
 	}
 
-	private Object getInput() {
+	private MetadataRepositories getInput() {
 		MetadataRepositories input = new MetadataRepositories();
+		input.setIncludeDisabledRepositories(true);
 		input.setQueryProvider(ProvSDKUIActivator.getDefault().getQueryProvider());
 		input.setQueryContext(new AvailableIUViewQueryContext(AvailableIUViewQueryContext.VIEW_BY_REPO));
 		return input;
 	}
+
+	protected void okPressed() {
+		if (changed)
+			ElementUtils.updateRepositoryUsingElements(getElements(), getShell());
+		super.okPressed();
+	}
+
+	private StructuredViewerProvisioningListener getViewerProvisioningListener() {
+		return new StructuredViewerProvisioningListener(repositoryViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, ProvSDKUIActivator.getDefault().getQueryProvider()) {
+			protected void repositoryDiscovered(RepositoryEvent e) {
+				asyncRefresh();
+			}
+
+			protected void repositoryChanged(RepositoryEvent e) {
+				asyncRefresh();
+			}
+
+			protected void refreshAll() {
+				super.refreshAll();
+				setCheckState();
+			}
+		};
+	}
+
+	private void setCheckState() {
+		MetadataRepositoryElement[] elements = getElements();
+		for (int i = 0; i < elements.length; i++)
+			repositoryViewer.setChecked(elements[i], elements[i].isEnabled());
+	}
+
+	private MetadataRepositoryElement[] getElements() {
+		TableItem[] items = repositoryViewer.getTable().getItems();
+		ArrayList list = new ArrayList(items.length);
+		for (int i = 0; i < items.length; i++) {
+			if (items[i].getData() instanceof MetadataRepositoryElement)
+				list.add(items[i].getData());
+		}
+		return (MetadataRepositoryElement[]) list.toArray(new MetadataRepositoryElement[list.size()]);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeBeginningEvent.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeBeginningEvent.java
new file mode 100644
index 0000000..74a88a5
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeBeginningEvent.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui;
+
+import java.util.EventObject;
+
+/**
+ * Internal UI event used to signify that a batch change in which
+ * we were ignoring listeners is done.
+ * 
+ * @since 3.4
+ */
+public class BatchChangeBeginningEvent extends EventObject {
+
+	private static final long serialVersionUID = -7529156836242774280L;
+
+	/**
+	 * Construct a new instance of this event.
+	 * @param source the source of the event
+	 */
+	public BatchChangeBeginningEvent(Object source) {
+		super(source);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeCompleteEvent.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeCompleteEvent.java
new file mode 100644
index 0000000..7052b18
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/BatchChangeCompleteEvent.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui;
+
+import java.util.EventObject;
+
+/**
+ * Event used to signify that a batch change is about
+ * to begin.  We should ignore listeners until it is
+ * done.
+ * 
+ * @since 3.4
+ */
+public class BatchChangeCompleteEvent extends EventObject {
+
+	private static final long serialVersionUID = -4513769756968621852L;
+
+	/**
+	 * Construct a new instance of this event.
+	 * @param source the source of the event
+	 */
+	public BatchChangeCompleteEvent(Object source) {
+		super(source);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
index e60c62e..3c40305 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
@@ -145,6 +145,14 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		getProvisioningEventBus().addListener(listener);
 	}
 
+	public void signalBatchOperationStart() {
+		getProvisioningEventBus().publishEvent(new BatchChangeBeginningEvent(this));
+	}
+
+	public void signalBatchOperationComplete() {
+		getProvisioningEventBus().publishEvent(new BatchChangeCompleteEvent(this));
+	}
+
 	private IProvisioningEventBus getProvisioningEventBus() {
 		ServiceReference busReference = context.getServiceReference(IProvisioningEventBus.SERVICE_NAME);
 		if (busReference == null)
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index c415da6..59756cc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -156,6 +156,10 @@ public class ProvUIMessages extends NLS {
 
 	// Operations
 	public static String URLValidator_UnrecognizedURL;
+	public static String UpdateManagerCompatibility_ExportSitesTitle;
+	public static String UpdateManagerCompatibility_ImportSitesTitle;
+	public static String UpdateManagerCompatibility_InvalidSiteFileMessage;
+	public static String UpdateManagerCompatibility_InvalidSitesTitle;
 	public static String UpdateManagerCompatibility_UnableToOpenFindAndInstall;
 	public static String UpdateManagerCompatibility_UnableToOpenManageConfiguration;
 	public static String UpdateOperation_NothingToUpdate;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
index a9e6455..52b8817 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Label;
 
@@ -93,6 +94,8 @@ public abstract class UpdateOrInstallWizardPage extends ProfileModificationWizar
 
 	protected void createSizingInfo(Composite parent) {
 		sizeInfo = new Label(parent, SWT.NONE);
+		GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
+		sizeInfo.setLayoutData(data);
 		updateSizingInfo();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 8432b63..65fb7af 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -101,8 +101,12 @@ UpdateAction_UpdatesAvailableTitle=Available Updates
 UpdateOperation_NothingToUpdate=There is nothing to update.
 UpdateOrInstallWizardPage_Size=Size: {0}
 URLValidator_UnrecognizedURL=The URL {0} is not recognized.
-UpdateManagerCompatibility_UnableToOpenFindAndInstall=Unable to open the Find and Install wizard.
-UpdateManagerCompatibility_UnableToOpenManageConfiguration=Unable to open the Manage Configuration dialog
+UpdateManagerCompatibility_ExportSitesTitle=Export Sites
+UpdateManagerCompatibility_ImportSitesTitle=Import Sites
+UpdateManagerCompatibility_InvalidSiteFileMessage=The selected file does not contain any updates sites.  Please select another file.
+UpdateManagerCompatibility_InvalidSitesTitle=Invalid Sites File
+UpdateManagerCompatibility_UnableToOpenFindAndInstall=Unable to open the Classic Update Manager 'Find and Install' wizard.
+UpdateManagerCompatibility_UnableToOpenManageConfiguration=Unable to open the Classic Update Manager 'Manage Configuration' dialog.
 CategoryElementCollector_Uncategorized=Uncategorized
 InstallDialog_InstallSelectionMessage=Review and confirm that the checked items will be installed.
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
index 9ffaea5..7c344c1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvUI.java
@@ -230,4 +230,12 @@ public class ProvUI {
 	public static void removeProvisioningListener(StructuredViewerProvisioningListener listener) {
 		ProvUIActivator.getDefault().removeProvisioningListener(listener);
 	}
+
+	public static void startBatchOperation() {
+		ProvUIActivator.getDefault().signalBatchOperationStart();
+	}
+
+	public static void endBatchOperation() {
+		ProvUIActivator.getDefault().signalBatchOperationComplete();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
index f0e1bed..545be28 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/UpdateManagerCompatibility.java
@@ -10,6 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui;
 
+import java.io.*;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Vector;
+import javax.xml.parsers.*;
 import org.eclipse.core.commands.*;
 import org.eclipse.core.commands.common.NotDefinedException;
 import org.eclipse.core.runtime.IStatus;
@@ -20,10 +26,18 @@ import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
 import org.eclipse.equinox.internal.provisional.p2.engine.Operand;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.ElementUtils;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositoryElement;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.widgets.FileDialog;
+import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.commands.ICommandService;
 import org.eclipse.ui.handlers.IHandlerService;
 import org.eclipse.ui.statushandlers.StatusManager;
+import org.w3c.dom.*;
+import org.xml.sax.SAXException;
 
 /**
  * Utility methods involving compatibility with the Eclipse Update Manager.
@@ -38,6 +52,129 @@ public class UpdateManagerCompatibility {
 	// These values rely on the command markup in org.eclipse.ui.ide that defines the update commands
 	private static final String UPDATE_MANAGER_FIND_AND_INSTALL = "org.eclipse.ui.update.findAndInstallUpdates"; //$NON-NLS-1$
 	private static final String UPDATE_MANAGER_MANAGE_CONFIGURATION = "org.eclipse.ui.update.manageConfiguration"; //$NON-NLS-1$
+	private static final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+
+	private static void parse(String fileName, Vector bookmarks) {
+		File file = new File(fileName);
+		if (!file.exists())
+			return;
+
+		try {
+			documentBuilderFactory.setNamespaceAware(true);
+			DocumentBuilder parser = documentBuilderFactory.newDocumentBuilder();
+			Document doc = parser.parse(file);
+			Node root = doc.getDocumentElement();
+			processRoot(root, bookmarks);
+		} catch (ParserConfigurationException e) {
+			logFail(e);
+		} catch (SAXException e) {
+			logFail(e);
+		} catch (IOException e) {
+			logFail(e);
+		}
+	}
+
+	private static MetadataRepositoryElement[] getSites(Vector bookmarks) {
+		ArrayList result = new ArrayList();
+		for (int i = 0; i < bookmarks.size(); i++) {
+			if (bookmarks.get(i) instanceof MetadataRepositoryElement)
+				result.add(bookmarks.get(i));
+		}
+		return (MetadataRepositoryElement[]) result.toArray(new MetadataRepositoryElement[result.size()]);
+	}
+
+	private static void processRoot(Node root, Vector bookmarks) {
+		if (root.getNodeName().equals("bookmarks")) { //$NON-NLS-1$
+			NodeList children = root.getChildNodes();
+			processChildren(children, bookmarks);
+		}
+	}
+
+	private static void processChildren(NodeList children, Vector bookmarks) {
+		for (int i = 0; i < children.getLength(); i++) {
+			Node child = children.item(i);
+			if (child.getNodeType() == Node.ELEMENT_NODE) {
+				if (child.getNodeName().equals("site")) { //$NON-NLS-1$
+					createSite(child, bookmarks);
+				} else if (child.getNodeName().equals("folder")) { //$NON-NLS-1$
+					createFolder(child, bookmarks);
+				}
+			}
+		}
+	}
+
+	private static void createSite(Node child, Vector bookmarks) {
+		URL url = null;
+		try {
+			url = new URL(getAttribute(child, "url")); //$NON-NLS-1$
+		} catch (MalformedURLException e) {
+			logFail(e);
+			return;
+		}
+
+		String sel = getAttribute(child, "selected"); //$NON-NLS-1$
+		boolean selected = (sel != null && sel.equals("true")); //$NON-NLS-1$
+		bookmarks.add(new MetadataRepositoryElement(url, selected));
+	}
+
+	private static void createFolder(Node child, Vector bookmarks) {
+		if (child.hasChildNodes())
+			processChildren(child.getChildNodes(), bookmarks);
+	}
+
+	private static String getAttribute(Node node, String name) {
+		NamedNodeMap atts = node.getAttributes();
+		Node att = atts.getNamedItem(name);
+		if (att != null) {
+			return att.getNodeValue();
+		}
+		return ""; //$NON-NLS-1$
+	}
+
+	private static void store(String fileName, Vector bookmarks) {
+		FileOutputStream fos = null;
+		OutputStreamWriter osw = null;
+		PrintWriter writer = null;
+		try {
+			fos = new FileOutputStream(fileName);
+			osw = new OutputStreamWriter(fos, "UTF8"); //$NON-NLS-1$
+			writer = new PrintWriter(osw);
+			writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"); //$NON-NLS-1$
+			writer.println("<bookmarks>"); //$NON-NLS-1$
+			for (int i = 0; i < bookmarks.size(); i++) {
+				Object obj = bookmarks.get(i);
+				writeObject("   ", obj, writer); //$NON-NLS-1$
+			}
+		} catch (IOException e) {
+			logFail(e);
+		} finally {
+			writer.println("</bookmarks>"); //$NON-NLS-1$
+			writer.flush();
+			writer.close();
+			try {
+				if (osw != null)
+					osw.close();
+			} catch (IOException e1) {
+				logFail(e1);
+			}
+			try {
+				if (fos != null)
+					fos.close();
+			} catch (IOException e2) {
+				logFail(e2);
+			}
+		}
+	}
+
+	private static void writeObject(String indent, Object obj, PrintWriter writer) {
+		if (obj instanceof MetadataRepositoryElement) {
+			MetadataRepositoryElement element = (MetadataRepositoryElement) obj;
+			String sel = element.isEnabled() ? "true" : "false"; //$NON-NLS-1$ //$NON-NLS-2$
+			String name = element.getName();
+			writer.print(indent + "<site url=\"" + element.getLocation() + "\" selected=\"" + sel + "\" name=\"" + getWritableXMLString(name) + "\""); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 
+			writer.println("/>"); //$NON-NLS-1$
+		}
+	}
 
 	public static boolean requiresInstallHandlerSupport(ProvisioningPlan plan) {
 		Operand[] operands = plan.getOperands();
@@ -53,6 +190,56 @@ public class UpdateManagerCompatibility {
 	}
 
 	/**
+	 * Prompt the user for a file and import the sites specified in that
+	 * file.
+	 * @param shell the shell used to parent any dialogs used.
+	 */
+	public static void importSites(Shell shell) {
+		FileDialog dialog = new FileDialog(shell);
+		dialog.setText(ProvUIMessages.UpdateManagerCompatibility_ImportSitesTitle);
+		dialog.setFilterExtensions(new String[] {"*.xml", "*"}); //$NON-NLS-1$ //$NON-NLS-2$
+
+		MetadataRepositoryElement[] sites = null;
+
+		String bookmarksFile = dialog.open();
+		while (bookmarksFile != null && sites == null) {
+			File file = new File(bookmarksFile);
+			Vector bookmarks = new Vector();
+			parse(file.getAbsolutePath(), bookmarks);
+			sites = getSites(bookmarks);
+			if (sites == null || sites.length == 0) {
+				MessageDialog.openInformation(shell, ProvUIMessages.UpdateManagerCompatibility_InvalidSitesTitle, ProvUIMessages.UpdateManagerCompatibility_InvalidSiteFileMessage);
+				bookmarksFile = dialog.open();
+			} else {
+				ElementUtils.updateRepositoryUsingElements(getSites(bookmarks), shell);
+			}
+		}
+	}
+
+	/**
+	 * Export the specified list of sites to a bookmarks file that
+	 * can be read later.
+	 * 
+	 * @param shell the shell used to parent the export dialog
+	 * @param sites the sites to export
+	 */
+
+	public static void exportSites(Shell shell, MetadataRepositoryElement[] sites) {
+		FileDialog dialog = new FileDialog(shell, SWT.SAVE);
+		dialog.setText(ProvUIMessages.UpdateManagerCompatibility_ExportSitesTitle);
+		dialog.setFileName("bookmarks.xml"); //$NON-NLS-1$
+
+		String bookmarksFile = dialog.open();
+		if (bookmarksFile == null)
+			return;
+
+		Vector bookmarks = new Vector(sites.length);
+		for (int i = 0; i < sites.length; i++)
+			bookmarks.add(sites[i]);
+		store(bookmarksFile, bookmarks);
+	}
+
+	/**
 	 * Open the old UpdateManager installer UI using the specified shell. 
 	 * We do not call the UpdateManagerUI class directly because we want to be able to be configured 
 	 * without requiring those plug-ins.  Instead, we invoke a known command.
@@ -90,9 +277,45 @@ public class UpdateManagerCompatibility {
 		}
 	}
 
+	private static void logFail(Throwable t) {
+		Status failStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, t.getLocalizedMessage(), t);
+		ProvUI.reportStatus(failStatus, StatusManager.LOG);
+
+	}
+
 	private static void reportFail(String message, Throwable t) {
 		Status failStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, message, t);
 		ProvUI.reportStatus(failStatus, StatusManager.BLOCK | StatusManager.LOG);
 
 	}
+
+	private static String getWritableXMLString(String value) {
+		StringBuffer buf = new StringBuffer();
+		if (value == null)
+			return buf.toString();
+		for (int i = 0; i < value.length(); i++) {
+			char c = value.charAt(i);
+			switch (c) {
+				case '&' :
+					buf.append("&amp;"); //$NON-NLS-1$
+					break;
+				case '<' :
+					buf.append("&lt;"); //$NON-NLS-1$
+					break;
+				case '>' :
+					buf.append("&gt;"); //$NON-NLS-1$
+					break;
+				case '\'' :
+					buf.append("&apos;"); //$NON-NLS-1$
+					break;
+				case '\"' :
+					buf.append("&quot;"); //$NON-NLS-1$
+					break;
+				default :
+					buf.append(c);
+					break;
+			}
+		}
+		return buf.toString();
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 71e3538..e1b51a7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -24,7 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
@@ -289,8 +289,8 @@ public class AvailableIUGroup extends StructuredIUGroup {
 				if (tree != null && !tree.isDisposed()) {
 					TreeItem[] items = tree.getItems();
 					for (int i = 0; i < items.length; i++) {
-						if (items[i].getData() instanceof RepositoryElement) {
-							URL url = ((RepositoryElement) items[i].getData()).getLocation();
+						if (items[i].getData() instanceof IRepositoryElement) {
+							URL url = ((IRepositoryElement) items[i].getData()).getLocation();
 							if (url.toExternalForm().equals(location.toExternalForm())) {
 								viewer.expandToLevel(items[i].getData(), AbstractTreeViewer.ALL_LEVELS);
 								tree.select(items[i]);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryPropertyPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryPropertyPage.java
index f259794..2b10613 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryPropertyPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryPropertyPage.java
@@ -12,7 +12,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.layout.GridData;
@@ -27,7 +27,7 @@ import org.eclipse.ui.dialogs.PropertyPage;
  */
 public class RepositoryPropertyPage extends PropertyPage {
 
-	private RepositoryElement repositoryElement;
+	private IRepositoryElement repositoryElement;
 	private Composite composite;
 	private Text name;
 	private Text url;
@@ -85,9 +85,9 @@ public class RepositoryPropertyPage extends PropertyPage {
 		description.setText(repositoryElement.getDescription());
 	}
 
-	protected RepositoryElement getRepositoryElement() {
+	protected IRepositoryElement getRepositoryElement() {
 		if (repositoryElement == null) {
-			repositoryElement = (RepositoryElement) ProvUI.getAdapter(getElement(), RepositoryElement.class);
+			repositoryElement = (IRepositoryElement) ProvUI.getAdapter(getElement(), IRepositoryElement.class);
 		}
 		return repositoryElement;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositoryElement.java
index a420c21..d920b7f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositoryElement.java
@@ -32,13 +32,19 @@ import org.eclipse.ui.progress.IElementCollector;
  * 
  * @since 3.4
  */
-public class ArtifactRepositoryElement extends ProvElement implements IDeferredWorkbenchAdapter, RepositoryElement {
+public class ArtifactRepositoryElement extends ProvElement implements IDeferredWorkbenchAdapter, IRepositoryElement {
 
 	URL url;
 	IArtifactRepository repo;
+	boolean isEnabled;
 
 	public ArtifactRepositoryElement(URL url) {
+		this(url, true);
+	}
+
+	public ArtifactRepositoryElement(URL url, boolean isEnabled) {
 		this.url = url;
+		this.isEnabled = isEnabled;
 	}
 
 	public Object getAdapter(Class adapter) {
@@ -139,4 +145,18 @@ public class ArtifactRepositoryElement extends ProvElement implements IDeferredW
 			return ""; //$NON-NLS-1$
 		}
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement#isEnabled()
+	 */
+	public boolean isEnabled() {
+		return isEnabled;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement#setEnabled(boolean)
+	 */
+	public void setEnabled(boolean enabled) {
+		isEnabled = enabled;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java
index 28f2b08..22cd23c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java
@@ -11,9 +11,16 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
+import java.net.URL;
 import java.util.*;
+import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.swt.widgets.Shell;
 
 /**
  * Utility methods for manipulating model elements.
@@ -48,4 +55,52 @@ public class ElementUtils {
 		}
 		return ius;
 	}
+
+	public static void updateRepositoryUsingElements(final MetadataRepositoryElement[] elements, final Shell shell) {
+		Job job = new Job("Updating Repository Information") {
+			public IStatus run(IProgressMonitor monitor) {
+				ProvUI.startBatchOperation();
+				try {
+					URL[] currentlyEnabled = ProvisioningUtil.getMetadataRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
+					URL[] currentlyDisabled = ProvisioningUtil.getMetadataRepositories(IMetadataRepositoryManager.REPOSITORIES_DISABLED);
+					for (int i = 0; i < elements.length; i++) {
+						URL location = elements[i].getLocation();
+						if (elements[i].isEnabled()) {
+							if (containsURL(currentlyDisabled, location))
+								// It should be enabled and is not currently
+								ProvisioningUtil.setColocatedRepositoryEnablement(location, true);
+							else if (!containsURL(currentlyEnabled, location)) {
+								// It is not known as enabled or disabled.  Add it.
+								ProvisioningUtil.addMetadataRepository(location);
+								ProvisioningUtil.addArtifactRepository(location);
+							}
+						} else {
+							if (containsURL(currentlyEnabled, location))
+								// It should be disabled, and is currently enabled
+								ProvisioningUtil.setColocatedRepositoryEnablement(location, false);
+							else if (!containsURL(currentlyDisabled, location)) {
+								// It is not known as enabled or disabled.  Add it and then disable it.
+								ProvisioningUtil.addMetadataRepository(location);
+								ProvisioningUtil.addArtifactRepository(location);
+								ProvisioningUtil.setColocatedRepositoryEnablement(location, false);
+							}
+						}
+					}
+				} catch (ProvisionException e) {
+					return e.getStatus();
+				} finally {
+					ProvUI.endBatchOperation();
+				}
+				return Status.OK_STATUS;
+			}
+		};
+		job.schedule();
+	}
+
+	static boolean containsURL(URL[] locations, URL url) {
+		for (int i = 0; i < locations.length; i++)
+			if (locations[i].toExternalForm().equals(url.toExternalForm()))
+				return true;
+		return false;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IRepositoryElement.java
new file mode 100644
index 0000000..53c8444
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IRepositoryElement.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui.model;
+
+import java.net.URL;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+
+/**
+ * Interface for elements that represent repositories.
+ * 
+ * @since 3.4
+ */
+public interface IRepositoryElement {
+
+	public URL getLocation();
+
+	public String getName();
+
+	public String getDescription();
+
+	public boolean isEnabled();
+
+	public void setEnabled(boolean enabled);
+
+	public IRepository getRepository(IProgressMonitor monitor);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
index 0edf082..9cbafbf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.model;
 import java.net.URL;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 
@@ -29,6 +30,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescript
 public class MetadataRepositories extends RemoteQueriedElement {
 
 	private URL[] metadataRepositories = null;
+	private boolean includeDisabled = false;
+	private int repoFlags = IMetadataRepositoryManager.REPOSITORIES_ALL;
 
 	public MetadataRepositories() {
 		super();
@@ -38,6 +41,52 @@ public class MetadataRepositories extends RemoteQueriedElement {
 		this.metadataRepositories = metadataRepositories;
 	}
 
+	/**
+	 * Get whether disabled repositories should be included in queries when no repositories
+	 * have been specified.  This boolean is used because the flags specified when getting
+	 * repositories from a repository manager are treated as an AND, and we want to permit
+	 * aggregating disabled repositories along with other flags.
+	 * 
+	 * @return includeDisabled <code>true</code> if disabled repositories should be included and
+	 * <code>false</code> if they should not be included.  
+	 */
+	public boolean getIncludeDisabledRepositories() {
+		return includeDisabled;
+	}
+
+	/**
+	 * Set whether disabled repositories should be included in queries when no repositories
+	 * have been specified.  This boolean is used because the flags specified when getting
+	 * repositories from a repository manager are treated as an AND, and we want to permit
+	 * aggregating disabled repositories along with other flags.
+	 * 
+	 * @param includeDisabled <code>true</code> if disabled repositories should be included and
+	 * <code>false</code> if they should not be included.  
+	 */
+	public void setIncludeDisabledRepositories(boolean includeDisabled) {
+		this.includeDisabled = includeDisabled;
+	}
+
+	/**
+	 * Get the flags that should be used to get the repositories when no repositories
+	 * are specified.
+	 * 
+	 * @return the integer repository manager flags
+	 */
+	public int getRepoFlags() {
+		return repoFlags;
+	}
+
+	/**
+	 * Set the flags that should be used to get the repositories when no repositories
+	 * are specified.
+	 * 
+	 * @param flags the integer repository manager flags
+	 */
+	public void setRepoFlags(int flags) {
+		this.repoFlags = flags;
+	}
+
 	/*
 	 * Overridden to check the query context.  We might
 	 * be showing repositories, or we might be flattening the 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
index 6787f0e..6a78de1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
@@ -30,12 +30,18 @@ import org.eclipse.osgi.util.NLS;
  * 
  * @since 3.4
  */
-public class MetadataRepositoryElement extends RemoteQueriedElement implements RepositoryElement, IUContainerElement {
+public class MetadataRepositoryElement extends RemoteQueriedElement implements IRepositoryElement, IUContainerElement {
 
 	URL url;
+	boolean isEnabled;
 
 	public MetadataRepositoryElement(URL url) {
+		this(url, true);
+	}
+
+	public MetadataRepositoryElement(URL url, boolean isEnabled) {
 		this.url = url;
+		this.isEnabled = isEnabled;
 	}
 
 	public Object getAdapter(Class adapter) {
@@ -146,4 +152,18 @@ public class MetadataRepositoryElement extends RemoteQueriedElement implements R
 			return new IInstallableUnit[0];
 		return ElementUtils.getIUs(getChildren(this));
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement#isEnabled()
+	 */
+	public boolean isEnabled() {
+		return isEnabled;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement#setEnabled(boolean)
+	 */
+	public void setEnabled(boolean enabled) {
+		isEnabled = enabled;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RepositoryElement.java
deleted file mode 100644
index bc28597..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RepositoryElement.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.model;
-
-import java.net.URL;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
-
-/**
- * Interface for elements that represent repositories.
- * 
- * @since 3.4
- */
-public interface RepositoryElement {
-
-	public URL getLocation();
-
-	public String getName();
-
-	public String getDescription();
-
-	public IRepository getRepository(IProgressMonitor monitor);
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java
index 69607d9..4b7e43a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java
@@ -27,7 +27,7 @@ public class AddArtifactRepositoryOperation extends RepositoryOperation {
 		super(label, new URL[] {url});
 	}
 
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.addArtifactRepository(urls[i]);
 		}
@@ -35,7 +35,7 @@ public class AddArtifactRepositoryOperation extends RepositoryOperation {
 		return okStatus();
 	}
 
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.removeArtifactRepository(urls[i], monitor);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddColocatedRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddColocatedRepositoryOperation.java
index b233acf..01f2161 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddColocatedRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddColocatedRepositoryOperation.java
@@ -28,7 +28,11 @@ public class AddColocatedRepositoryOperation extends RepositoryOperation {
 		super(label, new URL[] {url});
 	}
 
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public AddColocatedRepositoryOperation(String label, URL[] urls) {
+		super(label, urls);
+	}
+
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.addMetadataRepository(urls[i]);
 			ProvisioningUtil.addArtifactRepository(urls[i]);
@@ -37,7 +41,7 @@ public class AddColocatedRepositoryOperation extends RepositoryOperation {
 		return okStatus();
 	}
 
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.removeMetadataRepository(urls[i], monitor);
 			ProvisioningUtil.removeArtifactRepository(urls[i], monitor);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java
index 89f981b..400e117 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java
@@ -27,7 +27,7 @@ public class AddMetadataRepositoryOperation extends RepositoryOperation {
 		super(label, new URL[] {url});
 	}
 
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.addMetadataRepository(urls[i]);
 		}
@@ -35,7 +35,7 @@ public class AddMetadataRepositoryOperation extends RepositoryOperation {
 		return okStatus();
 	}
 
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.removeMetadataRepository(urls[i], monitor);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
index bbc4763..8b8abf7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
@@ -50,6 +50,20 @@ public class ProvisioningUtil {
 		return manager.getRepositoryProperty(location, key);
 	}
 
+	public static boolean getMetadataRepositoryEnablement(URL location) {
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
+		if (manager == null)
+			return false;
+		return manager.getEnabled(location);
+	}
+
+	public static boolean getArtifactRepositoryEnablement(URL location) {
+		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
+		if (manager == null)
+			return false;
+		return manager.getEnabled(location);
+	}
+
 	public static IMetadataRepository loadMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null)
@@ -274,4 +288,13 @@ public class ProvisioningUtil {
 		}
 		return director;
 	}
+
+	public static void setColocatedRepositoryEnablement(URL location, boolean enabled) {
+		IMetadataRepositoryManager metaManager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
+		if (metaManager != null)
+			metaManager.setEnabled(location, enabled);
+		IArtifactRepositoryManager artifactManager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
+		if (artifactManager != null)
+			artifactManager.setEnabled(location, enabled);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
index 865684a..761e810 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
@@ -40,18 +40,20 @@ public class RefreshArtifactRepositoriesOperation extends RepositoryOperation {
 		}
 	}
 
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doExecute(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation#doBatchedExecute(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
 	 */
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		ProvisioningUtil.refreshArtifactRepositories(urls, monitor);
 		return Status.OK_STATUS;
 	}
 
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doUndo(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation#doBatchedUndo(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
 	 */
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		// Should never happen
 		return Status.CANCEL_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
index d6ea96f..f3da806 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
@@ -40,18 +40,12 @@ public class RefreshMetadataRepositoriesOperation extends RepositoryOperation {
 		}
 	}
 
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doExecute(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
-	 */
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		ProvisioningUtil.refreshMetadataRepositories(urls, monitor);
 		return Status.OK_STATUS;
 	}
 
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.operations.UndoableProvisioningOperation#doUndo(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
-	 */
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		// Should never happen
 		return Status.CANCEL_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java
index 5de62c4..3bfc30a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java
@@ -27,7 +27,7 @@ public class RemoveArtifactRepositoryOperation extends RepositoryOperation {
 		super(label, repoURLs);
 	}
 
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.removeArtifactRepository(urls[i], monitor);
 		}
@@ -53,7 +53,7 @@ public class RemoveArtifactRepositoryOperation extends RepositoryOperation {
 		return super.canUndo() && removed;
 	}
 
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.addArtifactRepository(urls[i]);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveColocatedRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveColocatedRepositoryOperation.java
index eeacce3..120239d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveColocatedRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveColocatedRepositoryOperation.java
@@ -27,7 +27,7 @@ public class RemoveColocatedRepositoryOperation extends RepositoryOperation {
 		super(label, repoURLs);
 	}
 
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.removeMetadataRepository(urls[i], monitor);
 			ProvisioningUtil.removeArtifactRepository(urls[i], monitor);
@@ -54,7 +54,7 @@ public class RemoveColocatedRepositoryOperation extends RepositoryOperation {
 		return removed && super.canUndo();
 	}
 
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.addMetadataRepository(urls[i]);
 			ProvisioningUtil.addArtifactRepository(urls[i]);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java
index 1119748..70faa52 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java
@@ -27,7 +27,7 @@ public class RemoveMetadataRepositoryOperation extends RepositoryOperation {
 		super(label, repoURLs);
 	}
 
-	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.removeMetadataRepository(urls[i], monitor);
 		}
@@ -53,7 +53,7 @@ public class RemoveMetadataRepositoryOperation extends RepositoryOperation {
 		return removed && super.canUndo();
 	}
 
-	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	protected IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			ProvisioningUtil.addMetadataRepository(urls[i]);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RepositoryOperation.java
index feb660a..2451a5f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RepositoryOperation.java
@@ -11,6 +11,9 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.operations;
 
 import java.net.URL;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 
 /**
  * Abstract class representing provisioning repository operations
@@ -51,4 +54,32 @@ abstract class RepositoryOperation extends UndoableProvisioningOperation {
 		return true;
 	}
 
+	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		boolean batched = false;
+		if (urls != null && urls.length > 1) {
+			ProvUI.startBatchOperation();
+			batched = true;
+		}
+		IStatus status = doBatchedExecute(monitor, uiInfo);
+		if (batched)
+			ProvUI.endBatchOperation();
+		return status;
+	}
+
+	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		boolean batched = false;
+		if (urls != null && urls.length > 1) {
+			ProvUI.startBatchOperation();
+			batched = true;
+		}
+		IStatus status = doBatchedUndo(monitor, uiInfo);
+		if (batched)
+			ProvUI.endBatchOperation();
+		return status;
+	}
+
+	protected abstract IStatus doBatchedExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException;
+
+	protected abstract IStatus doBatchedUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException;
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
index 1c32d69..f005489 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/MetadataRepositoryElementCollector.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.query;
 import java.net.URL;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.QueriedElementCollector;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 
 /**
@@ -37,7 +38,6 @@ public class MetadataRepositoryElementCollector extends QueriedElementCollector
 	public boolean accept(Object match) {
 		if (!(match instanceof URL))
 			return true;
-		return super.accept(new MetadataRepositoryElement((URL) match));
+		return super.accept(new MetadataRepositoryElement((URL) match, ProvisioningUtil.getMetadataRepositoryEnablement((URL) match)));
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
index 4896e15..a568a5b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
@@ -11,6 +11,8 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.query;
 
 import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
@@ -20,6 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.ui.statushandlers.StatusManager;
 
@@ -33,15 +36,10 @@ import org.eclipse.ui.statushandlers.StatusManager;
  * should specify a null query, in which case the collector will be accepting the URL's.
  */
 public class QueryableMetadataRepositoryManager implements IQueryable {
-	private URL[] metadataRepositories;
-	private int flags = IMetadataRepositoryManager.REPOSITORIES_ALL;
+	private MetadataRepositories repositories;
 
-	public QueryableMetadataRepositoryManager(URL[] metadataRepositories) {
-		this.metadataRepositories = metadataRepositories;
-	}
-
-	public QueryableMetadataRepositoryManager(int flags) {
-		this.flags = flags;
+	public QueryableMetadataRepositoryManager(MetadataRepositories repositories) {
+		this.repositories = repositories;
 	}
 
 	/**
@@ -63,35 +61,39 @@ public class QueryableMetadataRepositoryManager implements IQueryable {
 	 * @return The collector argument
 	 */
 	public Collector query(Query query, Collector result, IProgressMonitor monitor) {
-		URL[] repoURLs;
+		ArrayList repoURLs = new ArrayList();
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null) {
 			ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoRepositoryManager), StatusManager.SHOW | StatusManager.LOG);
 			return result;
 		}
 
-		if (metadataRepositories != null) {
-			repoURLs = metadataRepositories;
+		if (repositories.getMetadataRepositories() != null) {
+			repoURLs.addAll(Arrays.asList(repositories.getMetadataRepositories()));
 		} else {
-			repoURLs = manager.getKnownRepositories(flags);
+			repoURLs.addAll(Arrays.asList(manager.getKnownRepositories(repositories.getRepoFlags())));
+			if (repositories.getIncludeDisabledRepositories()) {
+				repoURLs.addAll(Arrays.asList(manager.getKnownRepositories(IMetadataRepositoryManager.REPOSITORIES_DISABLED)));
+			}
+
 		}
-		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.QueryableMetadataRepositoryManager_RepositoryQueryProgress, repoURLs.length * 2);
+		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.QueryableMetadataRepositoryManager_RepositoryQueryProgress, repoURLs.size() * 2);
 		if (sub.isCanceled())
 			return result;
-		for (int i = 0; i < repoURLs.length; i++) {
+		for (int i = 0; i < repoURLs.size(); i++) {
 			if (sub.isCanceled())
 				return result;
 			if (query == null) {
-				result.accept(repoURLs[i]);
+				result.accept(repoURLs.get(i));
 				sub.worked(2);
 			} else {
 				try {
-					IMetadataRepository repo = manager.loadRepository(repoURLs[i], sub.newChild(1));
+					IMetadataRepository repo = manager.loadRepository((URL) repoURLs.get(i), sub.newChild(1));
 					repo.query(query, result, sub.newChild(1));
 				} catch (ProvisionException e) {
 					//ignore unavailable repositories
 					if (e.getStatus().getCode() != ProvisionException.REPOSITORY_NOT_FOUND)
-						ProvUI.handleException(e, NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, repoURLs[i]), StatusManager.LOG);
+						ProvUI.handleException(e, NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, repoURLs.get(i)), StatusManager.LOG);
 				}
 			}
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
index 22dea1b..0da4a0e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
@@ -69,8 +69,8 @@ public class ProvElementComparer implements IElementComparer {
 	}
 
 	private URL getRepositoryLocation(Object obj) {
-		if (obj instanceof RepositoryElement)
-			return ((RepositoryElement) obj).getLocation();
+		if (obj instanceof IRepositoryElement)
+			return ((IRepositoryElement) obj).getLocation();
 		return null;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
index ee76c2d..cca1e86 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementLabelProvider.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElement;
 import org.eclipse.jface.viewers.ITableLabelProvider;
 import org.eclipse.jface.viewers.LabelProvider;
@@ -55,6 +56,13 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 			}
 			return ((IRepository) obj).getLocation().toExternalForm();
 		}
+		if (obj instanceof IRepositoryElement) {
+			String name = ((IRepositoryElement) obj).getName();
+			if (name != null && name.length() > 0) {
+				return name;
+			}
+			return ((IRepositoryElement) obj).getLocation().toExternalForm();
+		}
 		if (obj instanceof IArtifactKey) {
 			IArtifactKey key = (IArtifactKey) obj;
 			return key.getId() + " [" + key.getClassifier() + "]"; //$NON-NLS-1$//$NON-NLS-2$
@@ -105,9 +113,6 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 
 		switch (columnIndex) {
 			case 0 :
-				if (element instanceof IRepository) {
-					return ((IRepository) element).getName();
-				}
 				return getText(element);
 			case 1 :
 				if (element instanceof IProfile) {
@@ -124,6 +129,9 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 				if (element instanceof IRepository) {
 					return ((IRepository) element).getLocation().toExternalForm();
 				}
+				if (element instanceof IRepositoryElement) {
+					return ((IRepositoryElement) element).getLocation().toExternalForm();
+				}
 				if (element instanceof IArtifactKey) {
 					IArtifactKey key = (IArtifactKey) element;
 					return key.getVersion().toString();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
index c0d57fc..b626943 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
@@ -12,6 +12,8 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 
 import java.util.EventObject;
+import org.eclipse.equinox.internal.p2.ui.BatchChangeBeginningEvent;
+import org.eclipse.equinox.internal.p2.ui.BatchChangeCompleteEvent;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
@@ -40,6 +42,7 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 	public static final int PROV_EVENT_ARTIFACT_REPOSITORY = 0x0008;
 
 	int eventTypes = 0;
+	int batchCount = 0;
 	StructuredViewer viewer;
 	Display display;
 	IQueryProvider queryProvider;
@@ -52,7 +55,16 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 	}
 
 	public void notify(EventObject o) {
-		if (o instanceof ProfileEvent && (((eventTypes & PROV_EVENT_IU) == PROV_EVENT_IU) || ((eventTypes & PROV_EVENT_PROFILE) == PROV_EVENT_PROFILE))) {
+		if (o instanceof BatchChangeBeginningEvent) {
+			batchCount++;
+		} else if (o instanceof BatchChangeCompleteEvent) {
+			batchCount--;
+			if (batchCount <= 0)
+				asyncRefresh();
+		} else if (batchCount > 0) {
+			// We are in the middle of a batch operation
+			return;
+		} else if (o instanceof ProfileEvent && (((eventTypes & PROV_EVENT_IU) == PROV_EVENT_IU) || ((eventTypes & PROV_EVENT_PROFILE) == PROV_EVENT_PROFILE))) {
 			ProfileEvent event = (ProfileEvent) o;
 			if (event.getReason() == ProfileEvent.CHANGED) {
 				profileChanged(event.getProfileId());
commit 9100513781d3d518cd91b378ecfdda455a071816
Author: Susan Franklin <sfranklin>
Date:   Wed Apr 23 00:17:35 2008 +0000

    Bug 224999 - [ui] support importing old style update site bookmarks into p2 update manager
    Bug 228097 - [ui] UI for showing enabled/disabled sites

9	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 989d64f..c0df793 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -445,6 +445,9 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		IAction propertiesAction = new PropertyDialogAction(new SameShellProvider(parent.getShell()), availableIUGroup.getStructuredViewer());
 		availablePropButton.setData(BUTTONACTION, propertiesAction);
 
+		// spacer
+		new Label(composite, SWT.NONE);
+
 		IAction refreshAction = new RefreshAction(availableIUGroup.getStructuredViewer(), availableIUGroup.getStructuredViewer().getControl()) {
 			protected void refresh() {
 				availableIUGroup.refresh();
@@ -453,6 +456,9 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		Button refreshButton = createVerticalButton(composite, refreshAction.getText(), false);
 		refreshButton.setData(BUTTONACTION, refreshAction);
 
+		// spacer
+		new Label(composite, SWT.NONE);
+
 		manipulateRepoButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_ManageSites, false);
 		manipulateRepoButton.setData(BUTTONACTION, new Action() {
 			public void runWithEvent(Event event) {
@@ -493,7 +499,6 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		updateEnablement(addRepoButton);
 		updateEnablement(removeRepoButton);
 		boolean showRepos = queryContext.getViewType() == AvailableIUViewQueryContext.VIEW_BY_REPO;
-		manipulateRepoButton.setVisible(!showRepos);
 		addRepoButton.setVisible(showRepos);
 		removeRepoButton.setVisible(showRepos);
 	}
@@ -583,6 +588,9 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 		IAction propertiesAction = new PropertyDialogAction(new SameShellProvider(parent.getShell()), installedIUGroup.getStructuredViewer());
 		installedPropButton.setData(BUTTONACTION, propertiesAction);
 
+		// spacer
+		new Label(composite, SWT.NONE);
+
 		revertButton = createVerticalButton(composite, ProvSDKMessages.UpdateAndInstallDialog_RevertActionLabel, false);
 		revertButton.setData(BUTTONACTION, new Action() {
 			public void run() {

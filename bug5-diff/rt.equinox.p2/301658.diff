commit 0ba1beae8ae9c5ae3e8b25854f3378cf713bbf3c
Author: ibull <>
Date:   Wed Feb 3 18:06:55 2010 +0000

    bug 301658: [query] IUQuery overrides getID and changes the semantics of the method.  This patch removes getID and getProperty methods on IQuery and its subclasses.

0	1	bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
0	58	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/query/QueryHelpers.java
0	16	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/CompoundQuery.java
0	15	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/ContextQuery.java
0	13	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/IQuery.java
0	16	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/MatchQuery.java
0	15	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/PipedQuery.java
0	1	bundles/org.eclipse.equinox.p2.ql/META-INF/MANIFEST.MF
0	11	bundles/org.eclipse.equinox.p2.ql/src/org/eclipse/equinox/p2/ql/QLQuery.java
0	27	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java
0	25	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java
0	31	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
0	1	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
0	16	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/RepositoryLocationQuery.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
index d3106ee..ebd6d1e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
@@ -54,7 +54,6 @@ Export-Package: org.eclipse.equinox.internal.p2.metadata;
    org.eclipse.pde.ui,
    org.eclipse.equinox.p2.repository.tools,
    org.eclipse.pde.core",
- org.eclipse.equinox.internal.p2.query;x-friends:="org.eclipse.equinox.p2.ql,org.eclipse.equinox.p2.ui",
  org.eclipse.equinox.internal.provisional.p2.metadata;
   x-friends:="org.eclipse.equinox.p2.artifact.optimizers,
    org.eclipse.equinox.p2.artifact.processors,
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/query/QueryHelpers.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/query/QueryHelpers.java
deleted file mode 100644
index 794ceff..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/query/QueryHelpers.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/******************************************************************************* 
-* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
-* program and the accompanying materials are made available under the terms of
-* the Eclipse Public License v1.0 which accompanies this distribution, and is
-* available at http://www.eclipse.org/legal/epl-v10.html
-*
-* Contributors:
-*   EclipseSource - initial API and implementation
-******************************************************************************/
-package org.eclipse.equinox.internal.p2.query;
-
-
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import org.eclipse.equinox.p2.query.IQuery;
-
-/**
- * Static helper methods for the Query API.
- * 
- * @noextend This class is not intended to be subclassed by clients.
- */
-public class QueryHelpers {
-	/**
-	 * Gets the ID for a Query. 
-	 * 
-	 * @noreference This method is not intended to be referenced by clients.
-	 */
-	public static String getId(IQuery<?> query) {
-		return query.getClass().getName();
-	}
-
-	/**
-	 * Gets a particular property of a query.
-	 * @param query The query to retrieve the property from
-	 * @param property The property to retrieve 
-	 * 
-	 * @noreference This method is not intended to be referenced by clients.
-	 */
-	public static Object getProperty(IQuery<?> query, String property) {
-		Class<?> clazz = query.getClass();
-		Object result = null;
-		try {
-			Method method = clazz.getMethod("get" + property, new Class[0]); //$NON-NLS-1$
-			result = method.invoke(query, new Object[0]);
-		} catch (SecurityException e) {
-			return null;
-		} catch (NoSuchMethodException e) {
-			return null;
-		} catch (IllegalArgumentException e) {
-			return null;
-		} catch (IllegalAccessException e) {
-			return null;
-		} catch (InvocationTargetException e) {
-			return null;
-		}
-		return result;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/CompoundQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/CompoundQuery.java
index eb57494..67a160c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/CompoundQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/CompoundQuery.java
@@ -14,7 +14,6 @@ package org.eclipse.equinox.p2.query;
 import java.lang.reflect.Array;
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.p2.query.QueryHelpers;
 
 /**
  * A query that combines a group of sub-queries.<P>
@@ -97,21 +96,6 @@ public abstract class CompoundQuery<T> implements ICompositeQuery<T> {
 	}
 
 	/**
-	 * Gets the ID for this Query. 
-	 */
-	public String getId() {
-		return QueryHelpers.getId(this);
-	}
-
-	/**
-	 * Gets a particular property of the query.
-	 * @param property The property to retrieve 
-	 */
-	public Object getProperty(String property) {
-		return QueryHelpers.getProperty(this, property);
-	}
-
-	/**
 	 * The compound query instantiated when all queries are Match Queries.
 	 */
 	private static class MatchCompoundQuery<T> extends CompoundQuery<T> implements IMatchQuery<T> {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/ContextQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/ContextQuery.java
index f65aa8a..5936aeb 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/ContextQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/ContextQuery.java
@@ -10,7 +10,6 @@
 package org.eclipse.equinox.p2.query;
 
 import java.util.Iterator;
-import org.eclipse.equinox.internal.p2.query.QueryHelpers;
 
 /**
  * ContextQuery is the abstract superclass for Queries that require the entire
@@ -43,18 +42,4 @@ public abstract class ContextQuery<T> implements IQuery<T> {
 	 */
 	public abstract IQueryResult<T> perform(Iterator<T> iterator);
 
-	/**
-	 * Gets the ID for this Query. 
-	 */
-	public String getId() {
-		return QueryHelpers.getId(this);
-	}
-
-	/**
-	 * Gets a particular property of the query.
-	 * @param property The property to retrieve 
-	 */
-	public Object getProperty(String property) {
-		return QueryHelpers.getProperty(this, property);
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/IQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/IQuery.java
index b31e69e..7afd485 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/IQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/IQuery.java
@@ -39,17 +39,4 @@ public interface IQuery<T> {
 	 */
 	public abstract IQueryResult<T> perform(Iterator<T> iterator);
 
-	/**
-	 * Gets a unique identifier for this query.
-	 * @return a unique identifier for this query
-	 */
-	public String getId();
-
-	/**
-	 * Gets a particular property of the query.
-	 * @param property The property to retrieve 
-	 * @return The value of the retrieved property, or <code>null</code>
-	 * if no such property is defined.
-	 */
-	public Object getProperty(String property);
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/MatchQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/MatchQuery.java
index f8e4e8a..065f4fe 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/MatchQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/MatchQuery.java
@@ -11,7 +11,6 @@
 package org.eclipse.equinox.p2.query;
 
 import java.util.Iterator;
-import org.eclipse.equinox.internal.p2.query.QueryHelpers;
 
 /**
  * This class represents the superclass of most of p2's queries.  Every element
@@ -41,21 +40,6 @@ public abstract class MatchQuery<T> implements IMatchQuery<T> {
 	public abstract boolean isMatch(T candidate);
 
 	/**
-	 * Gets the ID for this Query. 
-	 */
-	public String getId() {
-		return QueryHelpers.getId(this);
-	}
-
-	/**
-	 * Gets a particular property of the query.
-	 * @param property The property to retrieve 
-	 */
-	public Object getProperty(String property) {
-		return QueryHelpers.getProperty(this, property);
-	}
-
-	/**
 	 * Performs this query on the given iterator, passing all objects in the iterator 
 	 * that match the criteria of this query to the given result.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/PipedQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/PipedQuery.java
index 2720f6a..0e16b76 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/PipedQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/query/PipedQuery.java
@@ -11,7 +11,6 @@
 package org.eclipse.equinox.p2.query;
 
 import java.util.*;
-import org.eclipse.equinox.internal.p2.query.QueryHelpers;
 
 /**
  * A PipedQuery is a composite query in which each sub-query is executed in succession.  
@@ -47,20 +46,6 @@ public class PipedQuery<T> implements ICompositeQuery<T> {
 	}
 
 	/*(non-Javadoc)
-	 * @see org.eclipse.equinox.p2.query.IQuery#getId()
-	 */
-	public String getId() {
-		return QueryHelpers.getId(this);
-	}
-
-	/*(non-Javadoc)
-	 * @see org.eclipse.equinox.p2.query.IQuery#getProperty(java.lang.String)
-	 */
-	public Object getProperty(String property) {
-		return QueryHelpers.getProperty(this, property);
-	}
-
-	/*(non-Javadoc)
 	 * @see org.eclipse.equinox.p2.query.ICompositeQuery#getQueries()
 	 */
 	public List<IQuery<T>> getQueries() {
diff --git a/bundles/org.eclipse.equinox.p2.ql/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ql/META-INF/MANIFEST.MF
index 8eb989b..5d307b5 100644
--- a/bundles/org.eclipse.equinox.p2.ql/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ql/META-INF/MANIFEST.MF
@@ -14,7 +14,6 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.internal.p2.metadata.expression,
  org.eclipse.equinox.internal.p2.metadata.expression.parser,
- org.eclipse.equinox.internal.p2.query,
  org.eclipse.equinox.internal.provisional.p2.metadata,
  org.eclipse.equinox.p2.metadata,
  org.eclipse.equinox.p2.metadata.expression,
diff --git a/bundles/org.eclipse.equinox.p2.ql/src/org/eclipse/equinox/p2/ql/QLQuery.java b/bundles/org.eclipse.equinox.p2.ql/src/org/eclipse/equinox/p2/ql/QLQuery.java
index 07ca483..b8d48f6 100644
--- a/bundles/org.eclipse.equinox.p2.ql/src/org/eclipse/equinox/p2/ql/QLQuery.java
+++ b/bundles/org.eclipse.equinox.p2.ql/src/org/eclipse/equinox/p2/ql/QLQuery.java
@@ -11,7 +11,6 @@
 package org.eclipse.equinox.p2.ql;
 
 import java.util.Locale;
-import org.eclipse.equinox.internal.p2.query.QueryHelpers;
 import org.eclipse.equinox.p2.query.IQuery;
 
 /**
@@ -34,14 +33,4 @@ public abstract class QLQuery<T> implements IQuery<T> {
 		this.locale = locale;
 	}
 
-	/**
-	 * Gets the ID for this Query. 
-	 */
-	public String getId() {
-		return QueryHelpers.getId(this);
-	}
-
-	public Object getProperty(String property) {
-		return QueryHelpers.getProperty(this, property);
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java
deleted file mode 100644
index b212c8c..0000000
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/******************************************************************************* 
-* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
-* program and the accompanying materials are made available under the terms of
-* the Eclipse Public License v1.0 which accompanies this distribution, and is
-* available at http://www.eclipse.org/legal/epl-v10.html
-*
-* Contributors:
-*   EclipseSource - initial API and implementation
-******************************************************************************/
-package org.eclipse.equinox.p2.tests.core;
-
-import org.eclipse.equinox.p2.query.MatchQuery;
-
-public class PropertyLookupQuery1 extends MatchQuery {
-
-	public String getSomeProperty() {
-		return "foo";
-	}
-
-	public String getThatProperty(Object param) {
-		return "bar";
-	}
-
-	public boolean isMatch(Object candidate) {
-		return false;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java
deleted file mode 100644
index e7e4545..0000000
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/******************************************************************************* 
-* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
-* program and the accompanying materials are made available under the terms of
-* the Eclipse Public License v1.0 which accompanies this distribution, and is
-* available at http://www.eclipse.org/legal/epl-v10.html
-*
-* Contributors:
-*   EclipseSource - initial API and implementation
-******************************************************************************/
-package org.eclipse.equinox.p2.tests.core;
-
-import java.util.Iterator;
-import org.eclipse.equinox.p2.query.Collector;
-import org.eclipse.equinox.p2.query.ContextQuery;
-
-public class PropertyLookupQuery2 extends ContextQuery {
-
-	public String getSomeOtherProperty() {
-		return "bar";
-	}
-
-	public Collector perform(Iterator iterator) {
-		return null;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
index e05b16f..4ae0081 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
@@ -99,37 +99,6 @@ public class QueryTest extends TestCase {
 		assertTrue("1.4", query.areHooksExecutedProperly());
 	}
 
-	public void testPropertyLookupMatchQuery() {
-		IQuery query1 = new PropertyLookupQuery1();
-		Object property = query1.getProperty("SomeProperty");
-		assertEquals("1.0", "foo", property);
-	}
-
-	public void testPropertyLookupContextQuery() {
-		IQuery query1 = new PropertyLookupQuery2();
-		Object property = query1.getProperty("SomeOtherProperty");
-		assertEquals("1.0", "bar", property);
-	}
-
-	public void testPropertyLookupInvalidProperty1() {
-		IQuery query1 = new PropertyLookupQuery1();
-		Object property = query1.getProperty("ThisProperty");
-		assertEquals("1.0", null, property);
-	}
-
-	public void testPropertyLookupInvalidProperty2() {
-		IQuery query1 = new PropertyLookupQuery1();
-		Object property = query1.getProperty("SomeOtherProperty");
-		assertEquals("1.0", null, property);
-	}
-
-	public void testIDLookup() {
-		IQuery query1 = new PropertyLookupQuery1();
-		IQuery query2 = new PropertyLookupQuery2();
-		assertEquals("1.0", "org.eclipse.equinox.p2.tests.core.PropertyLookupQuery1", query1.getId());
-		assertEquals("1.0", "org.eclipse.equinox.p2.tests.core.PropertyLookupQuery2", query2.getId());
-	}
-
 	public void testPerformHooksOnQueryFail() {
 		List items = Arrays.asList("red", new Object());
 		PerformHookQuery query = new PerformHookQuery();
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index a6f7f59..7be6c0e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -13,7 +13,6 @@ Import-Package: com.ibm.icu.text,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.internal.p2.metadata.query,
  org.eclipse.equinox.internal.p2.metadata.repository,
- org.eclipse.equinox.internal.p2.query,
  org.eclipse.equinox.internal.p2.repository.helpers,
  org.eclipse.equinox.internal.provisional.configurator,
  org.eclipse.equinox.internal.provisional.p2.core,
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/RepositoryLocationQuery.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/RepositoryLocationQuery.java
index 778da77..b05664b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/RepositoryLocationQuery.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/RepositoryLocationQuery.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.internal.p2.ui;
 
 import java.net.URI;
 import java.util.Iterator;
-import org.eclipse.equinox.internal.p2.query.QueryHelpers;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.repository.IRepository;
 
@@ -27,21 +26,6 @@ import org.eclipse.equinox.p2.repository.IRepository;
  */
 public class RepositoryLocationQuery implements IQuery<URI> {
 
-	/**
-	 * Gets the ID for this Query. 
-	 */
-	public String getId() {
-		return QueryHelpers.getId(this);
-	}
-
-	/**
-	 * Gets a particular property of the query.
-	 * @param property The property to retrieve 
-	 */
-	public Object getProperty(String property) {
-		return QueryHelpers.getProperty(this, property);
-	}
-
 	public IQueryResult<URI> perform(Iterator<URI> iterator) {
 		Collector<URI> result = new Collector<URI>();
 		while (iterator.hasNext()) {

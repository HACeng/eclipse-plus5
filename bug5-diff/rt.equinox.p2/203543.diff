commit 341e444cbc042bc21ebcf30a1a3ceb3923779e2e
Author: Susan Franklin <sfranklin>
Date:   Thu Nov 8 20:59:25 2007 +0000

    Bug 203543 - [prov] [ui] Deferred/lazy content providers for repos and ius

0	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
8	4	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
21	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
8	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
9	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
3	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactElement.java
6	33	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryContentProvider.java
48	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryElement.java
26	10	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
1	40	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryContentProvider.java
43	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileContentProvider.java
10	15	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
68	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryContentProvider.java
70	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryElement.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
10	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 7f9bc36..4839bbb 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -110,7 +110,6 @@ public class ProfilesView extends ProvView {
 
 	protected void configureViewer(TreeViewer treeViewer) {
 		super.configureViewer(treeViewer);
-		treeViewer.setInput(new AllProfiles());
 		InstallIUDropAdapter adapter = new InstallIUDropAdapter(treeViewer);
 		adapter.setFeedbackEnabled(false);
 		Transfer[] transfers = new Transfer[] {org.eclipse.jface.util.LocalSelectionTransfer.getTransfer()};
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
index 37a484e..557c26d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
@@ -54,13 +54,18 @@ abstract class ProvView extends ViewPart {
 		// Store the display so we can make async calls from listeners
 		display = parent.getDisplay();
 		viewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);
-		setTreeColumns(viewer.getTree());
 		viewer.getTree().setHeaderVisible(true);
+		viewer.setComparator(new ViewerComparator());
+		configureViewer(viewer);
+		// Do this after setting up sorters, filters, etc.
+		// Otherwise it will retrieve content on each change.
 		viewer.setContentProvider(getContentProvider());
 		viewer.setInput(getInput());
+
+		// Now set up the visuals, columns before labels.
+		setTreeColumns(viewer.getTree());
 		viewer.setLabelProvider(getLabelProvider());
-		viewer.setComparator(new ViewerComparator());
-		configureViewer(viewer);
+
 		addListeners();
 		makeActions();
 		hookContextMenu();
@@ -208,7 +213,6 @@ abstract class ProvView extends ViewPart {
 	}
 
 	protected void setTreeColumns(Tree tree) {
-		// TODO generalize?
 		// For now we set two columns and the content depends on the elements
 		TreeColumn tc = new TreeColumn(tree, SWT.LEFT, 0);
 		tc.setResizable(true);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
index 3c9637b..e656df6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
@@ -107,13 +107,10 @@ public class UpdateAndInstallGroup {
 
 		// Table of available IU's
 		availableIUViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		setTableColumns(availableIUViewer.getTable());
-		availableIUViewer.setContentProvider(new AvailableIUContentProvider());
-		availableIUViewer.setInput(new AllMetadataRepositories());
 		final IUDetailsLabelProvider labelProvider = new IUDetailsLabelProvider();
 		labelProvider.setToolTipProperty(IInstallableUnitConstants.DESCRIPTION);
-		availableIUViewer.setLabelProvider(labelProvider);
-		// Kind of a hack, but there was no need to go with column label providers
+
+		// TODO Kind of a hack, but there was no need to go with column label providers
 		availableIUViewer.getTable().addListener(SWT.MouseHover, new Listener() {
 			public void handleEvent(Event event) {
 				switch (event.type) {
@@ -129,10 +126,20 @@ public class UpdateAndInstallGroup {
 
 		});
 
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
 		if (iuFilters != null) {
 			availableIUViewer.setFilters(iuFilters);
 		}
 		availableIUViewer.setComparator(new ViewerComparator());
+
+		// Now the content.
+		availableIUViewer.setContentProvider(new AvailableIUContentProvider());
+		availableIUViewer.setInput(new AllMetadataRepositories());
+
+		// Now the presentation, columns before label provider.
+		setTableColumns(availableIUViewer.getTable());
+		availableIUViewer.setLabelProvider(labelProvider);
+
 		GridData data = new GridData(GridData.FILL_BOTH);
 		data.grabExcessHorizontalSpace = true;
 		data.grabExcessVerticalSpace = true;
@@ -217,16 +224,21 @@ public class UpdateAndInstallGroup {
 
 		// Table of installed IU's
 		installedIUViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		setTableColumns(installedIUViewer.getTable());
-		installedIUViewer.setContentProvider(new ProfileContentProvider());
-		installedIUViewer.setInput(profile);
-		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
 
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
 		if (iuFilters != null) {
 			installedIUViewer.setFilters(iuFilters);
 		}
 		installedIUViewer.setComparator(new ViewerComparator());
 
+		// Now the content.
+		installedIUViewer.setContentProvider(new ProfileContentProvider());
+		installedIUViewer.setInput(profile);
+
+		// Now the visuals, columns before labels.
+		setTableColumns(installedIUViewer.getTable());
+		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
+
 		GridData data = new GridData(GridData.FILL_BOTH);
 		data.grabExcessHorizontalSpace = true;
 		data.grabExcessVerticalSpace = true;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
index b3cf21d..66802f4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
@@ -25,17 +24,18 @@ import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
  */
 public class AllArtifactRepositories extends ProvElement {
 
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+	public Object[] getChildren(Object o) {
 		try {
-			return ProvisioningUtil.getArtifactRepositories(monitor);
+			IArtifactRepository[] repos = ProvisioningUtil.getArtifactRepositories();
+			ArtifactRepositoryElement[] elements = new ArtifactRepositoryElement[repos.length];
+			for (int i = 0; i < repos.length; i++) {
+				elements[i] = new ArtifactRepositoryElement(repos[i]);
+			}
+			return elements;
 		} catch (ProvisionException e) {
 			handleException(e, null);
 		}
-		return new IArtifactRepository[0];
+		return new ArtifactRepositoryElement[0];
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
index 11305f0..8ebb701 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
@@ -25,17 +24,18 @@ import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
  */
 public class AllMetadataRepositories extends ProvElement {
 
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+	public Object[] getChildren(Object o) {
 		try {
-			return ProvisioningUtil.getMetadataRepositories(monitor);
+			IMetadataRepository[] repos = ProvisioningUtil.getMetadataRepositories();
+			MetadataRepositoryElement[] elements = new MetadataRepositoryElement[repos.length];
+			for (int i = 0; i < repos.length; i++) {
+				elements[i] = new MetadataRepositoryElement(repos[i]);
+			}
+			return elements;
 		} catch (ProvisionException e) {
 			handleException(e, null);
 		}
-		return new IMetadataRepository[0];
+		return new MetadataRepositoryElement[0];
 	}
 
 	/*
@@ -44,7 +44,7 @@ public class AllMetadataRepositories extends ProvElement {
 	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
 	 */
 	public String getLabel(Object o) {
-		return ""; //$NON-NLS-1$
+		return null;
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
index f3ffe02..38f3d43 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
@@ -23,13 +22,9 @@ import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
  */
 public class AllProfiles extends ProvElement {
 
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+	public Object[] getChildren(Object o) {
 		try {
-			return ProvisioningUtil.getProfiles(monitor);
+			return ProvisioningUtil.getProfiles();
 		} catch (ProvisionException e) {
 			handleException(e, null);
 		}
@@ -42,7 +37,7 @@ public class AllProfiles extends ProvElement {
 	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
 	 */
 	public String getLabel(Object o) {
-		return ""; //$NON-NLS-1$
+		return null;
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactElement.java
index 4e56f27..ebf7395 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactElement.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 
@@ -51,7 +50,7 @@ public class ArtifactElement extends ProvElement {
 		return key.getId() + " [" + key.getNamespace() + "]"; //$NON-NLS-1$//$NON-NLS-2$
 	}
 
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+	public Object[] getChildren(Object o) {
 		return repo.getArtifactDescriptors(key);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryContentProvider.java
index 66d55ff..2da154c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryContentProvider.java
@@ -12,9 +12,6 @@
 package org.eclipse.equinox.p2.ui.model;
 
 import org.eclipse.equinox.p2.artifact.repository.IArtifactDescriptor;
-import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
-import org.eclipse.equinox.p2.metadata.IArtifactKey;
-import org.eclipse.jface.viewers.*;
 
 /**
  * Content provider for artifact repository viewers.
@@ -24,15 +21,7 @@ import org.eclipse.jface.viewers.*;
  * 
  * @since 3.4
  */
-public class ArtifactRepositoryContentProvider implements IStructuredContentProvider, ITreeContentProvider {
-
-	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
-		// input does not affect the content
-	}
-
-	public void dispose() {
-		// nothing to do
-	}
+public class ArtifactRepositoryContentProvider extends RepositoryContentProvider {
 
 	public Object[] getElements(Object input) {
 		if (input == null) {
@@ -41,22 +30,10 @@ public class ArtifactRepositoryContentProvider implements IStructuredContentProv
 		return getChildren(input);
 	}
 
-	public Object getParent(Object child) {
-		return null;
-	}
-
-	public Object[] getChildren(Object parent) {
-		if (parent instanceof AllArtifactRepositories) {
-			return ((AllArtifactRepositories) parent).getChildren(parent);
-		}
-		if (parent instanceof IArtifactRepository) {
-			IArtifactKey[] keys = ((IArtifactRepository) parent).getArtifactKeys();
-			ArtifactElement[] elements = new ArtifactElement[keys.length];
-			for (int i = 0; i < keys.length; i++) {
-				elements[i] = new ArtifactElement(keys[i], (IArtifactRepository) parent);
-			}
-			return elements;
-		}
+	public Object[] getChildren(final Object parent) {
+		Object[] children = super.getChildren(parent);
+		if (children != null)
+			return children;
 		if (parent instanceof ArtifactElement) {
 			ArtifactElement element = (ArtifactElement) parent;
 			return element.getArtifactRepository().getArtifactDescriptors(element.getArtifactKey());
@@ -64,10 +41,6 @@ public class ArtifactRepositoryContentProvider implements IStructuredContentProv
 		if (parent instanceof IArtifactDescriptor) {
 			return ((IArtifactDescriptor) parent).getProcessingSteps();
 		}
-		return new Object[0];
-	}
-
-	public boolean hasChildren(Object parent) {
-		return getChildren(parent).length > 0;
+		return null;
 	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryElement.java
new file mode 100644
index 0000000..1d5f98e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositoryElement.java
@@ -0,0 +1,48 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.model;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
+
+/**
+ * Element wrapper class for a artifact repository that gets its
+ * contents in a deferred manner.
+ * 
+ * @since 3.4
+ */
+public class ArtifactRepositoryElement extends RepositoryElement {
+
+	public ArtifactRepositoryElement(IArtifactRepository repo) {
+		super(repo);
+	}
+
+	public Object getAdapter(Class adapter) {
+		if (adapter == IArtifactRepository.class)
+			return repo;
+		return super.getAdapter(adapter);
+	}
+
+	protected String getImageID(Object obj) {
+		return ProvUIImages.IMG_ARTIFACT_REPOSITORY;
+	}
+
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+		IArtifactKey[] keys = ((IArtifactRepository) repo).getArtifactKeys();
+		ArtifactElement[] elements = new ArtifactElement[keys.length];
+		for (int i = 0; i < keys.length; i++) {
+			elements[i] = new ArtifactElement(keys[i], (IArtifactRepository) repo);
+		}
+		return elements;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
index 4bc3125..86f7ad9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
@@ -12,6 +12,7 @@
 package org.eclipse.equinox.p2.ui.model;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
@@ -19,9 +20,9 @@ import org.eclipse.jface.viewers.IStructuredContentProvider;
 import org.eclipse.jface.viewers.Viewer;
 
 /**
- * Content provider for profile views. The children are the known profiles, and
- * the children of profiles are wrapped IU's (wrapped in InstalledIUElement).
- * They are wrapped so that the association with the parent profile is retained.
+ * Content provider for views of available IU's.  The input
+ * can be a single metadata repository, an array of repos, AllMetadataRepositories.
+ * Unknown inputs will not check any repos.
  * 
  * @since 3.4
  */
@@ -37,19 +38,34 @@ public class AvailableIUContentProvider implements IStructuredContentProvider {
 	}
 
 	public Object[] getElements(Object input) {
-		// If there is no input specified, assume we are looking at all
-		// metadata repositories.
-		if (input == null) {
-			return getElements(new AllMetadataRepositories());
-		}
-		IMetadataRepository[] reposToCheck = new IMetadataRepository[0];
+		IMetadataRepository[] reposToCheck;
 		if (input instanceof IMetadataRepository[]) {
 			reposToCheck = (IMetadataRepository[]) input;
 		} else if (input instanceof AllMetadataRepositories) {
-			reposToCheck = (IMetadataRepository[]) ((AllMetadataRepositories) input).getChildren(null);
+			Object[] children = ((AllMetadataRepositories) input).getChildren(null);
+			if (children == null)
+				reposToCheck = new IMetadataRepository[0];
+			else {
+				reposToCheck = new IMetadataRepository[children.length];
+				for (int i = 0; i < children.length; i++) {
+					if (children[i] instanceof IMetadataRepository)
+						reposToCheck[i] = (IMetadataRepository) children[i];
+					else if (children[i] instanceof IAdaptable)
+						reposToCheck[i] = (IMetadataRepository) ((IAdaptable) children[i]).getAdapter(IMetadataRepository.class);
+					else
+						reposToCheck[i] = null;
+				}
+			}
+		} else if (input instanceof IMetadataRepository) {
+			reposToCheck = new IMetadataRepository[] {(IMetadataRepository) input};
+		} else {
+			reposToCheck = new IMetadataRepository[0];
 		}
 		ArrayList list = new ArrayList();
 		for (int i = 0; i < reposToCheck.length; i++) {
+			// Shouldn't happen, but if an element was not adaptable it would
+			if (reposToCheck[i] == null)
+				break;
 			// TODO maybe this should be configurable, but for now assume we never
 			// want to see content from implementation repositories.
 			Object implOnly = reposToCheck[i].getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
index 7cfc99b..794d726 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
@@ -46,7 +45,7 @@ public class AvailableIUElement extends ProvElement {
 		return iu.getId();
 	}
 
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+	public Object[] getChildren(Object o) {
 		return null;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
index 4b1f3a2..85aa5cb 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.InstallableUnit;
@@ -54,7 +53,7 @@ public class InstalledIUElement extends ProvElement {
 		return iu.getId();
 	}
 
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+	public Object[] getChildren(Object o) {
 		return null;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryContentProvider.java
index 0bf7d56..fa264bc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryContentProvider.java
@@ -11,9 +11,6 @@
 
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.jface.viewers.*;
-
 /**
  * Content provider for metadata repositories. The raw repositories are the
  * elements, and the raw IU's are the children of the repositories.
@@ -21,46 +18,10 @@ import org.eclipse.jface.viewers.*;
  * @since 3.4
  * 
  */
-public class MetadataRepositoryContentProvider implements IStructuredContentProvider, ITreeContentProvider {
-
-	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
-		// input does not affect the content
-	}
-
-	public void dispose() {
-		// nothing to do
-	}
-
+public class MetadataRepositoryContentProvider extends RepositoryContentProvider {
 	public Object[] getElements(Object input) {
 		if (input == null)
 			return getChildren(new AllMetadataRepositories());
 		return getChildren(input);
 	}
-
-	public Object getParent(Object child) {
-		if (child instanceof ProvElement) {
-			return ((ProvElement) child).getParent(child);
-		}
-		return null;
-	}
-
-	public Object[] getChildren(Object parent) {
-		if (parent instanceof AllMetadataRepositories) {
-			return ((AllMetadataRepositories) parent).getChildren(parent);
-		}
-		if (parent instanceof IMetadataRepository) {
-			return ((IMetadataRepository) parent).getInstallableUnits(null);
-		}
-		return new Object[0];
-	}
-
-	public boolean hasChildren(Object parent) {
-		if (parent instanceof AllMetadataRepositories) {
-			return ((AllMetadataRepositories) parent).hasChildren(parent);
-		}
-		if (parent instanceof IMetadataRepository) {
-			return ((IMetadataRepository) parent).getInstallableUnits(null).length > 0;
-		}
-		return false;
-	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java
new file mode 100644
index 0000000..7f663f9
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.model;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
+
+/**
+ * Element wrapper class for a metadata repository that gets its
+ * contents in a deferred manner.
+ * 
+ * @since 3.4
+ */
+public class MetadataRepositoryElement extends RepositoryElement {
+
+	public MetadataRepositoryElement(IMetadataRepository repo) {
+		super(repo);
+	}
+
+	public Object getAdapter(Class adapter) {
+		if (adapter == IMetadataRepository.class)
+			return repo;
+		return super.getAdapter(adapter);
+	}
+
+	protected String getImageID(Object obj) {
+		return ProvUIImages.IMG_METADATA_REPOSITORY;
+	}
+
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
+		return ((IMetadataRepository) repo).getInstallableUnits(monitor);
+
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileContentProvider.java
index cd16f46..cd82c22 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileContentProvider.java
@@ -66,7 +66,7 @@ public class ProfileContentProvider implements IStructuredContentProvider, ITree
 
 	public boolean hasChildren(Object parent) {
 		if (parent instanceof AllProfiles) {
-			return ((ProvElement) parent).hasChildren(parent);
+			return ((AllProfiles) parent).getChildren(parent).length > 0;
 		}
 		if (parent instanceof Profile) {
 			Iterator allIUs = ((Profile) parent).getInstallableUnits();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
index aadd5fa..2c5fca8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
@@ -36,21 +36,6 @@ public abstract class ProvElement implements IWorkbenchAdapter, IAdaptable {
 		return null;
 	}
 
-	public Object[] getChildren(Object o) {
-		return fetchChildren(o, null);
-	}
-
-	// TODO if there is no optimization for subclasses, get rid of this
-	public boolean hasChildren(Object o) {
-		Object[] children = getChildren(o);
-		if (children == null) {
-			return false;
-		}
-		return children.length > 0;
-	}
-
-	abstract protected Object[] fetchChildren(Object o, IProgressMonitor monitor);
-
 	/**
 	 * Return a string id of the image that should be used to show the specified
 	 * object. Returning null indicates that no image should be used.
@@ -102,4 +87,14 @@ public abstract class ProvElement implements IWorkbenchAdapter, IAdaptable {
 		StatusManager.getManager().handle(status, StatusManager.LOG);
 	}
 
+	public boolean hasChildren(Object o) {
+		if (this instanceof IDeferredWorkbenchAdapter)
+			return true;
+		Object[] children = getChildren(o);
+		if (children == null) {
+			return false;
+		}
+		return children.length > 0;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryContentProvider.java
new file mode 100644
index 0000000..41cdcaf
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryContentProvider.java
@@ -0,0 +1,68 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.p2.ui.model;
+
+import org.eclipse.jface.viewers.*;
+import org.eclipse.ui.progress.DeferredTreeContentManager;
+
+/**
+ * Content provider for provisioning repositories. The repositories are the
+ * elements and the repository children are retrieved asynchronously
+ * using the IDeferredWorkbenchAdapter mechanism.
+ * 
+ * @since 3.4
+ * 
+ */
+public abstract class RepositoryContentProvider implements IStructuredContentProvider, ITreeContentProvider {
+
+	DeferredTreeContentManager manager;
+
+	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
+		if (v instanceof AbstractTreeViewer) {
+			manager = new DeferredTreeContentManager((AbstractTreeViewer) v);
+		}
+	}
+
+	public void dispose() {
+		// Nothing to do
+	}
+
+	public Object getParent(Object child) {
+		if (child instanceof ProvElement) {
+			return ((ProvElement) child).getParent(child);
+		}
+		return null;
+	}
+
+	public boolean hasChildren(Object element) {
+		if (element instanceof ProvElement)
+			return ((ProvElement) element).hasChildren(element);
+		return false;
+	}
+
+	public Object[] getChildren(final Object element) {
+		if (manager != null) {
+			Object[] children = manager.getChildren(element);
+			if (children != null) {
+				// This will be a placeholder to indicate 
+				// that the real children are being fetched
+				return children;
+			}
+		}
+		// We don't have a deferred content manager or else it could
+		// not retrieve deferred content.
+		if (element instanceof ProvElement) {
+			return ((ProvElement) element).getChildren(null);
+		}
+		return null;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryElement.java
new file mode 100644
index 0000000..b966ce2
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RepositoryElement.java
@@ -0,0 +1,70 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.model;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.jobs.ISchedulingRule;
+import org.eclipse.equinox.p2.core.repository.IRepository;
+import org.eclipse.ui.progress.IDeferredWorkbenchAdapter;
+import org.eclipse.ui.progress.IElementCollector;
+
+/**
+ * Element wrapper class for repository that gets its contents
+ * in a deferred manner.
+ * 
+ * @since 3.4
+ */
+public abstract class RepositoryElement extends ProvElement implements IDeferredWorkbenchAdapter {
+
+	IRepository repo;
+
+	public RepositoryElement(IRepository repo) {
+		this.repo = repo;
+	}
+
+	public Object getParent(Object o) {
+		return null;
+	}
+
+	public String getLabel(Object o) {
+		String name = repo.getName();
+		if (name != null && name.length() > 0) {
+			return name;
+		}
+		return repo.getLocation().toExternalForm();
+
+	}
+
+	public void fetchDeferredChildren(Object o, IElementCollector collector, IProgressMonitor monitor) {
+		collector.add(fetchChildren(o, monitor), monitor);
+
+	}
+
+	public Object[] getChildren(Object o) {
+		return fetchChildren(o, null);
+	}
+
+	protected abstract Object[] fetchChildren(Object o, IProgressMonitor monitor);
+
+	public Object getAdapter(Class adapter) {
+		if (adapter == IRepository.class)
+			return repo;
+		return super.getAdapter(adapter);
+	}
+
+	public ISchedulingRule getRule(Object object) {
+		return null;
+	}
+
+	public boolean isContainer() {
+		return true;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index f61295b..703826e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -125,7 +125,7 @@ public class ProvisioningUtil {
 		}
 	}
 
-	public static IArtifactRepository[] getArtifactRepositories(IProgressMonitor monitor) throws ProvisionException {
+	public static IArtifactRepository[] getArtifactRepositories() throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null)
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -154,7 +154,7 @@ public class ProvisioningUtil {
 			profileRegistry.removeProfile(profile);
 	}
 
-	public static Profile[] getProfiles(IProgressMonitor monitor) throws ProvisionException {
+	public static Profile[] getProfiles() throws ProvisionException {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(ProvUIActivator.getContext(), IProfileRegistry.class.getName());
 		if (profileRegistry == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoProfileRegistryFound);
@@ -170,7 +170,7 @@ public class ProvisioningUtil {
 		return profileRegistry.getProfile(id);
 	}
 
-	public static IMetadataRepository[] getMetadataRepositories(IProgressMonitor monitor) throws ProvisionException {
+	public static IMetadataRepository[] getMetadataRepositories() throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
index 2d9aacb..d91fb41 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
@@ -19,8 +19,7 @@ import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.model.InstalledIUElement;
-import org.eclipse.equinox.p2.ui.model.ProvElement;
+import org.eclipse.equinox.p2.ui.model.*;
 import org.eclipse.jface.viewers.ITableLabelProvider;
 import org.eclipse.jface.viewers.LabelProvider;
 import org.eclipse.swt.graphics.Image;
@@ -85,6 +84,9 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 		if (obj instanceof IArtifactKey) {
 			return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_FILE);
 		}
+		if (obj instanceof RepositoryElement) {
+			return getImage(((RepositoryElement) obj).getAdapter(IRepository.class));
+		}
 
 		return null;
 	}
@@ -103,6 +105,9 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 				if (element instanceof IRepository) {
 					return ((IRepository) element).getName();
 				}
+				if (element instanceof RepositoryElement) {
+					return getColumnText(((RepositoryElement) element).getAdapter(IRepository.class), columnIndex);
+				}
 				return getText(element);
 			case 1 :
 				if (element instanceof Profile) {
@@ -115,6 +120,9 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 				if (element instanceof IRepository) {
 					return ((IRepository) element).getLocation().toExternalForm();
 				}
+				if (element instanceof RepositoryElement) {
+					return getColumnText(((RepositoryElement) element).getAdapter(IRepository.class), columnIndex);
+				}
 				if (element instanceof IArtifactKey) {
 					IArtifactKey key = (IArtifactKey) element;
 					return key.getVersion().toString();
commit fa39276228bb930c80c6d8395d853bef1a8e860e
Author: Susan Franklin <sfranklin>
Date:   Thu Nov 8 21:17:10 2007 +0000

    Bug 203543 - [prov] [ui] Deferred/lazy content providers for repos and ius

2	3	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
index dcdec8a..36783c3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
@@ -13,8 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.admin;
 import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddArtifactRepositoryDialog;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
-import org.eclipse.equinox.p2.ui.model.AllArtifactRepositories;
-import org.eclipse.equinox.p2.ui.model.ArtifactRepositoryContentProvider;
+import org.eclipse.equinox.p2.ui.model.*;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.p2.ui.operations.RemoveArtifactRepositoryOperation;
 import org.eclipse.jface.viewers.IContentProvider;
@@ -69,7 +68,7 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 	}
 
 	protected boolean isRepository(Object element) {
-		return element instanceof IArtifactRepository;
+		return element instanceof IArtifactRepository || element instanceof ArtifactRepositoryElement;
 	}
 
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index 4faf01e..0ef3624 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -134,7 +134,7 @@ public class MetadataRepositoriesView extends RepositoriesView {
 	}
 
 	protected boolean isRepository(Object element) {
-		return element instanceof IMetadataRepository;
+		return element instanceof IMetadataRepository || element instanceof MetadataRepositoryElement;
 	}
 
 	protected void configureViewer(final TreeViewer treeViewer) {
commit 25a5293ed2244099d8118985808d73924572b53c
Author: Susan Franklin <sfranklin>
Date:   Thu Nov 8 21:56:51 2007 +0000

    Bug 203543 - [prov] [ui] Deferred/lazy content providers for repos and ius

6	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
7	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
1	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
1	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
24	9	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
18	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
index 36783c3..f89d9a3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.admin;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddArtifactRepositoryDialog;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.ui.model.*;
@@ -54,7 +55,7 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 	}
 
 	protected int openAddRepositoryDialog(Shell shell, Object[] elements) {
-		return new AddArtifactRepositoryDialog(shell, (IArtifactRepository[]) elements).open();
+		return new AddArtifactRepositoryDialog(shell, elements).open();
 	}
 
 	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
@@ -62,6 +63,10 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 		for (int i = 0; i < elements.length; i++) {
 			if (elements[i] instanceof IArtifactRepository) {
 				repos.add(elements[i]);
+			} else if (elements[i] instanceof IAdaptable) {
+				IArtifactRepository repo = (IArtifactRepository) ((IAdaptable) elements[i]).getAdapter(IArtifactRepository.class);
+				if (repo != null)
+					repos.add(repo);
 			}
 		}
 		return new RemoveArtifactRepositoryOperation(ProvAdminUIMessages.ArtifactRepositoriesView_RemoveRepositoryOperationLabel, (IArtifactRepository[]) repos.toArray(new IArtifactRepository[repos.size()]));
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index 0ef3624..db96ccb 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.admin;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddMetadataRepositoryDialog;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddProfileDialog;
 import org.eclipse.equinox.p2.engine.Profile;
@@ -71,7 +72,7 @@ public class MetadataRepositoriesView extends RepositoriesView {
 	}
 
 	protected int openAddRepositoryDialog(Shell shell, Object[] elements) {
-		return new AddMetadataRepositoryDialog(shell, (IMetadataRepository[]) elements).open();
+		return new AddMetadataRepositoryDialog(shell, elements).open();
 	}
 
 	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
@@ -79,7 +80,12 @@ public class MetadataRepositoriesView extends RepositoriesView {
 		for (int i = 0; i < elements.length; i++) {
 			if (elements[i] instanceof IMetadataRepository) {
 				repos.add(elements[i]);
+			} else if (elements[i] instanceof IAdaptable) {
+				IMetadataRepository repo = (IMetadataRepository) ((IAdaptable) elements[i]).getAdapter(IMetadataRepository.class);
+				if (repo != null)
+					repos.add(repo);
 			}
+
 		}
 		return new RemoveMetadataRepositoryOperation(ProvAdminUIMessages.MetadataRepositoriesView_RemoveRepositoryOperationLabel, (IMetadataRepository[]) repos.toArray(new IMetadataRepository[repos.size()]));
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
index c94bebb..8d1c6cd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
-import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.dialogs.AddRepositoryDialog;
 import org.eclipse.equinox.p2.ui.operations.AddArtifactRepositoryOperation;
@@ -28,7 +27,7 @@ import org.eclipse.swt.widgets.Shell;
  */
 public class AddArtifactRepositoryDialog extends AddRepositoryDialog {
 
-	public AddArtifactRepositoryDialog(Shell parentShell, IArtifactRepository[] knownRepositories) {
+	public AddArtifactRepositoryDialog(Shell parentShell, Object[] knownRepositories) {
 		super(parentShell, knownRepositories);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
index 33861c2..fae46cd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
-import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.dialogs.AddRepositoryDialog;
 import org.eclipse.equinox.p2.ui.operations.AddMetadataRepositoryOperation;
@@ -28,7 +27,7 @@ import org.eclipse.swt.widgets.Shell;
  */
 public class AddMetadataRepositoryDialog extends AddRepositoryDialog {
 
-	public AddMetadataRepositoryDialog(Shell parentShell, IMetadataRepository[] knownRepositories) {
+	public AddMetadataRepositoryDialog(Shell parentShell, Object[] knownRepositories) {
 		super(parentShell, knownRepositories);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
index 744f30c..ffa0599 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
@@ -10,12 +10,15 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
+import java.util.ArrayList;
 import java.util.List;
+import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.p2.ui.ProvUIActivator;
-import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.model.AllMetadataRepositories;
 import org.eclipse.equinox.p2.ui.model.MetadataRepositoryContentProvider;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.p2.ui.operations.RemoveColocatedRepositoryOperation;
 import org.eclipse.equinox.p2.ui.viewers.*;
 import org.eclipse.jface.action.Action;
@@ -181,19 +184,31 @@ public class RepositoryManipulationDialog extends TrayDialog {
 		button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_AddButton, false);
 		button.setData(BUTTONACTION, new Action() {
 			public void runWithEvent(Event event) {
-				new AddColocatedRepositoryDialog(getShell(), (IMetadataRepository[]) ((IStructuredContentProvider) repositoryViewer.getContentProvider()).getElements(null)).open();
+				try {
+					new AddColocatedRepositoryDialog(getShell(), ProvisioningUtil.getMetadataRepositories()).open();
+				} catch (ProvisionException e) {
+					ProvUI.handleException(e, null);
+				}
 			}
 		});
 		button = createVerticalButton(composite, ProvSDKMessages.RepositoryManipulationDialog_RemoveButton, false);
 		button.setData(BUTTONACTION, new Action() {
 			public void runWithEvent(Event event) {
-				List selection = ((IStructuredSelection) repositoryViewer.getSelection()).toList();
-				IMetadataRepository[] repos = new IMetadataRepository[selection.size()];
-				for (int i = 0; i < repos.length; i++) {
-					repos[i] = (IMetadataRepository) selection.get(i);
+				Object[] selection = ((IStructuredSelection) repositoryViewer.getSelection()).toArray();
+				List repos = new ArrayList();
+				for (int i = 0; i < selection.length; i++) {
+					if (selection[i] instanceof IMetadataRepository) {
+						repos.add(selection[i]);
+					} else if (selection[i] instanceof IAdaptable) {
+						IMetadataRepository repo = (IMetadataRepository) ((IAdaptable) selection[i]).getAdapter(IMetadataRepository.class);
+						if (repo != null)
+							repos.add(repo);
+					}
+				}
+				if (repos.size() > 0) {
+					RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvSDKMessages.RepositoryManipulationDialog_RemoveOperationLabel, (IMetadataRepository[]) repos.toArray(new IMetadataRepository[repos.size()]));
+					ProvisioningOperationRunner.schedule(op, getShell());
 				}
-				RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvSDKMessages.RepositoryManipulationDialog_RemoveOperationLabel, repos);
-				ProvisioningOperationRunner.schedule(op, getShell());
 			}
 		});
 		return composite;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
index 1224764..d3aabd3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
@@ -11,8 +11,8 @@
 package org.eclipse.equinox.p2.ui.dialogs;
 
 import java.net.URL;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import java.util.ArrayList;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.ui.ProvUIActivator;
@@ -44,10 +44,10 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 	static String lastLocalLocation = null;
 	static String lastArchiveLocation = null;
 
-	public AddRepositoryDialog(Shell parentShell, IRepository[] knownRepositories) {
+	public AddRepositoryDialog(Shell parentShell, Object[] knownRepositories) {
 
 		super(parentShell);
-		this.knownRepositories = knownRepositories;
+		this.knownRepositories = makeRepositories(knownRepositories);
 		setTitle(ProvUIMessages.AddRepositoryDialog_Title);
 	}
 
@@ -167,4 +167,18 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 		if (okButton != null && !okButton.isDisposed())
 			okButton.setEnabled(enable);
 	}
+
+	private IRepository[] makeRepositories(Object[] elements) {
+		ArrayList list = new ArrayList();
+		for (int i = 0; i < elements.length; i++) {
+			if (elements[i] instanceof IRepository)
+				list.add(elements[i]);
+			else if (elements[i] instanceof IAdaptable) {
+				IRepository repo = (IRepository) ((IAdaptable) elements[i]).getAdapter(IRepository.class);
+				if (repo != null)
+					list.add(repo);
+			}
+		}
+		return (IRepository[]) list.toArray(new IRepository[list.size()]);
+	}
 }

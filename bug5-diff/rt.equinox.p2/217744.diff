commit 4bf2cf4296696402f64787880503f50708c376c6
Author: Simon Kaegi <skaegi>
Date:   Mon Jan 12 16:39:39 2009 +0000

    Bug 217744 [engine][planner] React to CU attachment change

1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
1	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
19	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
127	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseApplicabilityTest.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
index 4153154..f61465d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
@@ -61,7 +61,7 @@ public abstract class InstallableUnitPhase extends Phase {
 
 	protected abstract ProvisioningAction[] getActions(InstallableUnitOperand operand);
 
-	final protected boolean isApplicable(Operand operand) {
+	final public boolean isApplicable(Operand operand) {
 		if (!(operand instanceof InstallableUnitOperand))
 			return false;
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
index a8bb285..a264113 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
@@ -211,7 +211,7 @@ public abstract class Phase {
 		mergeStatus(status, completeOperand(profile, operand, operandParameters, new NullProgressMonitor()));
 	}
 
-	protected boolean isApplicable(Operand operand) {
+	public boolean isApplicable(Operand operand) {
 		return true;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
index 2c988a1..93fc640 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
@@ -35,7 +35,7 @@ public class Collect extends InstallableUnitPhase {
 	}
 
 	protected boolean isApplicable(InstallableUnitOperand op) {
-		return (op.second() != null);
+		return (op.second() != null && !op.second().equals(op.first()));
 	}
 
 	protected ProvisioningAction[] getActions(InstallableUnitOperand operand) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
index 3e73c5f..fee5157 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
@@ -72,7 +72,7 @@ public class Install extends InstallableUnitPhase {
 	}
 
 	protected boolean isApplicable(InstallableUnitOperand op) {
-		return (op.second() != null);
+		return (op.second() != null && !op.second().equals(op.first()));
 	}
 
 	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
index c85cb3d..2f74be7 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
@@ -34,7 +34,7 @@ public class Sizing extends InstallableUnitPhase {
 	}
 
 	protected boolean isApplicable(InstallableUnitOperand op) {
-		return (op.second() != null);
+		return (op.second() != null && !op.second().equals(op.first()));
 	}
 
 	public long getDiskSize() {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
index 607c882..3e5307c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
@@ -69,7 +69,7 @@ public class Uninstall extends InstallableUnitPhase {
 	}
 
 	protected boolean isApplicable(InstallableUnitOperand op) {
-		return (op.first() != null);
+		return (op.first() != null && !op.first().equals(op.second()));
 	}
 
 	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
index b949321..e2c7438 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
@@ -22,6 +22,7 @@ public class AllTests extends TestCase {
 		suite.addTestSuite(DownloadManagerTest.class);
 		suite.addTestSuite(InstructionParserTest.class);
 		suite.addTestSuite(EngineTest.class);
+		suite.addTestSuite(PhaseApplicabilityTest.class);
 		suite.addTestSuite(PhaseSetTest.class);
 		suite.addTestSuite(PhaseTest.class);
 		suite.addTestSuite(ParameterizedProvisioningActionTest.class);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 5653b8f..8bd7ab7 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.phases.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -232,10 +233,20 @@ public class EngineTest extends AbstractProvisioningTest {
 		properties.put(IProfile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
 		IProfile profile = createProfile("testPerformUpdateOSGiFramework", null, properties);
 		PhaseSet phaseSet = new DefaultPhaseSet();
-		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(createOSGiIU(), createOSGiIU())};
-		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+
+		IInstallableUnit iu33 = createOSGiIU("3.3");
+		IInstallableUnit iu34 = createOSGiIU("3.4");
+
+		InstallableUnitOperand[] installOperands = new InstallableUnitOperand[] {new InstallableUnitOperand(null, iu33)};
+		IStatus result = engine.perform(profile, phaseSet, installOperands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
-		Iterator ius = getInstallableUnits(profile);
+		Iterator ius = profile.query(new InstallableUnitQuery(iu33.getId(), iu33.getVersion()), new Collector(), null).iterator();
+		assertTrue(ius.hasNext());
+
+		InstallableUnitOperand[] updateOperands = new InstallableUnitOperand[] {new InstallableUnitOperand(iu33, iu34)};
+		result = engine.perform(profile, phaseSet, updateOperands, null, new NullProgressMonitor());
+		assertTrue(result.isOK());
+		ius = profile.query(new InstallableUnitQuery(iu34.getId(), iu34.getVersion()), new Collector(), null).iterator();
 		assertTrue(ius.hasNext());
 	}
 
@@ -303,9 +314,13 @@ public class EngineTest extends AbstractProvisioningTest {
 	}
 
 	private IInstallableUnit createOSGiIU() {
+		return createOSGiIU("3.3.1.R33x_v20070828");
+	}
+
+	private IInstallableUnit createOSGiIU(String version) {
 		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
 		description.setId("org.eclipse.osgi");
-		description.setVersion(new Version("3.3.1.R33x_v20070828"));
+		description.setVersion(new Version(version));
 		description.setTouchpointType(AbstractProvisioningTest.TOUCHPOINT_OSGI);
 		Map touchpointData = new HashMap();
 		String manifest = "Manifest-Version: 1.0\r\n" + "Bundle-Activator: org.eclipse.osgi.framework.internal.core.SystemBundl\r\n" + " eActivator\r\n" + "Bundle-RequiredExecutionEnvironment: J2SE-1.4,OSGi/Minimum-1.0\r\n" + "Export-Package: org.eclipse.osgi.event;version=\"1.0\",org.eclipse.osgi.\r\n" + " framework.console;version=\"1.0\",org.eclipse.osgi.framework.eventmgr;v\r\n" + " ersion=\"1.0\",org.eclipse.osgi.framework.log;version=\"1.0\",org.eclipse\r\n" + " .osgi.service.datalocation;version=\"1.0\",org.eclipse.osgi.service.deb\r\n" + " ug;version=\"1.0\",org.eclipse.osgi.service.environment;version=\"1.0\",o\r\n" + " rg.eclipse.osgi.service.localization;version=\"1.0\",org.eclipse.osgi.s\r\n" + " ervice.pluginconversion;version=\"1.0\",org.eclipse.osgi.service.resolv\r\n"
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseApplicabilityTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseApplicabilityTest.java
new file mode 100644
index 0000000..8629f5e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseApplicabilityTest.java
@@ -0,0 +1,127 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.engine;
+
+import org.eclipse.equinox.internal.provisional.p2.core.Version;
+import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
+import org.eclipse.equinox.internal.provisional.p2.engine.phases.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+
+/**
+ * Simple test of the engine API.
+ */
+public class PhaseApplicabilityTest extends AbstractProvisioningTest {
+
+	public PhaseApplicabilityTest(String name) {
+		super(name);
+	}
+
+	public PhaseApplicabilityTest() {
+		super("");
+	}
+
+	public void testCollectPhase() {
+
+		IInstallableUnit iuXv1 = createIU("iuX", new Version("1.0.0"));
+		IInstallableUnit iuXv2 = createIU("iuX", new Version("2.0.0"));
+
+		Collect collectPhase = new Collect(1) {
+			protected boolean isApplicable(InstallableUnitOperand op) {
+				return super.isApplicable(op);
+			}
+		};
+		assertFalse(collectPhase.isApplicable(new InstallableUnitOperand(iuXv1, null)));
+		assertFalse(collectPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv1)));
+		assertTrue(collectPhase.isApplicable(new InstallableUnitOperand(null, iuXv1)));
+		assertTrue(collectPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv2)));
+	}
+
+	public void testSizingPhase() {
+
+		IInstallableUnit iuXv1 = createIU("iuX", new Version("1.0.0"));
+		IInstallableUnit iuXv2 = createIU("iuX", new Version("2.0.0"));
+
+		Sizing sizingPhase = new Sizing(1, "collect") {
+			protected boolean isApplicable(InstallableUnitOperand op) {
+				return super.isApplicable(op);
+			}
+		};
+		assertFalse(sizingPhase.isApplicable(new InstallableUnitOperand(iuXv1, null)));
+		assertFalse(sizingPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv1)));
+		assertTrue(sizingPhase.isApplicable(new InstallableUnitOperand(null, iuXv1)));
+		assertTrue(sizingPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv2)));
+	}
+
+	public void testUnconfigurePhase() {
+
+		IInstallableUnit iuXv1 = createIU("iuX", new Version("1.0.0"));
+		IInstallableUnit iuXv2 = createIU("iuX", new Version("2.0.0"));
+
+		Unconfigure unconfigurePhase = new Unconfigure(1) {
+			protected boolean isApplicable(InstallableUnitOperand op) {
+				return super.isApplicable(op);
+			}
+		};
+		assertTrue(unconfigurePhase.isApplicable(new InstallableUnitOperand(iuXv1, null)));
+		assertTrue(unconfigurePhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv1)));
+		assertFalse(unconfigurePhase.isApplicable(new InstallableUnitOperand(null, iuXv1)));
+		assertTrue(unconfigurePhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv2)));
+	}
+
+	public void testUninstallPhase() {
+
+		IInstallableUnit iuXv1 = createIU("iuX", new Version("1.0.0"));
+		IInstallableUnit iuXv2 = createIU("iuX", new Version("2.0.0"));
+
+		Uninstall uninstallPhase = new Uninstall(1) {
+			protected boolean isApplicable(InstallableUnitOperand op) {
+				return super.isApplicable(op);
+			}
+		};
+		assertTrue(uninstallPhase.isApplicable(new InstallableUnitOperand(iuXv1, null)));
+		assertFalse(uninstallPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv1)));
+		assertFalse(uninstallPhase.isApplicable(new InstallableUnitOperand(null, iuXv1)));
+		assertTrue(uninstallPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv2)));
+	}
+
+	public void testInstallPhase() {
+
+		IInstallableUnit iuXv1 = createIU("iuX", new Version("1.0.0"));
+		IInstallableUnit iuXv2 = createIU("iuX", new Version("2.0.0"));
+
+		Install installPhase = new Install(1) {
+			protected boolean isApplicable(InstallableUnitOperand op) {
+				return super.isApplicable(op);
+			}
+		};
+		assertFalse(installPhase.isApplicable(new InstallableUnitOperand(iuXv1, null)));
+		assertFalse(installPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv1)));
+		assertTrue(installPhase.isApplicable(new InstallableUnitOperand(null, iuXv1)));
+		assertTrue(installPhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv2)));
+	}
+
+	public void testConfigurePhase() {
+
+		IInstallableUnit iuXv1 = createIU("iuX", new Version("1.0.0"));
+		IInstallableUnit iuXv2 = createIU("iuX", new Version("2.0.0"));
+
+		Configure configurePhase = new Configure(1) {
+			protected boolean isApplicable(InstallableUnitOperand op) {
+				return super.isApplicable(op);
+			}
+		};
+		assertFalse(configurePhase.isApplicable(new InstallableUnitOperand(iuXv1, null)));
+		assertTrue(configurePhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv1)));
+		assertTrue(configurePhase.isApplicable(new InstallableUnitOperand(null, iuXv1)));
+		assertTrue(configurePhase.isApplicable(new InstallableUnitOperand(iuXv1, iuXv2)));
+	}
+}
commit 43454c1d08bea44d9a1610aa2b56251b93e4c7bd
Author: Simon Kaegi <skaegi>
Date:   Mon Jan 12 17:02:26 2009 +0000

    Bug 217744 [engine][planner] React to CU attachment change

50	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
165	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
index cd6f667..85910f2 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
@@ -38,10 +38,59 @@ public class OperationGenerator {
 		ArrayList operations = new ArrayList();
 		generateUpdates(from, to, operations);
 		generateInstallUninstall(from, to, operations);
+		generateConfigurationChanges(to_, intersection, operations);
 		InstallableUnitOperand[] ops = (InstallableUnitOperand[]) operations.toArray(new InstallableUnitOperand[operations.size()]);
 		return ops;
 	}
 
+	//This generates operations that are causing the IUs to be reconfigured.
+	private void generateConfigurationChanges(Collection to_, Collection intersection, ArrayList operations) {
+		if (intersection.size() == 0)
+			return;
+		//We retain from each set the things that are the same.
+		//Note that despite the fact that they are the same, a different CU can be attached.
+		//The objects contained in the intersection are the one that were originally in the from collection.
+		TreeSet to = new TreeSet(to_);
+		for (Iterator iterator = intersection.iterator(); iterator.hasNext();) {
+			IInstallableUnit fromIU = (IInstallableUnit) iterator.next();
+			IInstallableUnit toIU = (IInstallableUnit) to.tailSet(fromIU).first();
+			generateConfigurationOperation(fromIU, toIU, operations);
+		}
+
+	}
+
+	private void generateConfigurationOperation(IInstallableUnit fromIU, IInstallableUnit toIU, ArrayList operations) {
+		IInstallableUnitFragment[] fromFragments = fromIU.getFragments();
+		IInstallableUnitFragment[] toFragments = toIU.getFragments();
+		if (fromFragments == toFragments)
+			return;
+		//Check to see if the two arrays are equals independently of the order of the fragments
+		boolean different = false;
+		if (fromFragments != null && toFragments != null) {
+			if (fromFragments.length != toFragments.length)
+				different = true;
+			else {
+				for (int i = 0; i < fromFragments.length; i++) {
+					boolean found = false;
+					for (int j = 0; j < toFragments.length; j++) {
+						if (fromFragments[i].equals(toFragments[j]))
+							found = true;
+					}
+					if (!found) {
+						different = true;
+						break;
+					}
+				}
+			}
+		} else {
+			//One of the two array is null
+			different = true;
+		}
+		if (!different)
+			return;
+		operations.add(new InstallableUnitOperand(fromIU, toIU));
+	}
+
 	private void generateInstallUninstall(List from, List to, ArrayList operations) {
 		int toIdx = 0;
 		int fromIdx = 0;
@@ -105,7 +154,7 @@ public class OperationGenerator {
 			if (fromIdIndexList == null)
 				continue;
 
-			//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of 
+			//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of
 			InstallableUnitQuery updateQuery = new InstallableUnitQuery(iuTo.getUpdateDescriptor().getId(), iuTo.getUpdateDescriptor().getRange());
 			Iterator updates = updateQuery.perform(fromIdIndexList.iterator(), new Collector()).iterator();
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
index 089b691..a5b4103 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.p2.tests.director;
 import java.util.ArrayList;
 import java.util.Collection;
 import org.eclipse.equinox.internal.p2.director.OperationGenerator;
+import org.eclipse.equinox.internal.p2.metadata.ResolvedInstallableUnit;
 import org.eclipse.equinox.internal.p2.resolution.ResolutionHelper;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
@@ -351,4 +352,168 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 		assertEquals("1.1", one, operands[0].first());
 		assertNull("1.2", operands[0].second());
 	}
+
+	public void testConfigurationChange1() {
+		String id = "myBundle";
+		String cuId = "cu";
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anotherIU = createIU("misc", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anotherIU2 = createIU("misc2", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnitFragment cu1 = createIUFragment(anIU, cuId, new Version("1.0.0"));
+		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
+
+		Collection from = new ArrayList();
+		ResolvedInstallableUnit fromResolved = (ResolvedInstallableUnit) MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu1});
+		from.add(fromResolved);
+		from.add(MetadataFactory.createResolvedInstallableUnit(anotherIU, new IInstallableUnitFragment[0]));
+
+		Collection to = new ArrayList();
+		IInstallableUnit toResolved = MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu2});
+		to.add(toResolved);
+		to.add(MetadataFactory.createResolvedInstallableUnit(anotherIU2, new IInstallableUnitFragment[0]));
+
+		from = new ResolutionHelper(null, null).attachCUs(from);
+		to = new ResolutionHelper(null, null).attachCUs(to);
+		InstallableUnitOperand[] operands = new OperationGenerator().generateOperation(from, to);
+
+		assertEquals("1.0", 3, operands.length);
+		assertContainsConfigurationChange("2.0", operands);
+		assertContainsInstallableUnitOperand("3.0", operands, new InstallableUnitOperand(fromResolved, toResolved));
+	}
+
+	private void assertContainsInstallableUnitOperand(String message, InstallableUnitOperand[] operands, InstallableUnitOperand operand) {
+		for (int i = 0; i < operands.length; i++) {
+			if (operands[i].first() != null && operands[i].first().equals(operand.first()) && operands[i].second() != null && operands[i].second().equals(operand.second()))
+				return;
+		}
+		fail(message);
+	}
+
+	public void testConfigurationChange2() {
+		String id = "myBundle";
+		String cuId = "cu";
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
+
+		Collection from = new ArrayList();
+		ResolvedInstallableUnit fromResolved = (ResolvedInstallableUnit) MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[0]);
+		from.add(fromResolved);
+
+		Collection to = new ArrayList();
+		IInstallableUnit toResolved = MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu2});
+		to.add(toResolved);
+
+		from = new ResolutionHelper(null, null).attachCUs(from);
+		to = new ResolutionHelper(null, null).attachCUs(to);
+		InstallableUnitOperand[] operands = new OperationGenerator().generateOperation(from, to);
+
+		assertEquals("1.0", 1, operands.length);
+		assertContainsInstallableUnitOperand("3.0", operands, new InstallableUnitOperand(fromResolved, toResolved));
+	}
+
+	public void testConfigurationChange3() {
+		String id = "myBundle";
+		String cuId = "cu";
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
+
+		Collection from = new ArrayList();
+		ResolvedInstallableUnit fromResolved = (ResolvedInstallableUnit) MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu2});
+		from.add(fromResolved);
+
+		Collection to = new ArrayList();
+		IInstallableUnit toResolved = MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[0]);
+		to.add(toResolved);
+
+		from = new ResolutionHelper(null, null).attachCUs(from);
+		to = new ResolutionHelper(null, null).attachCUs(to);
+		InstallableUnitOperand[] operands = new OperationGenerator().generateOperation(from, to);
+
+		assertEquals("1.0", 1, operands.length);
+		assertContainsInstallableUnitOperand("3.0", operands, new InstallableUnitOperand(fromResolved, toResolved));
+	}
+
+	public void testConfigurationChange4() {
+		String id = "myBundle";
+		String cuId = "cu";
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
+
+		Collection from = new ArrayList();
+		ResolvedInstallableUnit fromResolved = (ResolvedInstallableUnit) MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu2});
+		from.add(fromResolved);
+
+		Collection to = new ArrayList();
+		IInstallableUnit toResolved = MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu2});
+		to.add(toResolved);
+
+		from = new ResolutionHelper(null, null).attachCUs(from);
+		to = new ResolutionHelper(null, null).attachCUs(to);
+		InstallableUnitOperand[] operands = new OperationGenerator().generateOperation(from, to);
+
+		assertEquals("1.0", 0, operands.length);
+	}
+
+	public void testConfigurationChange5() {
+		String id = "myBundle";
+		String cuId = "cu";
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
+		IInstallableUnitFragment cu1 = createIUFragment(anIU, cuId, new Version("1.0.0"));
+
+		Collection from = new ArrayList();
+		ResolvedInstallableUnit fromResolved = (ResolvedInstallableUnit) MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu1, cu2});
+		from.add(fromResolved);
+
+		Collection to = new ArrayList();
+		IInstallableUnit toResolved = MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu2, cu1});
+		to.add(toResolved);
+
+		from = new ResolutionHelper(null, null).attachCUs(from);
+		to = new ResolutionHelper(null, null).attachCUs(to);
+		InstallableUnitOperand[] operands = new OperationGenerator().generateOperation(from, to);
+
+		assertEquals("1.0", 0, operands.length);
+	}
+
+	public void testConfigurationChange6() {
+		String id = "myBundle";
+		String cuId = "cu";
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
+		IInstallableUnitFragment cu1 = createIUFragment(anIU, cuId, new Version("1.0.0"));
+		IInstallableUnitFragment cu3 = createIUFragment(anIU, cuId, new Version("3.0.0"));
+
+		Collection from = new ArrayList();
+		ResolvedInstallableUnit fromResolved = (ResolvedInstallableUnit) MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu1, cu2});
+		from.add(fromResolved);
+
+		Collection to = new ArrayList();
+		IInstallableUnit toResolved = MetadataFactory.createResolvedInstallableUnit(anIU, new IInstallableUnitFragment[] {cu1, cu3});
+		to.add(toResolved);
+
+		from = new ResolutionHelper(null, null).attachCUs(from);
+		to = new ResolutionHelper(null, null).attachCUs(to);
+		InstallableUnitOperand[] operands = new OperationGenerator().generateOperation(from, to);
+
+		assertEquals("1.0", 1, operands.length);
+		assertContainsInstallableUnitOperand("3.0", operands, new InstallableUnitOperand(fromResolved, toResolved));
+	}
+
+	public void assertContains(String message, Object[] searched, Object expected) {
+		for (int i = 0; i < searched.length; i++) {
+			if (searched[i].equals(expected))
+				return;
+		}
+		fail(message + "Can't find " + expected);
+	}
+
+	public void assertContainsConfigurationChange(String message, InstallableUnitOperand[] ops) {
+		for (int i = 0; i < ops.length; i++) {
+			if (ops[i].first() != null && ops[i].first().equals(ops[i].second())) {
+				return;
+			}
+		}
+		fail(message + " No configuration change operand found");
+	}
 }

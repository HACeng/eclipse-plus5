commit 0ac124d692b627e69e1328a7222cefa9555813e7
Author: Simon Kaegi <skaegi>
Date:   Fri Feb 15 22:52:50 2008 +0000

    Bug 218741 [prov] Improve Profile/Install Registry Format

0	1	bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
57	30	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
84	47	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
27	10	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
4	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
186	237	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
0	36	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IInstallRegistry.java
0	33	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IProfileInstallRegistry.java
0	679	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Operand.java
0	1	bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
0	17	bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
0	1	bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
0	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
0	110	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
99	43	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
index 789b81f..412b1f1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
@@ -6,7 +6,6 @@ Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Bundle-Version: 0.1.0.qualifier
 Export-Package: org.eclipse.equinox.internal.p2.engine;x-friends:="org.eclipse.equinox.p2.touchpoint.eclipse,org.eclipse.equinox.p2.touchpoint.natives",
- org.eclipse.equinox.internal.p2.installregistry,
  org.eclipse.equinox.internal.provisional.p2.engine,
  org.eclipse.equinox.internal.provisional.p2.engine.phases
 Import-Package: javax.xml.parsers,
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
index affdd37..89cb90e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
@@ -9,11 +9,9 @@
 package org.eclipse.equinox.internal.p2.engine;
 
 import java.util.*;
+import java.util.Map.Entry;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.installregistry.IInstallRegistry;
-import org.eclipse.equinox.internal.p2.installregistry.IProfileInstallRegistry;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
@@ -22,14 +20,14 @@ import org.eclipse.osgi.util.NLS;
 public class Profile implements IQueryable, IProfile {
 
 	//Internal id of the profile
-	private String profileId;
+	private final String profileId;
 
 	private Profile parentProfile;
 
 	/**
 	 * 	A collection of child profiles.
 	 */
-	private List subProfileIds = null; // child profile ids
+	private List subProfileIds; // child profile ids
 
 	private static String[] noSubProfiles = new String[0];
 	/**
@@ -48,33 +46,9 @@ public class Profile implements IQueryable, IProfile {
 			throw new IllegalArgumentException(NLS.bind(Messages.Profile_Null_Profile_Id, null));
 		}
 		this.profileId = profileId;
-		this.parentProfile = parent;
-		if (parent != null) {
-			parent.addSubProfile(profileId);
-		}
+		setParent(parent);
 		if (properties != null)
 			storage.putAll(properties);
-
-		populateIUs();
-	}
-
-	private void populateIUs() {
-		IInstallRegistry installRegistry = (IInstallRegistry) ServiceHelper.getService(EngineActivator.getContext(), IInstallRegistry.class.getName());
-		if (installRegistry == null)
-			return;
-		IProfileInstallRegistry profileInstallRegistry = installRegistry.getProfileInstallRegistry(getProfileId());
-		if (profileInstallRegistry == null)
-			return;
-
-		IInstallableUnit[] ius = profileInstallRegistry.getInstallableUnits();
-		if (ius == null)
-			return;
-
-		for (int i = 0; i < ius.length; i++) {
-			IInstallableUnit iu = ius[i];
-			OrderedProperties properties = profileInstallRegistry.getInstallableUnitProfileProperties(iu);
-			iuProperties.put(iu, new OrderedProperties(properties));
-		}
 	}
 
 	/* (non-Javadoc)
@@ -91,6 +65,18 @@ public class Profile implements IQueryable, IProfile {
 		return parentProfile;
 	}
 
+	public void setParent(Profile profile) {
+		if (profile == parentProfile)
+			return;
+
+		if (parentProfile != null)
+			parentProfile.removeSubProfile(profileId);
+
+		parentProfile = profile;
+		if (parentProfile != null)
+			parentProfile.addSubProfile(profileId);
+	}
+
 	/*
 	 * 	A profile is a root profile if it is not a sub-profile
 	 * 	of another profile.
@@ -247,9 +233,50 @@ public class Profile implements IQueryable, IProfile {
 
 	public void clearLocalProperties() {
 		storage.clear();
+		changed = true;
 	}
 
 	public boolean isChanged() {
 		return changed;
 	}
+
+	public void clearInstallableUnits() {
+		iuProperties.clear();
+		changed = true;
+	}
+
+	public Profile snapshot() {
+		Profile parentSnapshot = null;
+		if (parentProfile != null)
+			parentSnapshot = parentProfile.snapshot();
+
+		Profile snapshot = new Profile(profileId, parentSnapshot, storage);
+
+		if (subProfileIds != null) {
+			for (Iterator it = subProfileIds.iterator(); it.hasNext();) {
+				String subProfileId = (String) it.next();
+				snapshot.addSubProfile(subProfileId);
+			}
+		}
+
+		Set ius = iuProperties.keySet();
+		for (Iterator it = ius.iterator(); it.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) it.next();
+			snapshot.addInstallableUnit(iu);
+			Map properties = getInstallableUnitProperties(iu);
+			if (properties != null)
+				snapshot.addInstallableUnitProperties(iu, properties);
+		}
+		return snapshot;
+	}
+
+	public void addInstallableUnitProperties(IInstallableUnit iu, Map properties) {
+		for (Iterator it = properties.entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			String key = (String) entry.getKey();
+			String value = (String) entry.getValue();
+			setInstallableUnitProperty(iu, key, value);
+		}
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
index fa897ad..3d4ffeb 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
@@ -10,35 +10,40 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.engine;
 
-import java.util.*;
-import org.eclipse.equinox.internal.p2.persistence.XMLParser;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataParser;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.osgi.framework.BundleContext;
+import org.osgi.framework.Version;
 import org.xml.sax.Attributes;
 
 /**
  *	An abstract XML parser class for parsing profiles as written by the ProfileWriter.
  */
-public abstract class ProfileParser extends XMLParser implements ProfileXMLConstants {
+public abstract class ProfileParser extends MetadataParser implements ProfileXMLConstants {
 
 	public ProfileParser(BundleContext context, String bundleId) {
 		super(context, bundleId);
 	}
 
-	protected class ProfileHandler extends AbstractHandler {
+	protected class ProfileHandler extends RootHandler {
 
 		private final String[] required = new String[] {ID_ATTRIBUTE};
 
-		private final Map profileHandlers;
-		private String profileId = null;
+		private String profileId;
 		private String parentId;
-		private PropertiesHandler propertiesHandler = null;
+		private PropertiesHandler propertiesHandler;
+		private InstallableUnitsHandler unitsHandler;
+		private IUsPropertiesHandler iusPropertiesHandler;
 
-		public ProfileHandler(AbstractHandler parentHandler, Attributes attributes, Map profileHandlers) {
-			super(parentHandler, PROFILE_ELEMENT);
+		public ProfileHandler() {
+			// default
+		}
+
+		protected void handleRootAttributes(Attributes attributes) {
 			profileId = parseRequiredAttributes(attributes, required)[0];
 			parentId = parseOptionalAttribute(attributes, PARENT_ID_ATTRIBUTE);
-			this.profileHandlers = profileHandlers;
 		}
 
 		public void startElement(String name, Attributes attributes) {
@@ -48,17 +53,23 @@ public abstract class ProfileParser extends XMLParser implements ProfileXMLConst
 				} else {
 					duplicateElement(this, name, attributes);
 				}
+			} else if (INSTALLABLE_UNITS_ELEMENT.equals(name)) {
+				if (unitsHandler == null) {
+					unitsHandler = new InstallableUnitsHandler(this, attributes);
+				} else {
+					duplicateElement(this, name, attributes);
+				}
+			} else if (IUS_PROPERTIES_ELEMENT.equals(name)) {
+				if (iusPropertiesHandler == null) {
+					iusPropertiesHandler = new IUsPropertiesHandler(this, attributes);
+				} else {
+					duplicateElement(this, name, attributes);
+				}
 			} else {
 				invalidElement(name, attributes);
 			}
 		}
 
-		protected void finished() {
-			if (isValidXML()) {
-				profileHandlers.put(profileId, this);
-			}
-		}
-
 		public String getProfileId() {
 			return profileId;
 		}
@@ -72,50 +83,76 @@ public abstract class ProfileParser extends XMLParser implements ProfileXMLConst
 				return null;
 			return propertiesHandler.getProperties();
 		}
-	}
 
-	protected class ProfilesHandler extends AbstractHandler {
+		public IInstallableUnit[] getInstallableUnits() {
+			if (unitsHandler == null)
+				return null;
+			return unitsHandler.getUnits();
+		}
 
-		private Map profileHandlers = null;
-		private Map profiles;
+		public Map getIUProperties(IInstallableUnit iu) {
+			if (iusPropertiesHandler == null)
+				return null;
 
-		public ProfilesHandler(AbstractHandler parentHandler, Attributes attributes) {
-			super(parentHandler, PROFILES_ELEMENT);
-			String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
-			profileHandlers = (size != null ? new HashMap(new Integer(size).intValue()) : new HashMap(4));
+			Map iusPropertiesMap = iusPropertiesHandler.getIUsPropertiesMap();
+			if (iusPropertiesMap == null)
+				return null;
+
+			String iuIdentity = iu.getId() + "_" + iu.getVersion().toString(); //$NON-NLS-1$
+			return (Map) iusPropertiesMap.get(iuIdentity);
 		}
+	}
 
-		public IProfile[] getProfiles() {
-			if (profileHandlers.isEmpty())
-				return new IProfile[0];
+	protected class IUPropertiesHandler extends AbstractHandler {
 
-			profiles = new HashMap();
-			for (Iterator it = profileHandlers.keySet().iterator(); it.hasNext();) {
-				String profileId = (String) it.next();
-				addProfile(profileId);
-			}
+		private final String[] required = new String[] {ID_ATTRIBUTE, VERSION_ATTRIBUTE};
+
+		private String iuIdentity;
+		private Map iusPropertiesMap;
+		private PropertiesHandler propertiesHandler;
 
-			return (IProfile[]) profiles.values().toArray(new IProfile[profiles.size()]);
+		public IUPropertiesHandler(AbstractHandler parentHandler, Attributes attributes, Map iusPropertiesMap) {
+			super(parentHandler, IU_PROPERTIES_ELEMENT);
+			this.iusPropertiesMap = iusPropertiesMap;
+
+			String values[] = parseRequiredAttributes(attributes, required);
+			String id = values[0];
+			Version version = checkVersion(IU_PROPERTIES_ELEMENT, VERSION_ATTRIBUTE, values[1]);
+			iuIdentity = id + "_" + version.toString(); //$NON-NLS-1$
 		}
 
-		private void addProfile(String profileId) {
-			if (profiles.containsKey(profileId))
-				return;
+		protected void finished() {
+			if (isValidXML() && iuIdentity != null && propertiesHandler != null) {
+				iusPropertiesMap.put(iuIdentity, propertiesHandler.getProperties());
+			}
+		}
 
-			ProfileHandler profileHandler = (ProfileHandler) profileHandlers.get(profileId);
-			Profile parentProfile = null;
-			String parentId = profileHandler.parentId;
-			if (parentId != null) {
-				addProfile(parentId);
-				parentProfile = (Profile) profiles.get(parentId);
+		public void startElement(String name, Attributes attributes) {
+			if (name.equals(PROPERTIES_ELEMENT)) {
+				propertiesHandler = new PropertiesHandler(this, attributes);
+			} else {
+				invalidElement(name, attributes);
 			}
-			IProfile profile = new Profile(profileId, parentProfile, profileHandler.getProperties());
-			profiles.put(profileId, profile);
+		}
+	}
+
+	protected class IUsPropertiesHandler extends AbstractHandler {
+
+		private Map iusPropertiesMap;
+
+		public IUsPropertiesHandler(AbstractHandler parentHandler, Attributes attributes) {
+			super(parentHandler, IUS_PROPERTIES_ELEMENT);
+			String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
+			iusPropertiesMap = (size != null ? new LinkedHashMap(new Integer(size).intValue()) : new LinkedHashMap(4));
+		}
+
+		public Map getIUsPropertiesMap() {
+			return iusPropertiesMap;
 		}
 
 		public void startElement(String name, Attributes attributes) {
-			if (name.equals(PROFILE_ELEMENT)) {
-				new ProfileHandler(this, attributes, profileHandlers);
+			if (name.equals(IU_PROPERTIES_ELEMENT)) {
+				new IUPropertiesHandler(this, attributes, iusPropertiesMap);
 			} else {
 				invalidElement(name, attributes);
 			}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
index d21fe89..cd43042 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
@@ -12,10 +12,15 @@ package org.eclipse.equinox.internal.p2.engine;
 
 import java.io.IOException;
 import java.io.OutputStream;
-import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
+import java.util.Iterator;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 
-public class ProfileWriter extends XMLWriter implements ProfileXMLConstants {
+public class ProfileWriter extends MetadataWriter implements ProfileXMLConstants {
 
 	public ProfileWriter(OutputStream output, ProcessingInstruction[] processingInstructions) throws IOException {
 		super(output, processingInstructions);
@@ -28,17 +33,29 @@ public class ProfileWriter extends XMLWriter implements ProfileXMLConstants {
 		if (parentProfile != null)
 			attribute(PARENT_ID_ATTRIBUTE, parentProfile.getProfileId());
 		writeProperties(profile.getLocalProperties());
+		Collector collector = profile.query(InstallableUnitQuery.ANY, new Collector(), null);
+		writeInstallableUnits(collector.iterator(), collector.size());
+		writeInstallableUnitsProperties(collector.iterator(), collector.size(), profile);
 		end(PROFILE_ELEMENT);
 	}
 
-	public void writeProfiles(IProfile[] profiles) {
-		if (profiles.length > 0) {
-			start(PROFILES_ELEMENT);
-			attribute(COLLECTION_SIZE_ATTRIBUTE, profiles.length);
-			for (int i = 0; i < profiles.length; i++) {
-				writeProfile(profiles[i]);
-			}
-			end(PROFILES_ELEMENT);
+	private void writeInstallableUnitsProperties(Iterator it, int size, IProfile profile) {
+		if (size == 0)
+			return;
+		start(IUS_PROPERTIES_ELEMENT);
+		attribute(COLLECTION_SIZE_ATTRIBUTE, size);
+		while (it.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) it.next();
+			OrderedProperties properties = profile.getInstallableUnitProperties(iu);
+			if (properties.isEmpty())
+				continue;
+
+			start(IU_PROPERTIES_ELEMENT);
+			attribute(ID_ATTRIBUTE, iu.getId());
+			attribute(VERSION_ATTRIBUTE, iu.getVersion().toString());
+			writeProperties(properties);
+			end(IU_PROPERTIES_ELEMENT);
 		}
+		end(IUS_PROPERTIES_ELEMENT);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
index b0b813c..ca45bbe 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
@@ -25,7 +25,9 @@ public interface ProfileXMLConstants extends XMLConstants {
 	public static final VersionRange XML_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, new Version(2, 0, 0), false);
 
 	// Constants for profile elements
-	public static final String PROFILES_ELEMENT = "profiles"; //$NON-NLS-1$
-	public static final String PROFILE_ELEMENT = "profile"; //$NON-NLS-1$
 
+	public static final String PROFILE_ELEMENT = "profile"; //$NON-NLS-1$
+	public static final String IUS_PROPERTIES_ELEMENT = "iusProperties"; //$NON-NLS-1$
+	public static final String IU_PROPERTIES_ELEMENT = "iuProperties"; //$NON-NLS-1$
+	public static final String PROFILE_TARGET = "profile";
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 2a8a088..67b781f 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -18,8 +18,6 @@ import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
-import org.eclipse.equinox.internal.p2.installregistry.*;
-import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
@@ -27,26 +25,28 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.osgi.service.datalocation.Location;
-import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Version;
-import org.xml.sax.*;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
 
 public class SimpleProfileRegistry implements IProfileRegistry {
-	private static String STORAGE = "profileRegistry.xml"; //$NON-NLS-1$
+	private static final String STORAGE_DIR = "profileRegistry"; //$NON-NLS-1$
+
+	private static final String PROFILE_EXT = ".profile"; //$NON-NLS-1$
 
 	/**
 	 * Reference to Map of String(Profile id)->Profile. 
 	 */
-	SoftReference profiles;
-
-	OrderedProperties properties = new OrderedProperties();
+	private SoftReference profiles;
 
 	private String self;
 
 	//Whether the registry has been loaded at all in this session
-	private boolean restored = false;
+	private boolean hasBeenRestored = false;
+
+	private File registryDirectory;
 
 	public SimpleProfileRegistry() {
 		self = EngineActivator.getContext().getProperty("eclipse.p2.profile"); //$NON-NLS-1$
@@ -77,20 +77,20 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			changed = true;
 		}
 		if (changed)
-			persist();
+			saveProfile(selfProfile);
 	}
 
 	public synchronized String toString() {
-		return this.profiles.toString();
+		return getProfileMap().toString();
 	}
 
 	public synchronized IProfile getProfile(String id) {
 		if (SELF.equals(id))
 			id = self;
-		IProfile profile = (IProfile) getProfileMap().get(id);
+		Profile profile = (Profile) getProfileMap().get(id);
 		if (profile == null)
 			return null;
-		return copyProfile(profile);
+		return profile.snapshot();
 	}
 
 	public synchronized IProfile[] getProfiles() {
@@ -98,8 +98,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		Profile[] result = new Profile[profileMap.size()];
 		int i = 0;
 		for (Iterator it = profileMap.values().iterator(); it.hasNext(); i++) {
-			IProfile profile = (IProfile) it.next();
-			result[i] = copyProfile(profile);
+			Profile profile = (Profile) it.next();
+			result[i] = profile.snapshot();
 		}
 		return result;
 	}
@@ -117,22 +117,35 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		if (result == null)
 			result = new LinkedHashMap(8);
 		profiles = new SoftReference(result);
-		if (!restored) {
+		if (!hasBeenRestored) {
 			//update roaming profile on first load
-			restored = true;
+			hasBeenRestored = true;
 			updateRoamingProfile(result);
 		}
 		return result;
 	}
 
-	public synchronized void updateProfile(Profile toUpdate) {
-		String id = toUpdate.getProfileId();
+	public synchronized void updateProfile(Profile profile) {
+		String id = profile.getProfileId();
 		if (SELF.equals(id))
 			id = self;
-		Map profileMap = getProfileMap();
-		if (profileMap.get(id) == null)
+		Profile current = (Profile) getProfileMap().get(id);
+		if (current == null)
 			throw new IllegalArgumentException("Profile to be updated does not exist:" + id); //$NON-NLS-1$
-		doUpdateProfile(toUpdate, profileMap);
+
+		current.clearLocalProperties();
+		current.clearInstallableUnits();
+
+		current.addProperties(profile.getLocalProperties());
+		Collector collector = profile.query(InstallableUnitQuery.ANY, new Collector(), null);
+		for (Iterator collectorIt = collector.iterator(); collectorIt.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) collectorIt.next();
+			current.addInstallableUnit(iu);
+			Map iuProperties = profile.getInstallableUnitProperties(iu);
+			if (iuProperties != null)
+				current.addInstallableUnitProperties(iu, iuProperties);
+		}
+		saveProfile(profile);
 		broadcastChangeEvent(id, ProfileEvent.CHANGED);
 	}
 
@@ -140,11 +153,11 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		return addProfile(id, null, null);
 	}
 
-	public IProfile addProfile(String id, Map properties) {
-		return addProfile(id, properties, null);
+	public IProfile addProfile(String id, Map profileProperties) {
+		return addProfile(id, profileProperties, null);
 	}
 
-	public synchronized IProfile addProfile(String id, Map properties, String parentId) {
+	public synchronized IProfile addProfile(String id, Map profileProperties, String parentId) {
 		if (SELF.equals(id))
 			id = self;
 		Map profileMap = getProfileMap();
@@ -160,95 +173,50 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 				throw new IllegalArgumentException(NLS.bind(Messages.Profile_Parent_Not_Found, parentId));
 		}
 
-		InstallRegistry installRegistry = (InstallRegistry) ServiceHelper.getService(EngineActivator.getContext(), IInstallRegistry.class.getName());
-		if (installRegistry == null)
-			throw new IllegalStateException("InstallRegisty not available");
-		IProfileInstallRegistry profileInstallRegistry = installRegistry.createProfileInstallRegistry(id);
-
-		IProfile toAdd = new Profile(id, parent, properties);
-
-		installRegistry.addProfileInstallRegistry(profileInstallRegistry);
-		profileMap.put(id, toAdd);
-		persist();
+		Profile profile = new Profile(id, parent, profileProperties);
+		profileMap.put(id, profile);
+		saveProfile(profile);
 		broadcastChangeEvent(id, ProfileEvent.ADDED);
-		return copyProfile(toAdd);
-	}
-
-	private void doUpdateProfile(Profile toUpdate, Map profileMap) {
-		InstallRegistry installRegistry = (InstallRegistry) ServiceHelper.getService(EngineActivator.getContext(), IInstallRegistry.class.getName());
-		if (installRegistry == null)
-			return;
-
-		IProfileInstallRegistry profileInstallRegistry = installRegistry.createProfileInstallRegistry(toUpdate.getProfileId());
-		Iterator it = toUpdate.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
-		while (it.hasNext()) {
-			IInstallableUnit iu = (IInstallableUnit) it.next();
-			profileInstallRegistry.addInstallableUnits(iu);
-			OrderedProperties iuProperties = toUpdate.getInstallableUnitProperties(iu);
-			for (Iterator propIt = iuProperties.entrySet().iterator(); propIt.hasNext();) {
-				Entry propertyEntry = (Entry) propIt.next();
-				String key = (String) propertyEntry.getKey();
-				String value = (String) propertyEntry.getValue();
-				profileInstallRegistry.setInstallableUnitProfileProperty(iu, key, value);
-			}
-		}
-		installRegistry.addProfileInstallRegistry(profileInstallRegistry);
-
-		Profile current = (Profile) profileMap.get(toUpdate.getProfileId());
-		if (current == null) {
-			Profile parent = (Profile) toUpdate.getParentProfile();
-			if (parent != null)
-				parent = (Profile) profileMap.get(parent.getProfileId());
-			profileMap.put(toUpdate.getProfileId(), new Profile(toUpdate.getProfileId(), parent, toUpdate.getLocalProperties()));
-		} else {
-			current.clearLocalProperties();
-			current.addProperties(toUpdate.getLocalProperties());
-		}
-
-		// TODO: persists should be grouped some way to ensure they are consistent
-		persist();
+		return profile.snapshot();
 	}
 
 	public synchronized void removeProfile(String profileId) {
-		InstallRegistry installRegistry = (InstallRegistry) ServiceHelper.getService(EngineActivator.getContext(), IInstallRegistry.class.getName());
-		if (installRegistry == null)
-			return;
-
+		if (SELF.equals(profileId))
+			profileId = self;
 		//note we need to maintain a reference to the profile map until it is persisted to prevent gc
 		Map profileMap = getProfileMap();
-
-		if (profileMap.remove(profileId) == null)
+		Profile profile = (Profile) profileMap.get(profileId);
+		if (profile == null)
 			return;
-		installRegistry.removeProfileInstallRegistry(profileId);
-		persist();
-		broadcastChangeEvent(profileId, ProfileEvent.REMOVED);
-	}
-
-	private Profile copyProfile(IProfile profile) {
-		Profile parent = (Profile) profile.getParentProfile();
-		if (parent != null)
-			parent = copyProfile(parent);
 
-		Profile copy = new Profile(profile.getProfileId(), parent, profile.getLocalProperties());
 		String[] subProfileIds = profile.getSubProfileIds();
 		for (int i = 0; i < subProfileIds.length; i++) {
-			copy.addSubProfile(subProfileIds[i]);
+			removeProfile(subProfileIds[i]);
 		}
-		return copy;
+
+		profile.setParent(null);
+		profileMap.remove(profileId);
+		deleteProfile(profileId);
+		broadcastChangeEvent(profileId, ProfileEvent.REMOVED);
 	}
 
 	private void broadcastChangeEvent(String profileId, byte reason) {
-		((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME)).publishEvent(new ProfileEvent(profileId, reason));
+		((IProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.class.getName())).publishEvent(new ProfileEvent(profileId, reason));
 	}
 
-	private URL getRegistryLocation() {
-		AgentLocation agent = (AgentLocation) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-		try {
-			return new URL(agent.getDataArea(EngineActivator.ID), STORAGE);
-		} catch (MalformedURLException e) {
-			//this is not possible because we know the above URL is valid
+	private File getRegistryDirectory() {
+		if (registryDirectory == null) {
+			AgentLocation agent = (AgentLocation) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
+			try {
+				URL registryURL = new URL(agent.getDataArea(EngineActivator.ID), STORAGE_DIR);
+				registryDirectory = new File(registryURL.getPath());
+				registryDirectory.mkdirs();
+
+			} catch (MalformedURLException e) {
+				//this is not possible because we know the above URL is valid
+			}
 		}
-		return null;
+		return registryDirectory;
 	}
 
 	/**
@@ -256,106 +224,102 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	 * Returns <code>null</code> if unable to read the registry.
 	 */
 	private Map restore() {
-		Map loadedMap = null;
-		try {
-			BufferedInputStream bif = null;
+
+		File store = getRegistryDirectory();
+		if (store == null || !store.isDirectory())
+			throw new IllegalStateException("Registry Directory not available");
+
+		Parser parser = new Parser(EngineActivator.getContext(), EngineActivator.ID);
+		File[] profileDirectories = store.listFiles();
+		for (int i = 0; i < profileDirectories.length; i++) {
+			File profileFile = findLatestProfileFile(profileDirectories[i]);
 			try {
-				bif = new BufferedInputStream(getRegistryLocation().openStream());
-				Parser parser = new Parser(EngineActivator.getContext(), EngineActivator.ID);
-				parser.parse(bif);
-				loadedMap = parser.getProfileMap();
-				IStatus result = parser.getStatus();
-				if (!result.isOK())
-					LogHelper.log(result);
-			} finally {
-				if (bif != null)
-					bif.close();
+				parser.parse(profileFile);
+			} catch (IOException e) {
+				LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error parsing profile", e)); //$NON-NLS-1$
 			}
-		} catch (FileNotFoundException e) {
-			//This is ok.
-		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error restoring profile registry", e)); //$NON-NLS-1$
 		}
-		return loadedMap;
+		return parser.getProfileMap();
 	}
 
-	private void persist() {
-		OutputStream os;
-		try {
-			Location agent = (Location) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-			if (agent == null) {
-				LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Unable to persist profile registry due to missing AgentLocation")); //$NON-NLS-1$
-				return;
-			}
-			URL registryLocation = getRegistryLocation();
-			if (!registryLocation.getProtocol().equals("file")) //$NON-NLS-1$
-				throw new IOException(NLS.bind(Messages.SimpleProfileRegistry_Persist_To_Non_File_URL_Error, registryLocation));
-
-			File outputFile = new File(registryLocation.toExternalForm().substring(5));
-			if (!outputFile.getParentFile().exists() && !outputFile.getParentFile().mkdirs())
-				throw new RuntimeException(NLS.bind(Messages.SimpleProfileRegistry_Cannot_Create_File_Error, outputFile));
-			os = new BufferedOutputStream(new FileOutputStream(outputFile));
+	private File findLatestProfileFile(File profileDirectory) {
+
+		File latest = null;
+		long latestTimestamp = 0;
+		File[] profileFiles = profileDirectory.listFiles();
+		for (int i = 0; i < profileFiles.length; i++) {
+			File profileFile = profileFiles[i];
+			String fileName = profileFile.getName();
 			try {
-				Writer writer = new Writer(os);
-				writer.write(this);
-			} finally {
-				os.close();
+				long timestamp = Long.parseLong(fileName.substring(0, fileName.indexOf(PROFILE_EXT)));
+				if (timestamp > latestTimestamp) {
+					latestTimestamp = timestamp;
+					latest = profileFile;
+				}
+			} catch (NumberFormatException e) {
+				// ignore
 			}
-		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error persisting profile registry", e)); //$NON-NLS-1$
 		}
-
-	}
-
-	public synchronized Map getProperties() {
-		return properties;
+		return latest;
 	}
 
-	public synchronized String getProperty(String key) {
-		return properties.getProperty(key);
-	}
+	private void saveProfile(Profile profile) {
 
-	public synchronized void setProperty(String key, String value) {
-		properties.setProperty(key, value);
+		File profileDirectory = new File(registryDirectory, escape(profile.getProfileId()) + PROFILE_EXT);
+		profileDirectory.mkdir();
+		long timestamp = new Date().getTime();
+		File profileFile = new File(profileDirectory, Long.toString(timestamp) + PROFILE_EXT);
+		OutputStream os = null;
+		try {
+			os = new BufferedOutputStream(new FileOutputStream(profileFile));
+			Writer writer = new Writer(os);
+			writer.writeProfile(profile);
+		} catch (IOException e) {
+			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error persisting profile", e)); //$NON-NLS-1$
+		} finally {
+			try {
+				if (os != null)
+					os.close();
+			} catch (IOException e) {
+				// ignore
+			}
+		}
 	}
 
-	public synchronized void removeProperty(String key) {
-		properties.remove(key);
+	private void deleteProfile(String profileId) {
+		File profileDirectory = new File(registryDirectory, escape(profileId) + PROFILE_EXT);
+		FileUtils.deleteAll(profileDirectory);
 	}
 
-	private interface XMLConstants extends org.eclipse.equinox.internal.p2.persistence.XMLConstants {
-
-		// Constants defining the structure of the XML for a SimpleProfileRegistry
-
-		// A format version number for simple profile registry XML.
-		public static final Version CURRENT_VERSION = new Version(0, 0, 2);
-		public static final Version COMPATIBLE_VERSION = new Version(0, 0, 1);
-		public static final VersionRange XML_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, new Version(2, 0, 0), false);
-
-		// Constants for processing instructions
-		public static final String PI_REPOSITORY_TARGET = "profileRegistry"; //$NON-NLS-1$
-		public static XMLWriter.ProcessingInstruction[] PI_DEFAULTS = new XMLWriter.ProcessingInstruction[] {XMLWriter.ProcessingInstruction.makeClassVersionInstruction(PI_REPOSITORY_TARGET, SimpleProfileRegistry.class, CURRENT_VERSION)};
-
-		// Constants for profile registry elements
-		public static final String REGISTRY_ELEMENT = "profileRegistry"; //$NON-NLS-1$
-
+	private static String escape(String toEscape) {
+		StringBuffer buffer = new StringBuffer();
+		int length = toEscape.length();
+		for (int i = 0; i < length; ++i) {
+			char ch = toEscape.charAt(i);
+			switch (ch) {
+				case '\\' :
+				case '/' :
+				case ':' :
+				case '*' :
+				case '?' :
+				case '"' :
+				case '<' :
+				case '>' :
+				case '|' :
+				case '%' :
+					buffer.append("%" + (int) ch + ";"); //$NON-NLS-1$ //$NON-NLS-2$
+					break;
+				default :
+					buffer.append(ch);
+			}
+		}
+		return buffer.toString();
 	}
 
-	protected class Writer extends ProfileWriter implements XMLConstants {
+	private class Writer extends ProfileWriter {
 
 		public Writer(OutputStream output) throws IOException {
-			super(output, PI_DEFAULTS);
-		}
-
-		/**
-		 * Write the given SimpleProfileRegistry to the output stream.
-		 */
-		public void write(SimpleProfileRegistry registry) {
-			start(REGISTRY_ELEMENT);
-			writeProperties(registry.getProperties());
-			writeProfiles(registry.getProfiles());
-			end(REGISTRY_ELEMENT);
-			flush();
+			super(output, new ProcessingInstruction[] {ProcessingInstruction.makeClassVersionInstruction(PROFILE_TARGET, Profile.class, ProfileXMLConstants.CURRENT_VERSION)});
 		}
 	}
 
@@ -363,8 +327,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	 * 	Parser for the contents of a SimpleProfileRegistry,
 	 * 	as written by the Writer class.
 	 */
-	private class Parser extends ProfileParser implements XMLConstants {
-		Map profileMap = new LinkedHashMap(8);
+	private class Parser extends ProfileParser {
+		private final Map profileHandlers = new HashMap();
 
 		public Parser(BundleContext context, String bundleId) {
 			super(context, bundleId);
@@ -380,9 +344,10 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 				// TODO: currently not caching the parser since we make no assumptions
 				//		 or restrictions on concurrent parsing
 				getParser();
-				RegistryHandler registryHandler = new RegistryHandler();
-				xmlReader.setContentHandler(new ProfileRegistryDocHandler(REGISTRY_ELEMENT, registryHandler));
+				ProfileHandler profileHandler = new ProfileHandler();
+				xmlReader.setContentHandler(new ProfileDocHandler(PROFILE_ELEMENT, profileHandler));
 				xmlReader.parse(new InputSource(stream));
+				profileHandlers.put(profileHandler.getProfileId(), profileHandler);
 			} catch (SAXException e) {
 				throw new IOException(e.getMessage());
 			} catch (ParserConfigurationException e) {
@@ -396,76 +361,60 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			return SimpleProfileRegistry.this;
 		}
 
-		/**
-		 * Returns the map of profiles that was parsed.
-		 */
-		protected Map getProfileMap() {
+		public Map getProfileMap() {
+			Map profileMap = new HashMap();
+			for (Iterator it = profileHandlers.keySet().iterator(); it.hasNext();) {
+				String profileId = (String) it.next();
+				addProfile(profileId, profileMap);
+			}
 			return profileMap;
 		}
 
-		private final class ProfileRegistryDocHandler extends DocHandler {
+		private void addProfile(String profileId, Map profileMap) {
+			if (profileMap.containsKey(profileId))
+				return;
 
-			public ProfileRegistryDocHandler(String rootName, RootHandler rootHandler) {
-				super(rootName, rootHandler);
+			ProfileHandler profileHandler = (ProfileHandler) profileHandlers.get(profileId);
+			Profile parentProfile = null;
+
+			String parentId = profileHandler.getParentId();
+			if (parentId != null) {
+				addProfile(parentId, profileMap);
+				parentProfile = (Profile) profileMap.get(parentId);
 			}
 
-			public void ProcessingInstruction(String target, String data) throws SAXException {
-				if (PI_REPOSITORY_TARGET.equals(target)) {
-					// TODO: should the root handler be constructed based on class
-					// 		 via an extension registry mechanism?
-					// String clazz = extractPIClass(data);
-					// and
-					// TODO: version tolerance by extension
-					Version repositoryVersion = extractPIVersion(target, data);
-					if (!XMLConstants.XML_TOLERANCE.isIncluded(repositoryVersion)) {
-						throw new SAXException(NLS.bind(Messages.SimpleProfileRegistry_Parser_Has_Incompatible_Version, repositoryVersion, XMLConstants.XML_TOLERANCE));
+			Profile profile = new Profile(profileId, parentProfile, profileHandler.getProperties());
+			IInstallableUnit[] ius = profileHandler.getInstallableUnits();
+			if (ius != null) {
+				for (int i = 0; i < ius.length; i++) {
+					IInstallableUnit iu = ius[i];
+					profile.addInstallableUnit(iu);
+					Map iuProperties = profileHandler.getIUProperties(iu);
+					if (iuProperties != null) {
+						for (Iterator it = iuProperties.entrySet().iterator(); it.hasNext();) {
+							Entry entry = (Entry) it.next();
+							String key = (String) entry.getKey();
+							String value = (String) entry.getValue();
+							profile.setInstallableUnitProperty(iu, key, value);
+						}
 					}
 				}
 			}
-
+			profileMap.put(profileId, profile);
 		}
 
-		private final class RegistryHandler extends RootHandler {
+		private final class ProfileDocHandler extends DocHandler {
 
-			private ProfilesHandler profilesHandler = null;
-			private PropertiesHandler propertiesHandler = null;
-
-			public RegistryHandler() {
-				super();
-			}
-
-			protected void handleRootAttributes(Attributes attributes) {
-				parseRequiredAttributes(attributes, noAttributes);
-			}
-
-			public void startElement(String name, Attributes attributes) {
-				if (PROPERTIES_ELEMENT.equals(name)) {
-					if (propertiesHandler == null) {
-						propertiesHandler = new PropertiesHandler(this, attributes);
-					} else {
-						duplicateElement(this, name, attributes);
-					}
-				} else if (PROFILES_ELEMENT.equals(name)) {
-					if (profilesHandler == null) {
-						profilesHandler = new ProfilesHandler(this, attributes);
-					} else {
-						duplicateElement(this, name, attributes);
-					}
-				} else {
-					invalidElement(name, attributes);
-				}
+			public ProfileDocHandler(String rootName, RootHandler rootHandler) {
+				super(rootName, rootHandler);
 			}
 
-			protected void finished() {
-				if (isValidXML()) {
-					IProfile[] profyles = (profilesHandler == null ? new IProfile[0] //
-							: profilesHandler.getProfiles());
-					for (int i = 0; i < profyles.length; i++) {
-						IProfile nextProfile = profyles[i];
-						profileMap.put(nextProfile.getProfileId(), nextProfile);
+			public void ProcessingInstruction(String target, String data) throws SAXException {
+				if (ProfileXMLConstants.PROFILE_TARGET.equals(target)) {
+					Version repositoryVersion = extractPIVersion(target, data);
+					if (!ProfileXMLConstants.XML_TOLERANCE.isIncluded(repositoryVersion)) {
+						throw new SAXException(NLS.bind(Messages.SimpleProfileRegistry_Parser_Has_Incompatible_Version, repositoryVersion, ProfileXMLConstants.XML_TOLERANCE));
 					}
-					properties = (propertiesHandler == null ? new OrderedProperties(0) //
-							: propertiesHandler.getProperties());
 				}
 			}
 		}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IInstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IInstallRegistry.java
deleted file mode 100644
index d38eaf3..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IInstallRegistry.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.installregistry;
-
-import java.util.Collection;
-
-/**
- * The install registry records information about a profile, including profile
- * properties, and the installable units stored in that profile.
- */
-public interface IInstallRegistry {
-
-	/**
-	 * Returns the install registry for the given profile, or <code>null</code> if
-	 * no such profile is known to the install registry.
-	 * 
-	 * @param profileId The id of the profile to obtain the registry for
-	 * @return The install registry for the given profile, or <code>null</code>
-	 */
-	public abstract IProfileInstallRegistry getProfileInstallRegistry(String profileId);
-
-	/**
-	 * Returns the profile install registries of all profiles known to the install registry.
-	 * 
-	 * @return A Collection of IProfileInstallRegistry
-	 */
-	public abstract Collection getProfileInstallRegistries();
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IProfileInstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IProfileInstallRegistry.java
deleted file mode 100644
index ef05051..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/IProfileInstallRegistry.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.installregistry;
-
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-
-public interface IProfileInstallRegistry {
-
-	public IInstallableUnit[] getInstallableUnits();
-
-	public IInstallableUnit getInstallableUnit(String id, String version);
-
-	public void addInstallableUnits(IInstallableUnit toAdd);
-
-	public void removeInstallableUnits(IInstallableUnit toRemove);
-
-	public String getProfileId();
-
-	public String getInstallableUnitProfileProperty(IInstallableUnit iu, String key);
-
-	public String setInstallableUnitProfileProperty(IInstallableUnit iu, String key, String value);
-
-	public OrderedProperties getInstallableUnitProfileProperties(IInstallableUnit iu);
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
deleted file mode 100644
index b4346e4..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
+++ /dev/null
@@ -1,679 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.installregistry;
-
-import java.io.*;
-import java.lang.ref.SoftReference;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.*;
-import javax.xml.parsers.ParserConfigurationException;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.p2.core.helpers.*;
-import org.eclipse.equinox.internal.p2.engine.*;
-import org.eclipse.equinox.internal.p2.engine.Messages;
-import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataParser;
-import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
-import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
-import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.osgi.service.resolver.VersionRange;
-import org.eclipse.osgi.util.NLS;
-import org.osgi.framework.BundleContext;
-import org.osgi.framework.Version;
-import org.xml.sax.*;
-
-public class InstallRegistry implements IInstallRegistry {
-	class IUIdentity {
-
-		String id;
-		Version version;
-
-		public IUIdentity(IInstallableUnit iu) {
-			this(iu.getId(), iu.getVersion());
-		}
-
-		public IUIdentity(String id, Version version) {
-			this.id = (id != null ? id : ""); //$NON-NLS-1$
-			this.version = (version != null ? version : Version.emptyVersion);
-		}
-
-		public boolean equals(Object obj) {
-			final IUIdentity objAsIdentity = //
-			(obj instanceof IUIdentity ? (IUIdentity) obj : null);
-			if (objAsIdentity != null) {
-				return this.id.equals(objAsIdentity.id) && this.version.equals(objAsIdentity.version);
-			}
-			return false;
-		}
-
-		public int hashCode() {
-			final int prime = 31;
-			int result = 1;
-			result = prime * result + ((id == null) ? 0 : id.hashCode());
-			result = prime * result + ((version == null) ? 0 : version.hashCode());
-			return result;
-		}
-
-		public String toString() {
-			return id + ' ' + version;
-		}
-	}
-
-	/*
-	 * 	Parser for the contents of an InstallRegistry,
-	 * 	as written by the Writer class.
-	 */
-	private class Parser extends MetadataParser implements XMLConstants {
-
-		private final class InstallRegistryDocHandler extends DocHandler {
-
-			public InstallRegistryDocHandler(String rootName, RootHandler rootHandler) {
-				super(rootName, rootHandler);
-			}
-
-			public void ProcessingInstruction(String target, String data) throws SAXException {
-				if (PI_REPOSITORY_TARGET.equals(target)) {
-					// TODO: should the root handler be constructed based on class
-					// 		 or via an extension registry mechanism?
-					// String clazz = extractPIClass(data);
-					// and
-					// TODO: version tolerance by extension or by class?
-					Version repositoryVersion = extractPIVersion(target, data);
-					if (!XMLConstants.XML_TOLERANCE.isIncluded(repositoryVersion)) {
-						throw new SAXException(NLS.bind(Messages.InstallRegistry_Parser_Has_Incompatible_Version, repositoryVersion, XMLConstants.XML_TOLERANCE));
-					}
-				}
-			}
-		}
-
-		private final class InstallRegistryHandler extends RootHandler {
-
-			private ProfileInstallRegistriesHandler profilesHandler = null;
-
-			private Map profyleRegistries = null;
-
-			public InstallRegistryHandler() {
-				super();
-			}
-
-			protected void finished() {
-				if (isValidXML()) {
-					ProfileInstallRegistry[] registries = (profilesHandler == null ? new ProfileInstallRegistry[0] //
-							: profilesHandler.getProfileInstallRegistries());
-					profyleRegistries = new LinkedHashMap(registries.length);
-					for (int i = 0; i < registries.length; i++) {
-						ProfileInstallRegistry nextProfileRegistry = registries[i];
-						profyleRegistries.put(nextProfileRegistry.getProfileId(), nextProfileRegistry);
-					}
-				}
-			}
-
-			public Map getProfileInstallRegistries() {
-				return (profyleRegistries != null ? profyleRegistries : new LinkedHashMap(0));
-			}
-
-			protected void handleRootAttributes(Attributes attributes) {
-				parseRequiredAttributes(attributes, noAttributes);
-			}
-
-			public void startElement(String name, Attributes attributes) {
-				if (PROFILE_INSTALL_REGISTRIES_ELEMENT.equals(name)) {
-					if (profilesHandler == null) {
-						profilesHandler = new ProfileInstallRegistriesHandler(this, attributes);
-					} else {
-						duplicateElement(this, name, attributes);
-					}
-				} else {
-					invalidElement(name, attributes);
-				}
-			}
-		}
-
-		protected class IUPropertiesHandler extends AbstractHandler {
-
-			private IUIdentity iuIdentity = null;
-
-			private Map iusPropertiesMap = null;
-			private PropertiesHandler propertiesHandler = null;
-			private final String[] required = new String[] {ID_ATTRIBUTE, VERSION_ATTRIBUTE};
-
-			public IUPropertiesHandler(AbstractHandler parentHandler, Attributes attributes, Map iusPropertiesMap) {
-				super(parentHandler, IU_PROPERTIES_ELEMENT);
-				String values[] = parseRequiredAttributes(attributes, required);
-				Version version = checkVersion(IU_PROPERTIES_ELEMENT, VERSION_ATTRIBUTE, values[1]);
-				iuIdentity = new IUIdentity(values[0], version);
-				this.iusPropertiesMap = iusPropertiesMap;
-			}
-
-			protected void finished() {
-				if (isValidXML() && iuIdentity != null && propertiesHandler != null) {
-					iusPropertiesMap.put(iuIdentity, propertiesHandler.getProperties());
-				}
-			}
-
-			public void startElement(String name, Attributes attributes) {
-				if (name.equals(PROPERTIES_ELEMENT)) {
-					propertiesHandler = new PropertiesHandler(this, attributes);
-				} else {
-					invalidElement(name, attributes);
-				}
-			}
-		}
-
-		protected class IUsPropertiesHandler extends AbstractHandler {
-
-			private Map iusPropertiesMap;
-
-			public IUsPropertiesHandler(AbstractHandler parentHandler, Attributes attributes) {
-				super(parentHandler, IUS_PROPERTIES_ELEMENT);
-				String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
-				iusPropertiesMap = (size != null ? new LinkedHashMap(new Integer(size).intValue()) : new LinkedHashMap(4));
-			}
-
-			public Map getIUsPropertiesMap() {
-				return iusPropertiesMap;
-			}
-
-			public void startElement(String name, Attributes attributes) {
-				if (name.equals(IU_PROPERTIES_ELEMENT)) {
-					new IUPropertiesHandler(this, attributes, iusPropertiesMap);
-				} else {
-					invalidElement(name, attributes);
-				}
-			}
-		}
-
-		protected class ProfileInstallRegistriesHandler extends AbstractHandler {
-
-			private List registries = null;
-
-			public ProfileInstallRegistriesHandler(AbstractHandler parentHandler, Attributes attributes) {
-				super(parentHandler, PROFILE_INSTALL_REGISTRIES_ELEMENT);
-				String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
-				registries = (size != null ? new ArrayList(new Integer(size).intValue()) : new ArrayList(4));
-			}
-
-			public ProfileInstallRegistry[] getProfileInstallRegistries() {
-				return (ProfileInstallRegistry[]) registries.toArray(new ProfileInstallRegistry[registries.size()]);
-			}
-
-			public void startElement(String name, Attributes attributes) {
-				if (name.equals(PROFILE_INSTALL_REGISTRY_ELEMENT)) {
-					new ProfileInstallRegistryHandler(this, attributes, registries);
-				} else {
-					invalidElement(name, attributes);
-				}
-			}
-		}
-
-		protected class ProfileInstallRegistryHandler extends AbstractHandler {
-
-			private IUsPropertiesHandler iusPropertiesHandler = null;
-
-			private String profileId = null;
-
-			List registries = null;
-
-			private final String[] required = new String[] {PROFILE_ID_ATTRIBUTE};
-			private InstallableUnitsHandler unitsHandler = null;
-
-			public ProfileInstallRegistryHandler(AbstractHandler parentHandler, Attributes attributes, List registries) {
-				super(parentHandler, PROFILE_INSTALL_REGISTRY_ELEMENT);
-				profileId = parseRequiredAttributes(attributes, required)[0];
-				this.registries = registries;
-			}
-
-			protected void finished() {
-				if (isValidXML() && profileId != null) {
-					IInstallableUnit[] units = (unitsHandler == null ? new IInstallableUnit[0] //
-							: unitsHandler.getUnits());
-					Map iusPropertiesMap = (iusPropertiesHandler == null ? new LinkedHashMap() //
-							: iusPropertiesHandler.getIUsPropertiesMap());
-					ProfileInstallRegistry registry = new ProfileInstallRegistry(profileId, units, iusPropertiesMap);
-					registries.add(registry);
-				}
-			}
-
-			public void startElement(String name, Attributes attributes) {
-				if (INSTALLABLE_UNITS_ELEMENT.equals(name)) {
-					if (unitsHandler == null) {
-						unitsHandler = new InstallableUnitsHandler(this, attributes);
-					} else {
-						duplicateElement(this, name, attributes);
-					}
-				} else if (IUS_PROPERTIES_ELEMENT.equals(name)) {
-					if (iusPropertiesHandler == null) {
-						iusPropertiesHandler = new IUsPropertiesHandler(this, attributes);
-					} else {
-						duplicateElement(this, name, attributes);
-					}
-				} else {
-					invalidElement(name, attributes);
-				}
-			}
-		}
-
-		private Map profileInstallRegistries = null;
-
-		public Parser(BundleContext context, String bundleId) {
-			super(context, bundleId);
-		}
-
-		protected String getErrorMessage() {
-			return Messages.InstallRegistry_Parser_Error_Parsing_Registry;
-		}
-
-		public Map getProfileInstallRegistries() {
-			return profileInstallRegistries;
-		}
-
-		protected Object getRootObject() {
-			return profileInstallRegistries;
-		}
-
-		public void parse(File file) throws IOException {
-			parse(new FileInputStream(file));
-		}
-
-		public synchronized void parse(InputStream stream) throws IOException {
-			this.status = null;
-			try {
-				// TODO: currently not caching the parser since we make no assumptions
-				//		 or restrictions on concurrent parsing
-				getParser();
-				InstallRegistryHandler registryHandler = new InstallRegistryHandler();
-				xmlReader.setContentHandler(new InstallRegistryDocHandler(INSTALL_REGISTRY_ELEMENT, registryHandler));
-				xmlReader.parse(new InputSource(stream));
-				if (this.isValidXML()) {
-					profileInstallRegistries = registryHandler.getProfileInstallRegistries();
-				}
-			} catch (SAXException e) {
-				throw new IOException(e.getMessage());
-			} catch (ParserConfigurationException e) {
-				throw new IOException(e.getMessage());
-			} finally {
-				stream.close();
-			}
-		}
-
-		public String toString() {
-			// TODO:
-			return null;
-		}
-
-	}
-
-	/**
-	 * Install registry for a single profile.
-	 */
-	public class ProfileInstallRegistry implements IProfileInstallRegistry {
-		Set installableUnits; //id 
-		private Map iuPropertiesMap; // iu->OrderedProperties
-		private String profileId; // id profile this data applies to
-
-		public ProfileInstallRegistry(String profileId) {
-			this.profileId = profileId;
-			this.installableUnits = new LinkedHashSet();
-			this.iuPropertiesMap = new LinkedHashMap();
-		}
-
-		protected ProfileInstallRegistry(String profileId, IInstallableUnit[] units, Map iuPropertiesMap) {
-			this.profileId = profileId;
-			this.installableUnits = new LinkedHashSet(units.length);
-			this.iuPropertiesMap = new LinkedHashMap(iuPropertiesMap.size());
-			addInstallableUnits(units);
-			this.iuPropertiesMap.putAll(iuPropertiesMap);
-		}
-
-		public void addInstallableUnits(IInstallableUnit toAdd) {
-			installableUnits.add(toAdd);
-		}
-
-		public void addInstallableUnits(IInstallableUnit[] toAdd) {
-			for (int i = 0; i < toAdd.length; i++) {
-				installableUnits.add(toAdd[i]);
-			}
-		}
-
-		public IInstallableUnit getInstallableUnit(String id, String version) {
-			for (Iterator i = installableUnits.iterator(); i.hasNext();) {
-				IInstallableUnit iu = (IInstallableUnit) i.next();
-				if (iu.getId().equals(id) && iu.getVersion().equals(new Version(version)))
-					return iu;
-			}
-			return null;
-		}
-
-		public OrderedProperties getInstallableUnitProfileProperties(IInstallableUnit toGet) {
-			OrderedProperties properties = (OrderedProperties) iuPropertiesMap.get(new IUIdentity(toGet));
-			if (properties == null) {
-				properties = new OrderedProperties();
-				iuPropertiesMap.put(new IUIdentity(toGet), properties);
-			}
-			return properties;
-		}
-
-		public String getInstallableUnitProfileProperty(IInstallableUnit toGet, String key) {
-			OrderedProperties properties = getInstallableUnitProfileProperties(toGet);
-			return properties.getProperty(key);
-		}
-
-		public IInstallableUnit[] getInstallableUnits() {
-			IInstallableUnit[] result = new IInstallableUnit[installableUnits.size()];
-			return (IInstallableUnit[]) installableUnits.toArray(result);
-		}
-
-		public Map getIUIdentityToPropertiesMap() {
-			return Collections.unmodifiableMap(iuPropertiesMap);
-		}
-
-		public String getProfileId() {
-			return profileId;
-		}
-
-		public void removeInstallableUnits(IInstallableUnit toRemove) {
-			installableUnits.remove(toRemove);
-			iuPropertiesMap.remove(new IUIdentity(toRemove));
-		}
-
-		public String setInstallableUnitProfileProperty(IInstallableUnit toSet, String key, String value) {
-			OrderedProperties properties = getInstallableUnitProfileProperties(toSet);
-			return (String) properties.setProperty(key, value);
-		}
-	}
-
-	protected class Writer extends MetadataWriter implements XMLConstants {
-
-		public Writer(OutputStream output) throws IOException {
-			super(output, PI_DEFAULTS);
-		}
-
-		/**
-		 * Write the given artifact repository to the output stream.
-		 */
-		public void write(InstallRegistry istregistryry) {
-			start(INSTALL_REGISTRY_ELEMENT);
-			writeProfileRegistries(istregistryry.internalGetRegistryMap());
-			end(INSTALL_REGISTRY_ELEMENT);
-			flush();
-		}
-
-		private void writeIUPropertyMap(Map iuPropertiesMap) {
-			if (iuPropertiesMap.size() > 0) {
-				start(IUS_PROPERTIES_ELEMENT);
-				attribute(COLLECTION_SIZE_ATTRIBUTE, iuPropertiesMap.size());
-				for (Iterator iter = iuPropertiesMap.keySet().iterator(); iter.hasNext();) {
-					IUIdentity nextIdentity = (IUIdentity) iter.next();
-					OrderedProperties properties = (OrderedProperties) iuPropertiesMap.get(nextIdentity);
-					start(IU_PROPERTIES_ELEMENT);
-					attribute(ID_ATTRIBUTE, nextIdentity.id);
-					attribute(VERSION_ATTRIBUTE, nextIdentity.version);
-					writeProperties(properties);
-					end(IU_PROPERTIES_ELEMENT);
-				}
-				end(IUS_PROPERTIES_ELEMENT);
-			}
-		}
-
-		private void writeProfileRegistries(Map registries) {
-			if (registries.size() > 0) {
-				start(PROFILE_INSTALL_REGISTRIES_ELEMENT);
-				attribute(COLLECTION_SIZE_ATTRIBUTE, registries.size());
-				for (Iterator iter = registries.keySet().iterator(); iter.hasNext();) {
-					String nextProfileId = (String) iter.next();
-					ProfileInstallRegistry nextProfileRegistry = (ProfileInstallRegistry) registries.get(nextProfileId);
-					writeProfileRegistry(nextProfileId, nextProfileRegistry);
-				}
-				end(PROFILE_INSTALL_REGISTRIES_ELEMENT);
-			}
-		}
-
-		private void writeProfileRegistry(String profileId, ProfileInstallRegistry profileRegistry) {
-			start(PROFILE_INSTALL_REGISTRY_ELEMENT);
-			attribute(PROFILE_ID_ATTRIBUTE, profileId);
-			Set ius = profileRegistry.installableUnits;
-			writeInstallableUnits(ius.iterator(), ius.size());
-			writeIUPropertyMap(profileRegistry.getIUIdentityToPropertiesMap());
-			end(PROFILE_INSTALL_REGISTRY_ELEMENT);
-		}
-	}
-
-	private interface XMLConstants extends org.eclipse.equinox.internal.p2.persistence.XMLConstants {
-
-		// Constants defining the structure of the XML for a SimpleProfileRegistry
-
-		// A format version number for install registry XML.
-		public static final Version CURRENT_VERSION = new Version(0, 0, 1);
-		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(2, 0, 0), false);
-		// Constants for install registry elements
-		public static final String INSTALL_REGISTRY_ELEMENT = "installRegistry"; //$NON-NLS-1$
-		public static final String IU_PROPERTIES_ELEMENT = "iusProperties"; //$NON-NLS-1$
-		public static final String IUS_PROPERTIES_ELEMENT = "iusPropertiesMap"; //$NON-NLS-1$
-		public static final String PROFILE_INSTALL_REGISTRIES_ELEMENT = "profiles"; //$NON-NLS-1$
-		public static final String PROFILE_INSTALL_REGISTRY_ELEMENT = "profile"; //$NON-NLS-1$
-
-		// Constants for processing instructions
-		public static final String PI_REPOSITORY_TARGET = "installRegistry"; //$NON-NLS-1$
-		public static XMLWriter.ProcessingInstruction[] PI_DEFAULTS = new XMLWriter.ProcessingInstruction[] {XMLWriter.ProcessingInstruction.makeClassVersionInstruction(PI_REPOSITORY_TARGET, SimpleProfileRegistry.class, CURRENT_VERSION)};
-		// Constants for attributes of an profile install registry element
-		public static final String PROFILE_ID_ATTRIBUTE = "profileId"; //$NON-NLS-1$
-
-	}
-
-	private static String STORAGE = "installRegistry.xml"; //$NON-NLS-1$
-
-	//	private transient ProvisioningEventBus bus;
-	//	private transient ServiceReference busReference;
-
-	/**
-	 * What is installed in each profile. A map of String(Profile id) -> ProfileInstallRegistry.
-	 * Most callers should use getRegistryMap() accessor method that does lazy initialization.
-	 */
-	SoftReference profileRegistries = null;
-
-	public InstallRegistry() {
-		/*	
-		busReference = EngineActivator.getContext().getServiceReference(IProvisioningEventBus.SERVICE_NAME);
-		bus = (ProvisioningEventBus) EngineActivator.getContext().getService(busReference);
-
-		
-				bus.addListener(new SynchronousProvisioningListener() {
-					public void notify(EventObject o) {
-						if (o instanceof InstallableUnitEvent) {
-							InstallableUnitEvent event = (InstallableUnitEvent) o;
-							if (event.isPre() || !event.getResult().isOK())
-								return;
-							IProfileInstallRegistry registry = getProfileInstallRegistry(event.getProfile());
-							if (event.isInstall() && event.getOperand().second() != null) {
-								registry.addInstallableUnits(event.getOperand().second().unresolved());
-							} else if (event.isUninstall() && event.getOperand().first() != null) {
-								IInstallableUnit original = event.getOperand().first().unresolved();
-								String value = registry.getInstallableUnitProfileProperty(original, IInstallableUnit.PROP_PROFILE_ROOT_IU);
-								boolean isRoot = value != null && value.equals(Boolean.toString(true));
-								registry.removeInstallableUnits(original);
-								// TODO this is odd because I'm setting up a property for something
-								// not yet installed in the registry.  The implementation allows it and
-								// the assumption is that the second operand will get installed or else 
-								// this change will never be committed.  The alternative is to remember
-								// a transitory root value that we set when the install is received.
-								// The ideal solution is that this is handled in a profile delta by
-								// the engine.
-								// https://bugs.eclipse.org/bugs/show_bug.cgi?id=206077 
-								if (isRoot && event.getOperand().second() != null) {
-									registry.setInstallableUnitProfileProperty(event.getOperand().second().unresolved(), IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
-								}
-							}
-						} else if (o instanceof CommitOperationEvent) {
-							persist();
-							return;
-						} else if (o instanceof RollbackOperationEvent) {
-							restore();
-							return;
-						} else if (o instanceof ProfileEvent) {
-							ProfileEvent pe = (ProfileEvent) o;
-							if (pe.getReason() == ProfileEvent.REMOVED) {
-								getRegistryMap().remove(pe.getProfile().getProfileId());
-								persist();
-							} else if (pe.getReason() == ProfileEvent.CHANGED) {
-								// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=197701
-								persist();
-							}
-						}
-					}
-				});
-				*/
-	}
-
-	/**
-	 * Adds the given profile install registry to the install registry. The registry
-	 * is persisted automatically.
-	 */
-	public void addProfileInstallRegistry(IProfileInstallRegistry registry) {
-		Map map = getRegistryMap();
-		map.put(registry.getProfileId(), registry);
-		persist();
-	}
-
-	/**
-	 * Returns a new profile install registry for the given profile id.
-	 */
-	public IProfileInstallRegistry createProfileInstallRegistry(String profileId) {
-		return new ProfileInstallRegistry(profileId);
-	}
-
-	public synchronized Collection getProfileInstallRegistries() {
-		return getRegistryMap().values();
-	}
-
-	public synchronized IProfileInstallRegistry getProfileInstallRegistry(String profileId) {
-		return (IProfileInstallRegistry) getRegistryMap().get(profileId);
-	}
-
-	/**
-	 * Removes the install registry for the given profile id, and saves the install registry.
-	 * @param profileId
-	 */
-	public synchronized void removeProfileInstallRegistry(String profileId) {
-		Map registry = getRegistryMap();
-		registry.remove(profileId);
-		persist();
-	}
-
-	private URL getRegistryLocation() {
-		AgentLocation agent = (AgentLocation) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-		try {
-			return new URL(agent.getDataArea(EngineActivator.ID), STORAGE);
-		} catch (MalformedURLException e) {
-			//this is not possible because we know the above URL is valid
-		}
-		return null;
-	}
-
-	/**
-	 * Returns the registry map with lazy initialization. Never returns null.
-	 */
-	Map getRegistryMap() {
-		Map map = internalGetRegistryMap();
-		if (map != null)
-			return map;
-		map = restore();
-		setRegistryMap(map);
-		return map;
-	}
-
-	/**
-	 * Returns the registry map without lazy initialization. May return null.
-	 */
-	Map internalGetRegistryMap() {
-		SoftReference mapRef = profileRegistries;
-		if (mapRef == null)
-			return null;
-		return (Map) mapRef.get();
-	}
-
-	public synchronized void persist() {
-		//if we haven't restored, there is nothing to persist
-		if (profileRegistries == null)
-			return;
-		long time = 0;
-		final String debugMsg = "Saving install registry"; //$NON-NLS-1$
-		if (Tracing.DEBUG_INSTALL_REGISTRY) {
-			Tracing.debug(debugMsg);
-			time = -System.currentTimeMillis();
-		}
-		try {
-			BufferedOutputStream bof = null;
-			try {
-				URL registryLocation = getRegistryLocation();
-				if (!registryLocation.getProtocol().equals("file")) //$NON-NLS-1$
-					throw new IOException("Can't write install registry at: " + registryLocation); //$NON-NLS-1$
-				File outputFile = new File(registryLocation.toExternalForm().substring(5));
-				if (!outputFile.getParentFile().exists() && !outputFile.getParentFile().mkdirs())
-					throw new IOException("Can't persist profile registry"); //$NON-NLS-1$
-				bof = new BufferedOutputStream(new FileOutputStream(outputFile, false));
-				Writer writer = new Writer(bof);
-				writer.write(this);
-			} finally {
-				if (bof != null)
-					bof.close();
-			}
-			if (Tracing.DEBUG_INSTALL_REGISTRY) {
-				time += System.currentTimeMillis();
-				Tracing.debug(debugMsg + " time (ms): " + time); //$NON-NLS-1$ 
-			}
-		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, debugMsg, e));
-		}
-	}
-
-	synchronized Map restore() {
-		long time = 0;
-		final String debugMsg = "Restoring install registry"; //$NON-NLS-1$
-		if (Tracing.DEBUG_INSTALL_REGISTRY) {
-			Tracing.debug(debugMsg);
-			time = -System.currentTimeMillis();
-		}
-		Map registryMap = null;
-		try {
-			BufferedInputStream bif = null;
-			try {
-				bif = new BufferedInputStream(getRegistryLocation().openStream());
-				Parser parser = new Parser(EngineActivator.getContext(), EngineActivator.ID);
-				parser.parse(bif);
-				IStatus result = parser.getStatus();
-				if (!result.isOK())
-					LogHelper.log(result);
-				registryMap = parser.getProfileInstallRegistries();
-			} finally {
-				if (bif != null)
-					bif.close();
-			}
-			if (Tracing.DEBUG_INSTALL_REGISTRY) {
-				time += System.currentTimeMillis();
-				Tracing.debug(debugMsg + " time (ms): " + time); //$NON-NLS-1$ 
-			}
-		} catch (FileNotFoundException e) {
-			//This is ok.
-		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, debugMsg, e));
-		}
-		if (registryMap == null)
-			registryMap = new LinkedHashMap();
-		return registryMap;
-	}
-
-	private void setRegistryMap(Map profileInstallRegistries) {
-		profileRegistries = new SoftReference(profileInstallRegistries);
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Operand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Operand.java
index 5552402..fa7b278 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Operand.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Operand.java
@@ -16,5 +16,5 @@ package org.eclipse.equinox.internal.provisional.p2.engine;
  * @see IEngine#perform(IProfile, PhaseSet, Operand[], ProvisioningContext, org.eclipse.core.runtime.IProgressMonitor)
  */
 public class Operand {
-
+	// marker class
 }
diff --git a/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
index 1060174..ac62ec8 100644
--- a/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.exemplarysetup/META-INF/MANIFEST.MF
@@ -9,7 +9,6 @@ Import-Package: org.eclipse.equinox.internal.p2.core,
  org.eclipse.equinox.internal.p2.director,
  org.eclipse.equinox.internal.p2.engine,
  org.eclipse.equinox.internal.p2.garbagecollector,
- org.eclipse.equinox.internal.p2.installregistry,
  org.eclipse.equinox.internal.p2.metadata.repository,
  org.eclipse.equinox.internal.provisional.p2.core.eventbus,
  org.eclipse.equinox.internal.provisional.p2.core.location,
diff --git a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java b/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
index a9ae332..c3504f9 100644
--- a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
@@ -16,8 +16,6 @@ import org.eclipse.equinox.internal.p2.director.SimplePlanner;
 import org.eclipse.equinox.internal.p2.engine.MetadataCache;
 import org.eclipse.equinox.internal.p2.engine.SimpleProfileRegistry;
 import org.eclipse.equinox.internal.p2.garbagecollector.GarbageCollector;
-import org.eclipse.equinox.internal.p2.installregistry.IInstallRegistry;
-import org.eclipse.equinox.internal.p2.installregistry.InstallRegistry;
 import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.director.IDirector;
@@ -32,9 +30,6 @@ public class Activator implements BundleActivator {
 	private IProvisioningEventBus bus;
 	private ServiceRegistration registrationBus;
 
-	private IInstallRegistry installRegistry;
-	private ServiceRegistration registrationInstallRegistry;
-
 	private MetadataRepositoryManager defaultManager;
 	private ServiceRegistration registrationDefaultManager;
 
@@ -56,7 +51,6 @@ public class Activator implements BundleActivator {
 
 		registerEventBus();
 		//create the profile registry
-		registerInstallRegistry();
 		registerProfileRegistry();
 		//create metadata repositories
 		registerDefaultMetadataRepoManager();
@@ -82,7 +76,6 @@ public class Activator implements BundleActivator {
 		unregisterPlanner();
 		unregisterDefaultMetadataRepoManager();
 		unregisterProfileRegistry();
-		unregisterInstallRegistry();
 		unregisterEventBus();
 		Activator.context = null;
 
@@ -149,16 +142,6 @@ public class Activator implements BundleActivator {
 		new MetadataCache();
 	}
 
-	private void registerInstallRegistry() {
-		installRegistry = new InstallRegistry();
-		registrationInstallRegistry = context.registerService(IInstallRegistry.class.getName(), installRegistry, null);
-	}
-
-	private void unregisterInstallRegistry() {
-		registrationInstallRegistry.unregister();
-		registrationInstallRegistry = null;
-	}
-
 	private void registerEventBus() {
 		bus = new ProvisioningEventBus();
 		registrationBus = context.registerService(IProvisioningEventBus.SERVICE_NAME, bus, null);
diff --git a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
index 73f3049..8517608 100644
--- a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
@@ -20,7 +20,6 @@ Import-Package: ie.wombat.jbdiff,
  org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.director,
  org.eclipse.equinox.internal.p2.engine,
- org.eclipse.equinox.internal.p2.installregistry,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.internal.p2.metadata.repository,
  org.eclipse.equinox.internal.p2.metadata.repository.io,
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
index 2901653..22ddb57 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/AllTests.java
@@ -20,7 +20,6 @@ public class AllTests extends TestCase {
 	public static Test suite() {
 		TestSuite suite = new TestSuite(AllTests.class.getName());
 		suite.addTestSuite(EngineTest.class);
-		suite.addTestSuite(InstallRegistryTest.class);
 		suite.addTestSuite(PhaseSetTest.class);
 		suite.addTestSuite(PhaseTest.class);
 		suite.addTestSuite(ProfileTest.class);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
deleted file mode 100644
index 9841344..0000000
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.tests.engine;
-
-import org.eclipse.core.runtime.NullProgressMonitor;
-import org.eclipse.equinox.internal.p2.installregistry.IInstallRegistry;
-import org.eclipse.equinox.internal.p2.installregistry.IProfileInstallRegistry;
-import org.eclipse.equinox.internal.provisional.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
-import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
-import org.eclipse.equinox.p2.tests.TestActivator;
-import org.osgi.framework.ServiceReference;
-import org.osgi.framework.Version;
-
-/**
- * Simple test of the engine API.
- */
-public class InstallRegistryTest extends AbstractProvisioningTest {
-	private ServiceReference registryRef;
-	private IInstallRegistry registry;
-	private ServiceReference engineRef;
-	private IEngine engine;
-
-	public InstallRegistryTest(String name) {
-		super(name);
-	}
-
-	public InstallRegistryTest() {
-		super("");
-	}
-
-	protected void setUp() throws Exception {
-		registryRef = TestActivator.getContext().getServiceReference(IInstallRegistry.class.getName());
-		registry = (IInstallRegistry) TestActivator.getContext().getService(registryRef);
-		engineRef = TestActivator.getContext().getServiceReference(IEngine.SERVICE_NAME);
-		engine = (IEngine) TestActivator.getContext().getService(engineRef);
-	}
-
-	protected void tearDown() throws Exception {
-		engine = null;
-		TestActivator.getContext().ungetService(engineRef);
-		registry = null;
-		TestActivator.getContext().ungetService(registryRef);
-	}
-
-	public void testAddRemoveIU() {
-		PhaseSet phaseSet = new DefaultPhaseSet();
-		IProfile profile = createProfile("testProfile");
-		String profileId = profile.getProfileId();
-		assertEquals(0, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, createTestIU())}, null, new NullProgressMonitor());
-		assertEquals(1, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(createTestIU(), null)}, null, new NullProgressMonitor());
-		assertEquals(0, getRegistrySize(profileId));
-		registry.getProfileInstallRegistries().remove(profile);
-	}
-
-	protected int getRegistrySize(String profileId) {
-		IProfileInstallRegistry profileInstallRegistry = registry.getProfileInstallRegistry(profileId);
-		return profileInstallRegistry == null ? 0 : profileInstallRegistry.getInstallableUnits().length;
-	}
-
-	public void testPeristence() {
-		PhaseSet phaseSet = new DefaultPhaseSet();
-		IProfile profile = createProfile("testProfile");
-		String profileId = profile.getProfileId();
-		assertEquals(0, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, createTestIU())}, null, new NullProgressMonitor());
-		assertEquals(1, getRegistrySize(profileId));
-
-		restart();
-
-		assertEquals(1, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(createTestIU(), null)}, null, new NullProgressMonitor());
-		assertEquals(0, getRegistrySize(profileId));
-		restart();
-		assertEquals(0, getRegistrySize(profileId));
-	}
-
-	private void restart() {
-		try {
-			tearDown();
-			TestActivator.getBundle("org.eclipse.equinox.p2.exemplarysetup").stop();
-			TestActivator.getBundle("org.eclipse.equinox.p2.exemplarysetup").start();
-			setUp();
-		} catch (Exception e) {
-			fail();
-			e.printStackTrace();
-		}
-	}
-
-	private IInstallableUnit createTestIU() {
-		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
-		description.setId("org.eclipse.test");
-		description.setVersion(new Version("1.0.0"));
-		description.setTouchpointType(MetadataFactory.createTouchpointType("null", new Version("1.0.0")));
-		IInstallableUnit unit = MetadataFactory.createInstallableUnit(description);
-		return createResolvedIU(unit);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
index b0b3f9d..accab2f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
@@ -11,11 +11,12 @@
 package org.eclipse.equinox.p2.tests.engine;
 
 import java.io.*;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
+import java.util.Map.Entry;
 import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.equinox.internal.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.osgi.framework.BundleContext;
@@ -26,6 +27,7 @@ import org.xml.sax.*;
  * Simple test of the engine API.
  */
 public class ProfileTest extends AbstractProvisioningTest {
+
 	public ProfileTest(String name) {
 		super(name);
 	}
@@ -224,6 +226,7 @@ public class ProfileTest extends AbstractProvisioningTest {
 	private static Version PROFILE_TEST_VERSION = new Version("0.0.1");
 
 	private static String PROFILE_TEST_ELEMENT = "test";
+	public static final String PROFILES_ELEMENT = "profiles"; //$NON-NLS-1$
 
 	class ProfileStringWriter extends ProfileWriter {
 
@@ -236,6 +239,17 @@ public class ProfileTest extends AbstractProvisioningTest {
 			writeProfiles(profiles);
 			end(PROFILE_TEST_ELEMENT);
 		}
+
+		public void writeProfiles(IProfile[] profiles) {
+			if (profiles.length > 0) {
+				start(PROFILES_ELEMENT);
+				attribute(COLLECTION_SIZE_ATTRIBUTE, profiles.length);
+				for (int i = 0; i < profiles.length; i++) {
+					writeProfile(profiles[i]);
+				}
+				end(PROFILES_ELEMENT);
+			}
+		}
 	}
 
 	class ProfileStringParser extends ProfileParser {
@@ -250,7 +264,7 @@ public class ProfileTest extends AbstractProvisioningTest {
 			this.status = null;
 			try {
 				getParser();
-				TestHandler2 testHandler = new TestHandler2();
+				TestHandler testHandler = new TestHandler();
 				xmlReader.setContentHandler(new ProfileDocHandler(PROFILE_TEST_ELEMENT, testHandler));
 				xmlReader.parse(new InputSource(new StringReader(profileString)));
 				if (isValidXML()) {
@@ -288,7 +302,7 @@ public class ProfileTest extends AbstractProvisioningTest {
 			}
 		}
 
-		private final class TestHandler2 extends RootHandler {
+		private final class TestHandler extends RootHandler {
 
 			private ProfilesHandler profilesHandler;
 			IProfile[] profiles;
@@ -318,45 +332,87 @@ public class ProfileTest extends AbstractProvisioningTest {
 
 		}
 
-		//		private final class TestHandler extends RootHandler {
-		//
-		//			private ProfileHandler profileHandler = null;
-		//
-		//			private Profile profile = null;
-		//			private Map singleton = new HashMap(1);
-		//
-		//			public TestHandler() {
-		//				super();
-		//			}
-		//
-		//			public Profile getProfile() {
-		//				return profile;
-		//			}
-		//
-		//			protected void handleRootAttributes(Attributes attributes) {
-		//				String[] values = parseAttributes(attributes, noAttributes, noAttributes);
-		//			}
-		//
-		//			public void startElement(String name, Attributes attributes) {
-		//				if (PROFILE_ELEMENT.equals(name)) {
-		//					if (profileHandler == null) {
-		//						profileHandler = new ProfileHandler(this, attributes, singleton);
-		//					} else {
-		//						duplicateElement(this, name, attributes);
-		//					}
-		//				} else {
-		//					invalidElement(name, attributes);
-		//				}
-		//			}
-		//
-		//			protected void finished() {
-		//				if (isValidXML()) {
-		//					if (profileHandler != null && singleton.size() == 1) {
-		//						profile = new Profile(profileHandler.getProfileId(), null, profileHandler.getProperties());
-		//					}
-		//				}
-		//			}
-		//		}
+		protected class ProfilesHandler extends AbstractHandler {
+
+			private final Map profileHandlers;
+
+			public ProfilesHandler(AbstractHandler parentHandler, Attributes attributes) {
+				super(parentHandler, PROFILES_ELEMENT);
+				String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
+				profileHandlers = (size != null ? new HashMap(new Integer(size).intValue()) : new HashMap(4));
+			}
+
+			public IProfile[] getProfiles() {
+				if (profileHandlers.isEmpty())
+					return new IProfile[0];
+
+				Map profileMap = new LinkedHashMap();
+				for (Iterator it = profileHandlers.keySet().iterator(); it.hasNext();) {
+					String profileId = (String) it.next();
+					addProfile(profileId, profileMap);
+				}
+
+				return (IProfile[]) profileMap.values().toArray(new IProfile[profileMap.size()]);
+			}
+
+			private void addProfile(String profileId, Map profileMap) {
+				if (profileMap.containsKey(profileId))
+					return;
+
+				ProfileHandler profileHandler = (ProfileHandler) profileHandlers.get(profileId);
+				Profile parentProfile = null;
+
+				String parentId = profileHandler.getParentId();
+				if (parentId != null) {
+					addProfile(parentId, profileMap);
+					parentProfile = (Profile) profileMap.get(parentId);
+				}
+
+				Profile profile = new Profile(profileId, parentProfile, profileHandler.getProperties());
+				IInstallableUnit[] ius = profileHandler.getInstallableUnits();
+				if (ius != null) {
+					for (int i = 0; i < ius.length; i++) {
+						IInstallableUnit iu = ius[i];
+						profile.addInstallableUnit(iu);
+						Map iuProperties = profileHandler.getIUProperties(iu);
+						if (iuProperties != null) {
+							for (Iterator it = iuProperties.entrySet().iterator(); it.hasNext();) {
+								Entry entry = (Entry) it.next();
+								String key = (String) entry.getKey();
+								String value = (String) entry.getValue();
+								profile.setInstallableUnitProperty(iu, key, value);
+							}
+						}
+					}
+				}
+				profileMap.put(profileId, profile);
+			}
+
+			public void startElement(String name, Attributes attributes) {
+				if (name.equals(PROFILE_ELEMENT)) {
+					new ProfilesProfileHandler(this, attributes, profileHandlers);
+				} else {
+					invalidElement(name, attributes);
+				}
+			}
+		}
+
+		public class ProfilesProfileHandler extends ProfileHandler {
+			private final Map profileHandlers;
+
+			public ProfilesProfileHandler(ProfilesHandler profilesHandler, Attributes attributes, Map profileHandlers) {
+				this.profileHandlers = profileHandlers;
+				this.parentHandler = profilesHandler;
+				xmlReader.setContentHandler(this);
+				handleRootAttributes(attributes);
+			}
+
+			protected void finished() {
+				if (isValidXML()) {
+					profileHandlers.put(getProfileId(), this);
+				}
+			}
+		}
 
 		protected String getErrorMessage() {
 			return "Error parsing profile string";

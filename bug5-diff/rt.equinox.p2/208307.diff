commit b48fc4de47172ba873385d7c19d44e90c455e269
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 6 22:44:56 2007 +0000

    Bug 208307 - [prov] [ui] cleanup ProvisioningOperationRunner

4	3	bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
4	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
0	52	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java
23	54	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
15	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
index 7c42fc1..f6ad28f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
+++ b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
@@ -6,7 +6,7 @@
 <stringAttribute key="bootstrap" value=""/>
 <stringAttribute key="checked" value="[NONE]"/>
 <booleanAttribute key="clearConfig" value="false"/>
-<stringAttribute key="configLocation" value="c:\prov\p2\ProvAdminUI"/>
+<stringAttribute key="configLocation" value="c:\equinox.p2\ProvAdminUI"/>
 <booleanAttribute key="default_auto_start" value="false"/>
 <intAttribute key="default_start_level" value="4"/>
 <stringAttribute key="execEnvironment" value="CDC-1.0/Foundation-1.0"/>
@@ -14,11 +14,12 @@
 <booleanAttribute key="org.eclipse.debug.core.appendEnvironmentVariables" value="true"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -console -consolelog -product org.eclipse.equinox.p2.ui.admin.rcp.product"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
-<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Declipse.p2.data.area=c:/prov/p2/agentData/"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Declipse.p2.data.area=c:/equinox.p2/agentData/"/>
 <stringAttribute key="pde.version" value="3.3"/>
+<booleanAttribute key="show_selected_only" value="false"/>
 <stringAttribute key="target_bundles" value="com.ibm.icu@default:default,org.eclipse.core.commands@default:default,org.eclipse.core.contenttype@default:default,org.eclipse.core.databinding@default:default,org.eclipse.core.expressions@default:default,org.eclipse.core.jobs@default:default,org.eclipse.core.runtime@default:default,org.eclipse.equinox.app@default:true,org.eclipse.equinox.common@default:default,org.eclipse.equinox.launcher@default:default,org.eclipse.equinox.launcher.win32.win32.x86@default:default,org.eclipse.equinox.preferences@default:default,org.eclipse.equinox.registry@default:default,org.eclipse.help@default:default,org.eclipse.jface@default:default,org.eclipse.jface.databinding@default:default,org.eclipse.osgi.services@default:default,org.eclipse.swt@default:default,org.eclipse.swt.win32.win32.x86@default:default,org.eclipse.ui@default:default,org.eclipse.ui.workbench@default:default"/>
 <booleanAttribute key="tracing" value="false"/>
 <booleanAttribute key="useDefaultConfigArea" value="false"/>
 <booleanAttribute key="useNamedJRE" value="false"/>
-<stringAttribute key="workspace_bundles" value="com.thoughtworks.xstream@default:default,org.eclipse.ecf@default:default,org.eclipse.ecf.filetransfer@default:default,org.eclipse.ecf.identity@default:default,org.eclipse.ecf.provider.filetransfer@default:default,org.eclipse.equinox.frameworkadmin@default:default,org.eclipse.equinox.frameworkadmin.equinox@default:true,org.eclipse.equinox.p2.artifact.repository@default:default,org.eclipse.equinox.p2.console@default:true,org.eclipse.equinox.p2.core@default:default,org.eclipse.equinox.p2.director@default:default,org.eclipse.equinox.p2.download@default:default,org.eclipse.equinox.p2.engine@default:default,org.eclipse.equinox.p2.exemplarysetup@default:true,org.eclipse.equinox.p2.jarprocessor@default:default,org.eclipse.equinox.p2.metadata@default:default,org.eclipse.equinox.p2.metadata.repository@default:default,org.eclipse.equinox.p2.touchpoint.eclipse@default:default,org.eclipse.equinox.p2.touchpoint.natives@default:default,org.eclipse.equinox.p2.ui@default:default,org.eclipse.equinox.p2.ui.admin@default:default,org.eclipse.equinox.p2.ui.admin.rcp@default:default,org.eclipse.equinox.p2.ui.sdk@default:default,org.eclipse.equinox.p2.updatechecker@default:default,org.eclipse.equinox.simpleconfigurator@default:true,org.eclipse.equinox.simpleconfigurator.manipulator@default:default"/>
+<stringAttribute key="workspace_bundles" value="org.eclipse.ecf@default:default,org.eclipse.ecf.filetransfer@default:default,org.eclipse.ecf.identity@default:default,org.eclipse.ecf.provider.filetransfer@default:default,org.eclipse.equinox.frameworkadmin@default:default,org.eclipse.equinox.frameworkadmin.equinox@default:true,org.eclipse.equinox.p2.artifact.repository@default:default,org.eclipse.equinox.p2.console@default:true,org.eclipse.equinox.p2.core@default:default,org.eclipse.equinox.p2.director@default:default,org.eclipse.equinox.p2.download@default:default,org.eclipse.equinox.p2.engine@default:default,org.eclipse.equinox.p2.exemplarysetup@default:true,org.eclipse.equinox.p2.jarprocessor@default:default,org.eclipse.equinox.p2.metadata@default:default,org.eclipse.equinox.p2.metadata.repository@default:default,org.eclipse.equinox.p2.touchpoint.eclipse@default:default,org.eclipse.equinox.p2.touchpoint.natives@default:default,org.eclipse.equinox.p2.ui@default:default,org.eclipse.equinox.p2.ui.admin@default:default,org.eclipse.equinox.p2.ui.admin.rcp@default:default,org.eclipse.equinox.p2.ui.sdk@default:default,org.eclipse.equinox.p2.updatechecker@default:default,org.eclipse.equinox.simpleconfigurator@default:true,org.eclipse.equinox.simpleconfigurator.manipulator@default:default"/>
 </launchConfiguration>
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index ed870c4..8828a2d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -61,7 +61,7 @@ public class ProfilesView extends ProvView {
 				}
 			}
 			ProfileOperation op = new RemoveProfilesOperation(ProvAdminUIMessages.Ops_RemoveProfileOperationLabel, (Profile[]) profilesOnly.toArray(new Profile[profilesOnly.size()]));
-			ProvisioningOperationRunner.execute(op, ProfilesView.this.getShell(), null);
+			ProvisioningOperationRunner.execute(op, ProfilesView.this.getShell());
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index 42783b2..ecbb5c1 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -40,7 +40,7 @@ abstract class RepositoriesView extends ProvView {
 		}
 
 		public void run() {
-			ProvisioningOperationRunner.execute(getRemoveOperation(getSelection().toArray()), getShell(), null);
+			ProvisioningOperationRunner.execute(getRemoveOperation(getSelection().toArray()), getShell());
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
index 1bc0493..948843d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
@@ -72,7 +72,7 @@ public class AddProfileDialog extends StatusDialog {
 		if (addedProfile == null) {
 			return;
 		}
-		ProvisioningOperationRunner.execute(new AddProfileOperation(ProvAdminUIMessages.AddProfileDialog_OperationLabel, addedProfile), getShell(), null);
+		ProvisioningOperationRunner.execute(new AddProfileOperation(ProvAdminUIMessages.AddProfileDialog_OperationLabel, addedProfile), getShell());
 	}
 
 	void verifyComplete() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 346d3fb..014c3ab 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -11,12 +11,14 @@
 package org.eclipse.equinox.internal.p2.ui.sdk.updates;
 
 import org.eclipse.core.runtime.Preferences;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.equinox.internal.p2.ui.sdk.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
@@ -44,7 +46,7 @@ public class AutomaticUpdater implements IUpdateListener {
 				IInstallableUnit[] replacements = ProvisioningUtil.updatesFor(toUpdate, null);
 				if (replacements.length > 0) {
 					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getReplacePlan(toUpdate, replacements, event.getProfile(), null);
-					ProvisioningOperationResult result = ProvisioningOperationRunner.execute(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfile().getProfileId(), plan, new DownloadPhaseSet(), false), null, null);
+					Job job = ProvisioningOperationRunner.execute(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfile().getProfileId(), plan, new DownloadPhaseSet(), false), null);
 					// TODO need to listen to the job and open the popup when download is done
 				}
 			} else {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java
deleted file mode 100644
index 57dbb5b..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.equinox.p2.ui;
-
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
-
-/**
- * Reports information about a provisioning operation.
- * 
- * @since 3.4
- */
-public class ProvisioningOperationResult {
-	private ProvisioningOperation op;
-	private IStatus status;
-	private Job job;
-
-	public ProvisioningOperationResult(ProvisioningOperation op) {
-		this.op = op;
-	}
-
-	public IStatus getStatus() {
-		return status;
-	}
-
-	void setStatus(IStatus status) {
-		this.status = status;
-	}
-
-	public Job getJob() {
-		return job;
-	}
-
-	void setJob(Job job) {
-		this.job = job;
-	}
-
-	public ProvisioningOperation getOperation() {
-		return op;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
index 0862512..25c8939 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
@@ -17,71 +17,47 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
-import org.eclipse.jface.operation.IRunnableContext;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.progress.WorkbenchJob;
 
 /**
- * Utility methods for running provisioning operations
+ * Utility methods for running provisioning operations. All operations are
+ * run in jobs, with the operation determining whether the job is run in
+ * the background or in the UI.
  * 
  * @since 3.4
  */
 public class ProvisioningOperationRunner {
 
-	private static class ProvisioningJob extends Job {
-		private ProvisioningOperation op;
-		private ProvisioningOperationResult result;
-
-		ProvisioningJob(ProvisioningOperation op, ProvisioningOperationResult result) {
-			super(op.getLabel());
-			this.op = op;
-			this.result = result;
-		}
-
-		protected IStatus run(IProgressMonitor monitor) {
-			try {
-				IStatus status;
-				if (op instanceof IUndoableOperation) {
-					status = PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute((IUndoableOperation) op, monitor, null);
-				} else {
-					status = op.execute(monitor, null);
-				}
-				result.setStatus(status);
-				return status;
-			} catch (ExecutionException e) {
-				return ProvUI.handleException(e.getCause(), null);
-			}
-		}
-
-		public boolean belongsTo(Object family) {
-			return family == FAMILY_PROVISIONING_OPERATIONS;
-		}
-
-	}
-
-	private static Object FAMILY_PROVISIONING_OPERATIONS = new Object();
-
 	/**
-	 * Execute the supplied ProvisioningOperation, and add it to the
+	 * Execute the supplied ProvisioningOperation in a job, and add it to the
 	 * undo history if it supports undo.
 	 * 
 	 * @param op The operation to execute
 	 * @param shell provided by the caller in order to supply UI information for prompting the
 	 *            user if necessary. May be <code>null</code>.
-	 * @param context the IRunnableContext provided by the caller for running the operation.  May be <code>null</code>, in which case
-	 *            a runnable context will be created based on whether the operation should be run in the foreground or background.
-	 *            Callers typically need not supply a context unless special handling (such as wizard-based progress reporting) is required.
-	*/
-	// TODO get rid of context parameter and result after M3
-	// should just return the job and callers can hook listeners if they care what's happening
-	public static ProvisioningOperationResult execute(final ProvisioningOperation op, final Shell shell, IRunnableContext context) {
-		final ProvisioningOperationResult result = new ProvisioningOperationResult(op);
+	 */
+	public static Job execute(final ProvisioningOperation op, final Shell shell) {
 		Job job;
 
 		if (op.runInBackground()) {
-			job = new ProvisioningJob(op, result);
-			job.setPriority(Job.DECORATE); // this is the prio that the old update manager used
+			job = new Job(op.getLabel()) {
+				protected IStatus run(IProgressMonitor monitor) {
+					try {
+						IStatus status;
+						if (op instanceof IUndoableOperation) {
+							status = PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute((IUndoableOperation) op, monitor, ProvUI.getUIInfoAdapter(shell));
+						} else {
+							status = op.execute(monitor, ProvUI.getUIInfoAdapter(shell));
+						}
+						return status;
+					} catch (ExecutionException e) {
+						return ProvUI.handleException(e.getCause(), null);
+					}
+				}
+			};
+			job.setPriority(Job.LONG);
 		} else {
 			job = new WorkbenchJob(op.getLabel()) {
 
@@ -93,22 +69,15 @@ public class ProvisioningOperationRunner {
 						} else {
 							status = op.execute(monitor, ProvUI.getUIInfoAdapter(shell));
 						}
-						result.setStatus(status);
 						return status;
 					} catch (ExecutionException e) {
 						return ProvUI.handleException(e.getCause(), null);
 					}
 				}
-
-				public boolean belongsTo(Object family) {
-					return family == FAMILY_PROVISIONING_OPERATIONS;
-				}
-
 			};
 		}
 		job.setUser(op.isUser());
 		job.schedule();
-		result.setJob(job);
-		return result;
+		return job;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
index 5b6ab38..6a45d74 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
@@ -49,7 +49,7 @@ public class RollbackAction extends ProfileModificationAction {
 		try {
 			ProvisioningPlan plan = ProvisioningUtil.getBecomePlan(toBecome[0], targetProfile, null);
 			ProvisioningOperation op = new ProfileModificationOperation(ProvUIMessages.RollbackIUOperationLabel, targetProfile.getProfileId(), plan);
-			ProvisioningOperationRunner.execute(op, getShell(), null);
+			ProvisioningOperationRunner.execute(op, getShell());
 		} catch (ProvisionException e) {
 			ProvUI.handleException(e, null);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
index 85d0754..30850a0 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
@@ -131,7 +131,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 	protected void addRepository() {
 		URL newURL = makeRepositoryURL(url.getText().trim());
 		if (newURL != null)
-			ProvisioningOperationRunner.execute(getOperation(newURL), getShell(), null);
+			ProvisioningOperationRunner.execute(getOperation(newURL), getShell());
 	}
 
 	protected abstract ProvisioningOperation getOperation(URL repoURL);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
index a8ea039..4f4c442 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
@@ -136,7 +136,7 @@ public class ColocatedRepositoryManipulatorGroup {
 					repos[i] = (IMetadataRepository) selection.get(i);
 				}
 				RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvUIMessages.ColocatedRepositoryManipulatorGroup_Remove, repos);
-				ProvisioningOperationRunner.execute(op, getControl().getShell(), null);
+				ProvisioningOperationRunner.execute(op, getControl().getShell());
 			}
 		});
 		return composite;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
index 9ff2805..b0158e3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
@@ -148,7 +148,7 @@ abstract class ProfileModificationDialog extends TrayDialog {
 	}
 
 	protected void okPressed() {
-		ProvisioningOperationRunner.execute(createProfileModificationOperation(getSelectedElements()), getShell(), null);
+		ProvisioningOperationRunner.execute(createProfileModificationOperation(getSelectedElements()), getShell());
 		super.okPressed();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
index a09734b..d10d577 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
@@ -76,10 +76,25 @@ public abstract class ProvisioningOperation {
 		return label;
 	}
 
+	/**
+	 * Return a boolean indicating whether the operation can be run in the
+	 * background. 
+	 * 
+	 * @return <code>true</code> if the operation can be run in the background, and
+	 * <code>false</code> if it should be run in the UI.
+	 */
 	public boolean runInBackground() {
 		return false;
 	}
 
+	/**
+	 * Return a boolean indicating whether this operation was triggered by the
+	 * user.  This value is used to determine whether any job running this operation
+	 * should be considered a user job.  This can affect the way progress is shown to the user.
+	 * 
+	 * @return <code>true</code> if the operation was initiated by the user, 
+	 * <code>false</code> if it was not.
+	 */
 	public boolean isUser() {
 		return true;
 	}
commit aaf2761474699036097e25a10a19f2274928e8bd
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 6 22:51:47 2007 +0000

    Bug 208307 - [prov] [ui] cleanup ProvisioningOperationRunner (naming)

1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 8828a2d..7f9bc36 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -61,7 +61,7 @@ public class ProfilesView extends ProvView {
 				}
 			}
 			ProfileOperation op = new RemoveProfilesOperation(ProvAdminUIMessages.Ops_RemoveProfileOperationLabel, (Profile[]) profilesOnly.toArray(new Profile[profilesOnly.size()]));
-			ProvisioningOperationRunner.execute(op, ProfilesView.this.getShell());
+			ProvisioningOperationRunner.schedule(op, ProfilesView.this.getShell());
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index ecbb5c1..eaa997b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -40,7 +40,7 @@ abstract class RepositoriesView extends ProvView {
 		}
 
 		public void run() {
-			ProvisioningOperationRunner.execute(getRemoveOperation(getSelection().toArray()), getShell());
+			ProvisioningOperationRunner.schedule(getRemoveOperation(getSelection().toArray()), getShell());
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
index 948843d..034ffa1 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
@@ -72,7 +72,7 @@ public class AddProfileDialog extends StatusDialog {
 		if (addedProfile == null) {
 			return;
 		}
-		ProvisioningOperationRunner.execute(new AddProfileOperation(ProvAdminUIMessages.AddProfileDialog_OperationLabel, addedProfile), getShell());
+		ProvisioningOperationRunner.schedule(new AddProfileOperation(ProvAdminUIMessages.AddProfileDialog_OperationLabel, addedProfile), getShell());
 	}
 
 	void verifyComplete() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 014c3ab..0d9729f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -46,7 +46,7 @@ public class AutomaticUpdater implements IUpdateListener {
 				IInstallableUnit[] replacements = ProvisioningUtil.updatesFor(toUpdate, null);
 				if (replacements.length > 0) {
 					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getReplacePlan(toUpdate, replacements, event.getProfile(), null);
-					Job job = ProvisioningOperationRunner.execute(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfile().getProfileId(), plan, new DownloadPhaseSet(), false), null);
+					Job job = ProvisioningOperationRunner.schedule(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfile().getProfileId(), plan, new DownloadPhaseSet(), false), null);
 					// TODO need to listen to the job and open the popup when download is done
 				}
 			} else {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
index a4d0d7c..1bcbf46 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
@@ -31,14 +31,14 @@ import org.eclipse.ui.progress.WorkbenchJob;
 public class ProvisioningOperationRunner {
 
 	/**
-	 * Execute the supplied ProvisioningOperation in a job, and add it to the
+	 * Schedule a job to execute the supplied ProvisioningOperation, and add it to the
 	 * undo history if it supports undo.
 	 * 
 	 * @param op The operation to execute
 	 * @param shell provided by the caller in order to supply UI information for prompting the
 	 *            user if necessary. May be <code>null</code>.
 	 */
-	public static Job execute(final ProvisioningOperation op, final Shell shell) {
+	public static Job schedule(final ProvisioningOperation op, final Shell shell) {
 		Job job;
 
 		if (op.runInBackground()) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
index 6a45d74..8665d74 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
@@ -49,7 +49,7 @@ public class RollbackAction extends ProfileModificationAction {
 		try {
 			ProvisioningPlan plan = ProvisioningUtil.getBecomePlan(toBecome[0], targetProfile, null);
 			ProvisioningOperation op = new ProfileModificationOperation(ProvUIMessages.RollbackIUOperationLabel, targetProfile.getProfileId(), plan);
-			ProvisioningOperationRunner.execute(op, getShell());
+			ProvisioningOperationRunner.schedule(op, getShell());
 		} catch (ProvisionException e) {
 			ProvUI.handleException(e, null);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
index 30850a0..1224764 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
@@ -131,7 +131,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 	protected void addRepository() {
 		URL newURL = makeRepositoryURL(url.getText().trim());
 		if (newURL != null)
-			ProvisioningOperationRunner.execute(getOperation(newURL), getShell());
+			ProvisioningOperationRunner.schedule(getOperation(newURL), getShell());
 	}
 
 	protected abstract ProvisioningOperation getOperation(URL repoURL);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
index 4f4c442..8b71e57 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
@@ -136,7 +136,7 @@ public class ColocatedRepositoryManipulatorGroup {
 					repos[i] = (IMetadataRepository) selection.get(i);
 				}
 				RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvUIMessages.ColocatedRepositoryManipulatorGroup_Remove, repos);
-				ProvisioningOperationRunner.execute(op, getControl().getShell());
+				ProvisioningOperationRunner.schedule(op, getControl().getShell());
 			}
 		});
 		return composite;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
index b0158e3..a3b0346 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
@@ -148,7 +148,7 @@ abstract class ProfileModificationDialog extends TrayDialog {
 	}
 
 	protected void okPressed() {
-		ProvisioningOperationRunner.execute(createProfileModificationOperation(getSelectedElements()), getShell());
+		ProvisioningOperationRunner.schedule(createProfileModificationOperation(getSelectedElements()), getShell());
 		super.okPressed();
 	}
 

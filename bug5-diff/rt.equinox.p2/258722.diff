commit adb02dd8bf0bd3f235f40b0fb9e83dcdc96bf3ee
Author: Susan Franklin <sfranklin>
Date:   Thu Mar 26 21:51:39 2009 +0000

    Bug 258722 - [ui] Can't install from admin ui

3	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
7	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
7	1	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
1	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
6	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
74	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
index 758bc33..8d754a7 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
@@ -45,6 +45,7 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 	protected static final String NESTEDIU = "NestedIU";
 	protected static final String LOCKEDIU = "LockedIU";
 	protected static final String UNINSTALLEDIU = "UninstalledIU";
+	protected static final String CATEGORYIU = "CategoryIU";
 	protected IMetadataRepositoryManager metaManager;
 	protected IArtifactRepositoryManager artifactManager;
 	protected URI testRepoLocation;
@@ -56,6 +57,7 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 	protected IInstallableUnit locked;
 	protected IInstallableUnit upgrade;
 	protected IInstallableUnit uninstalled;
+	protected IInstallableUnit category;
 
 	protected void setUp() throws Exception {
 		super.setUp();
@@ -68,6 +70,7 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 		install((locked = createIU(LOCKEDIU)), true, true);
 		uninstalled = createIU(UNINSTALLEDIU);
 		upgrade = createIU(TOPLEVELIU, new Version("2.0.0"));
+		category = createNamedIU(CATEGORYIU, CATEGORYIU, new Version("1.0.0"), true);
 
 		metaManager = (IMetadataRepositoryManager) ServiceHelper.getService(TestActivator.context, IMetadataRepositoryManager.class.getName());
 		artifactManager = (IArtifactRepositoryManager) ServiceHelper.getService(TestActivator.context, IArtifactRepositoryManager.class.getName());
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
index c4f1557..ead2ace 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
@@ -63,6 +63,13 @@ public class InstallActionTest extends ProfileModificationActionTest {
 		assertEquals(2, action.getSelectedIUs().length);
 	}
 
+	public void testParentIsCategory() {
+		TestInstallAction action = new TestInstallAction(getCategoryAndChildIUElements());
+		assertTrue("Should be enabled", action.isEnabled());
+		// Only the non-category should be considered a selection
+		assertEquals(1, action.getSelectedIUs().length);
+	}
+
 	protected IIUElement element(IInstallableUnit iu) {
 		return new AvailableIUElement(null, iu, profile.getProfileId(), true);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
index ae0c29f..79b0486 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/ProfileModificationActionTest.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.ui.actions;
 
-import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
+import org.eclipse.equinox.internal.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
 
@@ -22,6 +22,12 @@ public abstract class ProfileModificationActionTest extends ActionTest {
 		return new IInstallableUnit[] {top1, top2, nested};
 	}
 
+	protected Object[] getCategoryAndChildIUElements() {
+		CategoryElement element = new CategoryElement(null, category);
+		AvailableIUElement child = new AvailableIUElement(element, uninstalled, TESTPROFILE, true);
+		return new Object[] {element, child};
+	}
+
 	protected IInstallableUnit[] getTopLevelIUs() {
 		return new IInstallableUnit[] {top1, top2};
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
index f2d2048..d4bd52f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIActivator.java
@@ -173,6 +173,7 @@ public class ProvAdminUIActivator extends AbstractUIPlugin {
 				return null;
 			}
 		});
+		policy.setRepositoryManipulator(new ColocatedRepositoryManipulator(policy, null));
 	}
 
 	public Policy getPolicy() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 006a79f..4f9ce30 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -94,6 +94,8 @@ public class ProvUIMessages extends NLS {
 	public static String InstallIUProgress;
 	public static String InstallWizardPage_NoCheckboxDescription;
 	public static String InstallWizardPage_Title;
+	public static String PreselectedIUInstallWizard_Title;
+	public static String PreselectedIUInstallWizard_Description;
 	public static String UninstallDialog_UninstallMessage;
 	public static String UninstallIUOperationLabel;
 	public static String UninstallIUCommandLabel;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 9ed1f56..e69449b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -156,6 +156,8 @@ RevertProfilePage_RevertLabel=Re&vert
 RevertProfilePage_RevertTooltip=Revert to the selected install configuration.
 InstallWizardPage_NoCheckboxDescription=Review the items to be installed.
 InstallWizardPage_Title=Install Details
+PreselectedIUInstallWizard_Title=Install
+PreselectedIUInstallWizard_Description=Check the items that you wish to install.
 
 PlanAnalyzer_IgnoringInstall="{0}" is not applicable to the current configuration and will not be installed.
 PlanAnalyzer_IgnoringUninstall="{0}" cannot be uninstalled because other installed software depends on it.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index 8c5adca..8f46ee0 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.*;
+import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.PlannerHelper;
@@ -22,12 +23,13 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.InstallWizard;
+import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.PreselectedIUInstallWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.viewers.ISelectionProvider;
+import org.eclipse.jface.wizard.IWizard;
 import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.ui.PlatformUI;
 
@@ -129,12 +131,12 @@ public class InstallAction extends ProfileModificationAction {
 	}
 
 	/*
-	 * Overridden to reject nested IU's
+	 * Overridden to reject categories and nested IU's (parent is a non-category IU)
 	 * (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.actions.ProfileModificationAction#isSelectable(org.eclipse.equinox.internal.p2.ui.model.IUElement)
 	 */
 	protected boolean isSelectable(IIUElement element) {
-		return super.isSelectable(element) && !(element.getParent(element) instanceof IIUElement);
+		return super.isSelectable(element) && !(element.getParent(element) instanceof AvailableIUElement);
 	}
 
 	protected String getTaskName() {
@@ -142,7 +144,7 @@ public class InstallAction extends ProfileModificationAction {
 	}
 
 	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
-		InstallWizard wizard = new InstallWizard(getPolicy(), targetProfileId, ius, resolution, new QueryableMetadataRepositoryManager(getPolicy().getQueryContext(), false));
+		IWizard wizard = new PreselectedIUInstallWizard(getPolicy(), targetProfileId, ius, resolution, new QueryableMetadataRepositoryManager(getPolicy().getQueryContext(), false));
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.INSTALL_WIZARD);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
index d15756f..2736c33 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
@@ -23,6 +23,9 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.swt.widgets.Composite;
 
 /**
+ * An install wizard that allows the users to browse all of the repositories
+ * and search/select for items to install.
+ * 
  * @since 3.4
  */
 public class InstallWizard extends WizardWithLicenses {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java
new file mode 100644
index 0000000..10b7cc3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java
@@ -0,0 +1,74 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
+
+import java.util.ArrayList;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.dialogs.*;
+import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
+import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+
+/**
+ * An Install wizard that is invoked when the user has already selected which
+ * IUs should be installed and does not need to browse the available software.
+ * 
+ * @since 3.5
+ */
+public class PreselectedIUInstallWizard extends WizardWithLicenses {
+
+	ISelectableIUsPage mainPage;
+	QueryableMetadataRepositoryManager manager;
+
+	static IUElementListRoot makeElementRoot(IInstallableUnit[] ius, String profileId) {
+		IUElementListRoot elementRoot = new IUElementListRoot();
+		Object[] elements = new Object[ius.length];
+		for (int i = 0; i < ius.length; i++) {
+			if (ius[i] != null)
+				elements[i] = new AvailableIUElement(elementRoot, ius[i], profileId, false);
+		}
+		elementRoot.setChildren(elements);
+		return elementRoot;
+	}
+
+	public PreselectedIUInstallWizard(Policy policy, String profileId, IInstallableUnit[] initialSelections, PlannerResolutionOperation initialResolution, QueryableMetadataRepositoryManager manager) {
+		super(policy, profileId, makeElementRoot(initialSelections, profileId), initialSelections, initialResolution);
+		this.manager = manager;
+		setWindowTitle(ProvUIMessages.InstallIUOperationLabel);
+		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL));
+	}
+
+	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
+		mainPage = new SelectableIUsPage(policy, input, selections, profileId);
+		mainPage.setTitle(ProvUIMessages.PreselectedIUInstallWizard_Title);
+		mainPage.setDescription(ProvUIMessages.PreselectedIUInstallWizard_Description);
+		return mainPage;
+	}
+
+	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution) {
+		return new InstallWizardPage(policy, profileId, input, initialResolution);
+	}
+
+	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
+		IUElementListRoot elementRoot = new IUElementListRoot();
+		ArrayList list = new ArrayList(selectedElements.length);
+		for (int i = 0; i < selectedElements.length; i++) {
+			IInstallableUnit iu = ElementUtils.getIU(selectedElements[i]);
+			if (iu != null)
+				list.add(new AvailableIUElement(elementRoot, iu, profileId, policy.getQueryContext().getShowProvisioningPlanChildren()));
+		}
+		elementRoot.setChildren(list.toArray());
+		return elementRoot;
+	}
+}

commit 61c50236855639c751cff1d5413cc662a52f25bc
Author: Susan Franklin <sfranklin>
Date:   Thu Mar 5 21:31:06 2009 +0000

    Bug 260950 - [ui] Remove the custom collectors from the UI

25	21	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
16	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
0	49	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementCollector.java
46	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
0	114	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
148	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
0	122	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementCollector.java
86	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java
0	47	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java
55	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUElementWrapper.java
0	65	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java
0	53	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementCollector.java
51	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementWrapper.java
0	42	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementCollector.java
43	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementWrapper.java
0	123	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/UncategorizedElementCollector.java
47	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
index 812e9fd..cc82fcf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui;
 
@@ -73,7 +74,7 @@ public class DefaultQueryProvider extends QueryProvider {
 				// This involves setting up a secondary query for installed content that the various
 				// collectors will use to reject content.  We can't use a compound query because the
 				// queryables are different (profile for installed content, repo for available content)
-				AvailableIUCollector availableIUCollector;
+				AvailableIUWrapper availableIUWrapper;
 				boolean showLatest = context.getShowLatestVersionsOnly();
 				boolean hideInstalled = context.getHideAlreadyInstalled();
 				IProfile targetProfile = null;
@@ -92,17 +93,15 @@ public class DefaultQueryProvider extends QueryProvider {
 				// Showing child IU's of a group of repositories, or of a single repository
 				if (element instanceof MetadataRepositories || element instanceof MetadataRepositoryElement) {
 					if (context.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_FLAT || !context.getUseCategories()) {
-						AvailableIUCollector collector;
+						AvailableIUWrapper wrapper = new AvailableIUWrapper(queryable, element, false, context.getShowAvailableChildren());
 						if (showLatest)
-							collector = new LatestIUVersionElementCollector(queryable, element, false, context.getShowAvailableChildren());
-						else
-							collector = new AvailableIUCollector(queryable, element, false, context.getShowAvailableChildren());
+							topLevelQuery = new CompositeQuery(new Query[] {topLevelQuery, new LatestIUVersionQuery()});
 						if (targetProfile != null)
-							collector.markInstalledIUs(targetProfile, hideInstalled);
-						return new ElementQueryDescriptor(queryable, topLevelQuery, collector);
+							wrapper.markInstalledIUs(targetProfile, hideInstalled);
+						return new ElementQueryDescriptor(queryable, topLevelQuery, new Collector(), wrapper);
 					}
 					// Installed content not a concern for collecting categories
-					return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(queryable, element));
+					return new ElementQueryDescriptor(queryable, categoryQuery, new Collector(), new CategoryElementWrapper(queryable, element));
 				}
 
 				// If it's a category or some other IUElement to drill down in, we get the requirements and show all requirements
@@ -112,22 +111,27 @@ public class DefaultQueryProvider extends QueryProvider {
 					// continue to do so.
 					boolean drillDown = element instanceof CategoryElement ? context.getShowAvailableChildren() : true;
 					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IIUElement) element).getRequirements());
-					if (showLatest)
-						availableIUCollector = new LatestIUVersionElementCollector(queryable, element, true, drillDown);
-					else
-						availableIUCollector = new AvailableIUCollector(queryable, element, true, drillDown);
+					availableIUWrapper = new AvailableIUWrapper(queryable, element, true, drillDown);
 					if (targetProfile != null)
-						availableIUCollector.markInstalledIUs(targetProfile, hideInstalled);
+						availableIUWrapper.markInstalledIUs(targetProfile, hideInstalled);
 					// if it's a category, the metadata was specifically set up so that the requirements are the IU's that should
 					// be visible in the category.
-					if (element instanceof CategoryElement)
-						return new ElementQueryDescriptor(queryable, meetsAnyRequirementQuery, availableIUCollector);
+					if (element instanceof CategoryElement) {
+						if (showLatest)
+							meetsAnyRequirementQuery = new CompositeQuery(new Query[] {meetsAnyRequirementQuery, new LatestIUVersionQuery()});
+						return new ElementQueryDescriptor(queryable, meetsAnyRequirementQuery, new Collector(), availableIUWrapper);
+					}
+					Query query = CompoundQuery.createCompoundQuery(new Query[] {topLevelQuery, meetsAnyRequirementQuery}, true);
+					if (showLatest)
+						query = new CompositeQuery(new Query[] {query, new LatestIUVersionQuery()});
 					// If it's not a category, these are generic requirements and should be filtered by the visibility property (topLevelQuery)
-					return new ElementQueryDescriptor(queryable, CompoundQuery.createCompoundQuery(new Query[] {topLevelQuery, meetsAnyRequirementQuery}, true), availableIUCollector);
+					return new ElementQueryDescriptor(queryable, query, new Collector(), availableIUWrapper);
 				}
 				return null;
 
 			case QueryProvider.AVAILABLE_UPDATES :
+				// This query can be used by the automatic updater in headless cases (checking for updates).  
+				// We traffic in IU's rather than wrapped elements
 				IProfile profile;
 				IInstallableUnit[] toUpdate = null;
 				if (element instanceof Updates) {
@@ -155,12 +159,12 @@ public class DefaultQueryProvider extends QueryProvider {
 				if (element instanceof IIUElement && context.getShowInstallChildren()) {
 					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IIUElement) element).getRequirements());
 					Query visibleAsAvailableQuery = new IUPropertyQuery(context.getVisibleAvailableIUProperty(), Boolean.TRUE.toString());
-					return new ElementQueryDescriptor(queryable, CompoundQuery.createCompoundQuery(new Query[] {visibleAsAvailableQuery, meetsAnyRequirementQuery}, true), new InstalledIUCollector(queryable, element));
+					return new ElementQueryDescriptor(queryable, CompoundQuery.createCompoundQuery(new Query[] {visibleAsAvailableQuery, meetsAnyRequirementQuery}, true), new Collector(), new InstalledIUElementWrapper(queryable, element));
 				}
 				profile = (IProfile) ProvUI.getAdapter(element, IProfile.class);
 				if (profile == null)
 					return null;
-				return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, context.getVisibleInstalledIUProperty(), Boolean.toString(true)), new InstalledIUCollector(profile, element));
+				return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, context.getVisibleInstalledIUProperty(), Boolean.toString(true)), new Collector(), new InstalledIUElementWrapper(profile, element));
 
 			case QueryProvider.METADATA_REPOS :
 				if (element instanceof MetadataRepositories) {
@@ -168,7 +172,7 @@ public class DefaultQueryProvider extends QueryProvider {
 						queryable = new QueryableMetadataRepositoryManager(context, ((MetadataRepositories) element).getIncludeDisabledRepositories());
 						element.setQueryable(queryable);
 					}
-					return new ElementQueryDescriptor(element.getQueryable(), new RepositoryLocationQuery(), new MetadataRepositoryElementCollector(element.getQueryable(), element));
+					return new ElementQueryDescriptor(element.getQueryable(), new RepositoryLocationQuery(), new Collector(), new MetadataRepositoryElementWrapper(element.getQueryable(), element));
 				}
 				return null;
 
@@ -178,7 +182,7 @@ public class DefaultQueryProvider extends QueryProvider {
 					public boolean isMatch(Object candidate) {
 						return ProvUI.getAdapter(candidate, IProfile.class) != null;
 					}
-				}, new ProfileElementCollector(null, element));
+				}, new Collector(), new ProfileElementWrapper(null, element));
 
 			default :
 				return null;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
index aa240d1..7c27e6a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
@@ -296,9 +296,13 @@ public abstract class ResolutionWizardPage extends ProvisioningWizardPage {
 		// We tried to resolve and it failed.  The specific error was already reported, so description
 		// text can be used for the selected IU.
 		if (couldNotResolve) {
-			if (iu != null)
+			if (iu != null) {
 				detail = getIUDescription(iu);
-			iuDetailsGroup.enablePropertyLink(true);
+				iuDetailsGroup.enablePropertyLink(true);
+			} else {
+				detail = ""; //$NON-NLS-1$
+				iuDetailsGroup.enablePropertyLink(false);
+			}
 			return detail;
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
index f2c0e32..3955faa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
@@ -14,6 +14,7 @@ import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IRequiredCapability;
+import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
 
@@ -85,6 +86,21 @@ public class CategoryElement extends RemoteQueriedElement implements IIUElement
 		ius.add(iu);
 	}
 
+	public boolean shouldMerge(IInstallableUnit iu) {
+		IInstallableUnit myIU = getIU();
+		if (myIU == null)
+			return false;
+		return getMergeKey(myIU).equals(getMergeKey(iu));
+	}
+
+	private String getMergeKey(IInstallableUnit iu) {
+		String mergeKey = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_NAME);
+		if (mergeKey == null || mergeKey.length() == 0) {
+			mergeKey = iu.getId();
+		}
+		return mergeKey;
+	}
+
 	public IRequiredCapability[] getRequirements() {
 		if (ius == null || ius.isEmpty())
 			return new IRequiredCapability[0];
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
index b6a634a..2abcc07 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElement.java
@@ -91,11 +91,11 @@ public abstract class QueriedElement extends ProvElement {
 		ElementQueryDescriptor queryDescriptor = getQueryProvider().getQueryDescriptor(this);
 		if (queryDescriptor == null || !isSufficientForQuery(queryDescriptor))
 			return new Object[0];
-		queryDescriptor.queryable.query(queryDescriptor.query, queryDescriptor.collector, monitor);
-		cachedChildren = queryDescriptor.collector.toCollection();
-		if (queryDescriptor.collector.size() > 0) {
+		Collection results = queryDescriptor.performQuery(monitor);
+		cachedChildren = Collections.unmodifiableCollection(results);
+		if (results.size() > 0) {
 			Collection returnedChildren = new HashSet();
-			returnedChildren.addAll(queryDescriptor.collector.toCollection());
+			returnedChildren.addAll(results);
 			Object[] siblings = getSiblings();
 			for (int i = 0; i < siblings.length; i++) {
 				returnedChildren.remove(siblings[i]);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementCollector.java
deleted file mode 100644
index ed82700..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementCollector.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.model;
-
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-
-/**
- * Collector that assigns a query provider and the queryable
- * who was performing the query to the elements
- * as they are accepted.
- * 
- * @since 3.4
- */
-public class QueriedElementCollector extends Collector {
-
-	protected IQueryable queryable;
-	protected Object parent;
-
-	public QueriedElementCollector(IQueryable queryable, Object parent) {
-		this.queryable = queryable;
-		this.parent = parent;
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		if (match instanceof QueriedElement) {
-			QueriedElement element = (QueriedElement) match;
-			if (!element.knowsQueryable()) {
-				element.setQueryable(queryable);
-			}
-		}
-		return super.accept(match);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
new file mode 100644
index 0000000..3ceed37
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/QueriedElementWrapper.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.model;
+
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.ElementWrapper;
+
+/**
+ * A wrapper that assigns a query provider and the queryable
+ * who was performing the query to the wrapped elements
+ * as they are accepted.
+ * 
+ * @since 3.4
+ */
+public abstract class QueriedElementWrapper extends ElementWrapper {
+
+	protected IQueryable queryable;
+	protected Object parent;
+
+	public QueriedElementWrapper(IQueryable queryable, Object parent) {
+		this.queryable = queryable;
+		this.parent = parent;
+	}
+
+	/**
+	 * Sets an item as Queryable if it is a QueriedElement
+	 */
+	protected Object wrap(Object item) {
+		if (item instanceof QueriedElement) {
+			QueriedElement element = (QueriedElement) item;
+			if (!element.knowsQueryable()) {
+				element.setQueryable(queryable);
+			}
+		}
+		return item;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
deleted file mode 100644
index 65335fa..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import java.util.Iterator;
-import org.eclipse.equinox.internal.p2.ui.model.*;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
-
-/**
- * Collector that examines available IU's and wraps them in an
- * element representing either a category an IU.
- *  
- * @since 3.4
- */
-public class AvailableIUCollector extends QueriedElementCollector {
-
-	private boolean makeCategories;
-	private IProfile profile;
-	private boolean hideInstalledIUs = false;
-	private boolean drillDownChild = false;
-
-	public AvailableIUCollector(IQueryable queryable, Object parent, boolean makeCategories, boolean makeDrillDownChild) {
-		super(queryable, parent);
-		this.makeCategories = makeCategories;
-		this.drillDownChild = makeDrillDownChild;
-	}
-
-	public void markInstalledIUs(IProfile targetProfile, boolean hideInstalled) {
-		this.profile = targetProfile;
-		hideInstalledIUs = hideInstalled;
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(match, IInstallableUnit.class);
-		boolean isUpdate = false;
-		boolean isInstalled = false;
-		if (profile != null && iu != null) {
-			Collector collector = profile.query(new InstallableUnitQuery(iu.getId()), new Collector(), null);
-			Iterator iter = collector.iterator();
-			// We are typically iterating over only one IU unless it's a non-singleton.
-			while (iter.hasNext()) {
-				IInstallableUnit installed = (IInstallableUnit) iter.next();
-				if (installed.getVersion().compareTo(iu.getVersion()) < 0)
-					isUpdate = true;
-				else {
-					isUpdate = false;
-					isInstalled = true;
-				}
-			}
-		}
-		// if we are hiding, hide anything that is the same iu or older
-		if (hideInstalledIUs && isInstalled && !isUpdate) {
-			return true;
-		}
-
-		// subclass already made this an element, just set the install flag
-		if (match instanceof AvailableIUElement) {
-			AvailableIUElement element = (AvailableIUElement) match;
-			element.setIsInstalled(isInstalled);
-			element.setIsUpdate(isUpdate);
-			return super.accept(match);
-		}
-		// If it's not an IU or element, we have nothing to do here
-		if (!(match instanceof IInstallableUnit))
-			return super.accept(match);
-
-		// We need to make an element
-		if (makeCategories && isCategory(iu))
-			return super.accept(new CategoryElement(parent, iu));
-
-		IIUElement element = makeDefaultElement(iu);
-		if (element instanceof AvailableIUElement) {
-			AvailableIUElement availableElement = (AvailableIUElement) element;
-			availableElement.setIsInstalled(isInstalled);
-			availableElement.setIsUpdate(isUpdate);
-		}
-		return super.accept(element);
-	}
-
-	protected IIUElement makeDefaultElement(IInstallableUnit iu) {
-		if (parent instanceof AvailableIUElement)
-			drillDownChild = ((AvailableIUElement) parent).shouldShowChildren();
-		return new AvailableIUElement(parent, iu, null, drillDownChild);
-	}
-
-	protected boolean isCategory(IInstallableUnit iu) {
-		String isCategory = iu.getProperty(IInstallableUnit.PROP_TYPE_CATEGORY);
-		return isCategory != null && Boolean.valueOf(isCategory).booleanValue();
-	}
-
-	protected boolean makeCategory() {
-		return makeCategories;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
new file mode 100644
index 0000000..1f462f0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUWrapper.java
@@ -0,0 +1,148 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.query;
+
+import java.util.Iterator;
+import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+
+/**
+ * A wrapper that examines available IU's and wraps them in an
+ * element representing either a category or a regular IU.
+ *  
+ * @since 3.4
+ */
+public class AvailableIUWrapper extends QueriedElementWrapper {
+
+	private boolean makeCategories;
+	private IProfile profile;
+	private boolean hideInstalledIUs = false;
+	private boolean drillDownChild = false;
+
+	public AvailableIUWrapper(IQueryable queryable, Object parent, boolean makeCategories, boolean makeDrillDownChild) {
+		super(queryable, parent);
+		this.makeCategories = makeCategories;
+		this.drillDownChild = makeDrillDownChild;
+	}
+
+	public void markInstalledIUs(IProfile targetProfile, boolean hideInstalled) {
+		this.profile = targetProfile;
+		hideInstalledIUs = hideInstalled;
+	}
+
+	class InformationCache {
+		Object item = null;
+		boolean isUpdate = false;
+		boolean isInstalled = false;
+
+		public InformationCache(Object item, boolean isUpdate, boolean isInstalled) {
+			this.item = item;
+			this.isUpdate = isUpdate;
+			this.isInstalled = isInstalled;
+		}
+	}
+
+	InformationCache cache = null;
+
+	protected boolean shouldWrap(Object match) {
+		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(match, IInstallableUnit.class);
+		cache = computeIUInformation(iu); // Cache the result
+
+		// if we are hiding, hide anything that is the same iu or older
+		if (hideInstalledIUs && cache.isInstalled && !cache.isUpdate) {
+			return false;
+		}
+		return true;
+	}
+
+	/**
+	 * Compute information about this IU. This computes whether or
+	 * not this IU is installed and / or updated.
+	 */
+	private InformationCache computeIUInformation(IInstallableUnit iu) {
+		boolean isUpdate = false;
+		boolean isInstalled = false;
+		if (profile != null && iu != null) {
+			Collector collector = profile.query(new InstallableUnitQuery(iu.getId()), new Collector(), null);
+			Iterator iter = collector.iterator();
+			// We are typically iterating over only one IU unless it's a non-singleton.
+			while (iter.hasNext()) {
+				IInstallableUnit installed = (IInstallableUnit) iter.next();
+				if (installed.getVersion().compareTo(iu.getVersion()) < 0)
+					isUpdate = true;
+				else {
+					isUpdate = false;
+					isInstalled = true;
+				}
+			}
+		}
+		return new InformationCache(iu, isUpdate, isInstalled);
+
+	}
+
+	protected Object wrap(Object item) {
+		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(item, IInstallableUnit.class);
+		boolean isUpdate = false;
+		boolean isInstalled = false;
+		if (cache != null && cache.item == item) {
+			// This cache should always be valide, since accept is called before transformItem
+			isUpdate = cache.isUpdate;
+			isInstalled = cache.isInstalled;
+		} else {
+			InformationCache iuInformation = computeIUInformation(iu);
+			isUpdate = iuInformation.isUpdate;
+			isInstalled = iuInformation.isInstalled;
+		}
+		// subclass already made this an element, just set the install flag
+		if (item instanceof AvailableIUElement) {
+			AvailableIUElement element = (AvailableIUElement) item;
+			element.setIsInstalled(isInstalled);
+			element.setIsUpdate(isUpdate);
+			return super.wrap(item);
+		}
+		// If it's not an IU or element, we have nothing to do here
+		if (!(item instanceof IInstallableUnit))
+			return super.wrap(item);
+
+		// We need to make an element
+		if (makeCategories && isCategory(iu))
+			return super.wrap(new CategoryElement(parent, iu));
+
+		IIUElement element = makeDefaultElement(iu);
+		if (element instanceof AvailableIUElement) {
+			AvailableIUElement availableElement = (AvailableIUElement) element;
+			availableElement.setIsInstalled(isInstalled);
+			availableElement.setIsUpdate(isUpdate);
+		}
+		return super.wrap(element);
+	}
+
+	protected IIUElement makeDefaultElement(IInstallableUnit iu) {
+		if (parent instanceof AvailableIUElement)
+			drillDownChild = ((AvailableIUElement) parent).shouldShowChildren();
+		return new AvailableIUElement(parent, iu, null, drillDownChild);
+	}
+
+	protected boolean isCategory(IInstallableUnit iu) {
+		String isCategory = iu.getProperty(IInstallableUnit.PROP_TYPE_CATEGORY);
+		return isCategory != null && Boolean.valueOf(isCategory).booleanValue();
+	}
+
+	protected boolean makeCategory() {
+		return makeCategories;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementCollector.java
deleted file mode 100644
index ad04c74..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementCollector.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import java.util.*;
-import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.internal.p2.ui.model.QueriedElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IRequiredCapability;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-
-/**
- * A collector that converts IU's to category elements as it accepts them.
- * It can be configured so that it is never empty.
- * 
- * @since 3.4
- */
-public class CategoryElementCollector extends QueriedElementCollector {
-
-	// Used to track nested categories
-	private Set referredIUs = new HashSet();
-
-	public CategoryElementCollector(IQueryable queryable, Object parent) {
-		super(queryable, parent);
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		if (!(match instanceof IInstallableUnit))
-			return true;
-		IInstallableUnit iu = (IInstallableUnit) match;
-		IRequiredCapability[] requirements = iu.getRequiredCapabilities();
-		for (int i = 0; i < requirements.length; i++) {
-			if (requirements[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU_ID)) {
-				referredIUs.add(requirements[i].getName());
-			}
-		}
-		Iterator iter = super.iterator();
-		// Don't add the same category IU twice
-		while (iter.hasNext()) {
-			CategoryElement element = (CategoryElement) iter.next();
-			if (element.getIU().getId().equals(iu.getId())) {
-				element.mergeIU(iu);
-				return true;
-			}
-		}
-		return super.accept(new CategoryElement(parent, iu));
-	}
-
-	private void cleanList() {
-		removeNestedCategories();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#iterator()
-	 */
-	public Iterator iterator() {
-		cleanList();
-		return super.iterator();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toArray(java.lang.Class)
-	 */
-	public Object[] toArray(Class clazz) {
-		cleanList();
-		return super.toArray(clazz);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toCollection()
-	 */
-	public Collection toCollection() {
-		cleanList();
-		return super.toCollection();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#size()
-	 */
-	public int size() {
-		cleanList();
-		return super.size();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#isEmpty()
-	 */
-	public boolean isEmpty() {
-		cleanList();
-		return super.isEmpty();
-	}
-
-	private void removeNestedCategories() {
-		CategoryElement[] categoryIUs = (CategoryElement[]) getCollection().toArray(new CategoryElement[getCollection().size()]);
-		// If any other element refers to a category element, remove it from the list
-		for (int i = 0; i < categoryIUs.length; i++) {
-			if (referredIUs.contains(categoryIUs[i].getIU().getId())) {
-				getCollection().remove(categoryIUs[i]);
-			}
-		}
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java
new file mode 100644
index 0000000..f931df2
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/CategoryElementWrapper.java
@@ -0,0 +1,86 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.query;
+
+import java.util.*;
+import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
+import org.eclipse.equinox.internal.p2.ui.model.QueriedElementWrapper;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IRequiredCapability;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+
+/**
+ * A collector that converts IU's to category elements as it accepts them.
+ * It can be configured so that it is never empty.
+ * 
+ * @since 3.4
+ */
+public class CategoryElementWrapper extends QueriedElementWrapper {
+
+	// Used to track nested categories
+	private Set referredIUs = new HashSet();
+
+	public CategoryElementWrapper(IQueryable queryable, Object parent) {
+		super(queryable, parent);
+	}
+
+	protected boolean shouldWrap(Object match) {
+		if (match instanceof IInstallableUnit) {
+			IInstallableUnit iu = (IInstallableUnit) match;
+			IRequiredCapability[] requirements = iu.getRequiredCapabilities();
+			for (int i = 0; i < requirements.length; i++) {
+				if (requirements[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU_ID)) {
+					referredIUs.add(requirements[i].getName());
+				}
+			}
+
+			Iterator iter = super.getCollection().iterator();
+			// Don't add the same category IU twice.  
+			while (iter.hasNext()) {
+				CategoryElement element = (CategoryElement) iter.next();
+				if (element.shouldMerge(iu)) {
+					element.mergeIU(iu);
+					return false;
+				}
+			}
+			return true;
+		}
+
+		return false;
+	}
+
+	public Collection getElements(Collector collector) {
+		super.getElements(collector);
+		cleanList();
+		return getCollection();
+	}
+
+	protected Object wrap(Object item) {
+		IInstallableUnit iu = (IInstallableUnit) item;
+		return super.wrap(new CategoryElement(parent, iu));
+	}
+
+	private void cleanList() {
+		removeNestedCategories();
+	}
+
+	private void removeNestedCategories() {
+		CategoryElement[] categoryIUs = (CategoryElement[]) getCollection().toArray(new CategoryElement[getCollection().size()]);
+		// If any other element refers to a category element, remove it from the list
+		for (int i = 0; i < categoryIUs.length; i++) {
+			if (referredIUs.contains(categoryIUs[i].getIU().getId())) {
+				getCollection().remove(categoryIUs[i]);
+			}
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java
deleted file mode 100644
index 2346d61..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUCollector.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import org.eclipse.equinox.internal.p2.ui.model.QueriedElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
-
-/**
- * Collectors that accepts the matched IU's and
- * wraps them in an InstalledIUElement.
- * 
- * @since 3.4
- */
-public class InstalledIUCollector extends QueriedElementCollector {
-
-	public InstalledIUCollector(IQueryable queryable, Object parent) {
-		super(queryable, parent);
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		if (!(match instanceof IInstallableUnit))
-			return true;
-		if (queryable instanceof IProfile)
-			return super.accept(new InstalledIUElement(parent, ((IProfile) queryable).getProfileId(), (IInstallableUnit) match));
-		// Shouldn't happen, the queryable should typically be a profile
-		return super.accept(match);
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUElementWrapper.java
new file mode 100644
index 0000000..365fd4b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/InstalledIUElementWrapper.java
@@ -0,0 +1,55 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.query;
+
+import org.eclipse.equinox.internal.p2.ui.model.QueriedElementWrapper;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
+
+/**
+ * ElementWrapper that accepts the matched IU's and
+ * wraps them in an InstalledIUElement.
+ * 
+ * @since 3.4
+ */
+public class InstalledIUElementWrapper extends QueriedElementWrapper {
+
+	public InstalledIUElementWrapper(IQueryable queryable, Object parent) {
+		super(queryable, parent);
+	}
+
+	/**
+	 * Accepts a result that matches the query criteria.
+	 * 
+	 * @param match an object matching the query
+	 * @return <code>true</code> if the query should continue,
+	 * or <code>false</code> to indicate the query should stop.
+	 */
+	protected boolean shouldWrap(Object match) {
+		if (match instanceof IInstallableUnit)
+			return true;
+		return false;
+	}
+
+	/**
+	 * Transforms the item to a UI element
+	 */
+	protected Object wrap(Object item) {
+		if (queryable instanceof IProfile)
+			return super.wrap(new InstalledIUElement(parent, ((IProfile) queryable).getProfileId(), (IInstallableUnit) item));
+		// Shouldn't happen, the queryable should typically be a profile
+		return super.wrap(item);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java
deleted file mode 100644
index afb4fca..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import java.util.HashMap;
-import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-
-/**
- * Collector that only accepts categories or the latest version of each
- * IU.
- * 
- * @since 3.4
- */
-public class LatestIUVersionElementCollector extends AvailableIUCollector {
-
-	private HashMap uniqueIds = new HashMap();
-
-	public LatestIUVersionElementCollector(IQueryable queryable, Object parent, boolean makeCategories, boolean makeDrillDownChild) {
-		super(queryable, parent, makeCategories, makeDrillDownChild);
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		if (!(match instanceof IInstallableUnit))
-			return true;
-		IInstallableUnit iu = (IInstallableUnit) match;
-		// If it's a category, treat it as such if we are to build categories
-		if (makeCategory() && isCategory(iu))
-			return super.accept(match);
-		// Look for the latest element
-		Object matchElement = uniqueIds.get(iu.getId());
-		if (matchElement == null || iu.getVersion().compareTo(getIU(matchElement).getVersion()) > 0) {
-			if (matchElement != null)
-				getCollection().remove(matchElement);
-			matchElement = makeDefaultElement(iu);
-			uniqueIds.put(iu.getId(), matchElement);
-			return super.accept(matchElement);
-		}
-		return true;
-	}
-
-	protected IInstallableUnit getIU(Object matchElement) {
-		if (matchElement instanceof IInstallableUnit)
-			return (IInstallableUnit) matchElement;
-		if (matchElement instanceof IIUElement)
-			return ((IIUElement) matchElement).getIU();
-		return null;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementCollector.java
deleted file mode 100644
index 793356c..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementCollector.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import java.net.URI;
-import org.eclipse.equinox.internal.p2.ui.model.MetadataRepositoryElement;
-import org.eclipse.equinox.internal.p2.ui.model.QueriedElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
-
-/**
- * Collector that accepts the matched repo URLs and
- * wraps them in a MetadataRepositoryElement.
- * 
- * @since 3.4
- */
-public class MetadataRepositoryElementCollector extends QueriedElementCollector {
-
-	public MetadataRepositoryElementCollector(IQueryable queryable, Object parent) {
-		super(queryable, parent);
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		if (!(match instanceof URI))
-			return true;
-		MetadataRepositoryElement element = new MetadataRepositoryElement(parent, (URI) match, ProvisioningUtil.getMetadataRepositoryEnablement((URI) match));
-		try {
-			String nickname = ProvisioningUtil.getMetadataRepositoryProperty((URI) match, IRepository.PROP_NICKNAME);
-			if (nickname != null && nickname.length() > 0)
-				element.setNickname(nickname);
-		} catch (ProvisionException e) {
-			// swallow
-		}
-		return super.accept(element);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementWrapper.java
new file mode 100644
index 0000000..1392fcc
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/MetadataRepositoryElementWrapper.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.query;
+
+import java.net.URI;
+import org.eclipse.equinox.internal.p2.ui.model.MetadataRepositoryElement;
+import org.eclipse.equinox.internal.p2.ui.model.QueriedElementWrapper;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+
+/**
+ * ElementWrapper that accepts the matched repo URLs and
+ * wraps them in a MetadataRepositoryElement.
+ * 
+ * @since 3.4
+ */
+public class MetadataRepositoryElementWrapper extends QueriedElementWrapper {
+
+	public MetadataRepositoryElementWrapper(IQueryable queryable, Object parent) {
+		super(queryable, parent);
+	}
+
+	/**
+	 * Accepts a result that matches the query criteria.
+	 * 
+	 * @param match an object matching the query
+	 * @return <code>true</code> if the query should continue,
+	 * or <code>false</code> to indicate the query should stop.
+	 */
+	protected boolean shouldWrap(Object match) {
+		if ((match instanceof URI))
+			return true;
+		return false;
+	}
+
+	/**
+	 * Transforms the item to a UI element
+	 */
+	protected Object wrap(Object item) {
+		return super.wrap(new MetadataRepositoryElement(parent, (URI) item, ProvisioningUtil.getMetadataRepositoryEnablement((URI) item)));
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementCollector.java
deleted file mode 100644
index 9d500a1..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementCollector.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import org.eclipse.equinox.internal.p2.ui.model.QueriedElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
-
-/**
- * Collector that accepts the matched Profiles and
- * wraps them in a ProfileElement.
- * 
- * @since 3.4
- */
-public class ProfileElementCollector extends QueriedElementCollector {
-
-	public ProfileElementCollector(IProfile profile, Object parent) {
-		super(profile, parent);
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		if (!(match instanceof IProfile))
-			return true;
-		return super.accept(new ProfileElement(parent, ((IProfile) match).getProfileId()));
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementWrapper.java
new file mode 100644
index 0000000..060ac32
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/ProfileElementWrapper.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.query;
+
+import org.eclipse.equinox.internal.p2.ui.model.QueriedElementWrapper;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
+
+/**
+ * Collector that accepts the matched Profiles and
+ * wraps them in a ProfileElement.
+ * 
+ * @since 3.4
+ */
+public class ProfileElementWrapper extends QueriedElementWrapper {
+
+	public ProfileElementWrapper(IProfile profile, Object parent) {
+		super(profile, parent);
+	}
+
+	protected boolean shouldWrap(Object match) {
+		if ((match instanceof IProfile))
+			return true;
+		return false;
+	}
+
+	/**
+	 * Transforms the item to a UI element
+	 */
+	protected Object wrap(Object item) {
+		return super.wrap(new ProfileElement(parent, ((IProfile) item).getProfileId()));
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/UncategorizedElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/UncategorizedElementCollector.java
deleted file mode 100644
index b412f13..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/UncategorizedElementCollector.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import java.util.*;
-import org.eclipse.equinox.internal.p2.ui.model.QueriedElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IRequiredCapability;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-
-/**
- * A collector that collects everything specified by the query, but
- * removes anything referred to by a category when asked for its
- * contents.  Must be used with a compound query that includes categories
- * and something else.  For example, could be used with a category + group
- * query, and the net result would be all groups that were not referred to
- * by a category.
- * 
- * @since 3.4
- */
-public class UncategorizedElementCollector extends QueriedElementCollector {
-
-	private ArrayList categories = new ArrayList();
-	private Set allOthers = new HashSet();
-	private Collector resultCollector;
-
-	public UncategorizedElementCollector(IQueryable queryable, Object parent, Collector resultCollector) {
-		super(queryable, parent);
-		this.resultCollector = resultCollector;
-	}
-
-	/*
-	 * Accepts all IUs on the first pass, separating the categories and
-	 * non-categories.  The real work is done once clients try to get the results.
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.QueriedElementCollector#accept(java.lang.Object)
-	 */
-	public boolean accept(Object match) {
-		if (match instanceof IInstallableUnit) {
-			IInstallableUnit iu = (IInstallableUnit) match;
-			if (Boolean.toString(true).equals(iu.getProperty(IInstallableUnit.PROP_TYPE_CATEGORY)))
-				categories.add(iu);
-			else
-				allOthers.add(iu);
-		}
-		return true;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#iterator()
-	 */
-	public Iterator iterator() {
-		removeReferredIUsAndRecollect();
-		return resultCollector.iterator();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#size()
-	 */
-	public int size() {
-		removeReferredIUsAndRecollect();
-		return resultCollector.size();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#isEmpty()
-	 */
-	public boolean isEmpty() {
-		removeReferredIUsAndRecollect();
-		return resultCollector.isEmpty();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toArray(java.lang.Class)
-	 */
-	public Object[] toArray(Class clazz) {
-		removeReferredIUsAndRecollect();
-		return resultCollector.toArray(clazz);
-	}
-
-	private void removeReferredIUsAndRecollect() {
-		Iterator iter = categories.iterator();
-		while (iter.hasNext()) {
-			IInstallableUnit categoryIU = (IInstallableUnit) iter.next();
-			IRequiredCapability[] requirements = categoryIU.getRequiredCapabilities();
-			for (int i = 0; i < requirements.length; i++) {
-				if (requirements[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU_ID)) {
-					IInstallableUnit[] arrayAllOthers = (IInstallableUnit[]) allOthers.toArray(new IInstallableUnit[allOthers.size()]);
-					for (int j = 0; j < arrayAllOthers.length; j++)
-						if (arrayAllOthers[j].getId().equals(requirements[i].getName()))
-							allOthers.remove(arrayAllOthers[j]);
-				}
-			}
-		}
-		// Now allOthers has the correct content, so just
-		// collect results in the result collector.
-		iter = allOthers.iterator();
-		while (iter.hasNext())
-			resultCollector.accept(iter.next());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toCollection()
-	 */
-	public Collection toCollection() {
-		removeReferredIUsAndRecollect();
-		return resultCollector.toCollection();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
index 4dc21d4..9e12383 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,30 +7,71 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui;
 
+import java.util.Collection;
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
 
 /**
- * Data class representing everything needed to run a query, including
- * the object to be queried, the query to use, and the query result.
+ * ElementQueryDescriptor represents everything needed to run a query, including
+ * the object to be queried, the query to use, and the query result.  It can optionally
+ * wrap the query results in a UI element.
  * 
  * @since 3.4
  */
 public class ElementQueryDescriptor {
 
-	public Query query;
-	public Collector collector;
-	public IQueryable queryable;
+	private Query query;
+	private Collector collector;
+	private IQueryable queryable;
+	private ElementWrapper transformer;
 
+	/**
+	 * Creates an ElementQueryDescriptor to represent a Query, its collector the queryable
+	 * on which it will run.
+	 */
 	public ElementQueryDescriptor(IQueryable queryable, Query query, Collector collector) {
+		this(queryable, query, collector, null);
+	}
+
+	/**
+	 * Creates an ElementQueryDescriptor to represent a Query, its collector the queryable
+	 * on which it will run, and the transformer used to transform the results.
+	 */
+	public ElementQueryDescriptor(IQueryable queryable, Query query, Collector collector, ElementWrapper transformer) {
 		this.query = query;
 		this.collector = collector;
 		this.queryable = queryable;
+		this.transformer = transformer;
 	}
 
 	public boolean isComplete() {
 		return query != null && collector != null && queryable != null;
 	}
+
+	/**
+	 * Performs the query returning a collection of results.
+	 * @param monitor
+	 */
+	public Collection performQuery(IProgressMonitor monitor) {
+		Collector results = this.queryable.query(this.query, this.collector, monitor);
+		if (transformer != null)
+			return transformer.getElements(results);
+		return results.toCollection();
+	}
+
+	public boolean hasCollector() {
+		return this.collector != null;
+	}
+
+	public boolean hasQueryable() {
+		return this.queryable != null;
+	}
+
+	public boolean hasQuery() {
+		return this.query != null;
+	}
 }
commit 057d4fe69f11271aa6c5a4b3bf5bd6d8a4637a89
Author: Susan Franklin <sfranklin>
Date:   Thu Mar 5 21:34:40 2009 +0000

    Bug 260950 - [ui] Remove the custom collectors from the UI

12	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
4	3	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
0	141	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
156	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUWrapperTest.java
0	71	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementCollectorTest.java
106	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementWrapperTest.java
0	62	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java
90	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementWrapperTest.java
117	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryDescriptorTest.java
56	2	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
3	3	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
57	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementWrapper.java
9	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
26	21	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
18	29	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
index cc81e9c..00e9f24 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
@@ -22,6 +22,8 @@ import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
@@ -108,6 +110,16 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 		return ProvisioningUtil.performProvisioningPlan(plan, new DefaultPhaseSet(), profile, getMonitor());
 	}
 
+	protected IInstallableUnit createNamedIU(String id, String name, Version version, boolean isCategory) {
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
+		iu.setId(id);
+		iu.setVersion(version);
+		iu.setProperty(IInstallableUnit.PROP_NAME, name);
+		if (isCategory)
+			iu.setProperty(IInstallableUnit.PROP_TYPE_CATEGORY, Boolean.toString(true));
+		return MetadataFactory.createInstallableUnit(iu);
+	}
+
 	protected ProfileModificationOperation getLongTestOperation() {
 		return new ProfileModificationOperation("Test Operation", TESTPROFILE, null) {
 			protected IStatus doExecute(IProgressMonitor monitor) {
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
index 7c0b56b..1e3b2b9 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
@@ -20,10 +20,11 @@ public class AllTests extends TestCase {
 	public static Test suite() {
 		TestSuite suite = new TestSuite(AllTests.class.getName());
 		suite.addTestSuite(AnyRequiredCapabilityTest.class);
-		suite.addTestSuite(AvailableIUCollectorTest.class);
-		suite.addTestSuite(CategoryElementCollectorTest.class);
+		suite.addTestSuite(AvailableIUWrapperTest.class);
+		suite.addTestSuite(CategoryElementWrapperTest.class);
 		suite.addTestSuite(IUPropertyUtilsTest.class);
-		suite.addTestSuite(LatestIUVersionElementCollectorTest.class);
+		suite.addTestSuite(LatestIUVersionElementWrapperTest.class);
+		suite.addTestSuite(QueryDescriptorTest.class);
 		suite.addTestSuite(QueryableMetadataRepositoryManagerTest.class);
 		return suite;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
deleted file mode 100644
index 1880dcc..0000000
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.tests.ui.query;
-
-import java.util.*;
-import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
-import org.eclipse.equinox.internal.p2.ui.query.AvailableIUCollector;
-import org.eclipse.equinox.internal.provisional.p2.core.Version;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
-import org.eclipse.equinox.internal.provisional.p2.query.Query;
-import org.eclipse.equinox.p2.tests.MockQueryable;
-
-/**
- * Tests for {@link AvailableIUCollector}.
- */
-public class AvailableIUCollectorTest extends AbstractQueryTest {
-	protected AvailableIUCollector createCollector() {
-		return createCollector(true);
-	}
-
-	protected AvailableIUCollector createCollector(boolean makeCategories) {
-		return new AvailableIUCollector(new MockQueryable(), null, makeCategories, true);
-	}
-
-	/**
-	 * Returns the IU corresponding to the collected element.
-	 */
-	protected IInstallableUnit getIU(Object collected) {
-		return ((IIUElement) collected).getIU();
-	}
-
-	/**
-	 * Tests collecting items AvailableIUCollector doesn't care about.
-	 */
-	public void testCollectObject() {
-		AvailableIUCollector collector = createCollector();
-		Object object = new Object();
-		collector.accept(object);
-		assertEquals("1.0", 1, collector.size());
-		assertEquals("1.1", object, collector.iterator().next());
-	}
-
-	/**
-	 * Tests collecting an IU.
-	 */
-	public void testCollectIU() {
-		AvailableIUCollector collector = createCollector();
-		IInstallableUnit unit = createIU("f1");
-		collector.accept(unit);
-		assertEquals("1.0", 1, collector.size());
-		IInstallableUnit collectedIU = getIU(collector.iterator().next());
-		assertEquals("1.1", unit, collectedIU);
-	}
-
-	/**
-	 * Tests collecting a category when makeCategory=true.
-	 */
-	public void testMakeCategory() {
-		AvailableIUCollector collector = createCollector(true);
-		Map properties = new HashMap();
-		properties.put(IInstallableUnit.PROP_TYPE_CATEGORY, "true");
-		IInstallableUnit category = createIU("category", new Version(1, 0, 0), NO_REQUIRES, properties, false);
-		IInstallableUnit unit = createIU("basicIU");
-		collector.accept(category);
-		collector.accept(unit);
-		assertEquals("1.0", 2, collector.size());
-		boolean categoryFound = false;
-		for (Iterator it = collector.iterator(); it.hasNext();) {
-			Object element = it.next();
-			IInstallableUnit collected = getIU(element);
-			if (collected.equals(category)) {
-				categoryFound = true;
-				assertTrue("1.1", element instanceof CategoryElement);
-			} else {
-				assertEquals("1.2", unit, collected);
-			}
-		}
-		assertTrue("1.3", categoryFound);
-	}
-
-	/**
-	 * Tests collecting a category when makeCategory=false
-	 */
-	public void testNoMakeCategory() {
-		AvailableIUCollector collector = createCollector(false);
-		Map properties = new HashMap();
-		properties.put(IInstallableUnit.PROP_TYPE_CATEGORY, "true");
-		IInstallableUnit category = createIU("category", new Version(1, 0, 0), NO_REQUIRES, properties, false);
-		IInstallableUnit unit = createIU("basicIU");
-		collector.accept(category);
-		collector.accept(unit);
-		assertEquals("1.0", 2, collector.size());
-		boolean categoryFound = false;
-		for (Iterator it = collector.iterator(); it.hasNext();) {
-			Object element = it.next();
-			IInstallableUnit collected = getIU(element);
-			if (collected.equals(category)) {
-				categoryFound = true;
-				assertFalse("1.1", element instanceof CategoryElement);
-			} else {
-				assertEquals("1.2", unit, collected);
-			}
-		}
-		assertTrue("1.3", categoryFound);
-	}
-
-	/**
-	 * Tests hiding installed IUs.
-	 */
-	public void testHideInstalled() {
-		IProfile profile = createProfile("TestProfile");
-
-		AvailableIUCollector collector = createCollector(true);
-		IInstallableUnit installed = createIU("installed");
-		IInstallableUnit notInstalled = createIU("notInstalled");
-		install(profile, new IInstallableUnit[] {installed}, true, createPlanner(), createEngine());
-		collector.markInstalledIUs(profile, true);
-
-		//now feed in the installed and non-installed units, and the installed unit should be ignored.
-		collector.accept(installed);
-		collector.accept(notInstalled);
-		assertEquals("1.1", 1, collector.size());
-		Object iuElement = collector.iterator().next();
-		assertEquals("1.2", notInstalled, getIU(iuElement));
-	}
-
-	protected Query getMockQuery() {
-		return new IUPropertyQuery("key", "value");
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUWrapperTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUWrapperTest.java
new file mode 100644
index 0000000..c8419ae
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUWrapperTest.java
@@ -0,0 +1,156 @@
+/*******************************************************************************
+ * Copyright (c) 2008, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.query;
+
+import java.util.*;
+import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
+import org.eclipse.equinox.internal.p2.ui.query.AvailableIUWrapper;
+import org.eclipse.equinox.internal.provisional.p2.core.Version;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
+import org.eclipse.equinox.p2.tests.MockQueryable;
+
+/**
+ * Tests for {@link AvailableIUWrapper}.
+ */
+public class AvailableIUWrapperTest extends AbstractQueryTest {
+	protected AvailableIUWrapper createWrapper() {
+		return createWrapper(true);
+	}
+
+	protected AvailableIUWrapper createWrapper(boolean makeCategories) {
+		return new AvailableIUWrapper(new MockQueryable(), null, makeCategories, true);
+	}
+
+	/**
+	 * Returns the IU corresponding to the collected element.
+	 */
+	protected IInstallableUnit getIU(Object collected) {
+		return ((IIUElement) collected).getIU();
+	}
+
+	/**
+	 * Tests collecting items AvailableIUCollector doesn't care about.
+	 */
+	public void testCollectObject() {
+		AvailableIUWrapper wrapper = createWrapper();
+		Collector collector = new Collector();
+		Object object = new Object();
+		collector.accept(object);
+		Collection results = wrapper.getElements(collector);
+		assertEquals("1.0", 1, results.size());
+		assertEquals("1.1", object, results.iterator().next());
+	}
+
+	/**
+	 * Tests collecting an IU.
+	 */
+	public void testCollectIU() {
+		AvailableIUWrapper wrapper = createWrapper();
+		Collector collector = new Collector();
+		IInstallableUnit unit = createIU("f1");
+		collector.accept(unit);
+		Collection results = wrapper.getElements(collector);
+		assertEquals("1.0", 1, results.size());
+		IInstallableUnit collectedIU = getIU(results.iterator().next());
+		assertEquals("1.1", unit, collectedIU);
+	}
+
+	/**
+	 * Tests collecting a category when makeCategory=true.
+	 */
+	public void testMakeCategory() {
+		AvailableIUWrapper wrapper = createWrapper(true);
+		Collector collector = new Collector();
+		Map properties = new HashMap();
+		properties.put(IInstallableUnit.PROP_TYPE_CATEGORY, "true");
+		IInstallableUnit category = createIU("category", new Version(1, 0, 0), NO_REQUIRES, properties, false);
+		IInstallableUnit unit = createIU("basicIU");
+		collector.accept(category);
+		collector.accept(unit);
+
+		Collection results = wrapper.getElements(collector);
+		assertEquals("1.0", 2, collector.size());
+		boolean categoryFound = false;
+		for (Iterator it = results.iterator(); it.hasNext();) {
+			Object element = it.next();
+			IInstallableUnit collected = getIU(element);
+			if (collected.equals(category)) {
+				categoryFound = true;
+				assertTrue("1.1", element instanceof CategoryElement);
+			} else {
+				assertEquals("1.2", unit, collected);
+			}
+		}
+		assertTrue("1.3", categoryFound);
+	}
+
+	/**
+	 * Tests collecting a category when makeCategory=false
+	 */
+	public void testNoMakeCategory() {
+		AvailableIUWrapper wrapper = createWrapper(false);
+		Collector collector = new Collector();
+		Map properties = new HashMap();
+		properties.put(IInstallableUnit.PROP_TYPE_CATEGORY, "true");
+		IInstallableUnit category = createIU("category", new Version(1, 0, 0), NO_REQUIRES, properties, false);
+		IInstallableUnit unit = createIU("basicIU");
+		collector.accept(category);
+		collector.accept(unit);
+
+		Collection results = wrapper.getElements(collector);
+		assertEquals("1.0", 2, results.size());
+		boolean categoryFound = false;
+		for (Iterator it = results.iterator(); it.hasNext();) {
+			Object element = it.next();
+			IInstallableUnit collected = getIU(element);
+			if (collected.equals(category)) {
+				categoryFound = true;
+				assertFalse("1.1", element instanceof CategoryElement);
+			} else {
+				assertEquals("1.2", unit, collected);
+			}
+		}
+		assertTrue("1.3", categoryFound);
+	}
+
+	/**
+	 * Tests hiding installed IUs.
+	 */
+	public void testHideInstalled() {
+		IProfile profile = createProfile("TestProfile");
+		AvailableIUWrapper wrapper = createWrapper(true);
+		Collector collector = new Collector();
+		IInstallableUnit installed = createIU("installed");
+		IInstallableUnit notInstalled = createIU("notInstalled");
+		install(profile, new IInstallableUnit[] {installed}, true, createPlanner(), createEngine());
+		wrapper.markInstalledIUs(profile, true);
+
+		//now feed in the installed and non-installed units, and the installed unit should be ignored.
+		collector.accept(installed);
+		collector.accept(notInstalled);
+
+		Collection results = wrapper.getElements(collector);
+
+		assertEquals("1.1", 1, results.size());
+		Object iuElement = results.iterator().next();
+		assertEquals("1.2", notInstalled, getIU(iuElement));
+	}
+
+	protected Query getMockQuery() {
+		return new IUPropertyQuery("key", "value");
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementCollectorTest.java
deleted file mode 100644
index 839b637..0000000
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementCollectorTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.tests.ui.query;
-
-import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
-import org.eclipse.equinox.internal.p2.ui.query.CategoryElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IRequiredCapability;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.p2.tests.MockQueryable;
-
-/**
- * Tests for {@link CategoryElementCollector}.
- */
-public class CategoryElementCollectorTest extends AbstractQueryTest {
-	private CategoryElementCollector createCollector() {
-		IInstallableUnit category = createIU("default category");
-		return new CategoryElementCollector(new MockQueryable(category), null);
-	}
-
-	public void testCollectObject() {
-		CategoryElementCollector collector = createCollector();
-		collector.accept("AnObjectThatIsNotAnIU");
-		assertTrue("1.0", collector.isEmpty());
-	}
-
-	/**
-	 * Tests for the {@link Collector#isEmpty()} method.
-	 */
-	public void testIsEmpty() {
-		CategoryElementCollector collector = createCollector();
-		assertTrue("1.1", collector.isEmpty());
-
-		IInstallableUnit category1 = createIU("category1");
-		collector.accept(category1);
-		assertTrue("1.2", !collector.isEmpty());
-	}
-
-	/**
-	 * Tests for the {@link Collector#size()} method.
-	 */
-	public void testSize() {
-		CategoryElementCollector collector = createCollector();
-		assertEquals("1.1", 0, collector.size());
-
-		IInstallableUnit category1 = createIU("category1");
-		collector.accept(category1);
-		assertEquals("1.2", 1, collector.size());
-		assertEquals("1.3", category1, ((CategoryElement) collector.iterator().next()).getIU());
-		assertEquals("1.4", category1, ((CategoryElement) collector.toCollection().iterator().next()).getIU());
-		assertEquals("1.5", category1, ((CategoryElement) collector.toArray(CategoryElement.class)[0]).getIU());
-
-		//adding the same category twice shouldn't affect size
-		collector.accept(category1);
-		assertEquals("1.6", 1, collector.size());
-
-		//adding a nested category shouldn't affected size
-		IRequiredCapability[] required = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU_ID, "category1", null);
-		IInstallableUnit nested = createIU("Nested", required);
-		collector.accept(nested);
-		assertEquals("1.7", 1, collector.size());
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementWrapperTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementWrapperTest.java
new file mode 100644
index 0000000..f77f039
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/CategoryElementWrapperTest.java
@@ -0,0 +1,106 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.query;
+
+import java.util.Collection;
+import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
+import org.eclipse.equinox.internal.p2.ui.query.CategoryElementWrapper;
+import org.eclipse.equinox.internal.provisional.p2.core.Version;
+import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.p2.tests.MockQueryable;
+
+/**
+ * Tests for {@link CategoryElementWrapper}.
+ */
+public class CategoryElementWrapperTest extends AbstractQueryTest {
+	private CategoryElementWrapper createWrapper() {
+		IInstallableUnit category = createIU("default category");
+		return new CategoryElementWrapper(new MockQueryable(category), null);
+	}
+
+	private IInstallableUnit createNamedCategory(String id, String name, Version version) {
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
+		iu.setId(id);
+		iu.setVersion(version);
+		iu.setProperty(IInstallableUnit.PROP_NAME, name);
+		iu.setProperty(IInstallableUnit.PROP_TYPE_CATEGORY, Boolean.toString(true));
+		return MetadataFactory.createInstallableUnit(iu);
+	}
+
+	public void testCollectObject() {
+		CategoryElementWrapper wrapper = createWrapper();
+		Collector collector = new Collector();
+		collector.accept("AnObjectThatIsNotAnIU");
+		Collection results = wrapper.getElements(collector);
+		assertTrue("1.0", results.isEmpty());
+	}
+
+	/**
+	 * Tests for the {@link Collector#isEmpty()} method.
+	 */
+	public void testIsEmpty() {
+		CategoryElementWrapper wrapper = createWrapper();
+		Collector collector = new Collector();
+		assertTrue("1.1", collector.isEmpty());
+
+		IInstallableUnit category1 = createIU("category1");
+		collector.accept(category1);
+		Collection results = wrapper.getElements(collector);
+		assertTrue("1.2", !results.isEmpty());
+	}
+
+	/**
+	 * Tests for the {@link Collector#size()} method.
+	 */
+	public void testSize() {
+		CategoryElementWrapper wrapper = createWrapper();
+		Collector collector = new Collector();
+		assertEquals("1.1", 0, collector.size());
+
+		IInstallableUnit category1 = createIU("category1");
+		collector.accept(category1);
+		Collection results = wrapper.getElements(collector);
+		assertEquals("1.2", 1, collector.size());
+		assertEquals("1.3", category1, ((CategoryElement) results.iterator().next()).getIU());
+
+		//adding the same category twice shouldn't affect size
+		collector.accept(category1);
+		results = wrapper.getElements(collector);
+		assertEquals("1.6", 1, results.size());
+
+		//adding a nested category shouldn't affected size
+		IRequiredCapability[] required = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU_ID, "category1", null);
+		IInstallableUnit nested = createIU("Nested", required);
+		collector.accept(nested);
+		results = wrapper.getElements(collector);
+		assertEquals("1.7", 1, results.size());
+	}
+
+	public void testCategoryMerging() {
+		CategoryElementWrapper wrapper = createWrapper();
+		Collector collector = new Collector();
+		assertEquals("1.1", 0, collector.size());
+
+		IInstallableUnit category1 = createNamedCategory("qualifier1.foo", "Foo", DEFAULT_VERSION);
+		collector.accept(category1);
+		Collection results = wrapper.getElements(collector);
+		assertEquals("1.2", 1, collector.size());
+		assertEquals("1.3", category1, ((CategoryElement) results.iterator().next()).getIU());
+
+		//add a second category with different id and different name
+		IInstallableUnit category2 = createNamedCategory("qualifier2.foo", "Foo", DEFAULT_VERSION);
+		collector.accept(category2);
+		results = wrapper.getElements(collector);
+		assertEquals("1.4", 1, results.size());
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java
deleted file mode 100644
index 95d5034..0000000
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.tests.ui.query;
-
-import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
-import org.eclipse.equinox.internal.p2.ui.query.AvailableIUCollector;
-import org.eclipse.equinox.internal.p2.ui.query.LatestIUVersionElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.core.Version;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.tests.MockQueryable;
-
-/**
- * Tests for {@link LatestIUVersionElementCollector}. This has all the tests of the superclass,
- * plus some extras for testing the latest IU capabilities.
- */
-public class LatestIUVersionElementCollectorTest extends AvailableIUCollectorTest {
-
-	protected AvailableIUCollector createCollector(boolean makeCategories) {
-		return new LatestIUVersionElementCollector(new MockQueryable(), null, makeCategories, true);
-	}
-
-	/**
-	 * Returns the IU corresponding to the collected element.
-	 */
-	protected IInstallableUnit getIU(Object collected) {
-		if (collected instanceof IInstallableUnit)
-			return (IInstallableUnit) collected;
-		return ((IIUElement) collected).getIU();
-	}
-
-	/**
-	 * Tests collecting items AvailableIUCollector doesn't care about.
-	 */
-	public void testCollectObject() {
-		AvailableIUCollector collector = createCollector();
-		Object object = new Object();
-		collector.accept(object);
-		assertEquals("1.0", 0, collector.size());
-	}
-
-	/**
-	 * Tests that only the latest version is collected.
-	 */
-	public void testCollectLatestIU() {
-		AvailableIUCollector collector = createCollector();
-		IInstallableUnit unit1 = createIU("f1", new Version(1, 0, 0));
-		IInstallableUnit unit2 = createIU("f1", new Version(1, 0, 1));
-		collector.accept(unit1);
-		collector.accept(unit2);
-		assertEquals("1.0", 1, collector.size());
-		IInstallableUnit collectedIU = getIU(collector.iterator().next());
-		assertEquals("1.1", unit2, collectedIU);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementWrapperTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementWrapperTest.java
new file mode 100644
index 0000000..f012c28
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementWrapperTest.java
@@ -0,0 +1,90 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.query;
+
+import java.util.*;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
+import org.eclipse.equinox.internal.provisional.p2.core.Version;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.LatestIUVersionQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+
+/**
+ * Tests for {@link LatestIUVersionElementCollector}. This has all the tests of the superclass,
+ * plus some extras for testing the latest IU capabilities.
+ */
+public class LatestIUVersionElementWrapperTest extends AvailableIUWrapperTest {
+
+	/**
+	 * Returns the IU corresponding to the collected element.
+	 */
+	protected IInstallableUnit getIU(Object collected) {
+		if (collected instanceof IInstallableUnit)
+			return (IInstallableUnit) collected;
+		return ((IIUElement) collected).getIU();
+	}
+
+	/**
+	 * Tests collecting items that LatestIUVersionElementQuery should
+	 * discard. 
+	 */
+	public void testCollectObject() {
+		LatestIUVersionQuery latestIuVersionElementQuery = new LatestIUVersionQuery();
+		Object object = new Object();
+		List list = new ArrayList();
+		list.add(object);
+		Collector collector = latestIuVersionElementQuery.perform(list.iterator(), new Collector());
+		assertEquals("1.0", 0, collector.size());
+	}
+
+	/**
+	 * Tests that only the latest version is collected.
+	 */
+	public void testCollectLatestIU() {
+		LatestIUVersionQuery latestIuVersionElementQuery = new LatestIUVersionQuery();
+		IInstallableUnit unit1 = createIU("f1", new Version(1, 0, 0));
+		IInstallableUnit unit2 = createIU("f1", new Version(1, 0, 1));
+		List listOfIUs = new ArrayList();
+		listOfIUs.add(unit1);
+		listOfIUs.add(unit2);
+		Collector collector = latestIuVersionElementQuery.perform(listOfIUs.iterator(), new Collector());
+		assertEquals("1.0", 1, collector.size());
+		IInstallableUnit collectedIU = getIU(collector.iterator().next());
+		assertEquals("1.1", unit2, collectedIU);
+	}
+
+	public void testMultipleIUsAndVersions() {
+		LatestIUVersionQuery latestIuVersionElementQuery = new LatestIUVersionQuery();
+		IInstallableUnit unit1 = createIU("A", new Version(1, 0, 0));
+		IInstallableUnit unit2 = createIU("A", new Version(1, 0, 1));
+		IInstallableUnit unit3 = createIU("B", new Version(1, 0, 1));
+		IInstallableUnit unit4 = createIU("B", new Version(0, 1, 1));
+		IInstallableUnit unit5 = createIU("C", new Version(0, 1, 1));
+
+		// We should get unit 2, unit 3 and unit 5 
+		List listOfIUs = new ArrayList();
+		listOfIUs.add(unit1);
+		listOfIUs.add(unit2);
+		listOfIUs.add(unit3);
+		listOfIUs.add(unit4);
+		listOfIUs.add(unit5);
+		Collector collector = latestIuVersionElementQuery.perform(listOfIUs.iterator(), new Collector());
+
+		// Should be 3  units
+		assertEquals("1.0", 3, collector.size());
+		Collection reslts = collector.toCollection();
+		assertTrue("1.2", reslts.contains(unit2));
+		assertTrue("1.3", reslts.contains(unit3));
+		assertTrue("1.4", reslts.contains(unit5));
+
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryDescriptorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryDescriptorTest.java
new file mode 100644
index 0000000..ec3d651
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryDescriptorTest.java
@@ -0,0 +1,117 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.query;
+
+import java.util.*;
+import junit.framework.TestCase;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.query.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.ElementQueryDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.ui.ElementWrapper;
+
+/**
+ * Tests the Query Descriptor
+ */
+public class QueryDescriptorTest extends TestCase {
+
+	class SimpleQueryable implements IQueryable {
+		List elements = Arrays.asList(new String[] {"a", "b", "c", "d", "e"});
+
+		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+			return query.perform(elements.iterator(), collector);
+		}
+	}
+
+	class WrappedString {
+		String string;
+
+		WrappedString(String string) {
+			this.string = string;
+		}
+
+		public boolean equals(Object obj) {
+			if (this == obj)
+				return true;
+			if (obj == null)
+				return false;
+			if (!(obj instanceof WrappedString))
+				return false;
+			WrappedString other = (WrappedString) obj;
+			return this.string.equals(other.string);
+		}
+
+		public int hashCode() {
+			return string.hashCode();
+		}
+	}
+
+	class StringWrapper extends ElementWrapper {
+		protected Object wrap(Object item) {
+			return new WrappedString((String) item);
+		}
+	}
+
+	class SimpleMatchQuery extends MatchQuery {
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.equinox.internal.provisional.p2.query.MatchQuery#isMatch(java.lang.Object)
+		 */
+		public boolean isMatch(Object candidate) {
+			if (candidate == "a" || candidate == "b")
+				return true;
+			return false;
+		}
+	}
+
+	class SimpleMatchQuery2 extends MatchQuery {
+		/* (non-Javadoc)
+		 * @see org.eclipse.equinox.internal.provisional.p2.query.MatchQuery#isMatch(java.lang.Object)
+		 */
+		public boolean isMatch(Object candidate) {
+			if (candidate == "b" || candidate == "c")
+				return true;
+			return false;
+		}
+	}
+
+	public void testSimpleDescriptorWithWrapper() {
+		ElementQueryDescriptor eqDescriptor = new ElementQueryDescriptor(new SimpleQueryable(), new SimpleMatchQuery(), new Collector(), new StringWrapper());
+		Collection collection = eqDescriptor.performQuery(null);
+		assertEquals("1.0", 2, collection.size());
+		assertTrue("1.1", collection.contains(new WrappedString("a")));
+		assertTrue("1.1", collection.contains(new WrappedString("b")));
+	}
+
+	public void testSimpleDescriptorWithoutWrapper() {
+		ElementQueryDescriptor eqDescriptor = new ElementQueryDescriptor(new SimpleQueryable(), new SimpleMatchQuery(), new Collector());
+		Collection collection = eqDescriptor.performQuery(null);
+		assertEquals("1.0", 2, collection.size());
+		assertTrue("1.1", collection.contains("a"));
+		assertTrue("1.1", collection.contains("b"));
+	}
+
+	public void testCompoundDescriptorAND() {
+		Query query = CompoundQuery.createCompoundQuery(new Query[] {new SimpleMatchQuery(), new SimpleMatchQuery2()}, true);
+		ElementQueryDescriptor eqDescriptor = new ElementQueryDescriptor(new SimpleQueryable(), query, new Collector(), new StringWrapper());
+		Collection collection = eqDescriptor.performQuery(null);
+		assertEquals("1.0", 1, collection.size());
+		assertTrue("1.1", collection.contains(new WrappedString("b")));
+	}
+
+	public void testCompoundDescriptorOR() {
+		Query query = CompoundQuery.createCompoundQuery(new Query[] {new SimpleMatchQuery(), new SimpleMatchQuery2()}, false);
+		ElementQueryDescriptor eqDescriptor = new ElementQueryDescriptor(new SimpleQueryable(), query, new Collector(), new StringWrapper());
+		Collection collection = eqDescriptor.performQuery(null);
+		assertEquals("1.0", 3, collection.size());
+		assertTrue("1.1", collection.contains(new WrappedString("a")));
+		assertTrue("1.1", collection.contains(new WrappedString("b")));
+		assertTrue("1.1", collection.contains(new WrappedString("c")));
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
index b1765a8..f66cae1 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
@@ -14,14 +14,17 @@ import java.io.File;
 import java.net.URI;
 import java.util.Collection;
 import org.eclipse.core.tests.harness.CancelingProgressMonitor;
+import org.eclipse.equinox.internal.p2.ui.DefaultQueryProvider;
+import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.ui.RepositoryLocationQuery;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.p2.tests.TestData;
 
@@ -176,6 +179,57 @@ public class QueryableMetadataRepositoryManagerTest extends AbstractQueryTest {
 		assertEquals("2.2", iuCount, result.size());
 	}
 
+	public void testNonLatestInMultipleRepositories() {
+		URI multipleVersion1, multipleVersion2;
+		try {
+			multipleVersion1 = TestData.getFile("metadataRepo", "multipleversions1").toURI();
+			multipleVersion2 = TestData.getFile("metadataRepo", "multipleversions2").toURI();
+		} catch (Exception e) {
+			fail("0.99", e);
+			return;
+		}
+		IMetadataRepositoryManager metadataRepositoryManager = getMetadataRepositoryManager();
+		metadataRepositoryManager.addRepository(multipleVersion1);
+		metadataRepositoryManager.addRepository(multipleVersion2);
+		QueryableMetadataRepositoryManager manager = getQueryableManager();
+
+		IUViewQueryContext context = new IUViewQueryContext(IUViewQueryContext.AVAILABLE_VIEW_FLAT);
+		context.setShowLatestVersionsOnly(false);
+
+		MetadataRepositories rootElement = new MetadataRepositories(context, Policy.getDefault(), manager);
+		DefaultQueryProvider queryProvider = new DefaultQueryProvider(Policy.getDefault());
+		ElementQueryDescriptor queryDescriptor = queryProvider.getQueryDescriptor(rootElement);
+		Collection collection = queryDescriptor.performQuery(null);
+		assertEquals("1.0", 5, collection.size());
+	}
+
+	public void testLatestInMultipleRepositories() {
+		URI multipleVersion1, multipleVersion2;
+		try {
+			multipleVersion1 = TestData.getFile("metadataRepo", "multipleversions1").toURI();
+			multipleVersion2 = TestData.getFile("metadataRepo", "multipleversions2").toURI();
+		} catch (Exception e) {
+			fail("0.99", e);
+			return;
+		}
+		IMetadataRepositoryManager metadataRepositoryManager = getMetadataRepositoryManager();
+		metadataRepositoryManager.addRepository(multipleVersion1);
+		metadataRepositoryManager.addRepository(multipleVersion2);
+		QueryableMetadataRepositoryManager manager = getQueryableManager();
+
+		IUViewQueryContext context = new IUViewQueryContext(IUViewQueryContext.AVAILABLE_VIEW_FLAT);
+		context.setShowLatestVersionsOnly(true);
+
+		MetadataRepositories rootElement = new MetadataRepositories(context, Policy.getDefault(), manager);
+		manager.setQueryContext(context);
+		DefaultQueryProvider queryProvider = new DefaultQueryProvider(Policy.getDefault());
+		ElementQueryDescriptor queryDescriptor = queryProvider.getQueryDescriptor(rootElement);
+		Collection collection = queryDescriptor.performQuery(null);
+		assertEquals("1.0", 1, collection.size());
+		AvailableIUElement next = (AvailableIUElement) collection.iterator().next();
+		assertEquals("1.1", new Version(3, 0, 0), next.getIU().getVersion());
+	}
+
 	private QueryableMetadataRepositoryManager getQueryableManager() {
 		return new QueryableMetadataRepositoryManager(Policy.getDefault().getQueryContext(), false);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
index 1dad876..9958e36 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk.scheduler;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.EventObject;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
@@ -89,9 +90,8 @@ public class AutomaticUpdater implements IUpdateListener {
 						.getQueryProvider().getQueryDescriptor(
 								new Updates(event.getProfileId(), event
 										.getIUs()));
-				IInstallableUnit[] replacements = (IInstallableUnit[]) descriptor.queryable
-						.query(descriptor.query, descriptor.collector, null)
-						.toArray(IInstallableUnit.class);
+				Collection results = descriptor.performQuery(null);
+				IInstallableUnit[] replacements = (IInstallableUnit[]) results.toArray(new IInstallableUnit[results.size()]);
 				if (replacements.length > 0) {
 					ProfileChangeRequest request = ProfileChangeRequest
 							.createByProfileId(event.getProfileId());
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
index 9e12383..d73c2a2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementQueryDescriptor.java
@@ -27,7 +27,7 @@ public class ElementQueryDescriptor {
 	private Query query;
 	private Collector collector;
 	private IQueryable queryable;
-	private ElementWrapper transformer;
+	private ElementWrapper wrapper;
 
 	/**
 	 * Creates an ElementQueryDescriptor to represent a Query, its collector the queryable
@@ -41,11 +41,11 @@ public class ElementQueryDescriptor {
 	 * Creates an ElementQueryDescriptor to represent a Query, its collector the queryable
 	 * on which it will run, and the transformer used to transform the results.
 	 */
-	public ElementQueryDescriptor(IQueryable queryable, Query query, Collector collector, ElementWrapper transformer) {
+	public ElementQueryDescriptor(IQueryable queryable, Query query, Collector collector, ElementWrapper wrapper) {
 		this.query = query;
 		this.collector = collector;
 		this.queryable = queryable;
-		this.transformer = transformer;
+		this.wrapper = wrapper;
 	}
 
 	public boolean isComplete() {
@@ -58,8 +58,8 @@ public class ElementQueryDescriptor {
 	 */
 	public Collection performQuery(IProgressMonitor monitor) {
 		Collector results = this.queryable.query(this.query, this.collector, monitor);
-		if (transformer != null)
-			return transformer.getElements(results);
+		if (wrapper != null)
+			return wrapper.getElements(results);
 		return results.toCollection();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementWrapper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementWrapper.java
new file mode 100644
index 0000000..194148a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ElementWrapper.java
@@ -0,0 +1,57 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+*   IBM Corporation - ongoing development
+******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui;
+
+import java.util.*;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+
+/**
+ * Wraps query results inside corresponding UI elements
+ */
+public abstract class ElementWrapper {
+
+	private Collection collection = null;
+
+	/**
+	 * Transforms a collector returned by a query to a collection
+	 * of UI elements
+	 */
+	public Collection getElements(Collector collector) {
+		collection = new ArrayList(collector.size());
+		Iterator iter = collector.iterator();
+		while (iter.hasNext()) {
+			Object o = iter.next();
+			if (shouldWrap(o))
+				collection.add(wrap(o));
+		}
+		return getCollection();
+	}
+
+	/**
+	 * Gets the collection where the elements are being stored.
+	 */
+	protected Collection getCollection() {
+		return collection == null ? Collections.EMPTY_LIST : collection;
+	}
+
+	/**
+	 * Determines if this object should be accepted and wrapped
+	 * by a UI element.  
+	 */
+	protected boolean shouldWrap(Object o) {
+		return true;
+	}
+
+	/**
+	 * Wraps a single element of the query result inside a UI element.
+	 */
+	protected abstract Object wrap(Object item);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
index 112888a..96b31b3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableArtifactRepositoryManager.java
@@ -14,6 +14,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui;
 import java.net.URI;
 import java.util.Arrays;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.SubMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
@@ -48,9 +49,14 @@ public class QueryableArtifactRepositoryManager extends QueryableRepositoryManag
 		return null;
 	}
 
-	protected Collector query(URI uri, Query query, Collector collector, IProgressMonitor monitor) {
-		// artifact repositories do not support querying, so we always use the location.
-		query.perform(Arrays.asList(new URI[] {uri}).iterator(), collector);
+	protected Collector query(URI[] uris, Query query, Collector collector, IProgressMonitor monitor) {
+		SubMonitor sub = SubMonitor.convert(monitor, uris.length * 100);
+		for (int i = 0; i < uris.length; i++) {
+			if (sub.isCanceled())
+				return collector;
+			// artifact repositories do not support querying, so we always use the location.
+			query.perform(Arrays.asList(uris).iterator(), collector);
+		}
 		return collector;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
index 74b79dc..24c076a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.provisional.p2.ui;
 
 import java.net.URI;
+import java.util.ArrayList;
 import java.util.Arrays;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
@@ -20,10 +21,8 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.query.Query;
+import org.eclipse.equinox.internal.provisional.p2.query.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.ui.statushandlers.StatusManager;
@@ -61,28 +60,34 @@ public class QueryableMetadataRepositoryManager extends QueryableRepositoryManag
 		return null;
 	}
 
-	protected Collector query(URI uri, Query query, Collector collector, IProgressMonitor monitor) {
-		SubMonitor sub = SubMonitor.convert(monitor, NLS.bind(ProvUIMessages.QueryableMetadataRepositoryManager_RepositoryQueryProgress, uri.toString()), 200);
+	protected Collector query(URI uris[], Query query, Collector collector, IProgressMonitor monitor) {
 		if (query instanceof RepositoryLocationQuery) {
-			query.perform(Arrays.asList(new URI[] {uri}).iterator(), collector);
-			sub.worked(2);
+			query.perform(Arrays.asList(uris).iterator(), collector);
+			monitor.done();
 		} else {
-			IRepository repo = null;
-			try {
-				repo = loadRepository(getRepositoryManager(), uri, sub.newChild(100));
-			} catch (ProvisionException e) {
-				if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-					handleNotFound(e, uri);
-				else
-					ProvUI.handleException(e, NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, uri), StatusManager.LOG);
-			} catch (OperationCanceledException e) {
-				// user has canceled
-				repo = null;
+			SubMonitor sub = SubMonitor.convert(monitor, (uris.length + 1) * 100);
+			ArrayList loadedRepos = new ArrayList(uris.length);
+			for (int i = 0; i < uris.length; i++) {
+				IRepository repo = null;
+				try {
+					repo = loadRepository(getRepositoryManager(), uris[i], sub.newChild(100));
+				} catch (ProvisionException e) {
+					if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
+						handleNotFound(e, uris[i]);
+					else
+						ProvUI.handleException(e, NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, uris[i]), StatusManager.LOG);
+				} catch (OperationCanceledException e) {
+					// user has canceled
+					repo = null;
+				}
+				if (repo != null)
+					loadedRepos.add(repo);
+			}
+			if (loadedRepos.size() > 0) {
+				IQueryable[] queryables = (IQueryable[]) loadedRepos.toArray(new IQueryable[loadedRepos.size()]);
+				collector = new CompoundQueryable(queryables).query(query, collector, sub.newChild(100));
 			}
-			if (repo instanceof IMetadataRepository)
-				((IMetadataRepository) repo).query(query, collector, sub.newChild(100));
 		}
-		monitor.done();
 		return collector;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
index 2ebf9a7..0545a5a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableRepositoryManager.java
@@ -76,15 +76,9 @@ public abstract class QueryableRepositoryManager implements IQueryable {
 			ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoRepositoryManager), StatusManager.SHOW | StatusManager.LOG);
 			return result;
 		}
-		Collection repoLocations = getRepoLocations(manager);
-		Iterator iterator = repoLocations.iterator();
-		SubMonitor sub = SubMonitor.convert(monitor, repoLocations.size() * 100);
-		while (iterator.hasNext()) {
-			if (sub.isCanceled())
-				return result;
-			URI location = (URI) iterator.next();
-			query(location, query, result, sub.newChild(100));
-		}
+		if (monitor == null)
+			monitor = new NullProgressMonitor();
+		query(getRepoLocations(manager), query, result, monitor);
 		reportAccumulatedStatus();
 		return result;
 	}
@@ -102,37 +96,35 @@ public abstract class QueryableRepositoryManager implements IQueryable {
 			ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoRepositoryManager), StatusManager.SHOW | StatusManager.LOG);
 			return;
 		}
-		Collection repoLocations = getRepoLocations(manager);
-		Iterator iter = repoLocations.iterator();
-		SubMonitor sub = SubMonitor.convert(monitor, repoLocations.size() * 100);
+		URI[] repoLocations = getRepoLocations(manager);
+		SubMonitor sub = SubMonitor.convert(monitor, repoLocations.length * 100);
 		if (sub.isCanceled())
 			return;
-		while (iter.hasNext()) {
+		for (int i = 0; i < repoLocations.length; i++) {
 			if (sub.isCanceled())
 				return;
-			URI location = (URI) iter.next();
 			try {
-				loadRepository(manager, location, sub.newChild(100));
+				loadRepository(manager, repoLocations[i], sub.newChild(100));
 			} catch (ProvisionException e) {
 				if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
-					handleNotFound(e, location);
+					handleNotFound(e, repoLocations[i]);
 				else
-					ProvUI.handleException(e, NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, location), StatusManager.LOG);
+					ProvUI.handleException(e, NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, repoLocations[i]), StatusManager.LOG);
 			}
 		}
 	}
 
 	/**
-	 * Returns a Collection<URI> of repository locations.
+	 * Returns an array of repository locations.
 	 */
-	private Collection getRepoLocations(IRepositoryManager manager) {
+	private URI[] getRepoLocations(IRepositoryManager manager) {
 		Set locations = new HashSet();
 		int flags = queryContext.getMetadataRepositoryFlags();
 		locations.addAll(Arrays.asList(manager.getKnownRepositories(flags)));
 		if (includeDisabledRepos) {
 			locations.addAll(Arrays.asList(manager.getKnownRepositories(IRepositoryManager.REPOSITORIES_DISABLED | flags)));
 		}
-		return locations;
+		return (URI[]) locations.toArray(new URI[locations.size()]);
 	}
 
 	protected void handleNotFound(ProvisionException e, URI missingRepo) {
@@ -187,14 +179,11 @@ public abstract class QueryableRepositoryManager implements IQueryable {
 		IRepositoryManager mgr = getRepositoryManager();
 		if (mgr == null)
 			return false;
-		Iterator repoURIs = getRepoLocations(mgr).iterator();
-		while (repoURIs.hasNext()) {
-			Object location = repoURIs.next();
-			if (location instanceof URI) {
-				IRepository repo = getRepository(mgr, (URI) location);
-				if (repo == null)
-					return false;
-			}
+		URI[] repoURIs = getRepoLocations(mgr);
+		for (int i = 0; i < repoURIs.length; i++) {
+			IRepository repo = getRepository(mgr, repoURIs[i]);
+			if (repo == null)
+				return false;
 		}
 		return true;
 	}
@@ -241,7 +230,7 @@ public abstract class QueryableRepositoryManager implements IQueryable {
 	 */
 	protected abstract IRepository doLoadRepository(IRepositoryManager manager, URI location, IProgressMonitor monitor) throws ProvisionException;
 
-	protected abstract Collector query(URI uri, Query query, Collector collector, IProgressMonitor monitor);
+	protected abstract Collector query(URI[] uris, Query query, Collector collector, IProgressMonitor monitor);
 
 	public void setQueryContext(IUViewQueryContext queryContext) {
 		this.queryContext = queryContext;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
index 4af08d6..a7c9cf8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
@@ -67,7 +67,7 @@ public class UpdateAction extends ExistingIUInProfileAction {
 		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.ProfileChangeRequestBuildingRequest, ius.length);
 		for (int i = 0; i < ius.length; i++) {
 			ElementQueryDescriptor descriptor = getQueryProvider().getQueryDescriptor(new Updates(targetProfileId, new IInstallableUnit[] {ius[i]}));
-			Iterator iter = descriptor.queryable.query(descriptor.query, descriptor.collector, sub).iterator();
+			Iterator iter = descriptor.performQuery(sub).iterator();
 			if (iter.hasNext())
 				toBeUpdated.add(ius[i]);
 			ArrayList currentReplacements = new ArrayList();

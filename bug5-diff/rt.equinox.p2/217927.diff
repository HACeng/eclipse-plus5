commit e36f74ad4fb082c3b67e404fd3b714787f49038d
Author: Susan Franklin <sfranklin>
Date:   Mon Feb 11 23:28:26 2008 +0000

    Bug 217927 - [prov] [ui] Update provisioning plan should be computed before showing popup

37	8	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
6	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
8	30	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
57	40	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
11	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 9b9a897..e6afa3c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -20,22 +20,23 @@ import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
-import org.eclipse.equinox.internal.provisional.p2.director.*;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProfileEvent;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.UpdateWizard;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.UpdateAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
+import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.action.IStatusLineManager;
-import org.eclipse.jface.window.Window;
-import org.eclipse.jface.wizard.WizardDialog;
+import org.eclipse.jface.viewers.*;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.*;
@@ -248,10 +249,38 @@ public class AutomaticUpdater implements IUpdateListener {
 	}
 
 	public void launchUpdate() {
-		UpdateWizard wizard = new UpdateWizard(profileId, toUpdate, ProvSDKUIActivator.getDefault().getLicenseManager(), ProvSDKUIActivator.getDefault().getQueryProvider());
-		WizardDialog dialog = new WizardDialog(getWorkbenchWindowShell(), wizard);
-		if (dialog.open() == Window.OK)
-			clearUpdatesAvailable();
+		ISelectionProvider selectionProvider = new ISelectionProvider() {
+
+			/* (non-Javadoc)
+			 * @see org.eclipse.jface.viewers.ISelectionProvider#addSelectionChangedListener(org.eclipse.jface.viewers.ISelectionChangedListener)
+			 */
+			public void addSelectionChangedListener(ISelectionChangedListener listener) {
+				// Ignore because the selection won't change 
+			}
+
+			/* (non-Javadoc)
+			 * @see org.eclipse.jface.viewers.ISelectionProvider#getSelection()
+			 */
+			public ISelection getSelection() {
+				return new StructuredSelection(toUpdate);
+			}
+
+			/* (non-Javadoc)
+			 * @see org.eclipse.jface.viewers.ISelectionProvider#removeSelectionChangedListener(org.eclipse.jface.viewers.ISelectionChangedListener)
+			 */
+			public void removeSelectionChangedListener(ISelectionChangedListener listener) {
+				// ignore because the selection is static
+			}
+
+			/* (non-Javadoc)
+			 * @see org.eclipse.jface.viewers.ISelectionProvider#setSelection(org.eclipse.jface.viewers.ISelection)
+			 */
+			public void setSelection(ISelection sel) {
+				throw new UnsupportedOperationException("This ISelectionProvider is static, and cannot be modified."); //$NON-NLS-1$
+			}
+		};
+		IAction action = new UpdateAction(selectionProvider, profileId, null, ProvSDKUIActivator.getDefault().getLicenseManager(), ProvSDKUIActivator.getDefault().getQueryProvider(), getWorkbenchWindowShell());
+		action.run();
 	}
 
 	private void registerProfileChangeListener() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index 96e41e4..b904235 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -29,7 +29,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunne
 import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.dialogs.IMessageProvider;
 import org.eclipse.jface.operation.IRunnableWithProgress;
@@ -104,6 +104,11 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 				updateDetailsArea(detailsArea, getSelectedIU());
 			}
 		});
+
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
+		listViewer.setComparator(new IUComparator(IUComparator.IU_ID));
+		listViewer.setComparer(new ProvElementComparer());
+
 		contentProvider = new StaticContentProvider(list.toArray());
 		listViewer.setContentProvider(contentProvider);
 		listViewer.setInput(new Object());
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 4f01f19..4844b9a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -21,46 +21,24 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IUpdateDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
-import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
-import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
 import org.eclipse.swt.widgets.Text;
 
 public class UpdateWizardPage extends UpdateOrInstallWizardPage {
-
-	IQueryProvider queryProvider;
+	AvailableUpdateElement[] updateElements;
+	IInstallableUnit[] suggestedReplacements;
 	Object[] initialSelections = new Object[0];
 
-	public UpdateWizardPage(IInstallableUnit[] ius, String profileId, IQueryProvider queryProvider, UpdateOrInstallWizard wizard) {
-		super("UpdateWizardPage", ius, profileId, null, wizard); //$NON-NLS-1$
-		this.queryProvider = queryProvider;
+	public UpdateWizardPage(IInstallableUnit[] iusToReplace, AvailableUpdateElement[] elements, Object[] initialSelections, String profileId, ProvisioningPlan plan, UpdateOrInstallWizard wizard) {
+		super("UpdateWizardPage", iusToReplace, profileId, plan, wizard); //$NON-NLS-1$
+		this.updateElements = elements;
+		this.initialSelections = initialSelections;
 		setTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
 		setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
 	}
 
 	protected void makeElements(IInstallableUnit[] ius, List elements) {
-		HashMap uniqueIds = new HashMap();
-		for (int i = 0; i < ius.length; i++) {
-			UpdateEvent event = new UpdateEvent(getProfileId(), ius);
-			ElementQueryDescriptor descriptor = queryProvider.getQueryDescriptor(event, IQueryProvider.AVAILABLE_UPDATES);
-			Iterator iter = descriptor.queryable.query(descriptor.query, descriptor.collector, null).iterator();
-			ArrayList queryIUs = new ArrayList();
-			while (iter.hasNext()) {
-				IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(iter.next(), IInstallableUnit.class);
-				if (iu != null)
-					queryIUs.add(iu);
-			}
-			IInstallableUnit[] replacements = (IInstallableUnit[]) queryIUs.toArray(new IInstallableUnit[queryIUs.size()]);
-			for (int j = 0; j < replacements.length; j++) {
-				AvailableUpdateElement element = new AvailableUpdateElement(replacements[j], ius[i], getProfileId());
-				elements.add(element);
-				AvailableUpdateElement latestElement = (AvailableUpdateElement) uniqueIds.get(replacements[j].getId());
-				if (latestElement == null || replacements[j].getVersion().compareTo(latestElement.getIU().getVersion()) > 0)
-					uniqueIds.put(replacements[j].getId(), element);
-
-			}
-		}
-		initialSelections = uniqueIds.values().toArray();
+		for (int i = 0; i < updateElements.length; i++)
+			elements.add(updateElements[i]);
 	}
 
 	private IInstallableUnit[] getIUsToReplace(Object[] replacementElements) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
index c04e96b..7849b7c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
@@ -11,19 +11,24 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
-import java.util.ArrayList;
+import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
+import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.UpdateWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.jface.wizard.WizardDialog;
@@ -32,7 +37,8 @@ import org.eclipse.swt.widgets.Shell;
 public class UpdateAction extends ProfileModificationAction {
 
 	IQueryProvider queryProvider;
-	IStatus status = null; // used to validate the ability of updates without getting a plan
+	ArrayList allReplacements; // cache all the replacements found to seed the wizard
+	HashMap latestReplacements;
 
 	public UpdateAction(ISelectionProvider selectionProvider, String profileId, IProfileChooser chooser, LicenseManager licenseManager, IQueryProvider queryProvider, Shell shell) {
 		super(ProvUI.UPDATE_COMMAND_LABEL, selectionProvider, profileId, chooser, licenseManager, shell);
@@ -41,51 +47,62 @@ public class UpdateAction extends ProfileModificationAction {
 	}
 
 	protected void performOperation(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
-		// Collect the replacements for each IU individually so that 
-		// the user can decide what to update
-		try {
-			ArrayList iusWithUpdates = new ArrayList();
-			for (int i = 0; i < ius.length; i++) {
-				IInstallableUnit[] replacements = ProvisioningUtil.updatesFor(ius[i], null);
-				if (replacements.length > 0)
-					iusWithUpdates.add(ius[i]);
-			}
-			if (iusWithUpdates.size() > 0) {
+		// Caches should have been created while formulating the plan
+		Assert.isNotNull(latestReplacements);
+		Assert.isNotNull(allReplacements);
+		Assert.isNotNull(plan);
 
-				UpdateWizard wizard = new UpdateWizard(targetProfileId, (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]), getLicenseManager(), queryProvider);
-				WizardDialog dialog = new WizardDialog(getShell(), wizard);
-				dialog.open();
-			}
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-		}
+		UpdateWizard wizard = new UpdateWizard(targetProfileId, ius, (AvailableUpdateElement[]) allReplacements.toArray(new AvailableUpdateElement[allReplacements.size()]), latestReplacements.values().toArray(), plan, getLicenseManager());
+		WizardDialog dialog = new WizardDialog(getShell(), wizard);
+		dialog.open();
 	}
 
 	protected ProvisioningPlan getProvisioningPlan(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
-		try {
-			IInstallableUnit[] updates = ProvisioningUtil.updatesFor(ius, monitor);
-			if (updates.length <= 0) {
-				status = new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, ProvUIMessages.UpdateOperation_NothingToUpdate);
+		// Here we create a provisioning plan by finding the latest version available for any replacement.
+		// TODO to be smarter, we could check older versions if a new version made a plan invalid.
+		ArrayList toBeUpdated = new ArrayList();
+		latestReplacements = new HashMap();
+		allReplacements = new ArrayList();
+		for (int i = 0; i < ius.length; i++) {
+			UpdateEvent event = new UpdateEvent(targetProfileId, new IInstallableUnit[] {ius[i]});
+			ElementQueryDescriptor descriptor = queryProvider.getQueryDescriptor(event, IQueryProvider.AVAILABLE_UPDATES);
+			Iterator iter = descriptor.queryable.query(descriptor.query, descriptor.collector, null).iterator();
+			if (iter.hasNext())
+				toBeUpdated.add(ius[i]);
+			ArrayList currentReplacements = new ArrayList();
+			while (iter.hasNext()) {
+				IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(iter.next(), IInstallableUnit.class);
+				if (iu != null) {
+					AvailableUpdateElement element = new AvailableUpdateElement(iu, ius[i], targetProfileId);
+					currentReplacements.add(element);
+					allReplacements.add(element);
+				}
+			}
+			for (int j = 0; j < currentReplacements.size(); j++) {
+				AvailableUpdateElement replacementElement = (AvailableUpdateElement) currentReplacements.get(j);
+				AvailableUpdateElement latestElement = (AvailableUpdateElement) latestReplacements.get(replacementElement.getIU().getId());
+				IInstallableUnit latestIU = latestElement == null ? null : latestElement.getIU();
+				if (latestIU == null || replacementElement.getIU().getVersion().compareTo(latestIU.getVersion()) > 0)
+					latestReplacements.put(replacementElement.getIU().getId(), replacementElement);
 			}
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, ProvUIMessages.UpdateAction_ExceptionDuringUpdateCheck);
 		}
-		return null;
-	}
-
-	/*
-	 * Overridden to always validate because we don't construct
-	 * a plan until the dialog is launched.  The dialog uses preferences
-	 * to determine which updates to show and which are selected by default.
-	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction#validatePlan(org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan)
-	 */
-	protected boolean validatePlan(ProvisioningPlan plan) {
-		if (status != null) {
-			ProvUI.reportStatus(status);
-			return false;
+		if (toBeUpdated.size() <= 0) {
+			return new ProvisioningPlan(new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, ProvUIMessages.UpdateOperation_NothingToUpdate));
+		}
+		try {
+			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
+			Iterator iter = toBeUpdated.iterator();
+			while (iter.hasNext())
+				request.removeInstallableUnits(new IInstallableUnit[] {(IInstallableUnit) iter.next()});
+			iter = latestReplacements.values().iterator();
+			while (iter.hasNext())
+				request.addInstallableUnits(new IInstallableUnit[] {((AvailableUpdateElement) iter.next()).getIU()});
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
+			return plan;
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
+			return null;
 		}
-		return true;
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
index d2c7c42..ac5b8fd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
@@ -12,26 +12,31 @@ package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
+import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.LicenseManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
-import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
 
 /**
  * @since 3.4
  */
 public class UpdateWizard extends UpdateOrInstallWizard {
 
-	IQueryProvider queryProvider;
+	ProvisioningPlan plan;
+	AvailableUpdateElement[] elements;
+	Object[] initialSelections;
 
-	public UpdateWizard(String profileId, IInstallableUnit[] ius, LicenseManager licenseManager, IQueryProvider queryProvider) {
-		super(profileId, ius, licenseManager);
-		this.queryProvider = queryProvider;
+	public UpdateWizard(String profileId, IInstallableUnit[] iusToReplace, AvailableUpdateElement[] elements, Object[] initialSelections, ProvisioningPlan plan, LicenseManager licenseManager) {
+		super(profileId, iusToReplace, licenseManager);
 		setWindowTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_UPDATE));
+		this.plan = plan;
+		this.elements = elements;
+		this.initialSelections = initialSelections;
 	}
 
 	protected UpdateOrInstallWizardPage createMainPage(String profileId, IInstallableUnit[] ius) {
-		return new UpdateWizardPage(ius, profileId, queryProvider, this);
+		return new UpdateWizardPage(ius, elements, initialSelections, profileId, plan, this);
 	}
 }
commit d7cb48a52c4b0ee223850b85777cfe6deb88b688
Author: Susan Franklin <sfranklin>
Date:   Thu Feb 21 21:39:00 2008 +0000

    Bug 217927 - [prov] [ui] Update provisioning plan should be computed before showing popup

5	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 07b6d0a..67e5cad 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -289,10 +289,14 @@ public class AutomaticUpdater implements IUpdateListener {
 				String openPlan = prefs.getString(PreferenceConstants.PREF_OPEN_WIZARD_ON_NONOK_PLAN);
 				if (plan != null) {
 					if (plan.getStatus().isOK() || !(MessageDialogWithToggle.NEVER.equals(openPlan))) {
+						// Show the affordance if user prefers always opening a plan or being prompted
+						// In this context, the affordance is the prompt.
 						if (updateAffordance == null)
 							createUpdateAffordance();
 						setUpdateAffordanceState(plan.getStatus().isOK());
-						if (popup == null)
+						// If the user always wants to open invalid plans, then go ahead and show
+						// the popup.
+						if (MessageDialogWithToggle.ALWAYS.equals(openPlan) && popup == null)
 							createUpdatePopup();
 					} else {
 						// The pref is NEVER, the user doesn't want to know about it
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
index 4be5616..fe39d69 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
@@ -187,6 +187,7 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		createImageDescriptor(ProvUIImages.IMG_CATEGORY);
 		createImageDescriptor(ProvUIImages.IMG_PROFILE);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_UPDATE);
+		createImageDescriptor(ProvUIImages.IMG_TOOL_UPDATE_PROBLEMS);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_CLOSE);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_CLOSE_HOT);
 		createImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL);

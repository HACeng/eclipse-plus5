commit 59cb4f60c570e2551f968f9361d22c0b199ed0cb
Author: Simon Kaegi <skaegi>
Date:   Wed Jan 30 21:17:43 2008 +0000

    Bug 212336 [prov] Tighten up API for Profile and ProfileRegistry

1	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
1	1	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
3	3	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
52	28	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
4	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
22	8	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
4	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
48	41	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
6	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
165	110	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
4	4	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
3	3	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
7	7	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IUProfilePropertyQuery.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
index cd01183..da85b90 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
@@ -31,6 +31,7 @@ public interface XMLConstants {
 
 	// Constants for the names of common general attributes
 	public static final String ID_ATTRIBUTE = "id"; //$NON-NLS-1$
+	public static final String PARENT_ID_ATTRIBUTE = "parentId"; //$NON-NLS-1$
 	public static final String TYPE_ATTRIBUTE = "type"; //$NON-NLS-1$
 	public static final String NAME_ATTRIBUTE = "name"; //$NON-NLS-1$
 	public static final String VERSION_ATTRIBUTE = "version"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
index dd691ca..36b204a 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
@@ -149,7 +149,7 @@ public class Application implements IApplication {
 		if (env != null)
 			props.setProperty(Profile.PROP_ENVIRONMENTS, env);
 		Profile profile = ProvisioningHelper.addProfile(profileId, props);
-		String currentFlavor = profile.getValue(Profile.PROP_FLAVOR);
+		String currentFlavor = profile.getProperty(Profile.PROP_FLAVOR);
 		if (currentFlavor != null && !currentFlavor.endsWith(flavor))
 			throw new RuntimeException(Messages.Inconsistent_flavor);
 
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 2a53c24..0518123 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -63,7 +63,7 @@ public class SimpleDirector implements IDirector {
 	}
 
 	public IStatus provision(ProfileChangeRequest request, ProvisioningContext context, IProgressMonitor monitor) {
-		String taskName = NLS.bind(Messages.Director_Task_Installing, request.getProfile().getValue(Profile.PROP_INSTALL_FOLDER));
+		String taskName = NLS.bind(Messages.Director_Task_Installing, request.getProfile().getProperty(Profile.PROP_INSTALL_FOLDER));
 		SubMonitor sub = SubMonitor.convert(monitor, taskName, PlanWork + EngineWork);
 		try {
 			IInstallableUnit[] installRoots = request.getAddedInstallableUnits();
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 6088381..f273403 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -79,7 +79,7 @@ public class SimplePlanner implements IPlanner {
 			Iterator iuPropIter = iuPropertyChanges.keySet().iterator();
 			while (iuPropIter.hasNext()) {
 				String key = (String) iuPropIter.next();
-				Object oldValue = profile.getInstallableUnitProfileProperty(iu, key);
+				Object oldValue = profile.getInstallableUnitProperty(iu, key);
 				operands.add(new InstallableUnitPropertyOperand(iu, key, oldValue, iuPropertyChanges.get(key)));
 			}
 		}
@@ -90,7 +90,7 @@ public class SimplePlanner implements IPlanner {
 		while (iter.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) iter.next();
 			toRemove = (String[]) allIUPropertyDeletions.get(iu);
-			Map existingIUProperties = profile.getInstallableUnitProfileProperties(iu);
+			Map existingIUProperties = profile.getInstallableUnitProperties(iu);
 			for (int i = 0; i < toRemove.length; i++) {
 				if (existingIUProperties.containsKey(toRemove[i]))
 					operands.add(new InstallableUnitPropertyOperand(iu, toRemove[i], existingIUProperties.get(toRemove[i]), null));
@@ -224,7 +224,7 @@ public class SimplePlanner implements IPlanner {
 		}
 		IInstallableUnit[] ius = getInstallableUnits(currentProfile);
 		for (int i = 0; i < ius.length; i++) {
-			for (Iterator iter = currentProfile.getInstallableUnitProfileProperties(ius[i]).keySet().iterator(); iter.hasNext();) {
+			for (Iterator iter = currentProfile.getInstallableUnitProperties(ius[i]).keySet().iterator(); iter.hasNext();) {
 				String key = (String) iter.next();
 				request.removeInstallableUnitProfileProperty(ius[i], key);
 			}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 7c23c34..2ffc4f9 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -106,7 +106,7 @@ public class FormerState {
 		Iterator allIUs = toConvert.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
 		while (allIUs.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) allIUs.next();
-			properties = toConvert.getInstallableUnitProfileProperties(iu);
+			properties = toConvert.getInstallableUnitProperties(iu);
 			iter = properties.keySet().iterator();
 			while (iter.hasNext()) {
 				String key = (String) iter.next();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
index 5e63fe4..d2c4f28 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
@@ -10,8 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.engine;
 
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.osgi.framework.BundleContext;
@@ -30,20 +29,16 @@ public abstract class ProfileParser extends XMLParser implements ProfileXMLConst
 
 		private final String[] required = new String[] {ID_ATTRIBUTE};
 
-		List profyles = null;
-		Profile currentProfile = null;
-
+		private final Map profileHandlers;
 		private String profileId = null;
-
+		private String parentId;
 		private PropertiesHandler propertiesHandler = null;
-		private ProfilesHandler profilesHandler = null;
 
-		public ProfileHandler(AbstractHandler parentHandler, Attributes attributes, Profile parent, List profiles) {
+		public ProfileHandler(AbstractHandler parentHandler, Attributes attributes, Map profileHandlers) {
 			super(parentHandler, PROFILE_ELEMENT);
 			profileId = parseRequiredAttributes(attributes, required)[0];
-			this.profyles = profiles;
-			currentProfile = new Profile((profileId != null ? profileId : "##invalid##"), parent); //$NON-NLS-1$
-			profiles.add(currentProfile);
+			parentId = parseOptionalAttribute(attributes, PARENT_ID_ATTRIBUTE);
+			this.profileHandlers = profileHandlers;
 		}
 
 		public void startElement(String name, Attributes attributes) {
@@ -53,45 +48,74 @@ public abstract class ProfileParser extends XMLParser implements ProfileXMLConst
 				} else {
 					duplicateElement(this, name, attributes);
 				}
-			} else if (name.equals(PROFILES_ELEMENT)) {
-				if (profilesHandler == null) {
-					profilesHandler = new ProfilesHandler(this, attributes, currentProfile);
-				} else {
-					duplicateElement(this, name, attributes);
-				}
 			} else {
 				invalidElement(name, attributes);
 			}
 		}
 
 		protected void finished() {
-			if (isValidXML() && currentProfile != null) {
-				if (propertiesHandler != null) {
-					currentProfile.internalAddProperties(propertiesHandler.getProperties());
-				}
+			if (isValidXML()) {
+				profileHandlers.put(profileId, this);
 			}
 		}
+
+		public String getProfileId() {
+			return profileId;
+		}
+
+		public String getParentId() {
+			return parentId;
+		}
+
+		public Map getProperties() {
+			if (propertiesHandler == null)
+				return null;
+			return propertiesHandler.getProperties();
+		}
 	}
 
 	protected class ProfilesHandler extends AbstractHandler {
 
-		private Profile parentProfile = null;
-		private List profyles = null;
+		private Map profileHandlers = null;
+		private Map profiles;
 
-		public ProfilesHandler(AbstractHandler parentHandler, Attributes attributes, Profile parent) {
+		public ProfilesHandler(AbstractHandler parentHandler, Attributes attributes) {
 			super(parentHandler, PROFILES_ELEMENT);
-			this.parentProfile = parent;
 			String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
-			profyles = (size != null ? new ArrayList(new Integer(size).intValue()) : new ArrayList(4));
+			profileHandlers = (size != null ? new HashMap(new Integer(size).intValue()) : new HashMap(4));
 		}
 
 		public Profile[] getProfiles() {
-			return (Profile[]) profyles.toArray(new Profile[profyles.size()]);
+			if (profileHandlers.isEmpty())
+				return new Profile[0];
+
+			profiles = new HashMap();
+			for (Iterator it = profileHandlers.keySet().iterator(); it.hasNext();) {
+				String profileId = (String) it.next();
+				addProfile(profileId);
+			}
+
+			return (Profile[]) profiles.values().toArray(new Profile[profiles.size()]);
+		}
+
+		private void addProfile(String profileId) {
+			if (profiles.containsKey(profileId))
+				return;
+
+			ProfileHandler profileHandler = (ProfileHandler) profileHandlers.get(profileId);
+			Profile parentProfile = null;
+			String parentId = profileHandler.parentId;
+			if (parentId != null) {
+				addProfile(parentId);
+				parentProfile = (Profile) profiles.get(parentId);
+			}
+			Profile profile = new Profile(profileId, parentProfile, profileHandler.getProperties());
+			profiles.put(profileId, profile);
 		}
 
 		public void startElement(String name, Attributes attributes) {
 			if (name.equals(PROFILE_ELEMENT)) {
-				new ProfileHandler(this, attributes, parentProfile, profyles);
+				new ProfileHandler(this, attributes, profileHandlers);
 			} else {
 				invalidElement(name, attributes);
 			}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
index 7f93cd1..414d42a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
@@ -24,10 +24,10 @@ public class ProfileWriter extends XMLWriter implements ProfileXMLConstants {
 	public void writeProfile(Profile profile) {
 		start(PROFILE_ELEMENT);
 		attribute(ID_ATTRIBUTE, profile.getProfileId());
-		writeProperties(profile.getProperties());
-		if (profile.hasSubProfiles()) {
-			writeProfiles(profile.getSubProfiles());
-		}
+		Profile parentProfile = profile.getParentProfile();
+		if (parentProfile != null)
+			attribute(PARENT_ID_ATTRIBUTE, parentProfile.getProfileId());
+		writeProperties(profile.getLocalProperties());
 		end(PROFILE_ELEMENT);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 476953d..b47aa27 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -63,16 +63,16 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		if (selfProfile == null)
 			return;
 		//only update if self is a roaming profile
-		if (!Boolean.valueOf(selfProfile.getValue(Profile.PROP_ROAMING)).booleanValue())
+		if (!Boolean.valueOf(selfProfile.getProperty(Profile.PROP_ROAMING)).booleanValue())
 			return;
 		Location installLocation = (Location) ServiceHelper.getService(EngineActivator.getContext(), Location.class.getName(), Location.INSTALL_FILTER);
 		File location = new File(installLocation.getURL().getPath());
 		boolean changed = false;
-		if (!location.equals(new File(selfProfile.getValue(Profile.PROP_INSTALL_FOLDER)))) {
+		if (!location.equals(new File(selfProfile.getProperty(Profile.PROP_INSTALL_FOLDER)))) {
 			selfProfile.internalSetValue(Profile.PROP_INSTALL_FOLDER, location.getAbsolutePath());
 			changed = true;
 		}
-		if (!location.equals(new File(selfProfile.getValue(Profile.PROP_CACHE)))) {
+		if (!location.equals(new File(selfProfile.getProperty(Profile.PROP_CACHE)))) {
 			selfProfile.internalSetValue(Profile.PROP_CACHE, location.getAbsolutePath());
 			changed = true;
 		}
@@ -154,7 +154,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		while (it.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) it.next();
 			profileInstallRegistry.addInstallableUnits(iu);
-			OrderedProperties iuProperties = toUpdate.getInstallableUnitProfileProperties(iu);
+			OrderedProperties iuProperties = toUpdate.getInstallableUnitProperties(iu);
 			for (Iterator propIt = iuProperties.entrySet().iterator(); propIt.hasNext();) {
 				Entry propertyEntry = (Entry) propIt.next();
 				String key = (String) propertyEntry.getKey();
@@ -162,10 +162,20 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 				profileInstallRegistry.setInstallableUnitProfileProperty(iu, key, value);
 			}
 		}
+		installRegistry.addProfileInstallRegistry(profileInstallRegistry);
+
+		Profile current = (Profile) profileMap.get(toUpdate.getProfileId());
+		if (current == null) {
+			Profile parent = toUpdate.getParentProfile();
+			if (parent != null)
+				parent = (Profile) profileMap.get(parent.getProfileId());
+			profileMap.put(toUpdate.getProfileId(), new Profile(toUpdate.getProfileId(), parent, toUpdate.getLocalProperties()));
+		} else {
+			current.internalGetLocalProperties().clear();
+			current.internalAddProperties(toUpdate.getLocalProperties());
+		}
 
-		profileMap.put(toUpdate.getProfileId(), copyProfile(toUpdate));
 		// TODO: persists should be grouped some way to ensure they are consistent
-		installRegistry.addProfileInstallRegistry(profileInstallRegistry);
 		persist();
 	}
 
@@ -191,7 +201,11 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		if (parent != null)
 			parent = copyProfile(parent);
 
-		Profile copy = new Profile(profile.getProfileId(), parent, profile.getProperties());
+		Profile copy = new Profile(profile.getProfileId(), parent, profile.getLocalProperties());
+		String[] subProfileIds = profile.getSubProfileIds();
+		for (int i = 0; i < subProfileIds.length; i++) {
+			copy.addSubProfile(subProfileIds[i]);
+		}
 		return copy;
 	}
 
@@ -416,7 +430,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 					}
 				} else if (PROFILES_ELEMENT.equals(name)) {
 					if (profilesHandler == null) {
-						profilesHandler = new ProfilesHandler(this, attributes, null /*no parent*/);
+						profilesHandler = new ProfilesHandler(this, attributes);
 					} else {
 						duplicateElement(this, name, attributes);
 					}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
index 9c882ae..62db99b 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
@@ -115,7 +115,7 @@ public class Engine {
 
 		if (propertyOperand instanceof InstallableUnitPropertyOperand) {
 			InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
-			profile.internalSetInstallableUnitProfileProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), (String) iuPropertyOperand.second());
+			profile.internalSetInstallableUnitProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), (String) iuPropertyOperand.second());
 		} else {
 			profile.internalSetValue(propertyOperand.getKey(), (String) propertyOperand.second());
 		}
@@ -125,7 +125,7 @@ public class Engine {
 	private void removeProfileProperty(Profile profile, PropertyOperand propertyOperand) {
 		if (propertyOperand instanceof InstallableUnitPropertyOperand) {
 			InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
-			profile.internalSetInstallableUnitProfileProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), null);
+			profile.internalSetInstallableUnitProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), null);
 		} else {
 			profile.internalSetValue(propertyOperand.getKey(), null);
 		}
@@ -138,7 +138,7 @@ public class Engine {
 	private void snapshotIUProperties(Profile profile, InstallableUnitOperand[] operands) {
 		for (int i = 0; i < operands.length; i++) {
 			if (operands[i].first() != null && operands[i].second() != null) {
-				snapshot.put(operands[i].first(), profile.getInstallableUnitProfileProperties(operands[i].first()));
+				snapshot.put(operands[i].first(), profile.getInstallableUnitProperties(operands[i].first()));
 			}
 		}
 	}
@@ -152,7 +152,7 @@ public class Engine {
 				Enumeration enumProps = prop.keys();
 				while (enumProps.hasMoreElements()) {
 					String key = (String) enumProps.nextElement();
-					profile.internalSetInstallableUnitProfileProperty(operands[i].second(), key, (String) prop.get(key));
+					profile.internalSetInstallableUnitProperty(operands[i].second(), key, (String) prop.get(key));
 					prop.remove(key);
 				}
 			}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
index 80a7966..5ea884c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
@@ -16,6 +16,7 @@ import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.p2.installregistry.IInstallRegistry;
 import org.eclipse.equinox.internal.p2.installregistry.IProfileInstallRegistry;
+import org.eclipse.equinox.internal.p2.metadata.repository.Activator;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.osgi.util.NLS;
@@ -83,9 +84,9 @@ public class Profile implements IQueryable {
 	/**
 	 * 	A collection of child profiles.
 	 */
-	private Map subProfiles = null; // Map profile id -> child profiles
+	private List subProfileIds = null; // child profile ids
 
-	private static Profile[] noSubProfiles = new Profile[0];
+	private static String[] noSubProfiles = new String[0];
 	/**
 	 * This storage is to be used by the touchpoints to store data.
 	 */
@@ -112,7 +113,7 @@ public class Profile implements IQueryable {
 		this.profileId = profileId;
 		this.parentProfile = parent;
 		if (parent != null) {
-			parent.addSubprofile(this);
+			parent.addSubProfile(profileId);
 		}
 		if (properties != null)
 			storage.putAll(properties);
@@ -148,8 +149,10 @@ public class Profile implements IQueryable {
 	private static final String UPDATE_COMPATIBILITY = "eclipse.p2.update.compatibility"; //$NON-NLS-1$
 
 	private void checkUpdateCompatibility() {
-		if (getValue(PROP_INSTALL_FEATURES) == null) {
-			String updateCompatible = System.getProperty(UPDATE_COMPATIBILITY, "false"); //$NON-NLS-1$
+		if (getProperty(PROP_INSTALL_FEATURES) == null) {
+			String updateCompatible = Activator.getContext().getProperty(UPDATE_COMPATIBILITY);
+			if (updateCompatible == null)
+				updateCompatible = Boolean.FALSE.toString();
 			internalSetValue(PROP_INSTALL_FEATURES, updateCompatible);
 		}
 	}
@@ -166,29 +169,35 @@ public class Profile implements IQueryable {
 	 * 	A profile is a root profile if it is not a sub-profile
 	 * 	of another profile.
 	 */
-	public boolean isARootProfile() {
-		return (parentProfile == null ? true : false);
+	public boolean isRootProfile() {
+		return parentProfile == null;
 	}
 
-	protected void addSubprofile(Profile subprofile) throws IllegalArgumentException {
-		if (subProfiles == null) {
-			subProfiles = new LinkedHashMap(2);
-		}
-		if (subProfiles.containsKey(subprofile.getProfileId())) {
-			throw new IllegalArgumentException(NLS.bind(Messages.Profile_Duplicate_Child_Profile_Id, new String[] {subprofile.getProfileId(), this.getProfileId()}));
-		}
-		subProfiles.put(subprofile.getProfileId(), subprofile);
+	public void addSubProfile(String subProfileId) throws IllegalArgumentException {
+		if (subProfileIds == null)
+			subProfileIds = new ArrayList();
+
+		if (!subProfileIds.contains(subProfileId))
+			subProfileIds.add(subProfileId);
+
+		//		if (!subProfileIds.add(subProfileId))
+		//			throw new IllegalArgumentException(NLS.bind(Messages.Profile_Duplicate_Child_Profile_Id, new String[] {subProfileId, this.getProfileId()}));
+	}
+
+	public void removeSubProfile(String subProfileId) throws IllegalArgumentException {
+		if (subProfileIds != null)
+			subProfileIds.remove(subProfileId);
 	}
 
 	public boolean hasSubProfiles() {
-		return (subProfiles != null ? !subProfiles.isEmpty() : false);
+		return subProfileIds == null || subProfileIds.isEmpty();
 	}
 
-	public Profile[] getSubProfiles() {
-		if (subProfiles == null)
+	public String[] getSubProfileIds() {
+		if (subProfileIds == null)
 			return noSubProfiles;
-		Collection values = subProfiles.values();
-		return (Profile[]) values.toArray(new Profile[values.size()]);
+
+		return (String[]) subProfileIds.toArray(new String[subProfileIds.size()]);
 	}
 
 	/**
@@ -201,10 +210,10 @@ public class Profile implements IQueryable {
 	 *  <code>null</code> is return if none of this profile
 	 *  or its ancestors associates a value with the key.
 	 */
-	public String getValue(String key) {
+	public String getProperty(String key) {
 		String value = storage.getProperty(key);
 		if (value == null && parentProfile != null) {
-			value = parentProfile.getValue(key);
+			value = parentProfile.getProperty(key);
 		}
 		return value;
 	}
@@ -215,7 +224,7 @@ public class Profile implements IQueryable {
 	 * 	No traversal of the ancestor hierarchy is done
 	 * 	for sub-profiles.
 	 */
-	public String getLocalValue(String key) {
+	public String getLocalProperty(String key) {
 		return storage.getProperty(key);
 	}
 
@@ -228,26 +237,15 @@ public class Profile implements IQueryable {
 		changed = true;
 	}
 
-	//	public Dictionary getSelectionContext() {
-	//		Hashtable result = new Hashtable(storage);
-	//		String environments = getValue(PROP_ENVIRONMENTS);
-	//		if (environments == null)
-	//			return result;
-	//		for (StringTokenizer tokenizer = new StringTokenizer(environments, ","); tokenizer.hasMoreElements();) { //$NON-NLS-1$
-	//			String entry = tokenizer.nextToken();
-	//			int i = entry.indexOf('=');
-	//			String key = entry.substring(0, i).trim();
-	//			String value = entry.substring(i + 1).trim();
-	//			result.put(key, value);
-	//		}
-	//		return result;
-	//	}
+	public Map internalGetLocalProperties() {
+		return storage;
+	}
 
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
 		return query.perform(iuProperties.keySet().iterator(), collector);
 	}
 
-	public String getInstallableUnitProfileProperty(IInstallableUnit iu, String key) {
+	public String getInstallableUnitProperty(IInstallableUnit iu, String key) {
 		OrderedProperties properties = (OrderedProperties) iuProperties.get(iu);
 		if (properties == null)
 			return null;
@@ -255,7 +253,7 @@ public class Profile implements IQueryable {
 		return properties.getProperty(key);
 	}
 
-	public String internalSetInstallableUnitProfileProperty(IInstallableUnit iu, String key, String value) {
+	public String internalSetInstallableUnitProperty(IInstallableUnit iu, String key, String value) {
 		OrderedProperties properties = (OrderedProperties) iuProperties.get(iu);
 		if (properties == null) {
 			properties = new OrderedProperties();
@@ -278,10 +276,19 @@ public class Profile implements IQueryable {
 	 * 
 	 * @return an <i>unmodifiable copy</i> of the Profile properties.
 	 */
-	public Map getProperties() {
+	public Map getLocalProperties() {
 		return OrderedProperties.unmodifiableProperties(storage);
 	}
 
+	public Map getProperties() {
+		if (parentProfile == null)
+			return getLocalProperties();
+
+		Map properties = new HashMap(parentProfile.getProperties());
+		properties.putAll(storage);
+		return OrderedProperties.unmodifiableProperties(properties);
+	}
+
 	/**
 	 * 	Add all the properties in the map to the local properties
 	 * 	of the profile.
@@ -304,7 +311,7 @@ public class Profile implements IQueryable {
 			changed = true;
 	}
 
-	public OrderedProperties getInstallableUnitProfileProperties(IInstallableUnit iu) {
+	public OrderedProperties getInstallableUnitProperties(IInstallableUnit iu) {
 		return (OrderedProperties) iuProperties.get(iu);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 4d936c5..19cceb8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -590,6 +590,12 @@ public class AbstractProvisioningTest extends TestCase {
 		return profile;
 	}
 
+	protected Profile getProfile(String profileId) {
+		//remove any existing profile with the same name
+		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(TestActivator.getContext(), IProfileRegistry.class.getName());
+		return profileRegistry.getProfile(profileId);
+	}
+
 	/**
 	 * Returns a resolved IU corresponding to the given IU, with no attached fragments.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
index 17b9647..6da7bea 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
@@ -11,8 +11,8 @@
 package org.eclipse.equinox.p2.tests.engine;
 
 import java.io.*;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.HashMap;
+import java.util.Map;
 import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.equinox.internal.p2.engine.ProfileParser;
 import org.eclipse.equinox.internal.p2.engine.ProfileWriter;
@@ -56,25 +56,17 @@ public class ProfileTest extends AbstractProvisioningTest {
 	public void testNestedProfileStructure() {
 		Profile parent = createProfile("parent");
 		Profile child = createProfile("child", parent);
-		assertTrue("Parentless profile should be a root.", parent.isARootProfile());
-		assertFalse("Child profile should not be a root.", child.isARootProfile());
+		assertTrue("Parentless profile should be a root.", parent.isRootProfile());
+		assertFalse("Child profile should not be a root.", child.isRootProfile());
 		assertTrue("Parent should be parent of child", child.getParentProfile() == parent);
-		assertTrue("Parent should have one child.", parent.getSubProfiles().length == 1);
-		assertTrue("Child should have no children.", child.getSubProfiles().length == 0);
+		assertTrue("Parent should have one child.", parent.getSubProfileIds().length == 1);
+		assertTrue("Child should have no children.", child.getSubProfileIds().length == 0);
 
 		Profile grandchild = createProfile("grand", child);
-		assertFalse("Grandchild profile should not be a root.", grandchild.isARootProfile());
-		assertTrue("Parent should have one child.", parent.getSubProfiles().length == 1);
-		assertTrue("Child should have one child.", child.getSubProfiles().length == 1);
+		assertFalse("Grandchild profile should not be a root.", grandchild.isRootProfile());
+		assertTrue("Parent should have one child.", parent.getSubProfileIds().length == 1);
+		assertTrue("Child should have one child.", child.getSubProfileIds().length == 1);
 		assertTrue("Grandparent of grandchild should be parent of child.", grandchild.getParentProfile().getParentProfile() == parent);
-		try {
-			// Add a subprofile with id collision.
-			createProfile("grand", child);
-		} catch (IllegalArgumentException expected) {
-			assertTrue("Child should have one child.", child.getSubProfiles().length == 1);
-			return;
-		}
-		fail();
 	}
 
 	/*	The test profile has the following structure and properties where
@@ -116,95 +108,115 @@ public class ProfileTest extends AbstractProvisioningTest {
 
 	// Create the profiles and test get after set
 	// for associated properties.
-	private Profile createTestProfile() {
-		Profile parent = createProfile(parentId);
-		parent.internalSetValue(key, parentValue);
-		assertTrue(parentValue.equals(parent.getValue(key)));
-		parent.internalSetValue(otherKey, otherValue);
-		assertTrue(otherValue.equals(parent.getValue(otherKey)));
-
-		Profile child0 = createProfile(child0Id, parent);
-		child0.internalSetValue(key, child0Value);
-		assertTrue(child0Value.equals(child0.getValue(key)));
-
-		Profile child1 = createProfile(child1Id, parent);
+	private Profile[] createTestProfiles() {
+
+		Map properties = new HashMap();
+
+		properties.put(key, parentValue);
+		properties.put(otherKey, otherValue);
+		Profile parent = createProfile(parentId, null, properties);
+		properties.clear();
+		assertTrue(parentValue.equals(parent.getProperty(key)));
+		assertTrue(otherValue.equals(parent.getProperty(otherKey)));
+
+		properties.put(key, child0Value);
+		Profile child0 = createProfile(child0Id, parent, properties);
+		properties.clear();
+		assertTrue(child0Value.equals(child0.getProperty(key)));
+
+		Profile child1 = createProfile(child1Id, parent, properties);
 		// no value in child1
 
-		Profile grandchild00 = createProfile(grandchild00Id, child0);
-		grandchild00.internalSetValue(key, grandchild00Value);
-		assertTrue(grandchild00Value.equals(grandchild00.getValue(key)));
+		properties.put(key, grandchild00Value);
+		Profile grandchild00 = createProfile(grandchild00Id, child0, properties);
+		properties.clear();
+		assertTrue(grandchild00Value.equals(grandchild00.getProperty(key)));
 
 		Profile grandchild01 = createProfile(grandchild01Id, child0);
 		// no value in grandchild01
 
-		Profile grandchild02 = createProfile(grandchild02Id, child0);
-		grandchild02.internalSetValue(otherKey, grandchild02Value);
-		assertTrue(grandchild02Value.equals(grandchild02.getValue(otherKey)));
+		properties.put(otherKey, grandchild02Value);
+		Profile grandchild02 = createProfile(grandchild02Id, child0, properties);
+		properties.clear();
+		assertTrue(grandchild02Value.equals(grandchild02.getProperty(otherKey)));
 
-		Profile grandchild10 = createProfile(grandchild10Id, child1);
-		grandchild10.internalSetValue(key, grandchild10Value);
-		assertTrue(grandchild10Value.equals(grandchild10.getValue(key)));
+		properties.put(key, grandchild10Value);
+		Profile grandchild10 = createProfile(grandchild10Id, child1, properties);
+		properties.clear();
+		assertTrue(grandchild10Value.equals(grandchild10.getProperty(key)));
 
 		Profile grandchild11 = createProfile(grandchild11Id, child1);
 		// no value in grandchild11
 
-		return parent;
+		parent = getProfile(parentId);
+		child0 = getProfile(child0Id);
+		child1 = getProfile(child1Id);
+		grandchild00 = getProfile(grandchild00Id);
+		grandchild01 = getProfile(grandchild01Id);
+		grandchild02 = getProfile(grandchild02Id);
+		grandchild10 = getProfile(grandchild10Id);
+		grandchild11 = getProfile(grandchild11Id);
+
+		Profile[] profiles = {parent, child0, child1, grandchild00, grandchild01, grandchild02, grandchild10, grandchild11};
+		return profiles;
 	}
 
 	public void testNestedProfileProperties() {
-		validateProfile(createTestProfile());
+		validateProfiles(createTestProfiles());
 	}
 
-	public void validateProfile(Profile profile) {
-		assertTrue(parentId.equals(profile.getProfileId()));
-		assertTrue("Profile should have 3 local properties", profile.getProperties().size() == 3);
-		assertTrue(parentValue.equals(profile.getValue(key)));
-		assertTrue(otherValue.equals(profile.getValue(otherKey)));
-		assertTrue("Parent should have 2 children.", profile.getSubProfiles().length == 2);
+	public void validateProfiles(Profile[] profiles) {
+		Profile parent = profiles[0];
+		Profile child0 = profiles[1];
+		Profile child1 = profiles[2];
+		Profile grandchild00 = profiles[3];
+		Profile grandchild01 = profiles[4];
+		Profile grandchild02 = profiles[5];
+		Profile grandchild10 = profiles[6];
+		Profile grandchild11 = profiles[7];
+
+		assertTrue(parentId.equals(parent.getProfileId()));
+		assertTrue("Profile should have 3 local properties", parent.getLocalProperties().size() == 3);
+		assertTrue(parentValue.equals(parent.getProperty(key)));
+		assertTrue(otherValue.equals(parent.getProperty(otherKey)));
+		assertTrue("Parent should have 2 children.", parent.getSubProfileIds().length == 2);
 
-		Profile child0 = profile.getSubProfiles()[0];
 		assertTrue(child0Id.equals(child0.getProfileId()));
-		assertTrue("First Child should have 1 local properties.", child0.getProperties().size() == 1);
-		assertTrue(child0Value.equals(child0.getValue(key)));
-		assertTrue(otherValue.equals(child0.getValue(otherKey)));
-		assertTrue("First Child should have 3 children.", child0.getSubProfiles().length == 3);
-		Profile grandchild00 = child0.getSubProfiles()[0];
-		Profile grandchild01 = child0.getSubProfiles()[1];
-		Profile grandchild02 = child0.getSubProfiles()[2];
-
-		Profile child1 = profile.getSubProfiles()[1];
+		assertTrue("First Child should have 1 local properties.", child0.getLocalProperties().size() == 1);
+		assertTrue(child0Value.equals(child0.getProperty(key)));
+		assertTrue(otherValue.equals(child0.getProperty(otherKey)));
+		assertTrue("First Child should have 3 children.", child0.getSubProfileIds().length == 3);
+
 		assertTrue(child1Id.equals(child1.getProfileId()));
-		assertTrue("Second Child should have 0 local properties.", child1.getProperties().size() == 0);
-		assertTrue(parentValue.equals(child1.getValue(key)));
-		assertTrue(otherValue.equals(child1.getValue(otherKey)));
-		assertTrue("Second Child should have 2 children.", child1.getSubProfiles().length == 2);
-		Profile grandchild10 = child1.getSubProfiles()[0];
-		Profile grandchild11 = child1.getSubProfiles()[1];
+		assertTrue("Second Child should have 0 local properties.", child1.getLocalProperties().size() == 0);
+		assertTrue(parentValue.equals(child1.getProperty(key)));
+		assertTrue(otherValue.equals(child1.getProperty(otherKey)));
+		assertTrue("Second Child should have 2 children.", child1.getSubProfileIds().length == 2);
 
 		assertTrue(grandchild00Id.equals(grandchild00.getProfileId()));
-		assertTrue("First Grandchild of first Child should have 1 property.", grandchild00.getProperties().size() == 1);
-		assertTrue(grandchild00Value.equals(grandchild00.getValue(key)));
-		assertTrue(otherValue.equals(grandchild00.getValue(otherKey)));
+		assertTrue("First Grandchild of first Child should have 1 property.", grandchild00.getLocalProperties().size() == 1);
+		assertTrue(grandchild00Value.equals(grandchild00.getProperty(key)));
+		assertTrue(otherValue.equals(grandchild00.getProperty(otherKey)));
 
 		assertTrue(grandchild01Id.equals(grandchild01.getProfileId()));
-		assertTrue("Second Grandchild of first Child should have 0 properties.", grandchild01.getProperties().size() == 0);
-		assertTrue(child0Value.equals(grandchild01.getValue(key)));
-		assertTrue(otherValue.equals(grandchild01.getValue(otherKey)));
+		assertTrue("Second Grandchild of first Child should have 0 properties.", grandchild01.getLocalProperties().size() == 0);
+		assertTrue(child0Value.equals(grandchild01.getProperty(key)));
+		assertTrue(otherValue.equals(grandchild01.getProperty(otherKey)));
 
 		assertTrue(grandchild02Id.equals(grandchild02.getProfileId()));
-		assertTrue("Third Grandchild of first Child should have 1 property.", grandchild02.getProperties().size() == 1);
-		assertTrue(child0Value.equals(grandchild02.getValue(key)));
-		assertTrue(grandchild02Value.equals(grandchild02.getValue(otherKey)));
+		assertTrue("Third Grandchild of first Child should have 1 property.", grandchild02.getLocalProperties().size() == 1);
+		assertTrue(child0Value.equals(grandchild02.getProperty(key)));
+		assertTrue(grandchild02Value.equals(grandchild02.getProperty(otherKey)));
 
 		assertTrue(grandchild10Id.equals(grandchild10.getProfileId()));
-		assertTrue("First Grandchild of second Child should have 1 property.", grandchild10.getProperties().size() == 1);
-		assertTrue(grandchild10Value.equals(grandchild10.getValue(key)));
-		assertTrue(otherValue.equals(grandchild10.getValue(otherKey)));
+		assertTrue("First Grandchild of second Child should have 1 property.", grandchild10.getLocalProperties().size() == 1);
+		assertTrue(grandchild10Value.equals(grandchild10.getProperty(key)));
+		assertTrue(otherValue.equals(grandchild10.getProperty(otherKey)));
 
 		assertTrue(grandchild11Id.equals(grandchild11.getProfileId()));
-		assertTrue("Second Grandchild of second Child should have 0 properties.", grandchild11.getProperties().size() == 0);
-		assertTrue(parentValue.equals(grandchild11.getValue(key)));
-		assertTrue(otherValue.equals(grandchild11.getValue(otherKey)));
+		assertTrue("Second Grandchild of second Child should have 0 properties.", grandchild11.getLocalProperties().size() == 0);
+		assertTrue(parentValue.equals(grandchild11.getProperty(key)));
+		assertTrue(otherValue.equals(grandchild11.getProperty(otherKey)));
 	}
 
 	private static String PROFILE_TEST_TARGET = "profileTest";
@@ -218,29 +230,30 @@ public class ProfileTest extends AbstractProvisioningTest {
 			super(stream, new ProcessingInstruction[] {ProcessingInstruction.makeClassVersionInstruction(PROFILE_TEST_TARGET, Profile.class, PROFILE_TEST_VERSION)});
 		}
 
-		public void writeTest(Profile profile) {
+		public void writeTest(Profile[] profiles) {
 			start(PROFILE_TEST_ELEMENT);
-			writeProfile(profile);
+			writeProfiles(profiles);
 			end(PROFILE_TEST_ELEMENT);
 		}
 	}
 
 	class ProfileStringParser extends ProfileParser {
 
+		private Profile[] profiles = null;
+
 		public ProfileStringParser(BundleContext context, String bundleId) {
 			super(context, bundleId);
-			// TODO Auto-generated constructor stub
 		}
 
 		public void parse(String profileString) throws IOException {
 			this.status = null;
 			try {
 				getParser();
-				TestHandler testHandler = new TestHandler();
+				TestHandler2 testHandler = new TestHandler2();
 				xmlReader.setContentHandler(new ProfileDocHandler(PROFILE_TEST_ELEMENT, testHandler));
 				xmlReader.parse(new InputSource(new StringReader(profileString)));
 				if (isValidXML()) {
-					theProfile = testHandler.getProfile();
+					profiles = testHandler.profiles;
 				}
 			} catch (SAXException e) {
 				throw new IOException(e.getMessage());
@@ -249,8 +262,6 @@ public class ProfileTest extends AbstractProvisioningTest {
 			}
 		}
 
-		private Profile theProfile = null;
-
 		private final class ProfileDocHandler extends DocHandler {
 
 			public ProfileDocHandler(String rootName, RootHandler rootHandler) {
@@ -276,29 +287,18 @@ public class ProfileTest extends AbstractProvisioningTest {
 			}
 		}
 
-		private final class TestHandler extends RootHandler {
-
-			private ProfileHandler profileHandler = null;
-
-			private Profile profile = null;
-			private List singleton = new ArrayList(1);
-
-			public TestHandler() {
-				super();
-			}
+		private final class TestHandler2 extends RootHandler {
 
-			public Profile getProfile() {
-				return profile;
-			}
+			private ProfilesHandler profilesHandler;
+			Profile[] profiles;
 
 			protected void handleRootAttributes(Attributes attributes) {
-				String[] values = parseAttributes(attributes, noAttributes, noAttributes);
 			}
 
-			public void startElement(String name, Attributes attributes) {
-				if (PROFILE_ELEMENT.equals(name)) {
-					if (profileHandler == null) {
-						profileHandler = new ProfileHandler(this, attributes, null, singleton);
+			public void startElement(String name, Attributes attributes) throws SAXException {
+				if (PROFILES_ELEMENT.equals(name)) {
+					if (profilesHandler == null) {
+						profilesHandler = new ProfilesHandler(this, attributes);
 					} else {
 						duplicateElement(this, name, attributes);
 					}
@@ -309,38 +309,93 @@ public class ProfileTest extends AbstractProvisioningTest {
 
 			protected void finished() {
 				if (isValidXML()) {
-					if (profileHandler != null && singleton.size() == 1) {
-						profile = (Profile) singleton.get(0);
+					if (profilesHandler != null) {
+						profiles = profilesHandler.getProfiles();
 					}
 				}
 			}
+
 		}
 
+		//		private final class TestHandler extends RootHandler {
+		//
+		//			private ProfileHandler profileHandler = null;
+		//
+		//			private Profile profile = null;
+		//			private Map singleton = new HashMap(1);
+		//
+		//			public TestHandler() {
+		//				super();
+		//			}
+		//
+		//			public Profile getProfile() {
+		//				return profile;
+		//			}
+		//
+		//			protected void handleRootAttributes(Attributes attributes) {
+		//				String[] values = parseAttributes(attributes, noAttributes, noAttributes);
+		//			}
+		//
+		//			public void startElement(String name, Attributes attributes) {
+		//				if (PROFILE_ELEMENT.equals(name)) {
+		//					if (profileHandler == null) {
+		//						profileHandler = new ProfileHandler(this, attributes, singleton);
+		//					} else {
+		//						duplicateElement(this, name, attributes);
+		//					}
+		//				} else {
+		//					invalidElement(name, attributes);
+		//				}
+		//			}
+		//
+		//			protected void finished() {
+		//				if (isValidXML()) {
+		//					if (profileHandler != null && singleton.size() == 1) {
+		//						profile = new Profile(profileHandler.getProfileId(), null, profileHandler.getProperties());
+		//					}
+		//				}
+		//			}
+		//		}
+
 		protected String getErrorMessage() {
 			return "Error parsing profile string";
 		}
 
 		protected Object getRootObject() {
-			return theProfile;
+			Map result = new HashMap();
+			for (int i = 0; i < profiles.length; i++) {
+				result.put(profiles[i].getProfileId(), profiles[i]);
+			}
+			return result;
 		}
 	}
 
 	public void testProfilePersistence() throws IOException {
-		Profile profile0 = createTestProfile();
+		Profile[] testProfiles = createTestProfiles();
 		ByteArrayOutputStream output0 = new ByteArrayOutputStream(1492);
 		ProfileStringWriter writer0 = new ProfileStringWriter(output0);
-		writer0.writeTest(profile0);
+		writer0.writeTest(testProfiles);
 		String profileText0 = output0.toString();
 		output0.close();
 
 		ProfileStringParser parser = new ProfileStringParser(TestActivator.context, TestActivator.PI_PROV_TESTS);
 		parser.parse(profileText0);
 		assertTrue("Error parsing test profile: " + parser.getStatus().getMessage(), parser.getStatus().isOK());
-		Profile profile1 = (Profile) parser.getRootObject();
-		validateProfile(profile1);
+		Map profileMap = (Map) parser.getRootObject();
+		Profile parent = (Profile) profileMap.get(parentId);
+		Profile child0 = (Profile) profileMap.get(child0Id);
+		Profile child1 = (Profile) profileMap.get(child1Id);
+		Profile grandchild00 = (Profile) profileMap.get(grandchild00Id);
+		Profile grandchild01 = (Profile) profileMap.get(grandchild01Id);
+		Profile grandchild02 = (Profile) profileMap.get(grandchild02Id);
+		Profile grandchild10 = (Profile) profileMap.get(grandchild10Id);
+		Profile grandchild11 = (Profile) profileMap.get(grandchild11Id);
+		Profile[] profiles = {parent, child0, child1, grandchild00, grandchild01, grandchild02, grandchild10, grandchild11};
+		validateProfiles(profiles);
 		ByteArrayOutputStream output1 = new ByteArrayOutputStream(1492);
 		ProfileStringWriter writer = new ProfileStringWriter(output1);
-		writer.writeTest(profile1);
+
+		writer.writeTest(profiles);
 		String profileText1 = output1.toString();
 		output1.close();
 		assertTrue("Profile write after read after write produced different XML", profileText1.equals(profileText0));
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
index 7da1824..8604f99 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
@@ -54,7 +54,7 @@ public class Util {
 	}
 
 	static URL getBundlePoolLocation(Profile profile) {
-		String path = profile.getValue(CACHE_PATH);
+		String path = profile.getProperty(CACHE_PATH);
 		if (path == null)
 			path = Activator.getContext().getProperty(CACHE_PATH);
 		if (path != null)
@@ -136,21 +136,21 @@ public class Util {
 	}
 
 	static File getConfigurationFolder(Profile profile) {
-		String config = profile.getValue(CONFIG_FOLDER);
+		String config = profile.getProperty(CONFIG_FOLDER);
 		if (config != null)
 			return new File(config);
 		return new File(getInstallFolder(profile), "configuration"); //$NON-NLS-1$
 	}
 
 	static File getInstallFolder(Profile profile) {
-		return new File(profile.getValue(Profile.PROP_INSTALL_FOLDER));
+		return new File(profile.getProperty(Profile.PROP_INSTALL_FOLDER));
 	}
 
 	/**
 	 * Returns the name of the Eclipse application launcher.
 	 */
 	static String getLauncherName(Profile profile) {
-		String name = profile.getValue(FrameworkAdmin.SERVICE_PROP_KEY_LAUNCHER_NAME);
+		String name = profile.getProperty(FrameworkAdmin.SERVICE_PROP_KEY_LAUNCHER_NAME);
 		if (name != null)
 			return name;
 		//create a default name based on platform
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
index 92ce4d3..40fcc3f 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
@@ -127,7 +127,7 @@ public class NativeTouchpoint extends Touchpoint {
 	}
 
 	private String getInstallFolder(Profile profile) {
-		return profile.getValue(Profile.PROP_INSTALL_FOLDER);
+		return profile.getProperty(Profile.PROP_INSTALL_FOLDER);
 	}
 
 	private static AgentLocation getAgentLocation() {
@@ -208,7 +208,7 @@ public class NativeTouchpoint extends Touchpoint {
 		for (int i = 0; i < unzippedFiles.length; i++)
 			unzippedFileNameBuffer.append(unzippedFiles[i].getAbsolutePath()).append("|");
 
-		String unzipped = profile.internalSetInstallableUnitProfileProperty(iu, "unzipped" + "|" + originalSource + "|" + target, unzippedFileNameBuffer.toString());
+		String unzipped = profile.internalSetInstallableUnitProperty(iu, "unzipped" + "|" + originalSource + "|" + target, unzippedFileNameBuffer.toString());
 
 		return Status.OK_STATUS;
 	}
@@ -224,7 +224,7 @@ public class NativeTouchpoint extends Touchpoint {
 		IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
 		Profile profile = (Profile) parameters.get("profile");
 
-		String unzipped = profile.getInstallableUnitProfileProperty(iu, "unzipped" + "|" + source + "|" + target);
+		String unzipped = profile.getInstallableUnitProperty(iu, "unzipped" + "|" + source + "|" + target);
 
 		if (unzipped == null)
 			return Status.OK_STATUS;
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
index 7d69c4c..2d495a1 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
@@ -72,7 +72,7 @@ public class IUProfilePropertiesGroup extends IUGroup {
 		for (int i = 0; i < propNames.length; i++) {
 			TableItem item = new TableItem(propertiesTable, SWT.NULL);
 			Profile profile = getProfile((InstalledIUElement) iuElement);
-			String value = profile == null ? null : profile.getInstallableUnitProfileProperty(getIU(), propNames[i]);
+			String value = profile == null ? null : profile.getInstallableUnitProperty(getIU(), propNames[i]);
 			if (value != null)
 				item.setText(new String[] {userPropNames[i], value});
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
index 6b9d491..667183a 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
@@ -155,31 +155,31 @@ public class ProfileGroup {
 			id.setText(value);
 
 			// The remaining values may be null
-			value = profile.getValue(Profile.PROP_INSTALL_FOLDER);
+			value = profile.getProperty(Profile.PROP_INSTALL_FOLDER);
 			if (value != null) {
 				location.setText(value);
 			}
-			value = profile.getValue(Profile.PROP_CACHE);
+			value = profile.getProperty(Profile.PROP_CACHE);
 			if (value != null) {
 				cache.setText(value);
 			}
 
-			value = profile.getValue(Profile.PROP_NAME);
+			value = profile.getProperty(Profile.PROP_NAME);
 			if (value != null) {
 				name.setText(value);
 			}
-			value = profile.getValue(Profile.PROP_DESCRIPTION);
+			value = profile.getProperty(Profile.PROP_DESCRIPTION);
 			if (value != null) {
 				description.setText(value);
 			}
-			value = profile.getValue(Profile.PROP_FLAVOR);
+			value = profile.getProperty(Profile.PROP_FLAVOR);
 			flavor.setText(value != null ? value : ProfileFactory.getDefaultFlavor());
 
-			value = profile.getValue(Profile.PROP_ENVIRONMENTS);
+			value = profile.getProperty(Profile.PROP_ENVIRONMENTS);
 			if (value != null) {
 				environments.setText(value);
 			}
-			value = profile.getValue(Profile.PROP_NL);
+			value = profile.getProperty(Profile.PROP_NL);
 			if (value != null) {
 				nl.setText(value);
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IUProfilePropertyQuery.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IUProfilePropertyQuery.java
index 907af64..461b1fa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IUProfilePropertyQuery.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IUProfilePropertyQuery.java
@@ -29,6 +29,6 @@ public class IUProfilePropertyQuery extends IUPropertyQuery {
 	}
 
 	protected String getProperty(IInstallableUnit iu, String name) {
-		return profile.getInstallableUnitProfileProperty(iu, name);
+		return profile.getInstallableUnitProperty(iu, name);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
index 0b34a43..e33ef5c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
@@ -111,7 +111,7 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 				return getText(element);
 			case 1 :
 				if (element instanceof Profile) {
-					return ((Profile) element).getValue(Profile.PROP_NAME);
+					return ((Profile) element).getProperty(Profile.PROP_NAME);
 				}
 				if (element instanceof IUElement) {
 					if (((IUElement) element).shouldShowVersion())
commit bd5ae57063d7521fe12f119730edff7d1e007498
Author: Simon Kaegi <skaegi>
Date:   Wed Jan 30 21:50:33 2008 +0000

    Bug 212336 [prov] Tighten up API for Profile and ProfileRegistry

1	3	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
11	6	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
2	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
2	10	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
3	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
3	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
1	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index 3ca04ac..569d7a6 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -127,9 +127,7 @@ public class ProvisioningHelper {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(Activator.getContext(), IProfileRegistry.class.getName());
 		if (profileRegistry == null)
 			return;
-		Profile profile = profileRegistry.getProfile(profileId);
-		if (profile != null)
-			profileRegistry.removeProfile(profile);
+		profileRegistry.removeProfile(profileId);
 	}
 
 	public static Profile[] getProfiles() {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index b47aa27..cd6498d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -179,23 +179,28 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		persist();
 	}
 
-	public synchronized void removeProfile(Profile toRemove) {
-		if (isNamedSelf(toRemove))
-			throw new IllegalArgumentException(NLS.bind(Messages.Profile_Not_Named_Self, toRemove.getProfileId()));
-
+	public synchronized void removeProfile(String profileId) {
 		InstallRegistry installRegistry = (InstallRegistry) ServiceHelper.getService(EngineActivator.getContext(), IInstallRegistry.class.getName());
 		if (installRegistry == null)
 			return;
 
 		//note we need to maintain a reference to the profile map until it is persisted to prevent gc
 		Map profileMap = getProfileMap();
-		if (profileMap.remove(toRemove.getProfileId()) == null)
+
+		// this is a copy we use for the event
+		Profile toRemove = getProfile(profileId);
+		if (toRemove == null)
 			return;
-		installRegistry.removeProfileInstallRegistry(toRemove.getProfileId());
+		installRegistry.removeProfileInstallRegistry(profileId);
+		profileMap.remove(profileId);
 		persist();
 		broadcastChangeEvent(toRemove, ProfileEvent.REMOVED);
 	}
 
+	public synchronized void removeProfile(Profile toRemove) {
+		removeProfile(toRemove.getProfileId());
+	}
+
 	private Profile copyProfile(Profile profile) {
 		Profile parent = profile.getParentProfile();
 		if (parent != null)
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
index 62db99b..7f75410 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
@@ -15,6 +15,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
+import org.eclipse.equinox.internal.p2.engine.SimpleProfileRegistry;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 
 public class Engine {
@@ -73,7 +74,7 @@ public class Engine {
 			MultiStatus result = phaseSet.perform(session, profile, iuOperands, monitor);
 			if (result.isOK()) {
 				if (profile.isChanged()) {
-					IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(EngineActivator.getContext(), IProfileRegistry.class.getName());
+					SimpleProfileRegistry profileRegistry = (SimpleProfileRegistry) ServiceHelper.getService(EngineActivator.getContext(), IProfileRegistry.class.getName());
 					if (profileRegistry.getProfile(profile.getProfileId()) == null)
 						profileRegistry.addProfile(profile);
 					else {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
index d00765c..afa4064 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
@@ -46,15 +46,7 @@ public interface IProfileRegistry {
 	/**
 	 * Remove the given profile from this profile registry.
 	 * 
-	 * @param toRemove the profile to remove
+	 * @param id the profile to remove
 	 */
-	void removeProfile(Profile toRemove);
-
-	/**
-	 * Update the given profile stored in this profile registry.
-	 * 
-	 * @param toUpdate the profile to update
-	 */
-	void updateProfile(Profile toUpdate);
-
+	void removeProfile(String id);
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 19cceb8..a6eb6da 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -580,11 +580,9 @@ public class AbstractProvisioningTest extends TestCase {
 	protected Profile createProfile(String name, Profile parent, Map properties) {
 		//remove any existing profile with the same name
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(TestActivator.getContext(), IProfileRegistry.class.getName());
-		Profile profile = profileRegistry.getProfile(name);
-		if (profile != null)
-			profileRegistry.removeProfile(profile);
+		profileRegistry.removeProfile(name);
 		//create and return a new profile
-		profile = new Profile(name, parent, properties);
+		Profile profile = new Profile(name, parent, properties);
 		profileRegistry.addProfile(profile);
 		profilesToRemove.add(profile);
 		return profile;
@@ -637,7 +635,7 @@ public class AbstractProvisioningTest extends TestCase {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(TestActivator.getContext(), IProfileRegistry.class.getName());
 		for (Iterator it = profilesToRemove.iterator(); it.hasNext();) {
 			Profile toRemove = (Profile) it.next();
-			profileRegistry.removeProfile(toRemove);
+			profileRegistry.removeProfile(toRemove.getProfileId());
 		}
 		profilesToRemove.clear();
 		//See bug 209069 - currently no way to persist install registry changes or clear the metadata cache
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
index c0d11e0..b0b9a3c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
@@ -52,9 +52,7 @@ public class ProfileRegistryTest extends AbstractProvisioningTest {
 	protected void setUp() throws Exception {
 		getServices();
 		//ensure we start in a clean state
-		Profile profile = registry.getProfile(PROFILE_NAME);
-		if (profile != null)
-			registry.removeProfile(profile);
+		registry.removeProfile(PROFILE_NAME);
 	}
 
 	protected void tearDown() throws Exception {
@@ -66,7 +64,7 @@ public class ProfileRegistryTest extends AbstractProvisioningTest {
 		assertNull(registry.getProfile(PROFILE_NAME));
 		Profile test = createProfile(PROFILE_NAME);
 		assertEquals(test.getProfileId(), registry.getProfile(PROFILE_NAME).getProfileId());
-		registry.removeProfile(test);
+		registry.removeProfile(PROFILE_NAME);
 		assertNull(registry.getProfile(PROFILE_NAME));
 	}
 
@@ -78,7 +76,7 @@ public class ProfileRegistryTest extends AbstractProvisioningTest {
 		restart();
 		test = registry.getProfile(PROFILE_NAME);
 		assertNotNull(test);
-		registry.removeProfile(test);
+		registry.removeProfile(PROFILE_NAME);
 
 		restart();
 		assertNull(registry.getProfile(PROFILE_NAME));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index dff525e..f80d1aa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -131,9 +131,7 @@ public class ProvisioningUtil {
 		if (profileRegistry == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoProfileRegistryFound);
 		}
-		Profile profile = profileRegistry.getProfile(profileId);
-		if (profile != null)
-			profileRegistry.removeProfile(profile);
+		profileRegistry.removeProfile(profileId);
 	}
 
 	public static Profile[] getProfiles() throws ProvisionException {
commit 98e5c6bd206d87e563a7ab099d6c3c409bb411de
Author: Simon Kaegi <skaegi>
Date:   Thu Jan 31 16:02:52 2008 +0000

    Bug 212336 [prov] Tighten up API for Profile and ProfileRegistry

1	2	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
12	33	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
6	7	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
13	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
4	7	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProfileEvent.java
1	2	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index d702555..4974983 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -119,8 +119,7 @@ public class ProvisioningHelper {
 				profileProperties.put(IProfile.PROP_ENVIRONMENTS, "");
 		}
 
-		profileRegistry.addProfile(profileId, profileProperties);
-		return profileRegistry.getProfile(profileId);
+		return profileRegistry.addProfile(profileId, profileProperties);
 	}
 
 	public static void removeProfile(String profileId) {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 0c28490..9b837ea 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -51,7 +51,7 @@ public class FormerState {
 				} else if (o instanceof ProfileEvent) {
 					ProfileEvent event = (ProfileEvent) o;
 					if (event.getReason() == ProfileEvent.CHANGED)
-						getRepository().addInstallableUnits(new IInstallableUnit[] {(IInstallableUnit) generatedIUs.get(event.getProfile().getProfileId())});
+						getRepository().addInstallableUnits(new IInstallableUnit[] {(IInstallableUnit) generatedIUs.get(event.getProfileId())});
 					return;
 				} else if (o instanceof RollbackOperationEvent) {
 					RollbackOperationEvent event = (RollbackOperationEvent) o;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 0572e1d..c24a51b 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -128,31 +128,18 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		if (profileMap.get(id) == null)
 			throw new IllegalArgumentException("Profile to be updated does not exist:" + id); //$NON-NLS-1$
 		doUpdateProfile(toUpdate, profileMap);
-		broadcastChangeEvent(toUpdate, ProfileEvent.CHANGED);
+		broadcastChangeEvent(id, ProfileEvent.CHANGED);
 	}
 
-	public synchronized void addProfile(Profile toAdd) throws IllegalArgumentException {
-		if (isNamedSelf(toAdd))
-			throw new IllegalArgumentException(NLS.bind(Messages.Profile_Not_Named_Self, toAdd.getProfileId()));
-		String id = toAdd.getProfileId();
-		if (SELF.equals(id))
-			id = self;
-		Map profileMap = getProfileMap();
-		if (profileMap.get(id) != null)
-			throw new IllegalArgumentException(NLS.bind(Messages.Profile_Duplicate_Root_Profile_Id, id));
-		doUpdateProfile(toAdd, profileMap);
-		broadcastChangeEvent(toAdd, ProfileEvent.ADDED);
+	public IProfile addProfile(String id) {
+		return addProfile(id, null, null);
 	}
 
-	public void addProfile(String id) {
-		addProfile(id, null, null);
+	public IProfile addProfile(String id, Map properties) {
+		return addProfile(id, properties, null);
 	}
 
-	public void addProfile(String id, Map properties) {
-		addProfile(id, properties, null);
-	}
-
-	public synchronized void addProfile(String id, Map properties, String parentId) {
+	public synchronized IProfile addProfile(String id, Map properties, String parentId) {
 		if (SELF.equals(id))
 			id = self;
 		Map profileMap = getProfileMap();
@@ -178,7 +165,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		installRegistry.addProfileInstallRegistry(profileInstallRegistry);
 		profileMap.put(id, toAdd);
 		persist();
-		broadcastChangeEvent(copyProfile(toAdd), ProfileEvent.ADDED);
+		broadcastChangeEvent(id, ProfileEvent.ADDED);
+		return copyProfile(toAdd);
 	}
 
 	private void doUpdateProfile(Profile toUpdate, Map profileMap) {
@@ -224,14 +212,11 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		//note we need to maintain a reference to the profile map until it is persisted to prevent gc
 		Map profileMap = getProfileMap();
 
-		// this is a copy we use for the event
-		IProfile toRemove = getProfile(profileId);
-		if (toRemove == null)
+		if (profileMap.remove(profileId) == null)
 			return;
 		installRegistry.removeProfileInstallRegistry(profileId);
-		profileMap.remove(profileId);
 		persist();
-		broadcastChangeEvent(toRemove, ProfileEvent.REMOVED);
+		broadcastChangeEvent(profileId, ProfileEvent.REMOVED);
 	}
 
 	private Profile copyProfile(IProfile profile) {
@@ -247,8 +232,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		return copy;
 	}
 
-	private void broadcastChangeEvent(IProfile profile, byte reason) {
-		((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new ProfileEvent(profile, reason));
+	private void broadcastChangeEvent(String profileId, byte reason) {
+		((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new ProfileEvent(profileId, reason));
 	}
 
 	private URL getRegistryLocation() {
@@ -322,12 +307,6 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 
 	}
 
-	private boolean isNamedSelf(IProfile p) {
-		if (SELF.equals(p.getParentProfile()))
-			return true;
-		return false;
-	}
-
 	public synchronized Map getProperties() {
 		return properties;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
index 2160e3d..61e45b0 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
@@ -64,6 +64,10 @@ public class Engine {
 		Profile profile = (Profile) iprofile;
 		lockProfile(profile);
 		try {
+			SimpleProfileRegistry profileRegistry = (SimpleProfileRegistry) ServiceHelper.getService(EngineActivator.getContext(), IProfileRegistry.class.getName());
+			if (profileRegistry.getProfile(profile.getProfileId()) == null)
+				throw new IllegalArgumentException("Profile is not registered."); //$NON-NLS-1$
+
 			eventBus.publishEvent(new BeginOperationEvent(profile, phaseSet, iuOperands, this));
 
 			EngineSession session = new EngineSession(profile);
@@ -74,13 +78,8 @@ public class Engine {
 			MultiStatus result = phaseSet.perform(session, profile, iuOperands, monitor);
 			if (result.isOK()) {
 				if (profile.isChanged()) {
-					SimpleProfileRegistry profileRegistry = (SimpleProfileRegistry) ServiceHelper.getService(EngineActivator.getContext(), IProfileRegistry.class.getName());
-					if (profileRegistry.getProfile(profile.getProfileId()) == null)
-						profileRegistry.addProfile(profile);
-					else {
-						moveIUProperties(profile, iuOperands);
-						profileRegistry.updateProfile(profile);
-					}
+					moveIUProperties(profile, iuOperands);
+					profileRegistry.updateProfile(profile);
 				}
 				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, iuOperands, this));
 				session.commit();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
index b5f28e9..cbe7892 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
@@ -36,13 +36,22 @@ public interface IProfileRegistry {
 	 */
 	IProfile[] getProfiles();
 
-	//	void addProfile(Profile toAdd) throws IllegalArgumentException;
+	/**
+	 * Add the given profile to this profile registry.
+	 * 
+	 * @param id the profile id
+	 * @param properties the profile properties
+	 * @param parentId the id of a parent profile
+	 * 
+	 * @throws IllegalArgumentException if a profile
+	 *         with the same id is already present in the registry.
+	 */
 
-	void addProfile(String id);
+	IProfile addProfile(String id);
 
-	void addProfile(String id, Map properties);
+	IProfile addProfile(String id, Map properties);
 
-	void addProfile(String id, Map properties, String parentId);
+	IProfile addProfile(String id, Map properties, String parentId);
 
 	/**
 	 * Remove the given profile from this profile registry.
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProfileEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProfileEvent.java
index 9efcb38..b34c845 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProfileEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/ProfileEvent.java
@@ -17,14 +17,12 @@ public class ProfileEvent extends EventObject {
 
 	public static byte ADDED = 0;
 	public static byte REMOVED = 1;
-	// TODO We need an event when profile properties change.  Not fully implemented.
-	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=197701
 	public static byte CHANGED = 2;
 
 	private byte reason;
 
-	public ProfileEvent(IProfile source, byte reason) {
-		super(source);
+	public ProfileEvent(String profileId, byte reason) {
+		super(profileId);
 		this.reason = reason;
 	}
 
@@ -32,8 +30,7 @@ public class ProfileEvent extends EventObject {
 		return reason;
 	}
 
-	public IProfile getProfile() {
-		return (IProfile) getSource();
+	public String getProfileId() {
+		return (String) getSource();
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
index f5324f5..a7ad246 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
@@ -86,8 +86,7 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 			EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(InstallerActivator.getDefault().getContext(), EnvironmentInfo.class.getName());
 			String env = "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch() + ",eclipse.p2.install.features=true"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
 			properties.put(IProfile.PROP_ENVIRONMENTS, env);
-			profileRegistry.addProfile(installDescription.getProductName(), properties);
-			profile = profileRegistry.getProfile(installDescription.getProductName());
+			profile = profileRegistry.addProfile(installDescription.getProductName(), properties);
 		}
 		return profile;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 996e634..d905629 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -582,9 +582,7 @@ public class AbstractProvisioningTest extends TestCase {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(TestActivator.getContext(), IProfileRegistry.class.getName());
 		profileRegistry.removeProfile(name);
 		//create and return a new profile
-		profileRegistry.addProfile(name, properties, parentId);
-
-		return profileRegistry.getProfile(name);
+		return profileRegistry.addProfile(name, properties, parentId);
 	}
 
 	protected IProfile getProfile(String profileId) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
index e6794ad..05ce5d2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIActivator.java
@@ -117,7 +117,7 @@ public class ProvUIActivator extends AbstractUIPlugin {
 						ProfileEvent event = (ProfileEvent) o;
 						try {
 							IProfile selfProfile = ProvisioningUtil.getProfile(IProfileRegistry.SELF);
-							if (selfProfile != null && (selfProfile.getProfileId().equals(event.getProfile().getProfileId()))) {
+							if (selfProfile != null && (selfProfile.getProfileId().equals(event.getProfileId()))) {
 								if (event.getReason() == ProfileEvent.CHANGED)
 									PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
 										public void run() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index 6de46e1..e26d92e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -122,8 +122,7 @@ public class ProvisioningUtil {
 		if (profileRegistry == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoProfileRegistryFound);
 		}
-		profileRegistry.addProfile(profileId, properties);
-		return profileRegistry.getProfile(profileId);
+		return profileRegistry.addProfile(profileId, properties);
 	}
 
 	public static void removeProfile(String profileId, IProgressMonitor monitor) throws ProvisionException {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
index 7c6f87a..0dfad8a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
@@ -14,7 +14,6 @@ package org.eclipse.equinox.p2.ui.viewers;
 import java.util.EventObject;
 import org.eclipse.equinox.internal.p2.ui.IProvisioningListener;
 import org.eclipse.equinox.p2.core.eventbus.SynchronousProvisioningListener;
-import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.engine.ProfileEvent;
 import org.eclipse.equinox.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.p2.ui.query.IQueryProvider;
@@ -49,12 +48,12 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 		if (o instanceof ProfileEvent && (((eventTypes & PROV_EVENT_IU) == PROV_EVENT_IU) || ((eventTypes & PROV_EVENT_PROFILE) == PROV_EVENT_PROFILE))) {
 			ProfileEvent event = (ProfileEvent) o;
 			if (event.getReason() == ProfileEvent.CHANGED) {
-				final IProfile profile = event.getProfile();
+				final String profileId = event.getProfileId();
 				display.asyncExec(new Runnable() {
 					public void run() {
 						// We want to refresh the affected profile, so we
 						// construct a profile element on this profile.
-						ProfileElement element = new ProfileElement(profile.getProfileId());
+						ProfileElement element = new ProfileElement(profileId);
 						element.setQueryProvider(queryProvider);
 						viewer.refresh(element);
 					}

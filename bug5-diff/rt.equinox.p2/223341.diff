commit 66d78eb7cd1a0c866406071878323e8c441e8654
Author: Susan Franklin <sfranklin>
Date:   Wed Apr 16 17:00:35 2008 +0000

    Bug 223341 - [ui] Would like to install everything in a category

13	17	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
8	19	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
12	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RevertAction.java
8	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
51	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java
23	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUContainerElement.java
14	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
0	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index 4b687a1..d131688 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -11,6 +11,7 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
+import java.util.Set;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -21,10 +22,10 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.IProfileChooser;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.InstallWizard;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policies;
 import org.eclipse.jface.viewers.ISelectionProvider;
-import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.swt.widgets.Shell;
 
@@ -36,25 +37,20 @@ public class InstallAction extends ProfileModificationAction {
 	}
 
 	/*
-	 *  Overridden to enable only on selections with IU's.  Does not validate
-	 *  whether the IU is already installed in a particular profile.
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.actions.ProvisioningAction#structuredSelectionChanged(org.eclipse.jface.viewers.IStructuredSelection)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.actions.ProfileModificationAction#isEnabledFor(java.lang.Object[])
 	 */
-	protected void structuredSelectionChanged(IStructuredSelection selection) {
-		Object[] selectionArray = selection.toArray();
-		if (selectionArray.length < 1) {
-			setEnabled(false);
-		} else {
-			for (int i = 0; i < selectionArray.length; i++) {
-				IInstallableUnit iu = getIU(selectionArray[i]);
-				if (iu == null || ProvisioningUtil.isCategory(iu)) {
-					setEnabled(false);
-					return;
-				}
-			}
-			setEnabled(true);
+	protected boolean isEnabledFor(Object[] selectionArray) {
+		if (selectionArray.length < 1)
+			return false;
+
+		for (int i = 0; i < selectionArray.length; i++) {
+			Set children = ElementUtils.getIUs(selectionArray[i]);
+			if (children.isEmpty())
+				return false;
 		}
+		return true;
+
 	}
 
 	protected String getTaskName() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
index 9823620..31ae3e9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/ProfileModificationAction.java
@@ -12,15 +12,13 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
 import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.List;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.IProfileChooser;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.*;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
@@ -107,22 +105,8 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 
 	protected abstract String getTaskName();
 
-	protected IInstallableUnit getIU(Object element) {
-		return (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
-
-	}
-
 	protected IInstallableUnit[] getSelectedIUs() {
-		List elements = getStructuredSelection().toList();
-		List iusList = new ArrayList(elements.size());
-
-		for (int i = 0; i < elements.size(); i++) {
-			IInstallableUnit iu = getIU(elements.get(i));
-			if (iu != null)
-				iusList.add(iu);
-		}
-
-		return (IInstallableUnit[]) iusList.toArray(new IInstallableUnit[iusList.size()]);
+		return ElementUtils.getIUs(getStructuredSelection().toArray());
 	}
 
 	protected LicenseManager getLicenseManager() {
@@ -141,4 +125,9 @@ public abstract class ProfileModificationAction extends ProvisioningAction {
 		return policies;
 	}
 
+	protected final void checkEnablement(Object[] selections) {
+		setEnabled(isEnabledFor(selections) && !ProvisioningOperationRunner.hasScheduledOperationsFor(profileId));
+	}
+
+	protected abstract boolean isEnabledFor(Object[] selections);
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RevertAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RevertAction.java
index 808fe16..ed358ec 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RevertAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/RevertAction.java
@@ -11,16 +11,17 @@
 
 package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
+import java.util.Set;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policies;
 import org.eclipse.jface.viewers.ISelectionProvider;
-import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.swt.widgets.Shell;
 
 public class RevertAction extends ProfileModificationAction {
@@ -43,18 +44,20 @@ public class RevertAction extends ProfileModificationAction {
 	}
 
 	/*
-	 *  Overridden to enable only on single selections with a profile IU.
+	 * Overridden to only allow selection of single rollback IU's
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.provisional.p2.ui.actions.ProvisioningAction#structuredSelectionChanged(org.eclipse.jface.viewers.IStructuredSelection)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.actions.ProfileModificationAction#isEnabledFor(java.lang.Object[])
 	 */
-	protected void structuredSelectionChanged(IStructuredSelection selection) {
-		Object[] selectionArray = selection.toArray();
+	protected boolean isEnabledFor(Object[] selectionArray) {
 		if (selectionArray.length == 1) {
-			IInstallableUnit iu = getIU(selectionArray[0]);
-			setEnabled(iu != null && Boolean.valueOf(iu.getProperty(IInstallableUnit.PROP_TYPE_PROFILE)).booleanValue());
-		} else {
-			setEnabled(false);
+			Set ius = ElementUtils.getIUs(selectionArray[0]);
+			if (ius.size() == 1) {
+				Object element = ius.iterator().next();
+				if (element instanceof IInstallableUnit)
+					return Boolean.valueOf(((IInstallableUnit) element).getProperty(IInstallableUnit.PROP_TYPE_PROFILE)).booleanValue();
+			}
 		}
+		return false;
 	}
 
 	protected String getTaskName() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
index a8348b9..845dfcc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
@@ -24,7 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  * 
  * @since 3.4
  */
-public class CategoryElement extends RemoteQueriedElement implements IUElement {
+public class CategoryElement extends RemoteQueriedElement implements IUElement, IUContainerElement {
 
 	private ArrayList ius = new ArrayList(1);
 
@@ -97,4 +97,11 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 		}
 		return (RequiredCapability[]) capabilities.toArray(new RequiredCapability[capabilities.size()]);
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.IUContainerElement#getIUs()
+	 */
+	public IInstallableUnit[] getIUs() {
+		return ElementUtils.getIUs(getChildren(this));
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java
new file mode 100644
index 0000000..28f2b08
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ElementUtils.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.provisional.p2.ui.model;
+
+import java.util.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+
+/**
+ * Utility methods for manipulating model elements.
+ * 
+ * @since 3.4
+ *
+ */
+public class ElementUtils {
+	public static IInstallableUnit[] getIUs(Object[] elements) {
+		if (elements == null || elements.length == 0)
+			return new IInstallableUnit[0];
+		Set iuChildren = new HashSet(elements.length);
+		for (int i = 0; i < elements.length; i++) {
+			iuChildren.addAll(getIUs(elements[i]));
+		}
+		return (IInstallableUnit[]) iuChildren.toArray(new IInstallableUnit[iuChildren.size()]);
+	}
+
+	public static Set getIUs(Object element) {
+		Set ius = new HashSet();
+		// Check first for a container.  Elements like categories are both
+		// a container and an IU, and the container aspect is what we want
+		// when we want to find out which IU's to manipulate.
+		if (element instanceof IUContainerElement) {
+			ius.addAll(Arrays.asList(((IUContainerElement) element).getIUs()));
+		} else if (element instanceof IUElement) {
+			ius.add(((IUElement) element).getIU());
+		} else {
+			IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
+			if (iu != null)
+				ius.add(iu);
+		}
+		return ius;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUContainerElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUContainerElement.java
new file mode 100644
index 0000000..9432d16
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/IUContainerElement.java
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui.model;
+
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+
+/**
+ * Interface for elements that contain IU's.
+ * 
+ * @since 3.4
+ */
+public interface IUContainerElement {
+
+	public IInstallableUnit[] getIUs();
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
index 10c702d..6787f0e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
@@ -16,6 +16,7 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
@@ -29,7 +30,7 @@ import org.eclipse.osgi.util.NLS;
  * 
  * @since 3.4
  */
-public class MetadataRepositoryElement extends RemoteQueriedElement implements RepositoryElement {
+public class MetadataRepositoryElement extends RemoteQueriedElement implements RepositoryElement, IUContainerElement {
 
 	URL url;
 
@@ -133,4 +134,16 @@ public class MetadataRepositoryElement extends RemoteQueriedElement implements R
 			return ""; //$NON-NLS-1$
 		}
 	}
+
+	/* 
+	 * This method is used eagerly by actions to perform selection validation, so
+	 * we do not answer the IU's unless we have already loaded the repository.
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.IUContainerElement#getIUs()
+	 */
+	public IInstallableUnit[] getIUs() {
+		if (!hasQueryable())
+			return new IInstallableUnit[0];
+		return ElementUtils.getIUs(getChildren(this));
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
index 7e476df..bbc4763 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
@@ -274,9 +274,4 @@ public class ProvisioningUtil {
 		}
 		return director;
 	}
-
-	public static boolean isCategory(IInstallableUnit iu) {
-		String isCategory = iu.getProperty(IInstallableUnit.PROP_TYPE_CATEGORY);
-		return isCategory != null && Boolean.valueOf(isCategory).booleanValue();
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
index 7ea766e..fa7a620 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AvailableIUCollector.java
@@ -15,7 +15,6 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.CategoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.QueriedElementCollector;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 
 /**
@@ -54,7 +53,8 @@ public class AvailableIUCollector extends QueriedElementCollector {
 	}
 
 	protected boolean isCategory(IInstallableUnit iu) {
-		return ProvisioningUtil.isCategory(iu);
+		String isCategory = iu.getProperty(IInstallableUnit.PROP_TYPE_CATEGORY);
+		return isCategory != null && Boolean.valueOf(isCategory).booleanValue();
 	}
 
 	protected boolean makeCategory() {

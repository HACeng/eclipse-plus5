commit d3decf5665a66dbd38a632457fbf77b8f0753cf6
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 16:34:39 2013 +0100

    bug 418662 - Get rid of compile warnings in official build
    
    framework admin
    
    Change-Id: I770e1b05b78d2917c989ec1f2cc62b2612c21cd4
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

1	1	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Activator.java
32	30	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/SimpleBundlesState.java
51	51	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
3	3	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/ConfigData.java
2	2	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/FrameworkAdminRuntimeException.java
5	5	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/LauncherData.java
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Activator.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Activator.java
index 733bdcb..ac9b6d3 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Activator.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Activator.java
@@ -40,7 +40,7 @@ public class Activator implements BundleActivator {
 	public static PluginConverter acquirePluginConverter() {
 		if (bundleContext == null)
 			return null;
-		ServiceReference reference = bundleContext.getServiceReference(PluginConverter.class.getName());
+		ServiceReference<?> reference = bundleContext.getServiceReference(PluginConverter.class.getName());
 		if (reference == null)
 			return null;
 		PluginConverter result = (PluginConverter) bundleContext.getService(reference);
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/SimpleBundlesState.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/SimpleBundlesState.java
index ee77bd8..7855ca3 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/SimpleBundlesState.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/SimpleBundlesState.java
@@ -38,7 +38,7 @@ public class SimpleBundlesState implements BundlesState {
 	 */
 	public static void checkAvailability(FrameworkAdmin fwAdmin) throws FrameworkAdminRuntimeException {
 		if (!fwAdmin.isActive())
-			throw new FrameworkAdminRuntimeException("FrameworkAdmin creates this object is no more available.", FrameworkAdminRuntimeException.FRAMEWORKADMIN_UNAVAILABLE);
+			throw new FrameworkAdminRuntimeException("FrameworkAdmin creates this object is no more available.", FrameworkAdminRuntimeException.FRAMEWORKADMIN_UNAVAILABLE); //$NON-NLS-1$
 	}
 
 	/**
@@ -58,7 +58,7 @@ public class SimpleBundlesState implements BundlesState {
 	private final String systemBundleName;
 
 	private final String systemBundleVendor;
-	List bundleInfosList = new LinkedList();
+	List<BundleInfo> bundleInfosList = new LinkedList<BundleInfo>();
 
 	FrameworkAdmin fwAdmin = null;
 
@@ -110,7 +110,7 @@ public class SimpleBundlesState implements BundlesState {
 
 	public BundleInfo[] getExpectedState() throws FrameworkAdminRuntimeException {
 		if (!fwAdmin.isActive())
-			throw new FrameworkAdminRuntimeException("FrameworkAdmin creates this object is no more available.", FrameworkAdminRuntimeException.FRAMEWORKADMIN_UNAVAILABLE);
+			throw new FrameworkAdminRuntimeException("FrameworkAdmin creates this object is no more available.", FrameworkAdminRuntimeException.FRAMEWORKADMIN_UNAVAILABLE); //$NON-NLS-1$
 		return Utils.getBundleInfosFromList(this.bundleInfosList);
 	}
 
@@ -126,21 +126,21 @@ public class SimpleBundlesState implements BundlesState {
 			return new BundleInfo[] {this.getSystemBundle()};
 
 		String[] clauses = Utils.getClauses(requiredBundles);
-		List list = new LinkedList();
+		List<String> list = new LinkedList<String>();
 		for (int i = 0; i < clauses.length; i++)
 			list.add(Utils.getPathFromClause(clauses[i]));
 
-		List ret = new LinkedList();
+		List<BundleInfo> ret = new LinkedList<BundleInfo>();
 		ret.add(this.getSystemBundle());
-		for (Iterator ite = this.bundleInfosList.iterator(); ite.hasNext();) {
-			BundleInfo currentBInfo = (BundleInfo) ite.next();
+		for (Iterator<BundleInfo> ite = this.bundleInfosList.iterator(); ite.hasNext();) {
+			BundleInfo currentBInfo = ite.next();
 			URI currentLocation = currentBInfo.getLocation();
 			String currentSymbolicName = Utils.getManifestMainAttributes(currentLocation, Constants.BUNDLE_SYMBOLICNAME);
 			if (currentSymbolicName == null)
 				continue;
 			currentSymbolicName = Utils.getPathFromClause(currentSymbolicName);
-			for (Iterator ite2 = list.iterator(); ite2.hasNext();) {
-				String symbolicName = (String) ite2.next();
+			for (Iterator<String> ite2 = list.iterator(); ite2.hasNext();) {
+				String symbolicName = ite2.next();
 				if (symbolicName.equals(currentSymbolicName)) {
 					ret.add(currentBInfo);
 					break;
@@ -152,8 +152,8 @@ public class SimpleBundlesState implements BundlesState {
 
 	public BundleInfo getSystemBundle() {
 		if (this.systemBundleSymbolicName == null) {
-			for (Iterator ite = this.bundleInfosList.iterator(); ite.hasNext();) {
-				BundleInfo bInfo = (BundleInfo) ite.next();
+			for (Iterator<BundleInfo> ite = this.bundleInfosList.iterator(); ite.hasNext();) {
+				BundleInfo bInfo = ite.next();
 				//			if (bInfo.getStartLevel() != 1)
 				//				return null;;
 				URI location = bInfo.getLocation();
@@ -166,8 +166,8 @@ public class SimpleBundlesState implements BundlesState {
 			}
 			return null;
 		}
-		for (Iterator ite = this.bundleInfosList.iterator(); ite.hasNext();) {
-			BundleInfo bInfo = (BundleInfo) ite.next();
+		for (Iterator<BundleInfo> ite = this.bundleInfosList.iterator(); ite.hasNext();) {
+			BundleInfo bInfo = ite.next();
 			URI location = bInfo.getLocation();
 			String symbolicName = Utils.getManifestMainAttributes(location, Constants.BUNDLE_SYMBOLICNAME);
 			symbolicName = Utils.getPathFromClause(symbolicName);
@@ -177,14 +177,16 @@ public class SimpleBundlesState implements BundlesState {
 		return null;
 	}
 
+	@SuppressWarnings("unchecked")
 	public BundleInfo[] getSystemFragmentedBundles() {
 		BundleInfo systemBInfo = this.getSystemBundle();
 		if (systemBInfo == null)
 			return NULL_BUNDLEINFOS;
 
+		@SuppressWarnings("rawtypes")
 		List list = new LinkedList();
-		for (Iterator ite = this.bundleInfosList.iterator(); ite.hasNext();) {
-			BundleInfo bInfo = (BundleInfo) ite.next();
+		for (Iterator<BundleInfo> ite = this.bundleInfosList.iterator(); ite.hasNext();) {
+			BundleInfo bInfo = ite.next();
 			URI location = bInfo.getLocation();
 			String manifestVersion = Utils.getManifestMainAttributes(location, Constants.BUNDLE_MANIFESTVERSION);
 			if (manifestVersion == null)
@@ -211,7 +213,7 @@ public class SimpleBundlesState implements BundlesState {
 	}
 
 	public String[] getUnsatisfiedConstraints(BundleInfo bInfo) throws FrameworkAdminRuntimeException {
-		throw new FrameworkAdminRuntimeException("getUnsatisfiedConstraints(BundleInfo bInfo) is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION);
+		throw new FrameworkAdminRuntimeException("getUnsatisfiedConstraints(BundleInfo bInfo) is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION); //$NON-NLS-1$
 	}
 
 	private void initialize() {
@@ -221,7 +223,7 @@ public class SimpleBundlesState implements BundlesState {
 		File fwJar = getFwJar(launcherData);
 
 		if (fwJar == null)
-			throw new IllegalStateException("launcherData.getLauncherConfigFile() == null && fwJar is not set.");
+			throw new IllegalStateException("launcherData.getLauncherConfigFile() == null && fwJar is not set."); //$NON-NLS-1$
 		// No fw persistent data location is taken into consideration.
 
 		BundleInfo[] bInfos = configData.getBundles();
@@ -238,25 +240,25 @@ public class SimpleBundlesState implements BundlesState {
 	public void installBundle(BundleInfo bInfo) throws FrameworkAdminRuntimeException {
 
 		URI newLocation = bInfo.getLocation();
-		Dictionary newManifest = Utils.getOSGiManifest(newLocation);
+		Dictionary<String, String> newManifest = Utils.getOSGiManifest(newLocation);
 		if (newManifest == null) {
 			// TODO log something here
 			return;
 		}
-		String newSymbolicName = (String) newManifest.get(Constants.BUNDLE_SYMBOLICNAME);
-		String newVersion = (String) newManifest.get(Constants.BUNDLE_VERSION);
+		String newSymbolicName = newManifest.get(Constants.BUNDLE_SYMBOLICNAME);
+		String newVersion = newManifest.get(Constants.BUNDLE_VERSION);
 		//System.out.println("> currentInstalledBundles.length=" + currentInstalledBundles.length);
 		boolean found = false;
-		for (Iterator ite = this.bundleInfosList.iterator(); ite.hasNext();) {
-			BundleInfo currentBInfo = (BundleInfo) ite.next();
+		for (Iterator<BundleInfo> ite = this.bundleInfosList.iterator(); ite.hasNext();) {
+			BundleInfo currentBInfo = ite.next();
 			URI location = currentBInfo.getLocation();
 			if (newLocation.equals(location)) {
 				found = true;
 				break;
 			}
-			Dictionary manifest = Utils.getOSGiManifest(location);
-			String symbolicName = (String) manifest.get(Constants.BUNDLE_SYMBOLICNAME);
-			String version = (String) manifest.get(Constants.BUNDLE_VERSION);
+			Dictionary<String, String> manifest = Utils.getOSGiManifest(location);
+			String symbolicName = manifest.get(Constants.BUNDLE_SYMBOLICNAME);
+			String version = manifest.get(Constants.BUNDLE_VERSION);
 			if (newSymbolicName != null && newVersion != null)
 				if (newSymbolicName.equals(symbolicName) && newVersion.equals(version)) {
 					found = true;
@@ -300,23 +302,23 @@ public class SimpleBundlesState implements BundlesState {
 	}
 
 	public boolean isResolved() throws FrameworkAdminRuntimeException {
-		throw new FrameworkAdminRuntimeException("isResolved() is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION);
+		throw new FrameworkAdminRuntimeException("isResolved() is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION); //$NON-NLS-1$
 	}
 
 	public boolean isResolved(BundleInfo bInfo) throws FrameworkAdminRuntimeException {
-		throw new FrameworkAdminRuntimeException("isResolved(BundleInfo bInfo) is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION);
+		throw new FrameworkAdminRuntimeException("isResolved(BundleInfo bInfo) is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION); //$NON-NLS-1$
 	}
 
 	public void resolve(boolean increment) throws FrameworkAdminRuntimeException {
-		throw new FrameworkAdminRuntimeException("resolve(boolean increment) is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION);
+		throw new FrameworkAdminRuntimeException("resolve(boolean increment) is not supported in this implementation", FrameworkAdminRuntimeException.UNSUPPORTED_OPERATION); //$NON-NLS-1$
 	}
 
 	public void uninstallBundle(BundleInfo bInfo) throws FrameworkAdminRuntimeException {
 		URI targetLocation = bInfo.getLocation();
 		int index = -1;
-		for (Iterator ite = this.bundleInfosList.iterator(); ite.hasNext();) {
+		for (Iterator<BundleInfo> ite = this.bundleInfosList.iterator(); ite.hasNext();) {
 			index++;
-			BundleInfo currentBInfo = (BundleInfo) ite.next();
+			BundleInfo currentBInfo = ite.next();
 			URI location = currentBInfo.getLocation();
 			if (targetLocation.equals(location)) {
 				break;
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
index 6aaf2af..6cdf21b 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
@@ -46,7 +46,7 @@ public class Utils {
 			//			printoutProperties(System.out, "to", to);
 			//			printoutProperties(System.out, "from", from);
 
-			for (Enumeration enumeration = from.keys(); enumeration.hasMoreElements();) {
+			for (Enumeration<Object> enumeration = from.keys(); enumeration.hasMoreElements();) {
 				String key = (String) enumeration.nextElement();
 				to.setProperty(key, from.getProperty(key));
 			}
@@ -56,7 +56,7 @@ public class Utils {
 	}
 
 	//Return a dictionary representing a manifest. The data may result from plugin.xml conversion  
-	private static Dictionary basicLoadManifest(File bundleLocation) {
+	private static Dictionary<String, String> basicLoadManifest(File bundleLocation) {
 		InputStream manifestStream = null;
 		ZipFile jarFile = null;
 		try {
@@ -82,7 +82,7 @@ public class Utils {
 				return convertPluginManifest(bundleLocation, true);
 
 			try {
-				Map manifest = ManifestElement.parseBundleManifest(manifestStream, null);
+				Map<String, String> manifest = ManifestElement.parseBundleManifest(manifestStream, null);
 				// add this check to handle the case were we read a non-OSGi manifest
 				if (manifest.get(Constants.BUNDLE_SYMBOLICNAME) == null)
 					return convertPluginManifest(bundleLocation, true);
@@ -110,43 +110,43 @@ public class Utils {
 
 	public static void checkAbsoluteDir(File file, String dirName) throws IllegalArgumentException {
 		if (file == null)
-			throw new IllegalArgumentException(dirName + " is null");
+			throw new IllegalArgumentException(dirName + " is null"); //$NON-NLS-1$
 		if (!file.isAbsolute())
-			throw new IllegalArgumentException(dirName + " is not absolute path. file=" + file.getAbsolutePath());
+			throw new IllegalArgumentException(dirName + " is not absolute path. file=" + file.getAbsolutePath()); //$NON-NLS-1$
 		if (!file.isDirectory())
-			throw new IllegalArgumentException(dirName + " is not directory. file=" + file.getAbsolutePath());
+			throw new IllegalArgumentException(dirName + " is not directory. file=" + file.getAbsolutePath()); //$NON-NLS-1$
 	}
 
 	public static void checkAbsoluteFile(File file, String dirName) {//throws ManipulatorException {
 		if (file == null)
-			throw new IllegalArgumentException(dirName + " is null");
+			throw new IllegalArgumentException(dirName + " is null"); //$NON-NLS-1$
 		if (!file.isAbsolute())
-			throw new IllegalArgumentException(dirName + " is not absolute path. file=" + file.getAbsolutePath());
+			throw new IllegalArgumentException(dirName + " is not absolute path. file=" + file.getAbsolutePath()); //$NON-NLS-1$
 		if (file.isDirectory())
-			throw new IllegalArgumentException(dirName + " is not file but directory");
+			throw new IllegalArgumentException(dirName + " is not file but directory"); //$NON-NLS-1$
 	}
 
 	public static URL checkFullUrl(URL url, String urlName) throws IllegalArgumentException {//throws ManipulatorException {
 		if (url == null)
-			throw new IllegalArgumentException(urlName + " is null");
+			throw new IllegalArgumentException(urlName + " is null"); //$NON-NLS-1$
 		if (!url.getProtocol().endsWith("file")) //$NON-NLS-1$
 			return url;
 		File file = new File(url.getFile());
 		if (!file.isAbsolute())
-			throw new IllegalArgumentException(urlName + "(" + url + ") does not have absolute path");
+			throw new IllegalArgumentException(urlName + "(" + url + ") does not have absolute path"); //$NON-NLS-1$ //$NON-NLS-2$
 		if (file.getAbsolutePath().startsWith(PATH_SEP))
 			return url;
 		try {
 			return getUrl("file", null, PATH_SEP + file.getAbsolutePath()); //$NON-NLS-1$
 		} catch (MalformedURLException e) {
-			throw new IllegalArgumentException(urlName + "(" + "file:" + PATH_SEP + file.getAbsolutePath() + ") is not fully quallified");
+			throw new IllegalArgumentException(urlName + "(" + "file:" + PATH_SEP + file.getAbsolutePath() + ") is not fully quallified"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		}
 	}
 
 	/*
 	 * Copied from BundleDescriptionFactory in the metadata generator.
 	 */
-	private static Dictionary convertPluginManifest(File bundleLocation, boolean logConversionException) {
+	private static Dictionary<String, String> convertPluginManifest(File bundleLocation, boolean logConversionException) {
 		PluginConverter converter;
 		try {
 			converter = org.eclipse.equinox.internal.frameworkadmin.utils.Activator.acquirePluginConverter();
@@ -162,7 +162,7 @@ public class Utils {
 			if (!new File(bundleLocation, PLUGIN_MANIFEST).exists() && !new File(bundleLocation, FRAGMENT_MANIFEST).exists())
 				return null;
 			if (logConversionException) {
-				IStatus status = new Status(IStatus.WARNING, "org.eclipse.equinox.frameworkadmin", 0, "Error converting bundle manifest.", convertException);
+				IStatus status = new Status(IStatus.WARNING, "org.eclipse.equinox.frameworkadmin", 0, "Error converting bundle manifest.", convertException); //$NON-NLS-1$ //$NON-NLS-2$
 				System.out.println(status);
 				//TODO Need to find a way to get a logging service to log
 			}
@@ -179,7 +179,7 @@ public class Utils {
 		return parent.mkdirs();
 	}
 
-	public static BundleInfo[] getBundleInfosFromList(List list) {
+	public static BundleInfo[] getBundleInfosFromList(List<BundleInfo> list) {
 		if (list == null)
 			return new BundleInfo[0];
 		BundleInfo[] ret = new BundleInfo[list.size()];
@@ -189,7 +189,7 @@ public class Utils {
 
 	public static String[] getClauses(String header) {
 		StringTokenizer token = new StringTokenizer(header, ","); //$NON-NLS-1$
-		List list = new LinkedList();
+		List<String> list = new LinkedList<String>();
 		while (token.hasMoreTokens()) {
 			list.add(token.nextToken());
 		}
@@ -203,13 +203,13 @@ public class Utils {
 	}
 
 	public static String getManifestMainAttributes(URI location, String name) {
-		Dictionary manifest = Utils.getOSGiManifest(location);
+		Dictionary<String, String> manifest = Utils.getOSGiManifest(location);
 		if (manifest == null)
-			throw new RuntimeException("Unable to locate bundle manifest: " + location);
-		return (String) manifest.get(name);
+			throw new RuntimeException("Unable to locate bundle manifest: " + location); //$NON-NLS-1$
+		return manifest.get(name);
 	}
 
-	public static Dictionary getOSGiManifest(URI location) {
+	public static Dictionary<String, String> getOSGiManifest(URI location) {
 		if (location == null)
 			return null;
 		// if we have a file-based URL that doesn't end in ".jar" then...
@@ -226,7 +226,7 @@ public class Utils {
 				if (entry == null)
 					return null;
 
-				Map manifest = ManifestElement.parseBundleManifest(jar.getInputStream(entry), null);
+				Map<String, String> manifest = ManifestElement.parseBundleManifest(jar.getInputStream(entry), null);
 				// if we have a JAR'd bundle that has a non-OSGi manifest file (like
 				// the ones produced by Ant, then try and convert the plugin.xml
 				if (manifest.get(Constants.BUNDLE_SYMBOLICNAME) == null) {
@@ -244,8 +244,8 @@ public class Utils {
 				jar.close();
 			}
 		} catch (IOException e) {
-			if (System.getProperty("osgi.debug") != null) {
-				System.err.println("location=" + location);
+			if (System.getProperty("osgi.debug") != null) { //$NON-NLS-1$
+				System.err.println("location=" + location); //$NON-NLS-1$
 				e.printStackTrace();
 			}
 		}
@@ -255,8 +255,8 @@ public class Utils {
 	public static String getPathFromClause(String clause) {
 		if (clause == null)
 			return null;
-		if (clause.indexOf(";") != -1)
-			clause = clause.substring(0, clause.indexOf(";"));
+		if (clause.indexOf(";") != -1) //$NON-NLS-1$
+			clause = clause.substring(0, clause.indexOf(";")); //$NON-NLS-1$
 		return clause.trim();
 	}
 
@@ -276,7 +276,7 @@ public class Utils {
 
 		StringBuffer sb = new StringBuffer();
 		for (int i = index + 1; i < fromTokens.length; i++)
-			sb.append(".." + PATH_SEP);
+			sb.append(".." + PATH_SEP); //$NON-NLS-1$
 
 		for (int i = index + 1; i < targetTokens.length; i++)
 			if (i != targetTokens.length - 1)
@@ -313,7 +313,7 @@ public class Utils {
 	public static String[] getTokens(String msg, String delim, boolean returnDelims) {
 		StringTokenizer targetST = new StringTokenizer(msg, delim, returnDelims);
 		String[] tokens = new String[targetST.countTokens()];
-		ArrayList list = new ArrayList(targetST.countTokens());
+		ArrayList<String> list = new ArrayList<String>(targetST.countTokens());
 		while (targetST.hasMoreTokens()) {
 			list.add(targetST.nextToken());
 		}
@@ -322,12 +322,12 @@ public class Utils {
 	}
 
 	public static URL getUrl(String protocol, String host, String file) throws MalformedURLException {// throws ManipulatorException {
-		file = Utils.replaceAll(file, File.separator, "/");
+		file = Utils.replaceAll(file, File.separator, "/"); //$NON-NLS-1$
 		return new URL(protocol, host, file);
 	}
 
 	public static URL getUrlInFull(String path, URL from) throws MalformedURLException {//throws ManipulatorException {
-		Utils.checkFullUrl(from, "from");
+		Utils.checkFullUrl(from, "from"); //$NON-NLS-1$
 		path = Utils.replaceAll(path, File.separator, "/"); //$NON-NLS-1$
 		//System.out.println("from.toExternalForm()=" + from.toExternalForm());
 		String fromSt = Utils.removeLastCh(from.toExternalForm(), '/');
@@ -339,11 +339,11 @@ public class Utils {
 		return new URL(fromSt + "/" + path); //$NON-NLS-1$
 	}
 
-	private static Properties manifestToProperties(Map d) {
-		Iterator iter = d.keySet().iterator();
-		Properties result = new Properties();
+	private static Dictionary<String, String> manifestToProperties(Map<String, String> d) {
+		Iterator<String> iter = d.keySet().iterator();
+		Dictionary<String, String> result = new Hashtable<String, String>();
 		while (iter.hasNext()) {
-			String key = (String) iter.next();
+			String key = iter.next();
 			result.put(key, d.get(key));
 		}
 		return result;
@@ -358,14 +358,14 @@ public class Utils {
 	 */
 	public static void printoutProperties(PrintStream ps, String name, Properties props) {
 		if (props == null || props.size() == 0) {
-			ps.println("Props(" + name + ") is empty");
+			ps.println("Props(" + name + ") is empty"); //$NON-NLS-1$ //$NON-NLS-2$
 			return;
 		}
-		ps.println("Props(" + name + ")=");
-		for (Enumeration enumeration = props.keys(); enumeration.hasMoreElements();) {
+		ps.println("Props(" + name + ")="); //$NON-NLS-1$ //$NON-NLS-2$
+		for (Enumeration<Object> enumeration = props.keys(); enumeration.hasMoreElements();) {
 			String key = (String) enumeration.nextElement();
-			ps.print("\tkey=" + key);
-			ps.println("\tvalue=" + props.getProperty(key));
+			ps.print("\tkey=" + key); //$NON-NLS-1$
+			ps.println("\tvalue=" + props.getProperty(key)); //$NON-NLS-1$
 		}
 	}
 
@@ -394,26 +394,26 @@ public class Utils {
 	 * @return sorted array of BundleInfos
 	 */
 	public static BundleInfo[] sortBundleInfos(BundleInfo[] bInfos, int initialBSL) {
-		SortedMap bslToList = new TreeMap();
+		SortedMap<Integer, List<BundleInfo>> bslToList = new TreeMap<Integer, List<BundleInfo>>();
 		for (int i = 0; i < bInfos.length; i++) {
 			Integer sL = new Integer(bInfos[i].getStartLevel());
 			if (sL.intValue() == BundleInfo.NO_LEVEL)
 				sL = new Integer(initialBSL);
-			List list = (List) bslToList.get(sL);
+			List<BundleInfo> list = bslToList.get(sL);
 			if (list == null) {
-				list = new LinkedList();
+				list = new LinkedList<BundleInfo>();
 				bslToList.put(sL, list);
 			}
 			list.add(bInfos[i]);
 		}
 
 		// bslToList is sorted by the key (StartLevel).
-		List bundleInfoList = new LinkedList();
-		for (Iterator ite = bslToList.keySet().iterator(); ite.hasNext();) {
-			Integer sL = (Integer) ite.next();
-			List list = (List) bslToList.get(sL);
-			for (Iterator ite2 = list.iterator(); ite2.hasNext();) {
-				BundleInfo bInfo = (BundleInfo) ite2.next();
+		List<BundleInfo> bundleInfoList = new LinkedList<BundleInfo>();
+		for (Iterator<Integer> ite = bslToList.keySet().iterator(); ite.hasNext();) {
+			Integer sL = ite.next();
+			List<BundleInfo> list = bslToList.get(sL);
+			for (Iterator<BundleInfo> ite2 = list.iterator(); ite2.hasNext();) {
+				BundleInfo bInfo = ite2.next();
 				bundleInfoList.add(bInfo);
 			}
 		}
@@ -428,13 +428,13 @@ public class Utils {
 	 */
 	public static String toStringProperties(String name, Properties props) {
 		if (props == null || props.size() == 0) {
-			return "Props(" + name + ") is empty\n";
+			return "Props(" + name + ") is empty\n"; //$NON-NLS-1$ //$NON-NLS-2$
 		}
 		StringBuffer sb = new StringBuffer();
-		sb.append("Props(" + name + ") is \n");
-		for (Enumeration enumeration = props.keys(); enumeration.hasMoreElements();) {
+		sb.append("Props(" + name + ") is \n"); //$NON-NLS-1$ //$NON-NLS-2$
+		for (Enumeration<Object> enumeration = props.keys(); enumeration.hasMoreElements();) {
 			String key = (String) enumeration.nextElement();
-			sb.append("\tkey=" + key + "\tvalue=" + props.getProperty(key) + "\n");
+			sb.append("\tkey=" + key + "\tvalue=" + props.getProperty(key) + "\n"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		}
 		return sb.toString();
 	}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/ConfigData.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/ConfigData.java
index 55fe4a3..fd15365 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/ConfigData.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/ConfigData.java
@@ -30,7 +30,7 @@ public class ConfigData {
 	private int beginningFwStartLevel = BundleInfo.NO_LEVEL;
 	private int initialBundleStartLevel = BundleInfo.NO_LEVEL;
 	// List of BundleInfo
-	private LinkedHashSet bundlesList = new LinkedHashSet();
+	private LinkedHashSet<BundleInfo> bundlesList = new LinkedHashSet<BundleInfo>();
 
 	private Properties properties = new Properties();
 
@@ -149,7 +149,7 @@ public class ConfigData {
 		else {
 			sb.append("bundlesList=\n"); //$NON-NLS-1$
 			int i = 0;
-			for (Iterator iter = bundlesList.iterator(); iter.hasNext();) {
+			for (Iterator<BundleInfo> iter = bundlesList.iterator(); iter.hasNext();) {
 				sb.append("\tbundlesList[" + i + "]=" + iter.next().toString() + "\n"); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
 				i++;
 			}
@@ -164,7 +164,7 @@ public class ConfigData {
 	private static void setPropsStrings(StringBuffer sb, Properties props) {
 		if (props.size() > 0) {
 			sb.append("\n"); //$NON-NLS-1$
-			for (Enumeration enumeration = props.keys(); enumeration.hasMoreElements();) {
+			for (Enumeration<Object> enumeration = props.keys(); enumeration.hasMoreElements();) {
 				String key = (String) enumeration.nextElement();
 				String value = props.getProperty(key);
 				if (value == null || value.equals("")) //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/FrameworkAdminRuntimeException.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/FrameworkAdminRuntimeException.java
index dbe1515..dca066e 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/FrameworkAdminRuntimeException.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/FrameworkAdminRuntimeException.java
@@ -14,8 +14,8 @@ package org.eclipse.equinox.internal.provisional.frameworkadmin;
 public class FrameworkAdminRuntimeException extends RuntimeException {
 
 	private static final long serialVersionUID = -2292498677000772317L;
-	public static final String FRAMEWORKADMIN_UNAVAILABLE = "FrameworkAdmin service created this object is not available any more";
-	public static final String UNSUPPORTED_OPERATION = "This implementation doesn't support this method.";
+	public static final String FRAMEWORKADMIN_UNAVAILABLE = "FrameworkAdmin service created this object is not available any more"; //$NON-NLS-1$
+	public static final String UNSUPPORTED_OPERATION = "This implementation doesn't support this method."; //$NON-NLS-1$
 
 	private final String reason;
 	private Throwable cause;
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/LauncherData.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/LauncherData.java
index 7f81a48..fee1d37 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/LauncherData.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/provisional/frameworkadmin/LauncherData.java
@@ -25,8 +25,8 @@ import java.util.*;
 public class LauncherData {
 	private File fwPersistentDataLocation = null;
 	private File jvm = null;
-	private List jvmArgs = new LinkedList();
-	private List programArgs = new LinkedList();
+	private List<String> jvmArgs = new LinkedList<String>();
+	private List<String> programArgs = new LinkedList<String>();
 
 	private boolean clean;
 	private File fwConfigLocation;
@@ -152,7 +152,7 @@ public class LauncherData {
 
 		programArgs.remove(index);
 		while (index < programArgs.size()) {
-			String next = (String) programArgs.get(index);
+			String next = programArgs.get(index);
 			if (next.charAt(0) == '-')
 				return;
 			programArgs.remove(index);
@@ -231,7 +231,7 @@ public class LauncherData {
 		else {
 			sb.append("jvmArgs=\n"); //$NON-NLS-1$
 			int i = 0;
-			for (Iterator iterator = jvmArgs.iterator(); iterator.hasNext(); iterator.next())
+			for (Iterator<String> iterator = jvmArgs.iterator(); iterator.hasNext(); iterator.next())
 				sb.append("\tjvmArgs[" + i++ + "]=" + iterator + "\n"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 
 		}
@@ -240,7 +240,7 @@ public class LauncherData {
 		else {
 			sb.append("programArgs=\n"); //$NON-NLS-1$
 			int i = 0;
-			for (Iterator iterator = programArgs.iterator(); iterator.hasNext(); iterator.next())
+			for (Iterator<String> iterator = programArgs.iterator(); iterator.hasNext(); iterator.next())
 				sb.append("\tprogramArgs[" + i++ + "]=" + iterator + "\n"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		}
 		sb.append("fwConfigLocation=" + this.fwConfigLocation + "\n"); //$NON-NLS-1$ //$NON-NLS-2$
commit 133e82412ac9c6bcdc06ca1ac5b7faa0e7c7ceb7
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 17:30:50 2013 +0100

    bug 418662 - Get rid of compile warnings in official
    build:org.eclipse.equinox.frameworkadmin.equinox
    
    Change-Id: Ic38817e9e77b7caa67372b650bd78cf4d2591c26
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

1	1	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherImpl.java
27	27	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherParser.java
27	22	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
2	2	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwAdminImpl.java
6	6	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwConfigFileParser.java
7	3	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxManipulatorImpl.java
10	9	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/Log.java
14	14	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/ParserUtils.java
3	3	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/utils/FileUtils.java
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherImpl.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherImpl.java
index 8058023..49b774a 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherImpl.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherImpl.java
@@ -62,7 +62,7 @@ public class EclipseLauncherImpl {
 		Utils.checkAbsoluteFile(launcherData.getFwJar(), "fwJar"); //$NON-NLS-1$
 		Utils.checkAbsoluteDir(cwd, "cwd"); //$NON-NLS-1$
 
-		List cmdList = new LinkedList();
+		List<String> cmdList = new LinkedList<String>();
 		if (launcherData.getJvm() != null)
 			cmdList.add(launcherData.getJvm().getAbsolutePath());
 		else
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherParser.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherParser.java
index 8daad28..87c22c4 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherParser.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EclipseLauncherParser.java
@@ -29,7 +29,7 @@ public class EclipseLauncherParser {
 	public static final String MACOSX_BUNDLED = "macosx-bundled"; //$NON-NLS-1$
 
 	//this figures out the location of the data area on partial data read from the <eclipse>.ini
-	private URI getOSGiInstallArea(List lines, URI base, LauncherData launcherData) {
+	private URI getOSGiInstallArea(List<String> lines, URI base, LauncherData launcherData) {
 		//does the eclipse.ini say anything for osgi.install.area?
 		File osgiInstallArea = ParserUtils.getOSGiInstallArea(lines, null, base);
 		if (osgiInstallArea == null) {
@@ -41,7 +41,7 @@ public class EclipseLauncherParser {
 		return null;
 	}
 
-	private void setInstall(List lines, LauncherData launcherData, File launcherFolder) {
+	private void setInstall(List<String> lines, LauncherData launcherData, File launcherFolder) {
 		if (launcherData.getFwConfigLocation() == null || launcherData.getFwJar() == null) {
 			ParserUtils.removeArgument(EquinoxConstants.OPTION_INSTALL, lines);
 			return;
@@ -62,7 +62,7 @@ public class EclipseLauncherParser {
 		if (!launcherConfigFile.exists())
 			return;
 
-		List lines = FileUtils.loadFile(launcherConfigFile);
+		List<String> lines = FileUtils.loadFile(launcherConfigFile);
 
 		URI launcherFolder = launcherData.getLauncher().getParentFile().toURI();
 		getStartup(lines, launcherFolder);
@@ -83,7 +83,7 @@ public class EclipseLauncherParser {
 		Log.log(LogService.LOG_INFO, NLS.bind(Messages.log_configFile, launcherConfigFile.getAbsolutePath()));
 	}
 
-	private void getFrameworkJar(List lines, URI launcherFolder, LauncherData launcherData) {
+	private void getFrameworkJar(List<String> lines, URI launcherFolder, LauncherData launcherData) {
 		File fwJar = launcherData.getFwJar();
 		if (fwJar != null)
 			return;
@@ -92,14 +92,14 @@ public class EclipseLauncherParser {
 			launcherData.setFwJar(URIUtil.toFile(location));
 	}
 
-	private void getPersistentDataLocation(List lines, URI osgiInstallArea, URI configArea, LauncherData launcherData) {
+	private void getPersistentDataLocation(List<String> lines, URI osgiInstallArea, URI configArea, LauncherData launcherData) {
 		//TODO The setting of the -clean could only do properly once config.ini has been read
 		if (launcherData.getFwPersistentDataLocation() == null) {
 			launcherData.setFwPersistentDataLocation(URIUtil.toFile(configArea), ParserUtils.isArgumentSet(EquinoxConstants.OPTION_CLEAN, lines));
 		}
 	}
 
-	private void getVM(List lines, URI launcherFolder, LauncherData launcherData) {
+	private void getVM(List<String> lines, URI launcherFolder, LauncherData launcherData) {
 		String vm = ParserUtils.getValueForArgument(EquinoxConstants.OPTION_VM, lines);
 		if (vm == null)
 			return;
@@ -115,7 +115,7 @@ public class EclipseLauncherParser {
 		}
 	}
 
-	private void setVM(List lines, File vm, URI launcherFolder) {
+	private void setVM(List<String> lines, File vm, URI launcherFolder) {
 		if (vm == null) {
 			if (ParserUtils.getValueForArgument(EquinoxConstants.OPTION_VM, lines) != null)
 				return;
@@ -140,11 +140,11 @@ public class EclipseLauncherParser {
 		ParserUtils.setValueForArgument(EquinoxConstants.OPTION_VM, FileUtils.toPath(vmRelativePath).replace('\\', '/'), lines);
 	}
 
-	private void getJVMArgs(List lines, LauncherData launcherData) {
-		ArrayList vmargs = new ArrayList(lines.size());
+	private void getJVMArgs(List<String> lines, LauncherData launcherData) {
+		ArrayList<String> vmargs = new ArrayList<String>(lines.size());
 		boolean foundVmArgs = false;
-		for (Iterator iterator = lines.iterator(); iterator.hasNext();) {
-			String line = (String) iterator.next();
+		for (Iterator<String> iterator = lines.iterator(); iterator.hasNext();) {
+			String line = iterator.next();
 			if (!foundVmArgs) {
 				if (EquinoxConstants.OPTION_VMARGS.equals(line))
 					foundVmArgs = true;
@@ -154,10 +154,10 @@ public class EclipseLauncherParser {
 		}
 
 		launcherData.setJvmArgs(null);
-		launcherData.setJvmArgs((String[]) vmargs.toArray(new String[vmargs.size()]));
+		launcherData.setJvmArgs(vmargs.toArray(new String[vmargs.size()]));
 	}
 
-	private void setJVMArgs(List lines, LauncherData launcherData) {
+	private void setJVMArgs(List<String> lines, LauncherData launcherData) {
 		ParserUtils.removeArgument(EquinoxConstants.OPTION_VMARGS, lines);
 		if (launcherData.getJvmArgs() == null || launcherData.getJvmArgs().length == 0)
 			return;
@@ -168,19 +168,19 @@ public class EclipseLauncherParser {
 		}
 	}
 
-	private void getProgramArgs(List lines, LauncherData launcherData) {
-		ArrayList args = new ArrayList(lines.size());
-		for (Iterator iterator = lines.iterator(); iterator.hasNext();) {
-			String line = (String) iterator.next();
+	private void getProgramArgs(List<String> lines, LauncherData launcherData) {
+		ArrayList<String> args = new ArrayList<String>(lines.size());
+		for (Iterator<String> iterator = lines.iterator(); iterator.hasNext();) {
+			String line = iterator.next();
 			if (EquinoxConstants.OPTION_VMARGS.equals(line))
 				break;
 			args.add(line);
 		}
 		launcherData.setProgramArgs(null);
-		launcherData.setProgramArgs((String[]) args.toArray(new String[args.size()]));
+		launcherData.setProgramArgs(args.toArray(new String[args.size()]));
 	}
 
-	private URI getLauncherLibrary(List lines, URI launcherFolder) {
+	private URI getLauncherLibrary(List<String> lines, URI launcherFolder) {
 		String launcherLibrary = ParserUtils.getValueForArgument(EquinoxConstants.OPTION_LAUNCHER_LIBRARY, lines);
 		if (launcherLibrary == null)
 			return null;
@@ -195,7 +195,7 @@ public class EclipseLauncherParser {
 		return result;
 	}
 
-	private void setLauncherLibrary(List lines, URI launcherFolder) {
+	private void setLauncherLibrary(List<String> lines, URI launcherFolder) {
 		String launcherLibrary = ParserUtils.getValueForArgument(EquinoxConstants.OPTION_LAUNCHER_LIBRARY, lines);
 		if (launcherLibrary == null)
 			return;
@@ -209,7 +209,7 @@ public class EclipseLauncherParser {
 		}
 	}
 
-	private URI getConfigurationLocation(List lines, URI osgiInstallArea, LauncherData data) {
+	private URI getConfigurationLocation(List<String> lines, URI osgiInstallArea, LauncherData data) {
 		String configuration = ParserUtils.getValueForArgument(EquinoxConstants.OPTION_CONFIGURATION, lines);
 		if (configuration == null)
 			try {
@@ -230,7 +230,7 @@ public class EclipseLauncherParser {
 		return result;
 	}
 
-	private void setConfigurationLocation(List lines, URI osgiInstallArea, LauncherData data) {
+	private void setConfigurationLocation(List<String> lines, URI osgiInstallArea, LauncherData data) {
 		String result = FileUtils.toPath(URIUtil.makeRelative(data.getFwConfigLocation().toURI(), osgiInstallArea));
 		//We don't write the default
 		if (CONFIGURATION_FOLDER.equals(result)) {
@@ -245,7 +245,7 @@ public class EclipseLauncherParser {
 		return;
 	}
 
-	private URI getStartup(List lines, URI launcherFolder) {
+	private URI getStartup(List<String> lines, URI launcherFolder) {
 		String startup = ParserUtils.getValueForArgument(EquinoxConstants.OPTION_STARTUP, lines);
 		if (startup == null)
 			return null;
@@ -261,7 +261,7 @@ public class EclipseLauncherParser {
 		return result;
 	}
 
-	private void setStartup(List lines, URI launcherFolder) {
+	private void setStartup(List<String> lines, URI launcherFolder) {
 		String startup = ParserUtils.getValueForArgument(EquinoxConstants.OPTION_STARTUP, lines);
 		if (startup == null)
 			return;
@@ -285,7 +285,7 @@ public class EclipseLauncherParser {
 		}
 		//Tweak all the values to make them relative
 		File launcherFolder = launcherData.getLauncher().getParentFile();
-		List newlines = new ArrayList();
+		List<String> newlines = new ArrayList<String>();
 		newlines.addAll(Arrays.asList(launcherData.getProgramArgs()));
 
 		setStartup(newlines, launcherFolder.toURI());
@@ -300,7 +300,7 @@ public class EclipseLauncherParser {
 
 		//We are done, let's update the program args in the launcher data
 		launcherData.setProgramArgs(null);
-		launcherData.setProgramArgs((String[]) newlines.toArray(new String[newlines.size()]));
+		launcherData.setProgramArgs(newlines.toArray(new String[newlines.size()]));
 
 		//append jvm args
 		setJVMArgs(newlines, launcherData);
@@ -320,7 +320,7 @@ public class EclipseLauncherParser {
 			try {
 				bw = new BufferedWriter(new FileWriter(launcherConfigFile));
 				for (int j = 0; j < newlines.size(); j++) {
-					String arg = (String) newlines.get(j);
+					String arg = newlines.get(j);
 					if (arg == null)
 						continue;
 					bw.write(arg);
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
index 1a85744..b7a886b 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
@@ -32,6 +32,7 @@ public class EquinoxBundlesState implements BundlesState {
 	// this internally to be x86_64.
 	private static final String INTERNAL_AMD64 = "amd64"; //$NON-NLS-1$
 	private static final String INTERNAL_ARCH_I386 = "i386"; //$NON-NLS-1$
+	@SuppressWarnings("deprecation")
 	public static final String[] PROPS = {"osgi.os", "osgi.ws", "osgi.nl", "osgi.arch", Constants.FRAMEWORK_SYSTEMPACKAGES, "osgi.resolverMode", Constants.FRAMEWORK_EXECUTIONENVIRONMENT, "osgi.resolveOptional", "osgi.genericAliases"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$
 
 	static boolean checkFullySupported() {
@@ -159,11 +160,12 @@ public class EquinoxBundlesState implements BundlesState {
 	// "osgi.os", "osgi.ws", "osgi.nl", "osgi.arch",
 	// Constants.FRAMEWORK_SYSTEMPACKAGES, "osgi.resolverMode",
 	// Constants.FRAMEWORK_EXECUTIONENVIRONMENT, "osgi.resolveOptional"
+	@SuppressWarnings("deprecation")
 	private Properties setDefaultPlatformProperties() {
 		Properties platformProperties = new Properties();
 		// set default value
 
-		ServiceReference environmentRef = context.getServiceReference(EnvironmentInfo.class);
+		ServiceReference<?> environmentRef = context.getServiceReference(EnvironmentInfo.class);
 		EnvironmentInfo environment = environmentRef == null ? null : (EnvironmentInfo) context.getService(environmentRef);
 		if (environment != null) {
 			try {
@@ -209,15 +211,15 @@ public class EquinoxBundlesState implements BundlesState {
 	State state = null;
 
 	/**
-	 * Map of String->BundleDescription, where the key is the bundle location.
+	 * Map of URI->BundleDescription, where the key is the bundle location.
 	 */
-	private HashMap locationStateIndex = new HashMap();
+	private HashMap<URI, BundleDescription> locationStateIndex = new HashMap<URI, BundleDescription>();
 
 	/**
 	 * Map of String->BundleDescription, where the key is the bundle name
 	 * and version as defined by the {@link #getKey(BundleDescription)} method.
 	 */
-	private HashMap nameVersionStateIndex = new HashMap();
+	private HashMap<String, BundleDescription> nameVersionStateIndex = new HashMap<String, BundleDescription>();
 	private final PlatformAdmin platformAdmin;
 
 	/**
@@ -307,7 +309,7 @@ public class EquinoxBundlesState implements BundlesState {
 	 * @throws IllegalArgumentException
 	 * @throws FrameworkAdminRuntimeException
 	 */
-	private boolean composeState(BundleInfo[] bInfos, Dictionary props, File fwPersistentDataLocation) throws IllegalArgumentException, FrameworkAdminRuntimeException {
+	private boolean composeState(BundleInfo[] bInfos, Dictionary<Object, Object> props, File fwPersistentDataLocation) throws IllegalArgumentException, FrameworkAdminRuntimeException {
 		BundleInfo[] infos = manipulator.getConfigData().getBundles();
 		this.manipulator.getConfigData().setBundles(null);
 		SimpleBundlesState.checkAvailability(fwAdmin);
@@ -411,7 +413,7 @@ public class EquinoxBundlesState implements BundlesState {
 
 	public BundleInfo[] convertState(BundleDescription[] bundles) {
 		BundleInfo[] originalBInfos = manipulator.getConfigData().getBundles();
-		Map bundleInfoMap = new HashMap();
+		Map<URI, BundleInfo> bundleInfoMap = new HashMap<URI, BundleInfo>();
 		for (int i = 0; i < originalBInfos.length; i++) {
 			bundleInfoMap.put(originalBInfos[i].getLocation(), originalBInfos[i]);
 		}
@@ -436,7 +438,7 @@ public class EquinoxBundlesState implements BundlesState {
 				throw new IllegalStateException("BundleDescription conversion problem" + e.getMessage()); //$NON-NLS-1$ //TODO path_fun
 			}
 			String fragmentHost = null;
-			BundleInfo original = (BundleInfo) bundleInfoMap.get(location);
+			BundleInfo original = bundleInfoMap.get(location);
 			if (original != null) {
 				markedAsStarted = original.isMarkedAsStarted();
 				sl = getStartLevel(original.getStartLevel());
@@ -457,7 +459,7 @@ public class EquinoxBundlesState implements BundlesState {
 	}
 
 	public BundleInfo[] getPrerequisteBundles(BundleInfo bInfo) {
-		Set set = new HashSet();
+		Set<BundleDescription> set = new HashSet<BundleDescription>();
 		URI realLocation = bInfo.getLocation();
 		BundleDescription bundle = getBundleByLocation(realLocation);
 		ImportPackageSpecification[] imports = bundle.getImportPackages();
@@ -550,15 +552,15 @@ public class EquinoxBundlesState implements BundlesState {
 		if (getBundleByLocation(realLocation) != null)
 			return;
 
-		Dictionary manifest = Utils.getOSGiManifest(realLocation);
+		Dictionary<String, String> manifest = Utils.getOSGiManifest(realLocation);
 		if (manifest == null)
 			return;
 
-		String newSymbolicName = (String) manifest.get(Constants.BUNDLE_SYMBOLICNAME);
+		String newSymbolicName = manifest.get(Constants.BUNDLE_SYMBOLICNAME);
 		int position = newSymbolicName.indexOf(";"); //$NON-NLS-1$
 		if (position >= 0)
 			newSymbolicName = newSymbolicName.substring(0, position).trim();
-		String newVersion = (String) manifest.get(Constants.BUNDLE_VERSION);
+		String newVersion = manifest.get(Constants.BUNDLE_VERSION);
 
 		if (getBundleByNameVersion(newSymbolicName, newVersion) != null)
 			return;
@@ -603,11 +605,12 @@ public class EquinoxBundlesState implements BundlesState {
 	 * @param state
 	 */
 	private void setPlatformProperties(State state) {
-		Dictionary platformProperties = state.getPlatformProperties()[0];
+		@SuppressWarnings("unchecked")
+		Dictionary<String, String> platformProperties = state.getPlatformProperties()[0];
 		platfromProperties.clear();
 		if (platformProperties != null) {
-			for (Enumeration enumeration = platformProperties.keys(); enumeration.hasMoreElements();) {
-				String key = (String) enumeration.nextElement();
+			for (Enumeration<String> enumeration = platformProperties.keys(); enumeration.hasMoreElements();) {
+				String key = enumeration.nextElement();
 				Object value = platformProperties.get(key);
 				platfromProperties.setProperty(key, (String) value);
 			}
@@ -620,12 +623,12 @@ public class EquinoxBundlesState implements BundlesState {
 	 * set platfromProperties required to compose state object into
 	 * platformProperties of this state.
 	 * 
-	 * @param props
+	 * @param props2
 	 */
-	private void setPlatformPropertiesToState(Dictionary props) {
+	private void setPlatformPropertiesToState(Dictionary<Object, Object> props) {
 		Properties platformProperties = setDefaultPlatformProperties();
 
-		for (Enumeration enumeration = props.keys(); enumeration.hasMoreElements();) {
+		for (Enumeration<Object> enumeration = props.keys(); enumeration.hasMoreElements();) {
 			String key = (String) enumeration.nextElement();
 			for (int i = 0; i < PROPS.length; i++) {
 				if (key.equals(PROPS[i])) {
@@ -657,10 +660,12 @@ public class EquinoxBundlesState implements BundlesState {
 			sb.append("\n"); //$NON-NLS-1$
 		}
 		sb.append("PlatformProperties:\n"); //$NON-NLS-1$
+		@SuppressWarnings("rawtypes")
 		Dictionary[] dics = state.getPlatformProperties();
 		for (int i = 0; i < dics.length; i++) {
-			for (Enumeration enumeration = dics[i].keys(); enumeration.hasMoreElements();) {
-				String key = (String) enumeration.nextElement();
+			for (@SuppressWarnings("unchecked")
+			Enumeration<String> enumeration = dics[i].keys(); enumeration.hasMoreElements();) {
+				String key = enumeration.nextElement();
 				String value = (String) dics[i].get(key);
 				sb.append(" (" + key + "," + value + ")\n"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 			}
@@ -679,7 +684,7 @@ public class EquinoxBundlesState implements BundlesState {
 
 		if (id != DEFAULT_TIMESTAMP) {
 			try {
-				Dictionary manifest = Utils.getOSGiManifest(bInfo.getLocation());
+				Dictionary<String, String> manifest = Utils.getOSGiManifest(bInfo.getLocation());
 				if (manifest == null) {
 					Log.log(LogService.LOG_WARNING, this, "uninstallBundle(BundleInfo)", NLS.bind(Messages.exception_bundleManifest, bInfo.getLocation())); //$NON-NLS-1$
 					return;
@@ -696,11 +701,11 @@ public class EquinoxBundlesState implements BundlesState {
 	private BundleDescription getBundleByLocation(URI location) {
 		if (location == null)
 			return null;
-		return (BundleDescription) locationStateIndex.get(location);
+		return locationStateIndex.get(location);
 	}
 
 	private BundleDescription getBundleByNameVersion(String bundleSymbolicName, String bundleVersion) {
-		return (BundleDescription) nameVersionStateIndex.get(bundleSymbolicName + ";" + bundleVersion); //$NON-NLS-1$
+		return nameVersionStateIndex.get(bundleSymbolicName + ";" + bundleVersion); //$NON-NLS-1$
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwAdminImpl.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwAdminImpl.java
index c23aa94..9553849 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwAdminImpl.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwAdminImpl.java
@@ -102,8 +102,8 @@ public class EquinoxFwAdminImpl implements FrameworkAdmin {
 		if (!"Eclipse".equals(fwVendor)) //$NON-NLS-1$
 			return false;
 		//TODO decide if this version can be supported by this bundle.
-		Dictionary header = context.getBundle(0).getHeaders();
-		String versionSt = (String) header.get(Constants.BUNDLE_VERSION);
+		Dictionary<String, String> header = context.getBundle(0).getHeaders();
+		String versionSt = header.get(Constants.BUNDLE_VERSION);
 		Version version = new Version(versionSt);
 		int value = version.compareTo(new Version(EquinoxConstants.FW_VERSION));
 		if (value > 0) {
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwConfigFileParser.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwConfigFileParser.java
index 3f7e4ff..a80c275 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwConfigFileParser.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxFwConfigFileParser.java
@@ -26,7 +26,7 @@ import org.osgi.framework.Constants;
 import org.osgi.service.log.LogService;
 
 public class EquinoxFwConfigFileParser {
-	private static final Set KNOWN_PROPERTIES = new HashSet(Arrays.asList(new String[] {EquinoxConstants.PROP_BUNDLES, EquinoxConstants.PROP_FW_EXTENSIONS, EquinoxConstants.PROP_INITIAL_STARTLEVEL, EquinoxConstants.PROP_BUNDLES_STARTLEVEL}));
+	private static final Set<String> KNOWN_PROPERTIES = new HashSet<String>(Arrays.asList(new String[] {EquinoxConstants.PROP_BUNDLES, EquinoxConstants.PROP_FW_EXTENSIONS, EquinoxConstants.PROP_INITIAL_STARTLEVEL, EquinoxConstants.PROP_BUNDLES_STARTLEVEL}));
 	private static final String CONFIG_DIR = "@config.dir/"; //$NON-NLS-1$
 	private static final String KEY_ECLIPSE_PROV_DATA_AREA = "eclipse.p2.data.area"; //$NON-NLS-1$
 	private static final String KEY_ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR_CONFIGURL = "org.eclipse.equinox.simpleconfigurator.configUrl"; //$NON-NLS-1$
@@ -114,7 +114,7 @@ public class EquinoxFwConfigFileParser {
 		if (value == null || value.length() == 0)
 			return null;
 
-		List bundles = new ArrayList();
+		List<BundleInfo> bundles = new ArrayList<BundleInfo>();
 		String[] bInfoStrings = Utils.getTokens(value, ","); //$NON-NLS-1$
 		for (int i = 0; i < bInfoStrings.length; i++) {
 			String entry = bInfoStrings[i].trim();
@@ -152,7 +152,7 @@ public class EquinoxFwConfigFileParser {
 			//Fallback case, we use the location as a string
 			bundles.add(new BundleInfo(location, null, null, startLevel, markedAsStarted));
 		}
-		return (BundleInfo[]) bundles.toArray(new BundleInfo[bundles.size()]);
+		return bundles.toArray(new BundleInfo[bundles.size()]);
 	}
 
 	private void writeBundlesList(File fwJar, Properties props, BundleInfo[] bundles) {
@@ -240,7 +240,7 @@ public class EquinoxFwConfigFileParser {
 		readInitialStartLeve(configData, props);
 		readDefaultStartLevel(configData, props);
 
-		for (Enumeration enumeration = props.keys(); enumeration.hasMoreElements();) {
+		for (Enumeration<Object> enumeration = props.keys(); enumeration.hasMoreElements();) {
 			String key = (String) enumeration.nextElement();
 			if (KNOWN_PROPERTIES.contains(key))
 				continue;
@@ -527,7 +527,7 @@ public class EquinoxFwConfigFileParser {
 		Properties sharedConfigProperties = getSharedConfiguration(ParserUtils.getOSGiInstallArea(Arrays.asList(launcherData.getProgramArgs()), configProps, launcherData), configProps.getProperty(EquinoxConstants.PROP_SHARED_CONFIGURATION_AREA));
 		if (sharedConfigProperties == null)
 			return;
-		Enumeration keys = configProps.propertyNames();
+		Enumeration<?> keys = configProps.propertyNames();
 		while (keys.hasMoreElements()) {
 			String key = (String) keys.nextElement();
 			String sharedValue = sharedConfigProperties.getProperty(key);
@@ -564,7 +564,7 @@ public class EquinoxFwConfigFileParser {
 		if (bundles == null || sharedBundles == null || bundles.length != sharedBundles.length)
 			return false;
 
-		List compareList = new ArrayList(Arrays.asList(bundles));
+		List<BundleInfo> compareList = new ArrayList<BundleInfo>(Arrays.asList(bundles));
 		compareList.removeAll(Arrays.asList(sharedBundles));
 		return compareList.isEmpty();
 	}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxManipulatorImpl.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxManipulatorImpl.java
index 57916d3..f516d4d 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxManipulatorImpl.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxManipulatorImpl.java
@@ -102,6 +102,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 	BundleContext context = null;
 	private Properties platformProperties = new Properties();
 
+	@SuppressWarnings("rawtypes")
 	ServiceTracker cmTracker;
 	int trackingCount = -1;
 	private final PlatformAdmin platformAdmin;
@@ -113,6 +114,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 
 	EquinoxFwAdminImpl fwAdmin = null;
 
+	@SuppressWarnings({"rawtypes", "unchecked"})
 	EquinoxManipulatorImpl(BundleContext context, EquinoxFwAdminImpl fwAdmin, PlatformAdmin admin, StartLevel slService, boolean runtime) {
 		this.context = context;
 		this.fwAdmin = fwAdmin;
@@ -171,6 +173,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 	 *
 	 * @see Location
 	 */
+	@SuppressWarnings({"rawtypes", "unchecked"})
 	private File getRunningConfigurationLocation() {
 		ServiceTracker tracker = null;
 		Filter filter = null;
@@ -277,7 +280,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 		}
 		// 2. Create a Manipulator object fully initialized to the current running fw.
 
-		ServiceReference reference = context.getServiceReference(StartLevel.class.getName());
+		ServiceReference<?> reference = context.getServiceReference(StartLevel.class.getName());
 		StartLevel startLevel = (StartLevel) context.getService(reference);
 		Bundle[] bundles = context.getBundles();
 		BundleInfo[] bInfos = new BundleInfo[bundles.length];
@@ -298,7 +301,7 @@ public class EquinoxManipulatorImpl implements Manipulator {
 
 		// copy system properties to ConfigData
 		Properties props = System.getProperties();
-		for (Enumeration enumeration = props.keys(); enumeration.hasMoreElements();) {
+		for (Enumeration<Object> enumeration = props.keys(); enumeration.hasMoreElements();) {
 			String key = (String) enumeration.nextElement();
 			String value = props.getProperty(key);
 			if (toBeEliminated(key))
@@ -443,12 +446,13 @@ public class EquinoxManipulatorImpl implements Manipulator {
 	 * 4. set the object that corresponds to the chosen ConfiguratorBundle.
 	 *
 	 */
+	@SuppressWarnings("unchecked")
 	private ConfiguratorManipulator setConfiguratorManipulator() {
 		if (context == null) {
 			this.configuratorManipulator = this.fwAdmin.getConfiguratorManipulator();
 			return null;
 		}
-		ServiceReference[] references = cmTracker.getServiceReferences();
+		ServiceReference<?>[] references = cmTracker.getServiceReferences();
 		if (references == null)
 			return null;
 
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/Log.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/Log.java
index e83b920..ed23953 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/Log.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/Log.java
@@ -18,6 +18,7 @@ import org.osgi.util.tracker.ServiceTracker;
 /**
  * Utility class with static methods for logging to LogService, if available 
  */
+@SuppressWarnings({"rawtypes", "unchecked"})
 public class Log {
 	static private ServiceTracker logTracker;
 	static private boolean useLog = false;
@@ -40,14 +41,14 @@ public class Log {
 
 	public static void log(int level, Object obj, String method, String message, Throwable e) {
 		LogService logService = null;
-		String msg = "";
+		String msg = ""; //$NON-NLS-1$
 		if (method == null) {
 			if (obj != null)
-				msg = "(" + obj.getClass().getName() + ")";
+				msg = "(" + obj.getClass().getName() + ")"; //$NON-NLS-1$ //$NON-NLS-2$
 		} else if (obj == null)
-			msg = "[" + method + "]" + message;
+			msg = "[" + method + "]" + message; //$NON-NLS-1$ //$NON-NLS-2$
 		else
-			msg = "[" + method + "](" + obj.getClass().getName() + ")";
+			msg = "[" + method + "](" + obj.getClass().getName() + ")"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		msg += message;
 		if (logTracker != null)
 			logService = (LogService) logTracker.getService();
@@ -57,17 +58,17 @@ public class Log {
 		} else {
 			String levelSt = null;
 			if (level == LogService.LOG_DEBUG)
-				levelSt = "DEBUG";
+				levelSt = "DEBUG"; //$NON-NLS-1$
 			else if (level == LogService.LOG_INFO)
-				levelSt = "INFO";
+				levelSt = "INFO"; //$NON-NLS-1$
 			else if (level == LogService.LOG_WARNING)
-				levelSt = "WARNING";
+				levelSt = "WARNING"; //$NON-NLS-1$
 			else if (level == LogService.LOG_ERROR) {
-				levelSt = "ERROR";
+				levelSt = "ERROR"; //$NON-NLS-1$
 				useLog = true;
 			}
 			if (useLog) {
-				System.err.println("[" + levelSt + "]" + msg);
+				System.err.println("[" + levelSt + "]" + msg); //$NON-NLS-1$ //$NON-NLS-2$
 				if (e != null)
 					e.printStackTrace();
 			}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/ParserUtils.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/ParserUtils.java
index 9626ad0..4080ffc 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/ParserUtils.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/ParserUtils.java
@@ -26,7 +26,7 @@ import org.osgi.service.log.LogService;
 public class ParserUtils {
 	private static final String FILE_PROTOCOL = "file:"; //$NON-NLS-1$
 
-	public static File getOSGiInstallArea(List programArgs, Properties properties, LauncherData launcherData) {
+	public static File getOSGiInstallArea(List<String> programArgs, Properties properties, LauncherData launcherData) {
 		if (launcherData == null)
 			return null;
 
@@ -66,7 +66,7 @@ public class ParserUtils {
 		return null;
 	}
 
-	public static URI getFrameworkJar(List lines, URI launcherFolder) {
+	public static URI getFrameworkJar(List<String> lines, URI launcherFolder) {
 		String fwk = ParserUtils.getValueForArgument(EquinoxConstants.OPTION_FW, lines);
 		if (fwk == null) {
 			//Search the file system using the default location
@@ -84,7 +84,7 @@ public class ParserUtils {
 	}
 
 	//This method should only be used to determine the osgi install area when reading the eclipse.ini
-	public static File getOSGiInstallArea(List args, Properties properties, URI base) {
+	public static File getOSGiInstallArea(List<String> args, Properties properties, URI base) {
 		if (args == null)
 			return null;
 		String install = getValueForArgument(EquinoxConstants.OPTION_INSTALL, args);
@@ -128,28 +128,28 @@ public class ParserUtils {
 		return parentFolder.toFile();
 	}
 
-	public static boolean isArgumentSet(String arg, List args) {
+	public static boolean isArgumentSet(String arg, List<String> args) {
 		if (arg == null || args == null)
 			return false;
 		for (int i = 0; i < args.size(); i++) {
 			if (args.get(i) == null)
 				continue;
-			if (((String) args.get(i)).equalsIgnoreCase(arg)) {
+			if ((args.get(i)).equalsIgnoreCase(arg)) {
 				return true;
 			}
 		}
 		return false;
 	}
 
-	public static String getValueForArgument(String arg, List args) {
+	public static String getValueForArgument(String arg, List<String> args) {
 		if (arg == null || args == null)
 			return null;
 		for (int i = 0; i < args.size(); i++) {
 			if (args.get(i) == null)
 				continue;
-			if (((String) args.get(i)).equalsIgnoreCase(arg)) {
+			if ((args.get(i)).equalsIgnoreCase(arg)) {
 				if (i + 1 < args.size()) {
-					String value = (String) args.get(i + 1);
+					String value = args.get(i + 1);
 					if (value != null && value.length() > 0 && value.charAt(0) != '-')
 						return value;
 				}
@@ -158,17 +158,17 @@ public class ParserUtils {
 		return null;
 	}
 
-	public static boolean setValueForArgument(String arg, String value, List args) {
+	public static boolean setValueForArgument(String arg, String value, List<String> args) {
 		if (arg == null || args == null)
 			return false;
 
 		for (int i = 0; i < args.size(); i++) {
 			if (args.get(i) == null)
 				continue;
-			String currentArg = ((String) args.get(i)).trim();
+			String currentArg = (args.get(i)).trim();
 			if (currentArg.equalsIgnoreCase(arg)) {
 				if (i + 1 < args.size()) {
-					String nextArg = (String) args.get(i + 1);
+					String nextArg = args.get(i + 1);
 					if (nextArg == null || nextArg.charAt(0) != '-') {
 						args.set(i + 1, value);
 					} else {
@@ -186,16 +186,16 @@ public class ParserUtils {
 		return true;
 	}
 
-	public static boolean removeArgument(String arg, List args) {
+	public static boolean removeArgument(String arg, List<String> args) {
 		if (arg == null || args == null)
 			return false;
 		for (int i = 0; i < args.size(); i++) {
 			if (args.get(i) == null)
 				continue;
-			String currentArg = ((String) args.get(i)).trim();
+			String currentArg = (args.get(i)).trim();
 			if (currentArg.equalsIgnoreCase(arg)) {
 				args.set(i, null);
-				while (i + 1 < args.size() && args.get(i + 1) != null && ((String) args.get(i + 1)).charAt(0) != '-') {
+				while (i + 1 < args.size() && args.get(i + 1) != null && (args.get(i + 1)).charAt(0) != '-') {
 					args.set(i + 1, null);
 					i++;
 				}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/utils/FileUtils.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/utils/FileUtils.java
index a74c494..7eed2d2 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/utils/FileUtils.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/utils/FileUtils.java
@@ -202,19 +202,19 @@ public class FileUtils {
 		if (url.startsWith(FILE_PROTOCOL)) {
 			return URIUtil.fromString(new File(url.substring(FILE_PROTOCOL.length())).isAbsolute() ? url : url.substring(FILE_PROTOCOL.length()));
 		}
-		throw new URISyntaxException(url, "Not a file url");
+		throw new URISyntaxException(url, "Not a file url"); //$NON-NLS-1$
 	}
 
 	/**
 	 * Loads an ini file, returning a list of all non-blank lines in the file.
 	 */
-	public static List loadFile(File file) throws IOException {
+	public static List<String> loadFile(File file) throws IOException {
 		BufferedReader br = null;
 		try {
 			br = new BufferedReader(new FileReader(file));
 
 			String line;
-			List list = new ArrayList();
+			List<String> list = new ArrayList<String>();
 			while ((line = br.readLine()) != null) {
 				//skip whitespace
 				if (line.trim().length() > 0)
commit 08069a419d77efc3f4ff99cff366489b12d441e1
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 18:22:52 2013 +0100

    bug 418662: Get rid of compile warnings in official build -
    org.eclipse.equinox.simpleconfigurator
    
    Change-Id: I476cbc282ba67403b71743d0703a0a6e0dbc1769
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

4	4	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/Activator.java
42	42	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/ConfigApplier.java
3	3	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/SimpleConfiguratorFactory.java
2	1	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/console/ApplyCommand.java
3	0	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/EquinoxUtils.java
4	4	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
8	8	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/Utils.java
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/Activator.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/Activator.java
index 333df29..24c24fd 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/Activator.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/Activator.java
@@ -40,17 +40,17 @@ import org.osgi.framework.*;
  */
 public class Activator implements BundleActivator {
 	public final static boolean DEBUG = false;
-	private ServiceRegistration configuratorRegistration;
-	private ServiceRegistration commandRegistration;
+	private ServiceRegistration<?> configuratorRegistration;
+	private ServiceRegistration<?> commandRegistration;
 
 	public void start(BundleContext context) throws Exception {
 		SimpleConfiguratorImpl bundleConfigurator = new SimpleConfiguratorImpl(context, context.getBundle());
 		bundleConfigurator.applyConfiguration();
 
-		Dictionary props = new Hashtable();
+		Dictionary<String, String> props = new Hashtable<String, String>();
 		props.put(Constants.SERVICE_VENDOR, "Eclipse"); //$NON-NLS-1$
 		props.put(Constants.SERVICE_PID, SimpleConfiguratorConstants.TARGET_CONFIGURATOR_NAME);
-		ServiceFactory configurationFactory = new SimpleConfiguratorFactory(context);
+		ServiceFactory<?> configurationFactory = new SimpleConfiguratorFactory(context);
 		configuratorRegistration = context.registerService(Configurator.class.getName(), configurationFactory, props);
 
 		try {
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/ConfigApplier.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/ConfigApplier.java
index f0e4b79..6a1fee8 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/ConfigApplier.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/ConfigApplier.java
@@ -42,12 +42,12 @@ class ConfigApplier {
 		inDevMode = manipulatingContext.getProperty(PROP_DEVMODE) != null;
 		baseLocation = runningOnEquinox ? EquinoxUtils.getInstallLocationURI(context) : null;
 
-		ServiceReference packageAdminRef = manipulatingContext.getServiceReference(PackageAdmin.class.getName());
+		ServiceReference<?> packageAdminRef = manipulatingContext.getServiceReference(PackageAdmin.class.getName());
 		if (packageAdminRef == null)
 			throw new IllegalStateException("No PackageAdmin service is available."); //$NON-NLS-1$
 		packageAdminService = (PackageAdmin) manipulatingContext.getService(packageAdminRef);
 
-		ServiceReference startLevelRef = manipulatingContext.getServiceReference(StartLevel.class.getName());
+		ServiceReference<?> startLevelRef = manipulatingContext.getServiceReference(StartLevel.class.getName());
 		if (startLevelRef == null)
 			throw new IllegalStateException("No StartLevelService service is available."); //$NON-NLS-1$
 		startLevelService = (StartLevel) manipulatingContext.getService(startLevelRef);
@@ -56,7 +56,7 @@ class ConfigApplier {
 	}
 
 	void install(URL url, boolean exclusiveMode) throws IOException {
-		List bundleInfoList = SimpleConfiguratorUtils.readConfiguration(url, baseLocation);
+		List<BundleInfo> bundleInfoList = SimpleConfiguratorUtils.readConfiguration(url, baseLocation);
 		if (Activator.DEBUG)
 			System.out.println("applyConfiguration() bundleInfoList.size()=" + bundleInfoList.size());
 		if (bundleInfoList.size() == 0)
@@ -79,19 +79,19 @@ class ConfigApplier {
 			}
 		}
 
-		HashSet toUninstall = null;
+		HashSet<BundleInfo> toUninstall = null;
 		if (!exclusiveMode) {
 			BundleInfo[] lastInstalledBundles = getLastState();
 			if (lastInstalledBundles != null) {
-				toUninstall = new HashSet(Arrays.asList(lastInstalledBundles));
+				toUninstall = new HashSet<BundleInfo>(Arrays.asList(lastInstalledBundles));
 				toUninstall.removeAll(Arrays.asList(expectedState));
 			}
 			saveStateAsLast(url);
 		}
 
-		Set prevouslyResolved = getResolvedBundles();
-		Collection toRefresh = new ArrayList();
-		Collection toStart = new ArrayList();
+		Set<Bundle> prevouslyResolved = getResolvedBundles();
+		Collection<Bundle> toRefresh = new ArrayList<Bundle>();
+		Collection<Bundle> toStart = new ArrayList<Bundle>();
 		if (exclusiveMode) {
 			toRefresh.addAll(installBundles(expectedState, toStart));
 			toRefresh.addAll(uninstallBundles(expectedState, packageAdminService));
@@ -109,20 +109,20 @@ class ConfigApplier {
 		startBundles((Bundle[]) toStart.toArray(new Bundle[toStart.size()]));
 	}
 
-	private Bundle[] getAdditionalRefresh(Set previouslyResolved, Collection toRefresh) {
+	private Bundle[] getAdditionalRefresh(Set<Bundle> previouslyResolved, Collection<Bundle> toRefresh) {
 		// This is the luna equinox framework or a non-equinox framework.
 		// Use standard OSGi API.
-		final Set additionalRefresh = new HashSet();
-		final Set originalRefresh = new HashSet(toRefresh);
-		for (Iterator iToRefresh = toRefresh.iterator(); iToRefresh.hasNext();) {
+		final Set<Bundle> additionalRefresh = new HashSet<Bundle>();
+		final Set<Bundle> originalRefresh = new HashSet<Bundle>(toRefresh);
+		for (Iterator<Bundle> iToRefresh = toRefresh.iterator(); iToRefresh.hasNext();) {
 			Bundle bundle = (Bundle) iToRefresh.next();
 			BundleRevision revision = (BundleRevision) bundle.adapt(BundleRevision.class);
 			if (bundle.getState() == Bundle.INSTALLED && revision != null && (revision.getTypes() & BundleRevision.TYPE_FRAGMENT) != 0) {
 				// this is an unresolved fragment; look to see if it has additional payload requirements
 				boolean foundPayLoadReq = false;
 				BundleRequirement hostReq = null;
-				Collection requirements = revision.getRequirements(null);
-				for (Iterator iReqs = requirements.iterator(); iReqs.hasNext();) {
+				Collection<Requirement> requirements = revision.getRequirements(null);
+				for (Iterator<Requirement> iReqs = requirements.iterator(); iReqs.hasNext();) {
 					BundleRequirement req = (BundleRequirement) iReqs.next();
 					if (HostNamespace.HOST_NAMESPACE.equals(req.getNamespace())) {
 						hostReq = req;
@@ -133,9 +133,9 @@ class ConfigApplier {
 					}
 				}
 				if (foundPayLoadReq) {
-					Collection candidates = frameworkWiring.findProviders(hostReq);
-					for (Iterator iCandidates = candidates.iterator(); iCandidates.hasNext();) {
-						BundleCapability candidate = (BundleCapability) iCandidates.next();
+					Collection<BundleCapability> candidates = frameworkWiring.findProviders(hostReq);
+					for (Iterator<BundleCapability> iCandidates = candidates.iterator(); iCandidates.hasNext();) {
+						BundleCapability candidate = iCandidates.next();
 						if (!originalRefresh.contains(candidate.getRevision().getBundle())) {
 							additionalRefresh.add(candidate.getRevision().getBundle());
 						}
@@ -144,14 +144,14 @@ class ConfigApplier {
 			}
 		}
 
-		for (Iterator iPreviouslyResolved = previouslyResolved.iterator(); iPreviouslyResolved.hasNext();) {
-			Bundle bundle = (Bundle) iPreviouslyResolved.next();
+		for (Iterator<Bundle> iPreviouslyResolved = previouslyResolved.iterator(); iPreviouslyResolved.hasNext();) {
+			Bundle bundle = iPreviouslyResolved.next();
 			BundleRevision revision = (BundleRevision) bundle.adapt(BundleRevision.class);
 			BundleWiring wiring = revision == null ? null : revision.getWiring();
 			if (wiring != null) {
-				Collection reqs = revision.getDeclaredRequirements(null);
-				Set optionalReqs = new HashSet();
-				for (Iterator iReqs = reqs.iterator(); iReqs.hasNext();) {
+				Collection<BundleRequirement> reqs = revision.getDeclaredRequirements(null);
+				Set<BundleRequirement> optionalReqs = new HashSet<BundleRequirement>();
+				for (Iterator<BundleRequirement> iReqs = reqs.iterator(); iReqs.hasNext();) {
 					BundleRequirement req = (BundleRequirement) iReqs.next();
 					String namespace = req.getNamespace();
 					// only do this for package and bundle namespaces
@@ -164,19 +164,19 @@ class ConfigApplier {
 				if (!optionalReqs.isEmpty()) {
 					wiring = getHostWiring(wiring);
 					// check that all optional requirements are wired
-					Collection requiredWires = wiring.getRequiredWires(null);
-					for (Iterator iRequiredWires = requiredWires.iterator(); iRequiredWires.hasNext();) {
-						BundleWire requiredWire = (BundleWire) iRequiredWires.next();
+					Collection<BundleWire> requiredWires = wiring.getRequiredWires(null);
+					for (Iterator<BundleWire> iRequiredWires = requiredWires.iterator(); iRequiredWires.hasNext();) {
+						BundleWire requiredWire = iRequiredWires.next();
 						optionalReqs.remove(requiredWire.getRequirement());
 					}
 					if (!optionalReqs.isEmpty()) {
 						// there are a number of optional requirements not wired
-						for (Iterator iOptionalReqs = optionalReqs.iterator(); iOptionalReqs.hasNext();) {
-							Collection candidates = frameworkWiring.findProviders((Requirement) iOptionalReqs.next());
+						for (Iterator<BundleRequirement> iOptionalReqs = optionalReqs.iterator(); iOptionalReqs.hasNext();) {
+							Collection<BundleCapability> candidates = frameworkWiring.findProviders(iOptionalReqs.next());
 							// Filter out candidates that were previously resolved or are currently not resolved.
 							// There is no need to refresh the resource if the candidate was previously available.
-							for (Iterator iCandidates = candidates.iterator(); iCandidates.hasNext();) {
-								BundleCapability candidate = (BundleCapability) iCandidates.next();
+							for (Iterator<BundleCapability> iCandidates = candidates.iterator(); iCandidates.hasNext();) {
+								BundleCapability candidate = iCandidates.next();
 								Bundle candidateBundle = candidate.getRevision().getBundle();
 								// The candidate is not from the original refresh set, but
 								// it could have just became resolved as a result of new bundles.
@@ -201,7 +201,7 @@ class ConfigApplier {
 			// not a fragment
 			return wiring;
 		}
-		Collection hostWires = wiring.getRequiredWires(HostNamespace.HOST_NAMESPACE);
+		Collection<BundleWire> hostWires = wiring.getRequiredWires(HostNamespace.HOST_NAMESPACE);
 		// just use the first host wiring
 		if (hostWires.isEmpty()) {
 			return wiring;
@@ -210,8 +210,8 @@ class ConfigApplier {
 		return hostWire.getProviderWiring();
 	}
 
-	private Set getResolvedBundles() {
-		Set resolved = new HashSet();
+	private Set<Bundle> getResolvedBundles() {
+		Set<Bundle> resolved = new HashSet<Bundle>();
 		Bundle[] allBundles = manipulatingContext.getBundles();
 		for (int i = 0; i < allBundles.length; i++)
 			if ((allBundles[i].getState() & (Bundle.INSTALLED | Bundle.UNINSTALLED)) == 0)
@@ -219,10 +219,10 @@ class ConfigApplier {
 		return resolved;
 	}
 
-	private Collection uninstallBundles(HashSet toUninstall) {
-		Collection removedBundles = new ArrayList(toUninstall.size());
-		for (Iterator iterator = toUninstall.iterator(); iterator.hasNext();) {
-			BundleInfo current = (BundleInfo) iterator.next();
+	private Collection<Bundle> uninstallBundles(HashSet<BundleInfo> toUninstall) {
+		Collection<Bundle> removedBundles = new ArrayList<Bundle>(toUninstall.size());
+		for (Iterator<BundleInfo> iterator = toUninstall.iterator(); iterator.hasNext();) {
+			BundleInfo current = iterator.next();
 			Bundle[] matchingBundles = packageAdminService.getBundles(current.getSymbolicName(), getVersionRange(current.getVersion()));
 			for (int j = 0; matchingBundles != null && j < matchingBundles.length; j++) {
 				try {
@@ -272,8 +272,8 @@ class ConfigApplier {
 		}
 	}
 
-	private ArrayList installBundles(BundleInfo[] finalList, Collection toStart) {
-		ArrayList toRefresh = new ArrayList();
+	private ArrayList<Bundle> installBundles(BundleInfo[] finalList, Collection<Bundle> toStart) {
+		ArrayList<Bundle> toRefresh = new ArrayList<Bundle>();
 
 		String useReferenceProperty = manipulatingContext.getProperty(SimpleConfiguratorConstants.PROP_KEY_USE_REFERENCE);
 		boolean useReference = useReferenceProperty == null ? runningOnEquinox : Boolean.valueOf(useReferenceProperty).booleanValue();
@@ -442,11 +442,11 @@ class ConfigApplier {
 	 * @param packageAdmin package admin service.
 	 * @return Collection HashSet of bundles finally installed.
 	 */
-	private Collection uninstallBundles(BundleInfo[] finalList, PackageAdmin packageAdmin) {
+	private Collection<Bundle> uninstallBundles(BundleInfo[] finalList, PackageAdmin packageAdmin) {
 		Bundle[] allBundles = manipulatingContext.getBundles();
 
 		//Build a set with all the bundles from the system
-		Set removedBundles = new HashSet(allBundles.length);
+		Set<Bundle> removedBundles = new HashSet<Bundle>(allBundles.length);
 		//		configurator.setPrerequisiteBundles(allBundles);
 		for (int i = 0; i < allBundles.length; i++) {
 			if (allBundles[i].getBundleId() == 0)
@@ -464,9 +464,9 @@ class ConfigApplier {
 			}
 		}
 
-		for (Iterator iter = removedBundles.iterator(); iter.hasNext();) {
+		for (Iterator<Bundle> iter = removedBundles.iterator(); iter.hasNext();) {
 			try {
-				Bundle bundle = ((Bundle) iter.next());
+				Bundle bundle = iter.next();
 				if (bundle.getLocation().startsWith("initial@")) {
 					if (Activator.DEBUG)
 						System.out.println("Simple configurator thinks a bundle installed by the boot strap should be uninstalled:" + bundle.getSymbolicName() + '(' + bundle.getLocation() + ':' + bundle.getBundleId() + ')'); //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/SimpleConfiguratorFactory.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/SimpleConfiguratorFactory.java
index 7e8dbeb..acafe1c 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/SimpleConfiguratorFactory.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/SimpleConfiguratorFactory.java
@@ -12,18 +12,18 @@ package org.eclipse.equinox.internal.simpleconfigurator;
 
 import org.osgi.framework.*;
 
-public class SimpleConfiguratorFactory implements ServiceFactory {
+public class SimpleConfiguratorFactory implements ServiceFactory<Object> {
 	private BundleContext context;
 
 	public SimpleConfiguratorFactory(BundleContext context) {
 		this.context = context;
 	}
 
-	public Object getService(Bundle bundle, ServiceRegistration registration) {
+	public Object getService(Bundle bundle, ServiceRegistration<Object> registration) {
 		return new SimpleConfiguratorImpl(context, bundle);
 	}
 
-	public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {
+	public void ungetService(Bundle bundle, ServiceRegistration<Object> registration, Object service) {
 		// nothing to do
 	}
 }
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/console/ApplyCommand.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/console/ApplyCommand.java
index 9f7152f..d6fa7bb 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/console/ApplyCommand.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/console/ApplyCommand.java
@@ -36,6 +36,7 @@ public class ApplyCommand {
 	 * Runs the apply console command
 	 */
 	public void run() {
+		@SuppressWarnings({"rawtypes", "unchecked"})
 		ServiceTracker tracker = new ServiceTracker(context, Configurator.class.getName(), null);
 		tracker.open();
 		Configurator configurator = (Configurator) tracker.getService();
@@ -45,7 +46,7 @@ public class ApplyCommand {
 					configurator.applyConfiguration(configURL);
 				else
 					configurator.applyConfiguration();
-				
+
 				if (configurator.getUrlInUse() == null)
 					interpreter.println("Config URL not set.");
 			} catch (IOException e) {
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/EquinoxUtils.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/EquinoxUtils.java
index 66454c0..70d8a8d 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/EquinoxUtils.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/EquinoxUtils.java
@@ -42,6 +42,7 @@ public class EquinoxUtils {
 		} catch (InvalidSyntaxException e) {
 			// should not happen
 		}
+		@SuppressWarnings({"rawtypes", "unchecked"})
 		ServiceTracker configLocationTracker = new ServiceTracker(context, filter, null);
 		configLocationTracker.open();
 		try {
@@ -51,6 +52,7 @@ public class EquinoxUtils {
 		}
 	}
 
+	@SuppressWarnings({"rawtypes", "unchecked"})
 	public static URI getInstallLocationURI(BundleContext context) {
 		try {
 			ServiceReference[] references = context.getServiceReferences(Location.class.getName(), Location.INSTALL_FILTER);
@@ -76,6 +78,7 @@ public class EquinoxUtils {
 		return null;
 	}
 
+	@SuppressWarnings("rawtypes")
 	public static ServiceRegistration registerConsoleCommands(BundleContext context) {
 		return context.registerService(CommandProvider.class.getName(), new ConfiguratorCommandProvider(context), null);
 	}
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
index aa0235a..06474ff 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
@@ -26,14 +26,14 @@ public class SimpleConfiguratorUtils {
 	private static final String COMMA = ",";
 	private static final String ENCODED_COMMA = "%2C";
 
-	public static List readConfiguration(URL url, URI base) throws IOException {
+	public static List<BundleInfo> readConfiguration(URL url, URI base) throws IOException {
 		InputStream stream = null;
 		try {
 			stream = url.openStream();
 		} catch (IOException e) {
 			// if the exception is a FNF we return an empty bundle list
 			if (e instanceof FileNotFoundException)
-				return Collections.EMPTY_LIST;
+				return Collections.emptyList();
 			throw e;
 		}
 
@@ -52,8 +52,8 @@ public class SimpleConfiguratorUtils {
 	 * @return List of {@link BundleInfo}
 	 * @throws IOException
 	 */
-	public static List readConfiguration(InputStream stream, URI base) throws IOException {
-		List bundles = new ArrayList();
+	public static List<BundleInfo> readConfiguration(InputStream stream, URI base) throws IOException {
+		List<BundleInfo> bundles = new ArrayList<BundleInfo>();
 
 		BufferedInputStream bufferedStream = new BufferedInputStream(stream);
 		String encoding = determineEncoding(bufferedStream);
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/Utils.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/Utils.java
index 2d21e13..ce0a07a 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/Utils.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/Utils.java
@@ -57,7 +57,7 @@ public class Utils {
 		return;
 	}
 
-	public static BundleInfo[] getBundleInfosFromList(List list) {
+	public static BundleInfo[] getBundleInfosFromList(List<BundleInfo> list) {
 		if (list == null)
 			return new BundleInfo[0];
 		BundleInfo[] ret = new BundleInfo[list.size()];
@@ -96,10 +96,10 @@ public class Utils {
 			msg = "[" + method + "](" + obj.getClass().getName() + ")";
 		msg += message;
 
-//		if (LogService logService = Activator.getLogService();
-//		if (logService != null) {
-//			logService.log(level, msg, e);
-//		} else {
+		//		if (LogService logService = Activator.getLogService();
+		//		if (logService != null) {
+		//			logService.log(level, msg, e);
+		//		} else {
 		String levelSt = null;
 		if (level == 1)
 			levelSt = "DEBUG";
@@ -109,13 +109,13 @@ public class Utils {
 			levelSt = "WARNING";
 		else if (level == 4) {
 			levelSt = "ERROR";
-//				useLog = true;
+			//				useLog = true;
 		}
-//			if (useLog) {
+		//			if (useLog) {
 		System.err.println("[" + levelSt + "]" + msg);
 		if (e != null)
 			e.printStackTrace();
-//			}
+		//			}
 	}
 
 	public static URL buildURL(String spec) throws MalformedURLException {
commit 6e6c205e4f8b2adabd2c3dd294e7d99eb7a94341
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 18:39:30 2013 +0100

    bug 418662: Get rid of compile warnings in official build -
    org.eclipse.equinox.simpleconfigurator.manipulator
    
    Change-Id: Idfce90273e5e357f1adbac3aa78d2d7cd1e53197
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

37	37	bundles/org.eclipse.equinox.simpleconfigurator.manipulator/src/org/eclipse/equinox/internal/simpleconfigurator/manipulator/SimpleConfiguratorManipulatorImpl.java
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator.manipulator/src/org/eclipse/equinox/internal/simpleconfigurator/manipulator/SimpleConfiguratorManipulatorImpl.java b/bundles/org.eclipse.equinox.simpleconfigurator.manipulator/src/org/eclipse/equinox/internal/simpleconfigurator/manipulator/SimpleConfiguratorManipulatorImpl.java
index 3e1344e..7db11a1 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator.manipulator/src/org/eclipse/equinox/internal/simpleconfigurator/manipulator/SimpleConfiguratorManipulatorImpl.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator.manipulator/src/org/eclipse/equinox/internal/simpleconfigurator/manipulator/SimpleConfiguratorManipulatorImpl.java
@@ -50,7 +50,7 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 	public static final String PROP_KEY_CONFIGURL = "org.eclipse.equinox.simpleconfigurator.configUrl"; //$NON-NLS-1$
 	public static final String SHARED_BUNDLES_INFO = CONFIG_FOLDER + File.separatorChar + CONFIGURATOR_FOLDER + File.separatorChar + CONFIG_LIST;
 
-	private Set manipulators = new HashSet();
+	private Set<Manipulator> manipulators = new HashSet<Manipulator>();
 
 	/**	
 	 * Return the ConfiguratorConfigFile which is determined 
@@ -141,33 +141,33 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 		return (SimpleConfiguratorManipulator.SERVICE_PROP_VALUE_CONFIGURATOR_SYMBOLICNAME.equals(symbolic));
 	}
 
-	private void algorithm(int initialSl, SortedMap bslToList, BundleInfo configuratorBInfo, List setToInitialConfig, List setToSimpleConfig, LocationInfo info) {
+	private void algorithm(int initialSl, SortedMap<Integer, List<BundleInfo>> bslToList, BundleInfo configuratorBInfo, List<BundleInfo> setToInitialConfig, List<BundleInfo> setToSimpleConfig, LocationInfo info) {
 		int configuratorSL = configuratorBInfo.getStartLevel();
 
-		Integer sL0 = (Integer) bslToList.keySet().iterator().next();// StartLevel == 0;
-		List list0 = (List) bslToList.get(sL0);
+		Integer sL0 = bslToList.keySet().iterator().next();// StartLevel == 0;
+		List<BundleInfo> list0 = bslToList.get(sL0);
 		if (sL0.intValue() == 0)
-			for (Iterator ite2 = list0.iterator(); ite2.hasNext();) {
-				BundleInfo bInfo = (BundleInfo) ite2.next();
+			for (Iterator<BundleInfo> ite2 = list0.iterator(); ite2.hasNext();) {
+				BundleInfo bInfo = ite2.next();
 				if (isSystemBundle(bInfo.getLocation(), info)) {
 					setToSimpleConfig.add(bInfo);
 					break;
 				}
 			}
 
-		for (Iterator ite = bslToList.keySet().iterator(); ite.hasNext();) {
-			Integer sL = (Integer) ite.next();
-			List list = (List) bslToList.get(sL);
+		for (Iterator<Integer> ite = bslToList.keySet().iterator(); ite.hasNext();) {
+			Integer sL = ite.next();
+			List<BundleInfo> list = bslToList.get(sL);
 
 			if (sL.intValue() < configuratorSL) {
-				for (Iterator ite2 = list.iterator(); ite2.hasNext();) {
-					BundleInfo bInfo = (BundleInfo) ite2.next();
+				for (Iterator<BundleInfo> ite2 = list.iterator(); ite2.hasNext();) {
+					BundleInfo bInfo = ite2.next();
 					if (!isSystemBundle(bInfo.getLocation(), info))
 						setToInitialConfig.add(bInfo);
 				}
 			} else if (sL.intValue() > configuratorSL) {
-				for (Iterator ite2 = list.iterator(); ite2.hasNext();) {
-					BundleInfo bInfo = (BundleInfo) ite2.next();
+				for (Iterator<BundleInfo> ite2 = list.iterator(); ite2.hasNext();) {
+					BundleInfo bInfo = ite2.next();
 					if (isPrerequisiteBundles(bInfo.getLocation(), info) || isSystemFragmentBundle(bInfo.getLocation(), info))
 						if (!isSystemBundle(bInfo.getLocation(), info))
 							setToInitialConfig.add(bInfo);
@@ -175,8 +175,8 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 				}
 			} else {
 				boolean found = false;
-				for (Iterator ite2 = list.iterator(); ite2.hasNext();) {
-					BundleInfo bInfo = (BundleInfo) ite2.next();
+				for (Iterator<BundleInfo> ite2 = list.iterator(); ite2.hasNext();) {
+					BundleInfo bInfo = ite2.next();
 					if (found) {
 						if (!isSystemBundle(bInfo.getLocation(), info))
 							if (isPrerequisiteBundles(bInfo.getLocation(), info) || isSystemFragmentBundle(bInfo.getLocation(), info))
@@ -198,7 +198,7 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 
 	private boolean checkResolve(BundleInfo bInfo, BundlesState state) {//throws ManipulatorException {
 		if (bInfo == null)
-			throw new IllegalArgumentException("bInfo is null.");
+			throw new IllegalArgumentException("bInfo is null."); //$NON-NLS-1$
 
 		if (!state.isResolved())
 			state.resolve(false);
@@ -212,7 +212,7 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 		return true;
 	}
 
-	private boolean divideBundleInfos(Manipulator manipulator, List setToInitialConfig, List setToSimpleConfig, final int initialBSL) {
+	private boolean divideBundleInfos(Manipulator manipulator, List<BundleInfo> setToInitialConfig, List<BundleInfo> setToSimpleConfig, final int initialBSL) {
 		BundlesState state = manipulator.getBundlesState();
 		BundleInfo[] targetBundleInfos = null;
 		if (state.isFullySupported()) {
@@ -249,21 +249,21 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 		setSystemBundles(state, info);
 		if (configuratorBInfo != null) {
 			setPrerequisiteBundles(configuratorBInfo, state, info);
-			SortedMap bslToList = getSortedMap(initialBSL, targetBundleInfos);
+			SortedMap<Integer, List<BundleInfo>> bslToList = getSortedMap(initialBSL, targetBundleInfos);
 			algorithm(initialBSL, bslToList, configuratorBInfo, setToInitialConfig, setToSimpleConfig, info);
 		}
 		return true;
 	}
 
-	private SortedMap getSortedMap(int initialSl, BundleInfo[] bInfos) {
-		SortedMap bslToList = new TreeMap();
+	private SortedMap<Integer, List<BundleInfo>> getSortedMap(int initialSl, BundleInfo[] bInfos) {
+		SortedMap<Integer, List<BundleInfo>> bslToList = new TreeMap<Integer, List<BundleInfo>>();
 		for (int i = 0; i < bInfos.length; i++) {
 			Integer sL = new Integer(bInfos[i].getStartLevel());
 			if (sL.intValue() == BundleInfo.NO_LEVEL)
 				sL = new Integer(initialSl);
-			List list = (List) bslToList.get(sL);
+			List<BundleInfo> list = bslToList.get(sL);
 			if (list == null) {
-				list = new LinkedList();
+				list = new LinkedList<BundleInfo>();
 				bslToList.put(sL, list);
 			}
 			list.add(bInfos[i]);
@@ -271,11 +271,11 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 		return bslToList;
 	}
 
-	private BundleInfo[] orderingInitialConfig(List setToInitialConfig) {
-		List notToBeStarted = new LinkedList();
-		List toBeStarted = new LinkedList();
-		for (Iterator ite2 = setToInitialConfig.iterator(); ite2.hasNext();) {
-			BundleInfo bInfo = (BundleInfo) ite2.next();
+	private BundleInfo[] orderingInitialConfig(List<BundleInfo> setToInitialConfig) {
+		List<BundleInfo> notToBeStarted = new LinkedList<BundleInfo>();
+		List<BundleInfo> toBeStarted = new LinkedList<BundleInfo>();
+		for (Iterator<BundleInfo> ite2 = setToInitialConfig.iterator(); ite2.hasNext();) {
+			BundleInfo bInfo = ite2.next();
 			if (bInfo.isMarkedAsStarted())
 				toBeStarted.add(bInfo);
 			else
@@ -349,13 +349,13 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 		if (stream == null)
 			return NULL_BUNDLEINFOS;
 
-		List simpleBundles = SimpleConfiguratorUtils.readConfiguration(stream, installArea);
+		List<org.eclipse.equinox.internal.simpleconfigurator.utils.BundleInfo> simpleBundles = SimpleConfiguratorUtils.readConfiguration(stream, installArea);
 
 		// convert to FrameworkAdmin BundleInfo Type
 		BundleInfo[] result = new BundleInfo[simpleBundles.size()];
 		int i = 0;
-		for (Iterator iterator = simpleBundles.iterator(); iterator.hasNext();) {
-			org.eclipse.equinox.internal.simpleconfigurator.utils.BundleInfo simpleInfo = (org.eclipse.equinox.internal.simpleconfigurator.utils.BundleInfo) iterator.next();
+		for (Iterator<org.eclipse.equinox.internal.simpleconfigurator.utils.BundleInfo> iterator = simpleBundles.iterator(); iterator.hasNext();) {
+			org.eclipse.equinox.internal.simpleconfigurator.utils.BundleInfo simpleInfo = iterator.next();
 			URI location = simpleInfo.getLocation();
 			if (!location.isAbsolute() && simpleInfo.getBaseLocation() != null)
 				location = URIUtil.makeAbsolute(location, simpleInfo.getBaseLocation());
@@ -380,7 +380,7 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 		if (backup && outputFile.exists()) {
 			File backupFile = Utils.getSimpleDataFormattedFile(outputFile);
 			if (!outputFile.renameTo(backupFile)) {
-				throw new IOException("Fail to rename from (" + outputFile + ") to (" + backupFile + ")");
+				throw new IOException("Fail to rename from (" + outputFile + ") to (" + backupFile + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 			}
 		}
 
@@ -445,8 +445,8 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 	}
 
 	public BundleInfo[] save(Manipulator manipulator, boolean backup) throws IOException {
-		List setToInitialConfig = new LinkedList();
-		List setToSimpleConfig = new LinkedList();
+		List<BundleInfo> setToInitialConfig = new LinkedList<BundleInfo>();
+		List<BundleInfo> setToSimpleConfig = new LinkedList<BundleInfo>();
 		ConfigData configData = manipulator.getConfigData();
 
 		if (!divideBundleInfos(manipulator, setToInitialConfig, setToSimpleConfig, configData.getInitialBundleStartLevel()))
@@ -454,7 +454,7 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 
 		File outputFile = getConfigFile(manipulator);
 		URI installArea = ParserUtils.getOSGiInstallArea(Arrays.asList(manipulator.getLauncherData().getProgramArgs()), manipulator.getConfigData().getProperties(), manipulator.getLauncherData()).toURI();
-		saveConfiguration((BundleInfo[]) setToSimpleConfig.toArray(new BundleInfo[setToSimpleConfig.size()]), outputFile, installArea, backup);
+		saveConfiguration(setToSimpleConfig.toArray(new BundleInfo[setToSimpleConfig.size()]), outputFile, installArea, backup);
 		configData.setProperty(SimpleConfiguratorManipulatorImpl.PROP_KEY_CONFIGURL, outputFile.toURL().toExternalForm());
 		return orderingInitialConfig(setToInitialConfig);
 	}
@@ -537,7 +537,7 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 			}
 		}
 
-		List toUninstall = new LinkedList();
+		List<BundleInfo> toUninstall = new LinkedList<BundleInfo>();
 		if (exclusiveInstallation)
 			for (int i = 0; i < currentBInfos.length; i++) {
 				boolean install = false;
@@ -558,8 +558,8 @@ public class SimpleConfiguratorManipulatorImpl implements SimpleConfiguratorMani
 			}
 		}
 		if (exclusiveInstallation)
-			for (Iterator ite = toUninstall.iterator(); ite.hasNext();) {
-				BundleInfo bInfo = (BundleInfo) ite.next();
+			for (Iterator<BundleInfo> ite = toUninstall.iterator(); ite.hasNext();) {
+				BundleInfo bInfo = ite.next();
 				bundleState.uninstallBundle(bInfo);
 			}
 
commit 0f6f5ff14d908f4ed5a850bbe9f46a23a607da5c
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 19:01:10 2013 +0100

    bug 418662: Get rid of compile warnings in official build -
    org.eclipse.equinox.p2.publisher.eclipse
    
    Change-Id: I02f9f6367913e01988f5e65452d2c52c7898a5a7
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

2	2	bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
4	2	bundles/org.eclipse.equinox.frameworkadmin/META-INF/MANIFEST.MF
2	1	bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
2	1	bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
2	1	bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
20	2	bundles/org.eclipse.equinox.p2.publisher.eclipse/.settings/org.eclipse.jdt.core.prefs
2	0	bundles/org.eclipse.equinox.p2.publisher.eclipse/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
12	3	bundles/org.eclipse.equinox.p2.publisher/META-INF/MANIFEST.MF
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
index 7eea4d0..64b906d 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/META-INF/MANIFEST.MF
@@ -17,8 +17,8 @@ Import-Package: org.eclipse.equinox.frameworkadmin;version="[2.0.0,3.0.0)",
  org.osgi.service.log;version="1.3.0",
  org.osgi.service.startlevel;version="1.0.0",
  org.osgi.util.tracker;version="1.3.0"
-Export-Package: org.eclipse.equinox.internal.frameworkadmin.equinox;x-friends:="org.eclipse.equinox.p2.publisher,org.eclipse.equinox.simpleconfigurator.manipulator",
- org.eclipse.equinox.internal.frameworkadmin.equinox.utils;x-internal:=true
+Export-Package: org.eclipse.equinox.internal.frameworkadmin.equinox;x-friends:="org.eclipse.equinox.p2.publisher,org.eclipse.equinox.p2.publisher.eclipse,org.eclipse.equinox.simpleconfigurator.manipulator",
+ org.eclipse.equinox.internal.frameworkadmin.equinox.utils;x-friends:="org.eclipse.equinox.p2.publisher.eclipse"
 Require-Bundle: org.eclipse.equinox.common
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Service-Component: OSGI-INF/fwadmin.xml
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.frameworkadmin/META-INF/MANIFEST.MF
index 2a18d74..f57636f 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.frameworkadmin/META-INF/MANIFEST.MF
@@ -12,7 +12,8 @@ Export-Package: org.eclipse.equinox.frameworkadmin;version="2.0.0",
  org.eclipse.equinox.internal.frameworkadmin.utils;
   x-friends:="org.eclipse.equinox.frameworkadmin.equinox,
    org.eclipse.equinox.p2.publisher,
-   org.eclipse.equinox.simpleconfigurator.manipulator",
+   org.eclipse.equinox.simpleconfigurator.manipulator,
+   org.eclipse.equinox.p2.publisher.eclipse",
  org.eclipse.equinox.internal.provisional.configuratormanipulator;x-friends:="org.eclipse.equinox.frameworkadmin.equinox,org.eclipse.equinox.simpleconfigurator.manipulator",
  org.eclipse.equinox.internal.provisional.frameworkadmin;
   x-friends:="org.eclipse.equinox.frameworkadmin.equinox,
@@ -20,7 +21,8 @@ Export-Package: org.eclipse.equinox.frameworkadmin;version="2.0.0",
    org.eclipse.equinox.p2.touchpoint.eclipse,
    org.eclipse.equinox.simpleconfigurator.manipulator,
    org.eclipse.pde.core,
-   org.eclipse.pde.ui"
+   org.eclipse.pde.ui,
+   org.eclipse.equinox.p2.publisher.eclipse"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Require-Bundle: org.eclipse.equinox.common;bundle-version="3.4.0"
 Bundle-ActivationPolicy: lazy
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
index 4c2b610..54771a0 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
@@ -14,7 +14,8 @@ Export-Package: org.eclipse.equinox.internal.p2.artifact.processing;x-friends:="
    org.eclipse.equinox.p2.reconciler.dropins,
    org.eclipse.equinox.p2.ui,
    org.eclipse.equinox.p2.directorywatcher,
-   org.eclipse.equinox.p2.repository.tools",
+   org.eclipse.equinox.p2.repository.tools,
+   org.eclipse.equinox.p2.publisher.eclipse",
  org.eclipse.equinox.internal.p2.artifact.repository.simple;
   x-friends:="org.eclipse.equinox.p2.touchpoint.eclipse,
    org.eclipse.equinox.p2.tests,
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
index c5ef63b..774a7c2 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
@@ -13,7 +13,8 @@ Export-Package: org.eclipse.equinox.internal.p2.metadata.repository;
    org.eclipse.equinox.p2.ui,
    org.eclipse.equinox.p2.updatesite,
    org.eclipse.equinox.p2.extensionlocation,
-   org.eclipse.equinox.p2.repository.tools",
+   org.eclipse.equinox.p2.repository.tools,
+   org.eclipse.equinox.p2.publisher.eclipse",
  org.eclipse.equinox.internal.p2.metadata.repository.io;x-friends:="org.eclipse.equinox.p2.engine",
  org.eclipse.equinox.p2.metadata.io
 Require-Bundle: org.eclipse.equinox.common;bundle-version="[3.5.0,4.0.0)",
diff --git a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
index 00386cb..0197f71 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
@@ -22,7 +22,8 @@ Export-Package: org.eclipse.equinox.internal.p2.metadata;
    org.eclipse.equinox.p2.touchpoint.eclipse,
    org.eclipse.equinox.p2.repository.tools,
    org.eclipse.equinox.p2.reconciler.dropins,
-   org.eclipse.equinox.p2.repository",
+   org.eclipse.equinox.p2.repository,
+   org.eclipse.equinox.p2.publisher.eclipse",
  org.eclipse.equinox.internal.p2.metadata.expression;
   x-friends:="org.eclipse.equinox.p2.artifact.repository,
    org.eclipse.equinox.p2.directorywatcher,
diff --git a/bundles/org.eclipse.equinox.p2.publisher.eclipse/.settings/org.eclipse.jdt.core.prefs b/bundles/org.eclipse.equinox.p2.publisher.eclipse/.settings/org.eclipse.jdt.core.prefs
index 409e92e..37642fc 100644
--- a/bundles/org.eclipse.equinox.p2.publisher.eclipse/.settings/org.eclipse.jdt.core.prefs
+++ b/bundles/org.eclipse.equinox.p2.publisher.eclipse/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,3 @@
-#Thu Feb 17 10:12:47 CET 2011
 eclipse.preferences.version=1
 org.eclipse.jdt.core.builder.cleanOutputFolder=clean
 org.eclipse.jdt.core.builder.duplicateResourceTask=warning
@@ -8,6 +7,12 @@ org.eclipse.jdt.core.builder.resourceCopyExclusionFilter=*.launch
 org.eclipse.jdt.core.circularClasspath=error
 org.eclipse.jdt.core.classpath.exclusionPatterns=enabled
 org.eclipse.jdt.core.classpath.multipleOutputLocations=enabled
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
@@ -25,9 +30,10 @@ org.eclipse.jdt.core.compiler.problem.deadCode=warning
 org.eclipse.jdt.core.compiler.problem.deprecation=warning
 org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
 org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=enabled
-org.eclipse.jdt.core.compiler.problem.discouragedReference=ignore
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
 org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=ignore
 org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
 org.eclipse.jdt.core.compiler.problem.fatalOptionalError=enabled
 org.eclipse.jdt.core.compiler.problem.fieldHiding=warning
@@ -46,7 +52,9 @@ org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef=disabled
 org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility=private
 org.eclipse.jdt.core.compiler.problem.localVariableHiding=warning
 org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
 org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
 org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=ignore
 org.eclipse.jdt.core.compiler.problem.missingJavadocComments=ignore
 org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding=enabled
@@ -62,13 +70,20 @@ org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warni
 org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
 org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
 org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=warning
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
 org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
 org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
 org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
 org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
 org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=ignore
 org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
 org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=ignore
 org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
 org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
 org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
@@ -76,10 +91,12 @@ org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
 org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
 org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
 org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=warning
 org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
 org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
 org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
 org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=warning
 org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
 org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
@@ -98,6 +115,7 @@ org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=enabled
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=enabled
 org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=error
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=ignore
 org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
 org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
 org.eclipse.jdt.core.compiler.source=1.5
diff --git a/bundles/org.eclipse.equinox.p2.publisher.eclipse/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java b/bundles/org.eclipse.equinox.p2.publisher.eclipse/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
index 0810854..02662a6 100644
--- a/bundles/org.eclipse.equinox.p2.publisher.eclipse/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher.eclipse/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
@@ -60,6 +60,7 @@ import org.osgi.framework.Constants;
  * <li>{@link ITouchpointAdvice}</li>
  * </ul>
  */
+@SuppressWarnings("restriction")
 public class BundlesAction extends AbstractPublisherAction {
 
 	/**
@@ -663,6 +664,7 @@ public class BundlesAction extends AbstractPublisherAction {
 	/**
 	 * @return the same result as {@link Headers#parseManifest(InputStream)}, but with a modifiable {@link Headers} instance
 	 */
+	@SuppressWarnings("restriction")
 	private static Headers<String, String> parseBundleManifestIntoModifyableDictionaryWithCaseInsensitiveKeys(InputStream manifestStream) throws IOException, BundleException {
 		return (Headers<String, String>) ManifestElement.parseBundleManifest(manifestStream, new Headers<String, String>(10));
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.publisher/META-INF/MANIFEST.MF
index dc0a222..c7132db 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.publisher/META-INF/MANIFEST.MF
@@ -12,9 +12,18 @@ Export-Package: org.eclipse.equinox.internal.p2.publisher;
    org.eclipse.equinox.p2.ui.sdk,
    org.eclipse.equinox.p2.updatesite,
    org.eclipse.equinox.p2.publisher.eclipse",
- org.eclipse.equinox.p2.publisher;x-friends:="org.eclipse.equinox.p2.directorywatcher,org.eclipse.equinox.p2.touchpoint.eclipse,org.eclipse.equinox.p2.updatesite,org.eclipse.pde.publishing",
- org.eclipse.equinox.p2.publisher.actions;x-friends:="org.eclipse.equinox.p2.updatesite,org.eclipse.equinox.p2.directorywatcher,org.eclipse.pde.publishing",
- org.eclipse.equinox.spi.p2.publisher;x-friends:="org.eclipse.equinox.p2.updatesite"
+ org.eclipse.equinox.p2.publisher;
+  x-friends:="org.eclipse.equinox.p2.directorywatcher,
+   org.eclipse.equinox.p2.touchpoint.eclipse,
+   org.eclipse.equinox.p2.updatesite,
+   org.eclipse.pde.publishing,
+   org.eclipse.equinox.p2.publisher.eclipse",
+ org.eclipse.equinox.p2.publisher.actions;
+  x-friends:="org.eclipse.equinox.p2.updatesite,
+   org.eclipse.equinox.p2.directorywatcher,
+   org.eclipse.pde.publishing,
+   org.eclipse.equinox.p2.publisher.eclipse",
+ org.eclipse.equinox.spi.p2.publisher;x-friends:="org.eclipse.equinox.p2.updatesite,org.eclipse.equinox.p2.publisher.eclipse"
 Require-Bundle: org.eclipse.equinox.common;bundle-version="[3.5.0,4.0.0)"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
commit e68ffe41281328dfb97e02f49327bd040d01b7b9
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 19:24:21 2013 +0100

    bug 418662 - Get rid of compile warnings in official build -
    org.eclipse.ecf.provider.filetransfer
    
    Change-Id: Ib768c55c6eb09d6dd95664137e8b7b853f2f594b
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

9	0	bundles/org.eclipse.equinox.p2.transport.ecf/.settings/org.eclipse.jdt.core.prefs
1	0	bundles/org.eclipse.equinox.p2.transport.ecf/src/org/eclipse/equinox/internal/p2/transport/ecf/Activator.java
diff --git a/bundles/org.eclipse.equinox.p2.transport.ecf/.settings/org.eclipse.jdt.core.prefs b/bundles/org.eclipse.equinox.p2.transport.ecf/.settings/org.eclipse.jdt.core.prefs
index 5fc4b2b..a69cab2 100644
--- a/bundles/org.eclipse.equinox.p2.transport.ecf/.settings/org.eclipse.jdt.core.prefs
+++ b/bundles/org.eclipse.equinox.p2.transport.ecf/.settings/org.eclipse.jdt.core.prefs
@@ -6,6 +6,8 @@ org.eclipse.jdt.core.builder.resourceCopyExclusionFilter=*.launch
 org.eclipse.jdt.core.circularClasspath=error
 org.eclipse.jdt.core.classpath.exclusionPatterns=enabled
 org.eclipse.jdt.core.classpath.multipleOutputLocations=enabled
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
 org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
 org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
 org.eclipse.jdt.core.compiler.annotation.nonnullisdefault=disabled
@@ -48,7 +50,9 @@ org.eclipse.jdt.core.compiler.problem.invalidJavadoc=error
 org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility=private
 org.eclipse.jdt.core.compiler.problem.localVariableHiding=warning
 org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
 org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
 org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=error
 org.eclipse.jdt.core.compiler.problem.missingJavadocComments=ignore
 org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding=enabled
@@ -63,9 +67,12 @@ org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=ignor
 org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
 org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
 org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=warning
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
 org.eclipse.jdt.core.compiler.problem.nullReference=warning
 org.eclipse.jdt.core.compiler.problem.nullSpecInsufficientInfo=warning
 org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
 org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
 org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
 org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
@@ -83,6 +90,7 @@ org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
 org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
 org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
 org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=warning
 org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
 org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
@@ -106,6 +114,7 @@ org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=enabled
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=enabled
 org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=error
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=ignore
 org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
 org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
 org.eclipse.jdt.core.compiler.source=1.5
diff --git a/bundles/org.eclipse.equinox.p2.transport.ecf/src/org/eclipse/equinox/internal/p2/transport/ecf/Activator.java b/bundles/org.eclipse.equinox.p2.transport.ecf/src/org/eclipse/equinox/internal/p2/transport/ecf/Activator.java
index 0cb1a8a..0a4d01f 100644
--- a/bundles/org.eclipse.equinox.p2.transport.ecf/src/org/eclipse/equinox/internal/p2/transport/ecf/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.transport.ecf/src/org/eclipse/equinox/internal/p2/transport/ecf/Activator.java
@@ -24,6 +24,7 @@ import org.osgi.util.tracker.ServiceTracker;
  * This activator has helper methods to get file transfer service tracker, and
  * for making sure required ECF bundles are started.
  */
+@SuppressWarnings("restriction")
 public class Activator implements BundleActivator {
 
 	public static final String ID = "org.eclipse.equinox.p2.transport.ecf"; //$NON-NLS-1$
commit d7badb5db57e955f940cb43814cb204c71d15985
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 19:34:06 2013 +0100

    bug 418662 - Get rid of compile warnings in official build -
    org.eclipse.equinox.p2.discovery.compatibility
    Change-Id: Ieaf254570551fef783d1cc6bbf79daf51847d5fa

2	1	bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
1	0	bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
4	0	bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DirectoryParser.java
1	0	bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DiscoveryRegistryStrategy.java
2	1	bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.transport.ecf/META-INF/MANIFEST.MF
diff --git a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
index b03a7a6..93eca1a 100644
--- a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
@@ -41,7 +41,8 @@ Export-Package: org.eclipse.equinox.internal.p2.core;x-friends:="org.eclipse.equ
    org.eclipse.equinox.p2.updatechecker,
    org.eclipse.equinox.p2.updatechecker.app,
    org.eclipse.equinox.p2.updatesite,
-   org.eclipse.equinox.p2.transport.ecf",
+   org.eclipse.equinox.p2.transport.ecf,
+   org.eclipse.equinox.p2.discovery.compatibility",
  org.eclipse.equinox.internal.provisional.p2.core.eventbus;
   x-friends:="org.eclipse.equinox.p2.artifact.repository,
    org.eclipse.equinox.p2.director,
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
index 29e1162..bb47960 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/BundleDiscoveryStrategy.java
@@ -28,6 +28,7 @@ public class BundleDiscoveryStrategy extends AbstractDiscoveryStrategy {
 		// constructor
 	}
 
+	@SuppressWarnings("unused")
 	@Override
 	public void performDiscovery(IProgressMonitor monitor) throws CoreException {
 		if (items == null || categories == null) {
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DirectoryParser.java b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DirectoryParser.java
index 5cac98f..76a9fe1 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DirectoryParser.java
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DirectoryParser.java
@@ -60,6 +60,7 @@ public class DirectoryParser {
 		return contentHandler.directory;
 	}
 
+	@SuppressWarnings("unused")
 	private class DirectoryContentHandler implements ContentHandler {
 
 		Directory directory;
@@ -68,6 +69,9 @@ public class DirectoryParser {
 			// ignore
 		}
 
+		/**
+		 * @throws SAXException  
+		 */
 		public void endDocument() throws SAXException {
 			// ignore
 		}
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DiscoveryRegistryStrategy.java b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DiscoveryRegistryStrategy.java
index c523fb1..edea13a 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DiscoveryRegistryStrategy.java
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/DiscoveryRegistryStrategy.java
@@ -155,6 +155,7 @@ class DiscoveryRegistryStrategy extends RegistryStrategy {
 				try {
 					jar.close();
 				} catch (Exception e) {
+					// ignore
 				}
 			}
 			jars.clear();
diff --git a/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
index bc6bf77..c89afcd 100644
--- a/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.repository/META-INF/MANIFEST.MF
@@ -18,7 +18,8 @@ Export-Package: org.eclipse.equinox.internal.p2.persistence;
    org.eclipse.equinox.p2.updatesite,
    org.eclipse.equinox.p2.repository.tools,
    org.eclipse.equinox.p2.transport.ecf,
-   org.eclipse.equinox.p2.engine",
+   org.eclipse.equinox.p2.engine,
+   org.eclipse.equinox.p2.discovery.compatibility",
  org.eclipse.equinox.internal.p2.repository.helpers;
   x-friends:="org.eclipse.equinox.p2.artifact.repository,
    org.eclipse.equinox.p2.exemplarysetup,
diff --git a/bundles/org.eclipse.equinox.p2.transport.ecf/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.transport.ecf/META-INF/MANIFEST.MF
index 8dafc6b..b2b8497 100644
--- a/bundles/org.eclipse.equinox.p2.transport.ecf/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.transport.ecf/META-INF/MANIFEST.MF
@@ -14,7 +14,7 @@ Require-Bundle: org.eclipse.ecf;bundle-version="3.1.0",
 Service-Component: OSGI-INF/ecfTransport.xml
 Bundle-Activator: org.eclipse.equinox.internal.p2.transport.ecf.Activator
 Bundle-ActivationPolicy: lazy
-Export-Package: org.eclipse.equinox.internal.p2.transport.ecf;x-internal:=true
+Export-Package: org.eclipse.equinox.internal.p2.transport.ecf;x-friends:="org.eclipse.equinox.p2.discovery.compatibility"
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Import-Package: org.eclipse.osgi.util;version="1.1.0",
commit 2ca022eb0df3df4091a6f06d8f8b10f8675fc88b
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 19:40:24 2013 +0100

    bug 418662: Get rid of compile warnings in official build -
    org.eclipse.equinox.p2.repository.tools
    
    Change-Id: I9cedbed4c0aac82961e41c88d9dfc355c972f934
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

1	0	bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/comparator/JarComparator.java
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/comparator/JarComparator.java b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/comparator/JarComparator.java
index 8ebea0c..15d4833 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/comparator/JarComparator.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/comparator/JarComparator.java
@@ -169,6 +169,7 @@ public class JarComparator implements IArtifactComparator {
 		return parent.getChildren().length == 0 ? Status.OK_STATUS : parent;
 	}
 
+	@SuppressWarnings("resource")
 	public IStatus compare(File sourceFile, File destinationFile) {
 		ZipFile firstFile = null;
 		ZipFile secondFile = null;
commit 378ec6d34326ecb212502f19ecb57f85285cfa59
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 20:00:33 2013 +0100

    bug 418662 - Get rid of compile warnings in official build -
    org.eclipse.equinox.p2.ui.discovery
    
    Change-Id: Iec3ef1ec194481d950d313a0f3ce24ce6a7fa93f
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

2	1	bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
2	1	bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
24	1	bundles/org.eclipse.equinox.p2.ui.discovery/.settings/org.eclipse.jdt.core.prefs
0	1	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/repository/RepositoryDiscoveryStrategy.java
1	0	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListItem.java
22	21	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
7	6	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/PatternFilter.java
1	1	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java
1	0	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/WorkbenchUtil.java
12	3	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
diff --git a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
index 93eca1a..c89569f 100644
--- a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
@@ -42,7 +42,8 @@ Export-Package: org.eclipse.equinox.internal.p2.core;x-friends:="org.eclipse.equ
    org.eclipse.equinox.p2.updatechecker.app,
    org.eclipse.equinox.p2.updatesite,
    org.eclipse.equinox.p2.transport.ecf,
-   org.eclipse.equinox.p2.discovery.compatibility",
+   org.eclipse.equinox.p2.discovery.compatibility,
+   org.eclipse.equinox.p2.ui.discovery",
  org.eclipse.equinox.internal.provisional.p2.core.eventbus;
   x-friends:="org.eclipse.equinox.p2.artifact.repository,
    org.eclipse.equinox.p2.director,
diff --git a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
index 0197f71..5663eb5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
@@ -23,7 +23,8 @@ Export-Package: org.eclipse.equinox.internal.p2.metadata;
    org.eclipse.equinox.p2.repository.tools,
    org.eclipse.equinox.p2.reconciler.dropins,
    org.eclipse.equinox.p2.repository,
-   org.eclipse.equinox.p2.publisher.eclipse",
+   org.eclipse.equinox.p2.publisher.eclipse,
+   org.eclipse.equinox.p2.ui.discovery",
  org.eclipse.equinox.internal.p2.metadata.expression;
   x-friends:="org.eclipse.equinox.p2.artifact.repository,
    org.eclipse.equinox.p2.directorywatcher,
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/.settings/org.eclipse.jdt.core.prefs b/bundles/org.eclipse.equinox.p2.ui.discovery/.settings/org.eclipse.jdt.core.prefs
index c65423d..2a689a7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/.settings/org.eclipse.jdt.core.prefs
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,3 @@
-#Wed Feb 17 14:07:15 PST 2010
 eclipse.preferences.version=1
 org.eclipse.jdt.core.builder.cleanOutputFolder=clean
 org.eclipse.jdt.core.builder.duplicateResourceTask=warning
@@ -8,6 +7,12 @@ org.eclipse.jdt.core.builder.resourceCopyExclusionFilter=*.launch
 org.eclipse.jdt.core.circularClasspath=error
 org.eclipse.jdt.core.classpath.exclusionPatterns=enabled
 org.eclipse.jdt.core.classpath.multipleOutputLocations=enabled
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
@@ -28,6 +33,7 @@ org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=
 org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
 org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=ignore
 org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
 org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
 org.eclipse.jdt.core.compiler.problem.fieldHiding=warning
@@ -35,6 +41,7 @@ org.eclipse.jdt.core.compiler.problem.finalParameterBound=ignore
 org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
 org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
 org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
 org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
 org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=ignore
 org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=warning
@@ -42,7 +49,9 @@ org.eclipse.jdt.core.compiler.problem.invalidJavadoc=error
 org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility=private
 org.eclipse.jdt.core.compiler.problem.localVariableHiding=warning
 org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
 org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
 org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=ignore
 org.eclipse.jdt.core.compiler.problem.missingJavadocComments=ignore
 org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding=enabled
@@ -57,20 +66,33 @@ org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=ignor
 org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
 org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
 org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=warning
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
 org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
 org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
 org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
 org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
 org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=ignore
 org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
 org.eclipse.jdt.core.compiler.problem.redundantNullCheck=ignore
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=ignore
 org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
 org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
 org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
 org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=warning
 org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
 org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
 org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=warning
 org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
 org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
@@ -89,6 +111,7 @@ org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=enabled
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=enabled
 org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=error
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=ignore
 org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
 org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
 org.eclipse.jdt.core.compiler.source=1.5
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/repository/RepositoryDiscoveryStrategy.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/repository/RepositoryDiscoveryStrategy.java
index 9976ba0..621f61d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/repository/RepositoryDiscoveryStrategy.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/repository/RepositoryDiscoveryStrategy.java
@@ -76,7 +76,6 @@ public class RepositoryDiscoveryStrategy extends AbstractDiscoveryStrategy {
 		}
 	}
 
-	@SuppressWarnings("restriction")
 	private void connectCategories() {
 		for (CatalogCategory category : categories) {
 			if (category.getData() instanceof IInstallableUnit) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListItem.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListItem.java
index 68917b4..646be56 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListItem.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListItem.java
@@ -28,6 +28,7 @@ import org.eclipse.ui.PlatformUI;
  * 
  * @author Steffen Pingel
  */
+@SuppressWarnings("restriction")
 public abstract class ControlListItem<T> extends Composite {
 
 	static String DARK_COLOR_KEY = "org.eclipse.mylyn.commons.ui.ControlListItem.DARK_COLOR"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
index befaded..677cb2e 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
@@ -56,11 +56,11 @@ public abstract class ControlListViewer extends StructuredViewer {
 		//scrolled.setShowFocusedControl(true);
 
 		control = new Composite(scrolled, SWT.NONE) {
-//			@Override
-//			public boolean setFocus() {
-//				forceFocus();
-//				return true;
-//			}
+			//			@Override
+			//			public boolean setFocus() {
+			//				forceFocus();
+			//				return true;
+			//			}
 
 			@Override
 			public void setVisible(boolean visible) {
@@ -115,7 +115,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 						if (children.length > 0) {
 							boolean selected = false;
 							for (int i = 0; i < children.length; i++) {
-								ControlListItem item = (ControlListItem) children[i];
+								ControlListItem<?> item = (ControlListItem<?>) children[i];
 								if (item.isSelected()) {
 									selected = true;
 									if (i > 0) {
@@ -135,7 +135,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 						if (children.length > 0) {
 							boolean selected = false;
 							for (int i = 0; i < children.length; i++) {
-								ControlListItem item = (ControlListItem) children[i];
+								ControlListItem<?> item = (ControlListItem<?>) children[i];
 								if (item.isSelected()) {
 									selected = true;
 									if (i < children.length - 1) {
@@ -202,11 +202,11 @@ public abstract class ControlListViewer extends StructuredViewer {
 
 		// Update with the new elements to prevent flash
 		for (Control element : existingChildren) {
-			((ControlListItem) element).dispose();
+			((ControlListItem<?>) element).dispose();
 		}
 
 		for (int i = 0; i < infos.length; i++) {
-			ControlListItem item = createNewItem(infos[i]);
+			ControlListItem<?> item = createNewItem(infos[i]);
 			item.updateColors(i);
 		}
 
@@ -214,7 +214,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 		doUpdateContent();
 	}
 
-	private void updateSize(Control control) {
+	private void updateSize(@SuppressWarnings("hiding") Control control) {
 		if (control == null) {
 			return;
 		}
@@ -240,8 +240,8 @@ public abstract class ControlListViewer extends StructuredViewer {
 	 * @param element
 	 * @return ControlListItem
 	 */
-	private ControlListItem createNewItem(Object element) {
-		final ControlListItem item = doCreateItem(control, element);
+	private ControlListItem<?> createNewItem(Object element) {
+		final ControlListItem<?> item = doCreateItem(control, element);
 		//		item.getChildren()[0].addPaintListener(new PaintListener() {
 		//			public void paintControl(PaintEvent e) {
 		//				if (hasFocus && item.isSelected()) {
@@ -292,22 +292,22 @@ public abstract class ControlListViewer extends StructuredViewer {
 		return item;
 	}
 
-	protected abstract ControlListItem doCreateItem(Composite parent, Object element);
+	protected abstract ControlListItem<?> doCreateItem(Composite parent, Object element);
 
 	@Override
-	protected ControlListItem doFindInputItem(Object element) {
+	protected ControlListItem<?> doFindInputItem(Object element) {
 		return null;
 	}
 
 	@Override
-	protected ControlListItem doFindItem(Object element) {
+	protected ControlListItem<?> doFindItem(Object element) {
 		Control[] children = control.getChildren();
 		for (Control child : children) {
 			if (child.isDisposed() || child.getData() == null) {
 				continue;
 			}
 			if (child.getData().equals(element)) {
-				return (ControlListItem) child;
+				return (ControlListItem<?>) child;
 			}
 		}
 		return null;
@@ -332,7 +332,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 		Control[] children = control.getChildren();
 		ArrayList<Object> selection = new ArrayList<Object>(children.length);
 		for (Control child : children) {
-			ControlListItem item = (ControlListItem) child;
+			ControlListItem<?> item = (ControlListItem<?>) child;
 			if (item.isSelected() && item.getData() != null) {
 				selection.add(item.getData());
 			}
@@ -341,6 +341,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 	}
 
 	protected void handleOpen() {
+		@SuppressWarnings("hiding")
 		Control control = getControl();
 		if (control != null && !control.isDisposed()) {
 			ISelection selection = getSelection();
@@ -370,7 +371,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 			add(new Object[] {element});
 			return;
 		}
-		((ControlListItem) widget).refresh();
+		((ControlListItem<?>) widget).refresh();
 
 		updateSize(control);
 	}
@@ -386,7 +387,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 
 		Control[] existingChildren = control.getChildren();
 		for (int i = 0; i < existingChildren.length; i++) {
-			ControlListItem item = (ControlListItem) existingChildren[i];
+			ControlListItem<?> item = (ControlListItem<?>) existingChildren[i];
 			item.updateColors(i);
 		}
 		control.layout(true);
@@ -475,7 +476,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 		}
 
 		for (int i = 0; i < infos.length; i++) {
-			ControlListItem item = createNewItem(infos[i]);
+			ControlListItem<?> item = createNewItem(infos[i]);
 			item.updateColors(i);
 		}
 
@@ -491,7 +492,7 @@ public abstract class ControlListViewer extends StructuredViewer {
 		int top = scrolled.getOrigin().y;
 		int bottom = top + scrolled.getParent().getBounds().height;
 		for (Control element : children) {
-			ControlListItem item = (ControlListItem) element;
+			ControlListItem<?> item = (ControlListItem<?>) element;
 			item.setDisplayed(top, bottom);
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/PatternFilter.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/PatternFilter.java
index d16f57b..ad75e82 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/PatternFilter.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/PatternFilter.java
@@ -24,16 +24,17 @@ import org.eclipse.ui.internal.misc.StringMatcher;
  * @see org.eclipse.ui.dialogs.FilteredTree
  * @since 3.2
  */
+@SuppressWarnings("restriction")
 public class PatternFilter extends ViewerFilter {
 	/*
 	 * Cache of filtered elements in the tree
 	 */
-	private final Map cache = new HashMap();
+	private final Map<Object, Object> cache = new HashMap<Object, Object>();
 
 	/*
 	 * Maps parent elements to TRUE or FALSE
 	 */
-	private final Map foundAnyCache = new HashMap();
+	private final Map<Object, Boolean> foundAnyCache = new HashMap<Object, Boolean>();
 
 	private boolean useCache = false;
 
@@ -69,7 +70,7 @@ public class PatternFilter extends ViewerFilter {
 
 		Object[] filtered = (Object[]) cache.get(parent);
 		if (filtered == null) {
-			Boolean foundAny = (Boolean) foundAnyCache.get(parent);
+			Boolean foundAny = foundAnyCache.get(parent);
 			if (foundAny != null && !foundAny.booleanValue()) {
 				filtered = EMPTY;
 			} else {
@@ -103,7 +104,7 @@ public class PatternFilter extends ViewerFilter {
 		if (filtered != null) {
 			return filtered.length > 0;
 		}
-		Boolean foundAny = (Boolean) foundAnyCache.get(parent);
+		Boolean foundAny = foundAnyCache.get(parent);
 		if (foundAny == null) {
 			foundAny = computeAnyVisible(viewer, elements) ? Boolean.TRUE : Boolean.FALSE;
 			foundAnyCache.put(parent, foundAny);
@@ -273,7 +274,7 @@ public class PatternFilter extends ViewerFilter {
 	 * @return an array of words
 	 */
 	private String[] getWords(String text) {
-		List words = new ArrayList();
+		List<String> words = new ArrayList<String>();
 		// Break the text up into words, separating based on whitespace and
 		// common punctuation.
 		// Previously used String.split(..., "\\W"), where "\W" is a regular
@@ -297,7 +298,7 @@ public class PatternFilter extends ViewerFilter {
 			}
 			i = j;
 		}
-		return (String[]) words.toArray(new String[words.size()]);
+		return words.toArray(new String[words.size()]);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java
index 340744f..c85c940 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java
@@ -31,6 +31,7 @@ import org.eclipse.ui.plugin.AbstractUIPlugin;
 /**
  * @author Shawn Minto
  */
+@SuppressWarnings("restriction")
 public class TextSearchControl extends Composite {
 
 	private static final String FIND_TEXT_MEMENTO_ELEMENT = "text"; //$NON-NLS-1$
@@ -88,7 +89,6 @@ public class TextSearchControl extends Composite {
 
 	private static Boolean useNativeSearchField;
 
-	@SuppressWarnings("restriction")
 	public TextSearchControl(Composite parent, boolean automaticFind) {
 		super(parent, getCompositeStyle(automaticFind, parent));
 		this.automaticFind = automaticFind;
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/WorkbenchUtil.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/WorkbenchUtil.java
index e8e4027..dabb8bc 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/WorkbenchUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/WorkbenchUtil.java
@@ -36,6 +36,7 @@ import org.eclipse.ui.internal.browser.WorkbenchBrowserSupport;
  * @author Mik Kersten
  * @author Steffen Pingel
  */
+@SuppressWarnings("restriction")
 public class WorkbenchUtil {
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index 060ad46..06327b1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -10,14 +10,23 @@ Export-Package: org.eclipse.equinox.internal.p2.ui;
   x-friends:="org.eclipse.equinox.p2.ui.admin,
    org.eclipse.pde.ui,
    org.eclipse.equinox.p2.ui.sdk,
-   org.eclipse.equinox.p2.ui.rcp, org.eclipse.equinox.p2.ui.importexport, org.eclipse.equinox.p2.ui.sdk.scheduler",
+   org.eclipse.equinox.p2.ui.rcp,
+   org.eclipse.equinox.p2.ui.importexport,
+   org.eclipse.equinox.p2.ui.sdk.scheduler,
+   org.eclipse.equinox.p2.discovery,
+   org.eclipse.equinox.p2.ui.discovery",
  org.eclipse.equinox.internal.p2.ui.actions;x-friends:="org.eclipse.equinox.p2.ui.admin,org.eclipse.equinox.p2.ui.sdk.scheduler",
- org.eclipse.equinox.internal.p2.ui.dialogs;x-friends:="org.eclipse.equinox.p2.ui.admin,org.eclipse.equinox.p2.ui.sdk.scheduler,org.eclipse.pde.ui,org.eclipse.equinox.p2.ui.importexport",
+ org.eclipse.equinox.internal.p2.ui.dialogs;
+  x-friends:="org.eclipse.equinox.p2.ui.admin,
+   org.eclipse.equinox.p2.ui.sdk.scheduler,
+   org.eclipse.pde.ui,
+   org.eclipse.equinox.p2.ui.importexport",
  org.eclipse.equinox.internal.p2.ui.model;
   x-friends:="org.eclipse.equinox.internal.p2.ui.analysis,
    org.eclipse.equinox.p2.ui.admin,
    org.eclipse.equinox.p2.ui.sdk.scheduler,
-   org.eclipse.equinox.p2.ui.sdk, org.eclipse.equinox.p2.ui.importexport",
+   org.eclipse.equinox.p2.ui.sdk,
+   org.eclipse.equinox.p2.ui.importexport",
  org.eclipse.equinox.internal.p2.ui.query;x-friends:="org.eclipse.equinox.internal.p2.ui.analysis,org.eclipse.equinox.p2.ui.admin",
  org.eclipse.equinox.internal.p2.ui.viewers;x-friends:="org.eclipse.equinox.p2.ui.admin,org.eclipse.equinox.p2.ui.sdk.scheduler,org.eclipse.equinox.p2.ui.importexport",
  org.eclipse.equinox.p2.ui;version="2.0.0"
commit a2344e5ad39e041ee5e822d8bddc4a71bdcd3c03
Author: Krzysztof Daniel <kdaniel@redhat.com>
Date:   Mon Dec 9 20:06:07 2013 +0100

    bug 418662: Get rid of compile warnings in official build -
    org.eclipse.equinox.p2.ui.sdk.scheduler
    
    Warnings ignored as viewers operate using Object and generics don't add
    any value here.
    
    Change-Id: I07cb090373c5d4765b49195a297fa98fccdff2c8
    Signed-off-by: Krzysztof Daniel <kdaniel@redhat.com>

4	0	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/migration/MigrationPage.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/migration/MigrationPage.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/migration/MigrationPage.java
index 6458bb1..9a8d6f6 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/migration/MigrationPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/migration/MigrationPage.java
@@ -732,7 +732,9 @@ public class MigrationPage extends WizardPage implements ISelectableIUsPage, Lis
 
 	// Both checkedElements and checkedElementsUpdates and the logic inside the getCheckedIUElements method
 	// are used to prevent unnecessary call to getUpdates method due to computational cost.
+	@SuppressWarnings("rawtypes")
 	private Set checkedElements;
+	@SuppressWarnings("rawtypes")
 	private Set checkedElementsUpdates;
 	private boolean getUpdatesCanceled;
 
@@ -754,6 +756,7 @@ public class MigrationPage extends WizardPage implements ISelectableIUsPage, Lis
 		return viewer.getCheckedElements();
 	}
 
+	@SuppressWarnings({"rawtypes", "unchecked"})
 	private Object[] getLatestVersionOfCheckedElements() {
 
 		Object[] checkedArray = viewer.getCheckedElements();
@@ -784,6 +787,7 @@ public class MigrationPage extends WizardPage implements ISelectableIUsPage, Lis
 	}
 
 	// Look for update of the current selected installation units and replace the old ons with the updated version
+	@SuppressWarnings("hiding")
 	private Object[] getUpdates(final Object[] checkedElements) {
 
 		final Collection<IInstallableUnit> toInstall = new ArrayList<IInstallableUnit>();

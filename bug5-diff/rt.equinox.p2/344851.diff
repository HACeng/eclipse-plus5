commit 5c45886212a6e9d856100864d5acb4ee07e28e80
Author: Pascal Rapicault <prapicau>
Date:   Fri May 6 03:17:15 2011 +0000

    Bug 344851 - [repository] Composite repo "create" ant tasks should have the ability to set atomic flag

12	1	bundles/org.eclipse.equinox.p2.metadata.repository/src_ant/org/eclipse/equinox/internal/p2/metadata/repository/ant/CreateCompositeMetadataRepositoryTask.java
5	0	bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
9	0	bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RepositoryDescriptor.java
12	1	bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
4	0	bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/DestinationRepository.java
35	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/ant/CompositeRepositoryTaskTest.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src_ant/org/eclipse/equinox/internal/p2/metadata/repository/ant/CreateCompositeMetadataRepositoryTask.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src_ant/org/eclipse/equinox/internal/p2/metadata/repository/ant/CreateCompositeMetadataRepositoryTask.java
index 6400d05..a900396 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src_ant/org/eclipse/equinox/internal/p2/metadata/repository/ant/CreateCompositeMetadataRepositoryTask.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src_ant/org/eclipse/equinox/internal/p2/metadata/repository/ant/CreateCompositeMetadataRepositoryTask.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008, 2010 IBM Corporation and others.
+ * Copyright (c) 2008, 2011 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     SAP AG - repository atomic loading
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.metadata.repository.ant;
 
@@ -29,6 +30,7 @@ public class CreateCompositeMetadataRepositoryTask extends AbstractMDRTask {
 
 	URI location; // desired location of the composite repository
 	String name = "Composite Metadata Repository";
+	boolean atomic = false;
 	boolean compressed = true; // compress by default
 	boolean failOnExists = false; // should we fail if one already exists?
 	Map<String, String> properties = new HashMap<String, String>();
@@ -65,6 +67,8 @@ public class CreateCompositeMetadataRepositoryTask extends AbstractMDRTask {
 		// create the properties
 		if (compressed)
 			properties.put(IRepository.PROP_COMPRESSED, Boolean.toString(true));
+		if (atomic)
+			properties.put(CompositeMetadataRepository.PROP_ATOMIC_LOADING, Boolean.toString(true));
 
 		// create the repository
 		try {
@@ -96,6 +100,13 @@ public class CreateCompositeMetadataRepositoryTask extends AbstractMDRTask {
 	}
 
 	/*
+	 * Set a value indicating whether or not the repository should be atomic.
+	 */
+	public void setAtomic(boolean value) {
+		atomic = value;
+	}
+
+	/*
 	 * Set whether or not we should fail the operation if a repository
 	 * already exists at the location.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
index 71778e8..03d3a1f 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
@@ -15,6 +15,7 @@ import java.util.ArrayList;
 import java.util.List;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository;
+import org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository;
 import org.eclipse.equinox.internal.p2.repository.helpers.RepositoryHelper;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -121,6 +122,8 @@ public class CompositeRepositoryApplication extends AbstractApplication {
 			//No existing repository; create a new repository at destinationLocation but with source's attributes.
 			IArtifactRepository repo = mgr.createRepository(toInit.getRepoLocation(), toInit.getName() != null ? toInit.getName() : (source != null ? source.getName() : Messages.CompositeRepository_default_artifactRepo_name), IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, source != null ? source.getProperties() : null);
 			initRepository(repo, toInit);
+			if (toInit.getAtomic() != null)
+				repo.setProperty(CompositeMetadataRepository.PROP_ATOMIC_LOADING, Boolean.toString(Boolean.valueOf(toInit.getAtomic())));
 			return repo;
 		} catch (IllegalStateException e) {
 			mgr.removeRepository(toInit.getRepoLocation());
@@ -159,6 +162,8 @@ public class CompositeRepositoryApplication extends AbstractApplication {
 			//No existing repository; create a new repository at destinationLocation but with source's attributes.
 			IMetadataRepository repo = mgr.createRepository(toInit.getRepoLocation(), toInit.getName() != null ? toInit.getName() : (source != null ? source.getName() : Messages.CompositeRepository_default_metadataRepo_name), IMetadataRepositoryManager.TYPE_COMPOSITE_REPOSITORY, source != null ? source.getProperties() : null);
 			initRepository(repo, toInit);
+			if (toInit.getAtomic() != null)
+				repo.setProperty(CompositeMetadataRepository.PROP_ATOMIC_LOADING, Boolean.toString(Boolean.valueOf(toInit.getAtomic())));
 			return repo;
 		} catch (IllegalStateException e) {
 			mgr.removeRepository(toInit.getRepoLocation());
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RepositoryDescriptor.java b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RepositoryDescriptor.java
index 2482a61..6b1d9c0 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RepositoryDescriptor.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RepositoryDescriptor.java
@@ -29,6 +29,7 @@ public class RepositoryDescriptor {
 	private int kind = TYPE_BOTH;
 	private URI originalLocation = null;
 	private boolean optional = false;
+	private String atomic = null;
 
 	public void setCompressed(boolean compress) {
 		compressed = compress;
@@ -103,6 +104,14 @@ public class RepositoryDescriptor {
 		kind = determineKind(repoKind);
 	}
 
+	public void setAtomic(String booleanForAtomic) {
+		atomic = booleanForAtomic;
+	}
+
+	public String getAtomic() {
+		return atomic;
+	}
+
 	/*
 	 * Determine the repository type
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java b/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
index cac2fd1..5cfac91 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008, 2010 IBM Corporation and others.
+ * Copyright (c) 2008, 2011 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     SAP AG - repository atomic loading
  *******************************************************************************/
 package org.eclipse.equinox.p2.internal.repository.tools.tasks;
 
@@ -30,6 +31,7 @@ public class CreateCompositeArtifactRepositoryTask extends Task {
 
 	URI location; // desired location of the composite repository
 	String name = "Composite Artifact Repository";
+	boolean atomic = false;
 	boolean compressed = true;
 	boolean failOnExists = false; // should we fail if a repo already exists?
 	Map<String, String> properties = new HashMap<String, String>();
@@ -67,6 +69,8 @@ public class CreateCompositeArtifactRepositoryTask extends Task {
 		// set the properties
 		if (compressed)
 			properties.put(IRepository.PROP_COMPRESSED, Boolean.toString(true));
+		if (atomic)
+			properties.put(CompositeArtifactRepository.PROP_ATOMIC_LOADING, Boolean.toString(true));
 
 		// create the repository
 		try {
@@ -108,6 +112,13 @@ public class CreateCompositeArtifactRepositoryTask extends Task {
 	}
 
 	/*
+	 * Set a value indicating whether or not the repository should be atomic.
+	 */
+	public void setAtomic(boolean value) {
+		atomic = value;
+	}
+
+	/*
 	 * Set whether or not we should fail the operation if a repository
 	 * already exists at the location.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/DestinationRepository.java b/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/DestinationRepository.java
index 71602d5..6c520f1 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/DestinationRepository.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/DestinationRepository.java
@@ -52,6 +52,10 @@ public class DestinationRepository extends DataType {
 		descriptor.setKind(repoKind);
 	}
 
+	public void setAtomic(String atomicAsBoolean) {
+		descriptor.setAtomic(atomicAsBoolean);
+	}
+
 	RepositoryDescriptor getDescriptor() {
 		return descriptor;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/ant/CompositeRepositoryTaskTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/ant/CompositeRepositoryTaskTest.java
index 12f9b92..f7c6b5b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/ant/CompositeRepositoryTaskTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/ant/CompositeRepositoryTaskTest.java
@@ -7,6 +7,7 @@
  * 
  *  Contributors:
  *     IBM Corporation - initial API and implementation
+ *     SAP AG - repository atomic loading
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.ant;
 
@@ -305,6 +306,40 @@ public class CompositeRepositoryTaskTest extends AbstractAntProvisioningTest {
 	}
 
 	/*
+	 * Test that atomic attribute of an artifact repo is honoured
+	 */
+	public void testAtomicArtifactRepository() throws Exception {
+		// Create Composite Artifact Repository Task
+		AntTaskElement createCompositeArtifactRepositoryTask = new AntTaskElement("p2.composite.artifact.repository.create");
+		// Set the atomic attribute to true
+		createCompositeArtifactRepositoryTask.addAttributes(new String[] {"atomic", String.valueOf(true)});
+		createCompositeArtifactRepositoryTask.addAttributes(new String[] {"location", URIUtil.toUnencodedString(compositeSite)});
+		addTask(createCompositeArtifactRepositoryTask);
+		runAntTask();
+
+		ICompositeRepository repo = getCompositeRepository(TYPE_ARTIFACT);
+		assertTrue(repo instanceof CompositeArtifactRepository);
+		assertTrue("The repository is not atomic", Boolean.valueOf((String) repo.getProperties().get(CompositeArtifactRepository.PROP_ATOMIC_LOADING)));
+	}
+
+	/*
+	 * Test that atomic attribute of a metadata repo is honoured
+	 */
+	public void testAtomicMetadataRepository() throws Exception {
+		// Create Composite Metadata Repository Task
+		AntTaskElement createCompositeMetadataRepositoryTask = new AntTaskElement("p2.composite.metadata.repository.create");
+		// Set the atomic attribute to true
+		createCompositeMetadataRepositoryTask.addAttributes(new String[] {"atomic", String.valueOf(true)});
+		createCompositeMetadataRepositoryTask.addAttributes(new String[] {"location", URIUtil.toUnencodedString(compositeSite)});
+		addTask(createCompositeMetadataRepositoryTask);
+		runAntTask();
+
+		ICompositeRepository repo = getCompositeRepository(TYPE_METADATA);
+		assertTrue(repo instanceof CompositeMetadataRepository);
+		assertTrue("The repository is not atomic", Boolean.valueOf((String) repo.getProperties().get(CompositeArtifactRepository.PROP_ATOMIC_LOADING)));
+	}
+
+	/*
 	 * Test that the name is properly set on a newly created repository
 	 */
 	public void testName() {
commit 43d03cdba58ef6cb0c94b0e5a23ddf101778c7cd
Author: Tobias Oberlies <tobias.oberlies@sap.com>
Date:   Tue Mar 12 10:46:23 2013 +0100

    391962 Create atomic repositories by default
    
    - Bug 344851 already added the possibility to set the atomic flag on
    composite repositories. As follow-up of the discussion on bug 356561,
    the default for newly created repositories is changed to atomic=true.
    
    Bug: 391962

10	4	bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
2	3	bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
index 03d3a1f..7ae1a45 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/CompositeRepositoryApplication.java
@@ -122,8 +122,6 @@ public class CompositeRepositoryApplication extends AbstractApplication {
 			//No existing repository; create a new repository at destinationLocation but with source's attributes.
 			IArtifactRepository repo = mgr.createRepository(toInit.getRepoLocation(), toInit.getName() != null ? toInit.getName() : (source != null ? source.getName() : Messages.CompositeRepository_default_artifactRepo_name), IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, source != null ? source.getProperties() : null);
 			initRepository(repo, toInit);
-			if (toInit.getAtomic() != null)
-				repo.setProperty(CompositeMetadataRepository.PROP_ATOMIC_LOADING, Boolean.toString(Boolean.valueOf(toInit.getAtomic())));
 			return repo;
 		} catch (IllegalStateException e) {
 			mgr.removeRepository(toInit.getRepoLocation());
@@ -162,8 +160,6 @@ public class CompositeRepositoryApplication extends AbstractApplication {
 			//No existing repository; create a new repository at destinationLocation but with source's attributes.
 			IMetadataRepository repo = mgr.createRepository(toInit.getRepoLocation(), toInit.getName() != null ? toInit.getName() : (source != null ? source.getName() : Messages.CompositeRepository_default_metadataRepo_name), IMetadataRepositoryManager.TYPE_COMPOSITE_REPOSITORY, source != null ? source.getProperties() : null);
 			initRepository(repo, toInit);
-			if (toInit.getAtomic() != null)
-				repo.setProperty(CompositeMetadataRepository.PROP_ATOMIC_LOADING, Boolean.toString(Boolean.valueOf(toInit.getAtomic())));
 			return repo;
 		} catch (IllegalStateException e) {
 			mgr.removeRepository(toInit.getRepoLocation());
@@ -194,6 +190,16 @@ public class CompositeRepositoryApplication extends AbstractApplication {
 		RepositoryHelper.validDestinationRepository(repository);
 		if (desc.isCompressed() && !repository.getProperties().containsKey(IRepository.PROP_COMPRESSED))
 			repository.setProperty(IRepository.PROP_COMPRESSED, String.valueOf(true));
+
+		setAtomicLoadingProperty(repository, desc);
+	}
+
+	private void setAtomicLoadingProperty(IRepository<?> repository, RepositoryDescriptor desc) {
+		// bug 356561: newly created repositories shall be atomic (by default)
+		boolean atomic = true;
+		if (desc.getAtomic() != null)
+			atomic = Boolean.valueOf(desc.getAtomic());
+		repository.setProperty(CompositeMetadataRepository.PROP_ATOMIC_LOADING, Boolean.toString(atomic));
 	}
 
 	public void setComparator(String value) {
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java b/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
index 5cfac91..000d325 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src_ant/org/eclipse/equinox/p2/internal/repository/tools/tasks/CreateCompositeArtifactRepositoryTask.java
@@ -31,7 +31,7 @@ public class CreateCompositeArtifactRepositoryTask extends Task {
 
 	URI location; // desired location of the composite repository
 	String name = "Composite Artifact Repository";
-	boolean atomic = false;
+	boolean atomic = true; // bug 356561: newly created repositories shall be atomic (by default)
 	boolean compressed = true;
 	boolean failOnExists = false; // should we fail if a repo already exists?
 	Map<String, String> properties = new HashMap<String, String>();
@@ -69,8 +69,7 @@ public class CreateCompositeArtifactRepositoryTask extends Task {
 		// set the properties
 		if (compressed)
 			properties.put(IRepository.PROP_COMPRESSED, Boolean.toString(true));
-		if (atomic)
-			properties.put(CompositeArtifactRepository.PROP_ATOMIC_LOADING, Boolean.toString(true));
+		properties.put(CompositeArtifactRepository.PROP_ATOMIC_LOADING, Boolean.toString(atomic));
 
 		// create the repository
 		try {

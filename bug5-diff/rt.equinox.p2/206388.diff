commit 938199acd9a7145f710d1d346bb47d9aa289e838
Author: Simon Kaegi <skaegi>
Date:   Tue Oct 16 21:03:57 2007 +0000

    Bug 206388 [prov] configure and unconfigure phase

1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/DefaultPhaseSet.java
10	10	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
0	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
1	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
72	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
2	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
2	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java
1	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
72	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
2	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
2	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties
1	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
7	7	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
0	14	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
2	13	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/DefaultPhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/DefaultPhaseSet.java
index 6569b47..04cc35a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/DefaultPhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/DefaultPhaseSet.java
@@ -15,7 +15,7 @@ import org.eclipse.equinox.p2.engine.phases.*;
 public class DefaultPhaseSet extends PhaseSet {
 
 	public DefaultPhaseSet() {
-		super(new Phase[] {new Collect(10), new Uninstall(10), new Install(10)});
+		super(new Phase[] {new Collect(10), new Unconfigure(10), new Uninstall(10), new Install(10), new Configure(10)});
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
index 409144e..5a8d90a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
@@ -86,7 +86,7 @@ public abstract class Phase {
 			if (touchpoint == null)
 				continue;
 
-			if (!touchpointToTouchpointParameters.containsKey(touchpoint) && touchpoint.supports(phaseId)) {
+			if (!touchpointToTouchpointParameters.containsKey(touchpoint)) {
 				touchpointToTouchpointParameters.put(touchpoint, null);
 			}
 		}
@@ -138,8 +138,6 @@ public abstract class Phase {
 				continue;
 
 			Touchpoint touchpoint = getTouchpoint(operand);
-			if (touchpoint == null || !touchpoint.supports(phaseId))
-				continue;
 
 			ProvisioningAction[] actions;
 			try {
@@ -155,13 +153,15 @@ public abstract class Phase {
 			status.add(initializeOperand(operand, parameters));
 			status.add(touchpoint.initializeOperand(operand, phaseId, parameters));
 			parameters = Collections.unmodifiableMap(parameters);
-			for (int j = 0; j < actions.length; j++) {
-				ProvisioningAction action = actions[j];
-				status.add(action.execute(parameters));
-				if (!status.isOK())
-					return;
-
-				session.recordAction(action, operand);
+			if (actions != null) {
+				for (int j = 0; j < actions.length; j++) {
+					ProvisioningAction action = actions[j];
+					status.add(action.execute(parameters));
+					if (!status.isOK())
+						return;
+
+					session.recordAction(action, operand);
+				}
 			}
 			status.add(touchpoint.completeOperand(operand, phaseId, parameters));
 			status.add(completeOperand(operand, parameters));
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
index 7e81f3e..07c95ad 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
@@ -22,8 +22,6 @@ public abstract class Touchpoint {
 
 	public abstract TouchpointType getTouchpointType();
 
-	public abstract boolean supports(String phaseId);
-
 	public abstract ProvisioningAction getAction(String actionId);
 
 	public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
index 5448cbc..60177bf 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
@@ -57,9 +57,7 @@ public class Collect extends Phase {
 	//	}
 
 	protected boolean isApplicable(Operand op) {
-		if (op.second() != null)
-			return true;
-		return false;
+		return (op.second() != null);
 	}
 
 	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Operand currentOperand) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
new file mode 100644
index 0000000..f1f3b5f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
@@ -0,0 +1,72 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.p2.engine.phases;
+
+import java.util.Map;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.p2.engine.*;
+import org.eclipse.equinox.p2.metadata.*;
+
+public class Configure extends Phase {
+
+	public Configure(int weight) {
+		super("configure", weight, Messages.Engine_Configure_Phase);
+	}
+
+	protected boolean isApplicable(Operand op) {
+		return (op.second() != null);
+	}
+
+	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Operand currentOperand) {
+		//TODO: monitor.subTask(NLS.bind(Messages.Engine_Configuring_IU, unit.getId()));
+
+		IInstallableUnit unit = currentOperand.second();
+		if (unit.isFragment())
+			return null;
+
+		TouchpointData[] data = unit.getTouchpointData();
+		if (data == null)
+			return null;
+
+		String[] instructions = getInstructionsFor("configure", data);
+		if (instructions.length == 0)
+			return null;
+
+		InstructionParser parser = new InstructionParser(this, touchpoint);
+		return parser.parseActions(instructions[0]);
+	}
+
+	// We could put this in a utility class, Phase or perhaps refactor touchpoint data
+	static private String[] getInstructionsFor(String key, TouchpointData[] data) {
+		String[] matches = new String[data.length];
+		int count = 0;
+		for (int i = 0; i < data.length; i++) {
+			matches[count] = data[i].getInstructions(key);
+			if (matches[count] != null)
+				count++;
+		}
+		if (count == data.length)
+			return matches;
+		String[] result = new String[count];
+		System.arraycopy(matches, 0, result, 0, count);
+		return result;
+	}
+
+	protected IStatus initializeOperand(Operand operand, Map parameters) {
+		IResolvedInstallableUnit iu = operand.second();
+		parameters.put("iu", iu);
+
+		IArtifactKey[] artifacts = iu.getArtifacts();
+		if (artifacts != null && artifacts.length > 0)
+			parameters.put("artifactId", artifacts[0].getId());
+
+		return Status.OK_STATUS;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
index ec2272c..18b80f2 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
@@ -93,9 +93,7 @@ public class Install extends Phase {
 	//	}
 
 	protected boolean isApplicable(Operand op) {
-		if (op.second() != null)
-			return true;
-		return false;
+		return (op.second() != null);
 	}
 
 	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Operand currentOperand) {
@@ -111,7 +109,7 @@ public class Install extends Phase {
 
 		if (data == null)
 			return new ProvisioningAction[] {beforeAction, afterAction};
-		String[] instructions = getInstructionsFor("configurationData", data);
+		String[] instructions = getInstructionsFor("install", data);
 		if (instructions.length == 0)
 			return new ProvisioningAction[] {beforeAction, afterAction};
 		InstructionParser parser = new InstructionParser(this, touchpoint);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java
index b0f7854..5d1f05a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java
@@ -30,4 +30,6 @@ public class Messages extends NLS {
 	public static String Engine_Installing_IU;
 	public static String Engine_Uninstall_Phase;
 	public static String Engine_Uninstalling_IU;
+	public static String Engine_Configure_Phase;
+	public static String Engine_Unconfigure_Phase;
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
index 55dd0a2..5ad85f2 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
@@ -27,9 +27,7 @@ public class Sizing extends Phase {
 	}
 
 	protected boolean isApplicable(Operand op) {
-		if (op.second() != null)
-			return true;
-		return false;
+		return (op.second() != null);
 	}
 
 	//	protected IStatus performOperand(EngineSession session, Profile profile, Operand operand, IProgressMonitor monitor) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
new file mode 100644
index 0000000..782a0f2
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
@@ -0,0 +1,72 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.p2.engine.phases;
+
+import java.util.Map;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.p2.engine.*;
+import org.eclipse.equinox.p2.metadata.*;
+
+public class Unconfigure extends Phase {
+
+	public Unconfigure(int weight) {
+		super("unconfigure", weight, Messages.Engine_Unconfigure_Phase);
+	}
+
+	protected boolean isApplicable(Operand op) {
+		return (op.first() != null);
+	}
+
+	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Operand currentOperand) {
+		//TODO: monitor.subTask(NLS.bind(Messages.Engine_Unconfiguring_IU, unit.getId()));
+
+		IInstallableUnit unit = currentOperand.first();
+		if (unit.isFragment())
+			return null;
+
+		TouchpointData[] data = unit.getTouchpointData();
+		if (data == null)
+			return null;
+
+		String[] instructions = getInstructionsFor("unconfigure", data);
+		if (instructions.length == 0)
+			return null;
+
+		InstructionParser parser = new InstructionParser(this, touchpoint);
+		return parser.parseActions(instructions[0]);
+	}
+
+	// We could put this in a utility class, Phase or perhaps refactor touchpoint data
+	static private String[] getInstructionsFor(String key, TouchpointData[] data) {
+		String[] matches = new String[data.length];
+		int count = 0;
+		for (int i = 0; i < data.length; i++) {
+			matches[count] = data[i].getInstructions(key);
+			if (matches[count] != null)
+				count++;
+		}
+		if (count == data.length)
+			return matches;
+		String[] result = new String[count];
+		System.arraycopy(matches, 0, result, 0, count);
+		return result;
+	}
+
+	protected IStatus initializeOperand(Operand operand, Map parameters) {
+		IResolvedInstallableUnit iu = operand.first();
+		parameters.put("iu", iu);
+
+		IArtifactKey[] artifacts = iu.getArtifacts();
+		if (artifacts != null && artifacts.length > 0)
+			parameters.put("artifactId", artifacts[0].getId());
+
+		return Status.OK_STATUS;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
index 9209f96..3e8d138 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
@@ -91,9 +91,7 @@ public class Uninstall extends Phase {
 	//	}
 
 	protected boolean isApplicable(Operand op) {
-		if (op.first() != null)
-			return true;
-		return false;
+		return (op.first() != null);
 	}
 
 	protected ProvisioningAction[] getActions(Touchpoint touchpoint, Operand currentOperand) {
@@ -108,7 +106,7 @@ public class Uninstall extends Phase {
 		TouchpointData[] data = unit.getTouchpointData();
 		if (data == null)
 			return new ProvisioningAction[] {beforeAction, afterAction};
-		String[] instructions = getInstructionsFor("unconfigurationData", data);
+		String[] instructions = getInstructionsFor("uninstall", data);
 		if (instructions.length == 0)
 			return new ProvisioningAction[] {beforeAction, afterAction};
 		InstructionParser parser = new InstructionParser(this, touchpoint);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties
index 9e644e3..bf33f4f 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties
@@ -12,6 +12,8 @@
 Engine_Collect_Phase=collect
 Engine_Install_Phase=install
 Engine_Uninstall_Phase=uninstall
+Engine_Configure_Phase=configure
+Engine_Unconfigure_Phase=unconfigure
 Engine_Collecting_For_IU=Collecting for {0}
 Engine_Installing_IU=Installing {0}
 Engine_Uninstalling_IU=Uninstalling {0}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 80befdd..88b2d2b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -290,7 +290,7 @@ public class Generator {
 				configurationData += "addProgramArg(programArg:" + programArg + ");";
 			}
 		}
-		touchpointData.put("configurationData", configurationData);
+		touchpointData.put("install", configurationData);
 		iu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 		return iu;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index 2b6c28c..e98abfd 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -73,7 +73,7 @@ public class MetadataGeneratorHelper {
 			iu.setCapabilities(generateJRECapability(null));
 			resultantIUs.add(iu);
 
-			touchpointData.put("configurationData", "");
+			touchpointData.put("install", "");
 			cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 			resultantIUs.add(cu);
 			return;
@@ -87,7 +87,7 @@ public class MetadataGeneratorHelper {
 
 		//Create config info for the CU
 		String configurationData = "unzip(source:@artifact, target:${installFolder});";
-		touchpointData.put("configurationData", configurationData);
+		touchpointData.put("install", configurationData);
 		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 		resultantIUs.add(cu);
 
@@ -157,7 +157,7 @@ public class MetadataGeneratorHelper {
 		if (!info.getOS().equals(org.eclipse.osgi.service.environment.Constants.OS_WIN32))
 			// FIXME:  is this correct?  do all non-Windows platforms need execute permissions on the launcher?
 			configurationData += " chmod(targetDir:${installFolder}, targetFile:" + launcher.getName() + ", permissions:755);";
-		touchpointData.put("configurationData", configurationData);
+		touchpointData.put("install", configurationData);
 		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 		resultantIUs.add(cu);
 
@@ -219,8 +219,8 @@ public class MetadataGeneratorHelper {
 		cu.setTouchpointType(new TouchpointType(ECLIPSE_TOUCHPOINT, ECLIPSE_TOUCHPOINT_VERSION)); //TODO Is this necessary? I think we get that from the IU
 
 		Map touchpointData = new HashMap();
-		touchpointData.put("configurationData", createConfigScript(configInfo, isBundleFragment));
-		touchpointData.put("unconfigurationData", createUnconfigScript(configInfo, isBundleFragment));
+		touchpointData.put("install", createConfigScript(configInfo, isBundleFragment));
+		touchpointData.put("uninstall", createUnconfigScript(configInfo, isBundleFragment));
 		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 
 		return cu;
@@ -240,8 +240,8 @@ public class MetadataGeneratorHelper {
 		cu.setTouchpointType(new TouchpointType(ECLIPSE_TOUCHPOINT, ECLIPSE_TOUCHPOINT_VERSION)); //TODO Is this necessary? I think we get that from the IU
 		Map touchpointData = new HashMap();
 
-		touchpointData.put("configurationData", createDefaultConfigScript(configInfo));
-		touchpointData.put("unconfigurationData", createDefaultUnconfigScript(unconfigInfo));
+		touchpointData.put("install", createDefaultConfigScript(configInfo));
+		touchpointData.put("uninstall", createDefaultUnconfigScript(unconfigInfo));
 
 		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 		return cu;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 9606696..28e6904 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -187,8 +187,8 @@ public class EngineTest extends TestCase {
 				+ " undleresource;x-internal:=true,org.eclipse.osgi.framework.internal.pr\r\n" + " otocol.reference;x-internal:=true,org.eclipse.osgi.framework.internal\r\n" + " .reliablefile;x-internal:=true,org.eclipse.osgi.framework.launcher;x-\r\n" + " internal:=true,org.eclipse.osgi.framework.util;x-internal:=true,org.e\r\n" + " clipse.osgi.internal.baseadaptor;x-internal:=true,org.eclipse.osgi.in\r\n" + " ternal.module;x-internal:=true,org.eclipse.osgi.internal.profile;x-in\r\n" + " ternal:=true,org.eclipse.osgi.internal.resolver;x-internal:=true,org.\r\n" + " eclipse.osgi.internal.verifier;x-internal:=true,org.eclipse.osgi.inte\r\n" + " rnal.provisional.verifier;x-friends:=\"org.eclipse.update.core,org.ecl\r\n" + " ipse.ui.workbench\"\r\n" + "Bundle-Version: 3.3.0.v20060925\r\n"
 				+ "Eclipse-SystemBundle: true\r\n" + "Bundle-Copyright: %copyright\r\n" + "Bundle-Name: %systemBundle\r\n" + "Bundle-Description: %systemBundle\r\n" + "Bundle-DocUrl: http://www.eclipse.org\r\n" + "Bundle-ManifestVersion: 2\r\n" + "Export-Service: org.osgi.service.packageadmin.PackageAdmin,org.osgi.se\r\n" + " rvice.permissionadmin.PermissionAdmin,org.osgi.service.startlevel.Sta\r\n" + " rtLevel,org.eclipse.osgi.service.debug.DebugOptions\r\n" + "Bundle-Vendor: %eclipse.org\r\n" + "Main-Class: org.eclipse.core.runtime.adaptor.EclipseStarter\r\n" + "Bundle-SymbolicName: org.eclipse.osgi; singleton:=true\r\n" + "Bundle-Localization: systembundle\r\n" + "Eclipse-ExtensibleAPI: true\r\n" + "\r\n" + "";
 		touchpointData.put("manifest", manifest);
-		touchpointData.put("configurationData", "installBundle(bundle:${artifactId}, started:true);");
-		touchpointData.put("unconfigurationData", "uninstallBundle(bundle:${artifactId});");
+		touchpointData.put("install", "installBundle(bundle:${artifactId}, started:true);");
+		touchpointData.put("uninstall", "uninstallBundle(bundle:${artifactId});");
 
 		IResolvedInstallableUnit[] cus = new IResolvedInstallableUnit[1];
 		InstallableUnitFragment tmp = new InstallableUnitFragment();
@@ -216,7 +216,7 @@ public class EngineTest extends TestCase {
 				+ " undleresource;x-internal:=true,org.eclipse.osgi.framework.internal.pr\r\n" + " otocol.reference;x-internal:=true,org.eclipse.osgi.framework.internal\r\n" + " .reliablefile;x-internal:=true,org.eclipse.osgi.framework.launcher;x-\r\n" + " internal:=true,org.eclipse.osgi.framework.util;x-internal:=true,org.e\r\n" + " clipse.osgi.internal.baseadaptor;x-internal:=true,org.eclipse.osgi.in\r\n" + " ternal.module;x-internal:=true,org.eclipse.osgi.internal.profile;x-in\r\n" + " ternal:=true,org.eclipse.osgi.internal.resolver;x-internal:=true,org.\r\n" + " eclipse.osgi.internal.verifier;x-internal:=true,org.eclipse.osgi.inte\r\n" + " rnal.provisional.verifier;x-friends:=\"org.eclipse.update.core,org.ecl\r\n" + " ipse.ui.workbench\"\r\n" + "Bundle-Version: 3.3.0.v20060925\r\n"
 				+ "Eclipse-SystemBundle: true\r\n" + "Bundle-Copyright: %copyright\r\n" + "Bundle-Name: %systemBundle\r\n" + "Bundle-Description: %systemBundle\r\n" + "Bundle-DocUrl: http://www.eclipse.org\r\n" + "Bundle-ManifestVersion: 2\r\n" + "Export-Service: org.osgi.service.packageadmin.PackageAdmin,org.osgi.se\r\n" + " rvice.permissionadmin.PermissionAdmin,org.osgi.service.startlevel.Sta\r\n" + " rtLevel,org.eclipse.osgi.service.debug.DebugOptions\r\n" + "Bundle-Vendor: %eclipse.org\r\n" + "Main-Class: org.eclipse.core.runtime.adaptor.EclipseStarter\r\n" + "Bundle-SymbolicName: org.eclipse.osgi; singleton:=true\r\n" + "Bundle-Localization: systembundle\r\n" + "Eclipse-ExtensibleAPI: true\r\n" + "\r\n" + "";
 		touchpointData.put("manifest", manifest);
-		touchpointData.put("configurationData", "BAD");
+		touchpointData.put("install", "BAD");
 
 		IResolvedInstallableUnit[] cus = new IResolvedInstallableUnit[1];
 		InstallableUnitFragment tmp = new InstallableUnitFragment();
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index fd25fc3..f74899f 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -29,12 +29,6 @@ public class EclipseTouchpoint extends Touchpoint {
 	private final static String CONFIG_FOLDER = "eclipse.configurationFolder";
 	private final static String CACHE_PATH = "eclipse.p2.cache";
 
-	//	private final static String CONFIGURATION_DATA = "configurationData";
-	//	private final static String UNCONFIGURATION_DATA = "unconfigurationData";
-
-	//	private static final boolean DEBUG = false;
-	static int iuCount = 0;
-
 	private final static String FILTER_OBJECTCLASS = "(" + Constants.OBJECTCLASS + "=" + FrameworkAdmin.class.getName() + ")";
 	private final static String filterFwName = "(" + FrameworkAdmin.SERVICE_PROP_KEY_FW_NAME + "=Equinox)";
 	private final static String filterLauncherName = "(" + FrameworkAdmin.SERVICE_PROP_KEY_LAUNCHER_NAME + "=Eclipse.exe)";
@@ -44,10 +38,6 @@ public class EclipseTouchpoint extends Touchpoint {
 	private Map lastModifiedMap = new HashMap();
 	private Map manipulatorMap = new HashMap();
 
-	//	TODO Need to find a better way  keep track of this information, is it a generalized cache mechanism? 
-	// moreover there may scenarios where the configuration data is not stored in the same IU than the bundle referring to the artifact
-	private final Set supportedPhases = new HashSet(Arrays.asList(new String[] {"collect", "install", "uninstall"})); //TODO This should probably come from XML
-
 	public ProvisioningAction getAction(String actionId) {
 		if (actionId.equals("installBundle")) {
 			return new ProvisioningAction() {
@@ -481,10 +471,6 @@ public class EclipseTouchpoint extends Touchpoint {
 		return new TouchpointType("eclipse", new Version("1.0")); //TODO this data probably needs to come from the XML
 	}
 
-	public boolean supports(String phaseID) { //TODO this data probably needs to come from the XML
-		return supportedPhases.contains(phaseID);
-	}
-
 	private File getInstallFolder(Profile profile) {
 		return new File(profile.getValue(Profile.PROP_INSTALL_FOLDER));
 	}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
index 216e3e7..f428fa4 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
@@ -12,7 +12,8 @@ package org.eclipse.equinox.internal.p2.touchpoint.natives;
 
 import java.io.File;
 import java.net.URL;
-import java.util.*;
+import java.util.Collection;
+import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.core.helpers.ServiceHelper;
@@ -22,20 +23,8 @@ import org.eclipse.equinox.p2.metadata.*;
 import org.osgi.framework.Version;
 
 public class NativeTouchpoint extends Touchpoint {
-	//	private final static String CONFIGURATION_DATA = "configurationData";
 	private static final String ID = "org.eclipse.equinox.p2.touchpoint.natives"; //$NON-NLS-1$
 
-	private final Set supportedPhases = new HashSet(); //TODO This should probably come from XML
-	{
-		supportedPhases.add("collect");
-		supportedPhases.add("install");
-		supportedPhases.add("uninstall");
-	}
-
-	public boolean supports(String phaseId) {
-		return supportedPhases.contains(phaseId);
-	}
-
 	public ProvisioningAction getAction(String actionId) {
 		if (actionId.equals("collect")) {
 			return new ProvisioningAction() {
commit 0d5dc1c9f0929893a7ad650b89a1740e846aa52a
Author: Simon Kaegi <skaegi>
Date:   Wed Oct 17 02:29:56 2007 +0000

    Bug 206388 [prov] configure and unconfigure phase

4	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
3	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
21	13	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
75	9	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index af331c8..38e806b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -151,7 +151,8 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		result.setSymbolicName("defaultConfigure");
 		result.setVersion("1.0.0");
 		result.setStartLevel(4);
-		result.setSpecialConfigCommands("installBundle(bundle:${artifactId});");
+		// These should just be in the install section now
+		//		result.setSpecialConfigCommands("installBundle(bundle:${artifactId});");
 		return result;
 	}
 
@@ -159,7 +160,8 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		GeneratorBundleInfo result = new GeneratorBundleInfo();
 		result.setSymbolicName("defaultUnconfigure");
 		result.setVersion("1.0.0");
-		result.setSpecialConfigCommands("uninstallBundle(bundle:${artifactId});");
+		// These should just be in the uninstall section now
+		//		result.setSpecialConfigCommands("uninstallBundle(bundle:${artifactId});");
 		return result;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 88b2d2b..1a6d834 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -290,7 +290,9 @@ public class Generator {
 				configurationData += "addProgramArg(programArg:" + programArg + ");";
 			}
 		}
-		touchpointData.put("install", configurationData);
+		touchpointData.put("configure", configurationData);
+		//TODO: This unconfigure is clearly not right
+		touchpointData.put("unconfigure", configurationData);
 		iu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 		return iu;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index e98abfd..dfd42d6 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -219,8 +219,10 @@ public class MetadataGeneratorHelper {
 		cu.setTouchpointType(new TouchpointType(ECLIPSE_TOUCHPOINT, ECLIPSE_TOUCHPOINT_VERSION)); //TODO Is this necessary? I think we get that from the IU
 
 		Map touchpointData = new HashMap();
-		touchpointData.put("install", createConfigScript(configInfo, isBundleFragment));
-		touchpointData.put("uninstall", createUnconfigScript(configInfo, isBundleFragment));
+		touchpointData.put("install", "installBundle(bundle:${artifactId})");
+		touchpointData.put("uninstall", "uninstallBundle(bundle:${artifactId})");
+		touchpointData.put("configure", createConfigScript(configInfo, isBundleFragment));
+		touchpointData.put("unconfigure", createUnconfigScript(configInfo, isBundleFragment));
 		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 
 		return cu;
@@ -240,8 +242,10 @@ public class MetadataGeneratorHelper {
 		cu.setTouchpointType(new TouchpointType(ECLIPSE_TOUCHPOINT, ECLIPSE_TOUCHPOINT_VERSION)); //TODO Is this necessary? I think we get that from the IU
 		Map touchpointData = new HashMap();
 
-		touchpointData.put("install", createDefaultConfigScript(configInfo));
-		touchpointData.put("uninstall", createDefaultUnconfigScript(unconfigInfo));
+		touchpointData.put("install", "installBundle(bundle:${artifactId})");
+		touchpointData.put("uninstall", "uninstallBundle(bundle:${artifactId})");
+		touchpointData.put("configure", createDefaultConfigScript(configInfo));
+		touchpointData.put("unconfigure", createDefaultUnconfigScript(unconfigInfo));
 
 		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 		return cu;
@@ -259,14 +263,13 @@ public class MetadataGeneratorHelper {
 		if (configInfo == null)
 			return "";
 
-		String configScript = "installBundle(bundle:${artifactId}";//$NON-NLS-1$
+		String configScript = "";//$NON-NLS-1$
 		if (!isBundleFragment && configInfo.getStartLevel() != BundleInfo.NO_LEVEL) {
-			configScript += ", startLevel:" + configInfo.getStartLevel();
+			configScript += "setStartLevel(startLevel:" + configInfo.getStartLevel() + ");";
 		}
 		if (!isBundleFragment && configInfo.isMarkedAsStarted()) {
-			configScript += ", markStarted: true";
+			configScript += "markStarted(started: true);";
 		}
-		configScript += ");";
 
 		if (configInfo.getSpecialConfigCommands() != null) {
 			configScript += configInfo.getSpecialConfigCommands();
@@ -278,11 +281,16 @@ public class MetadataGeneratorHelper {
 	private static String createUnconfigScript(GeneratorBundleInfo unconfigInfo, boolean isBundleFragment) {
 		if (unconfigInfo == null)
 			return "";
-		String unconfigScript = "uninstallBundle(bundle:${artifactId}";//$NON-NLS-1$
-		if (unconfigInfo != null) {
-			if (unconfigInfo.getSpecialConfigCommands() != null) {
-				unconfigScript += unconfigInfo.getSpecialConfigCommands();
-			}
+		String unconfigScript = "";//$NON-NLS-1$
+		if (!isBundleFragment && unconfigInfo.getStartLevel() != BundleInfo.NO_LEVEL) {
+			unconfigScript += "setStartLevel(startLevel:" + BundleInfo.NO_LEVEL + ");";
+		}
+		if (!isBundleFragment && unconfigInfo.isMarkedAsStarted()) {
+			unconfigScript += "markStarted(started: false);";
+		}
+
+		if (unconfigInfo.getSpecialConfigCommands() != null) {
+			unconfigScript += unconfigInfo.getSpecialConfigCommands();
 		}
 		return unconfigScript;
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 28e6904..8faa307 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -187,7 +187,7 @@ public class EngineTest extends TestCase {
 				+ " undleresource;x-internal:=true,org.eclipse.osgi.framework.internal.pr\r\n" + " otocol.reference;x-internal:=true,org.eclipse.osgi.framework.internal\r\n" + " .reliablefile;x-internal:=true,org.eclipse.osgi.framework.launcher;x-\r\n" + " internal:=true,org.eclipse.osgi.framework.util;x-internal:=true,org.e\r\n" + " clipse.osgi.internal.baseadaptor;x-internal:=true,org.eclipse.osgi.in\r\n" + " ternal.module;x-internal:=true,org.eclipse.osgi.internal.profile;x-in\r\n" + " ternal:=true,org.eclipse.osgi.internal.resolver;x-internal:=true,org.\r\n" + " eclipse.osgi.internal.verifier;x-internal:=true,org.eclipse.osgi.inte\r\n" + " rnal.provisional.verifier;x-friends:=\"org.eclipse.update.core,org.ecl\r\n" + " ipse.ui.workbench\"\r\n" + "Bundle-Version: 3.3.0.v20060925\r\n"
 				+ "Eclipse-SystemBundle: true\r\n" + "Bundle-Copyright: %copyright\r\n" + "Bundle-Name: %systemBundle\r\n" + "Bundle-Description: %systemBundle\r\n" + "Bundle-DocUrl: http://www.eclipse.org\r\n" + "Bundle-ManifestVersion: 2\r\n" + "Export-Service: org.osgi.service.packageadmin.PackageAdmin,org.osgi.se\r\n" + " rvice.permissionadmin.PermissionAdmin,org.osgi.service.startlevel.Sta\r\n" + " rtLevel,org.eclipse.osgi.service.debug.DebugOptions\r\n" + "Bundle-Vendor: %eclipse.org\r\n" + "Main-Class: org.eclipse.core.runtime.adaptor.EclipseStarter\r\n" + "Bundle-SymbolicName: org.eclipse.osgi; singleton:=true\r\n" + "Bundle-Localization: systembundle\r\n" + "Eclipse-ExtensibleAPI: true\r\n" + "\r\n" + "";
 		touchpointData.put("manifest", manifest);
-		touchpointData.put("install", "installBundle(bundle:${artifactId}, started:true);");
+		touchpointData.put("install", "installBundle(bundle:${artifactId});");
 		touchpointData.put("uninstall", "uninstallBundle(bundle:${artifactId});");
 
 		IResolvedInstallableUnit[] cus = new IResolvedInstallableUnit[1];
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index f74899f..fa20958 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -118,6 +118,80 @@ public class EclipseTouchpoint extends Touchpoint {
 			};
 		}
 
+		if (actionId.equals("setStartLevel")) {
+			return new ProvisioningAction() {
+				public IStatus execute(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+					String startLevel = (String) parameters.get("startLevel");
+
+					BundleInfo bundleInfo = new BundleInfo();
+					initFromManifest(getManifest(iu.getTouchpointData()), bundleInfo);
+					BundleInfo[] bundles = manipulator.getConfigData().getBundles();
+					for (int i = 0; i < bundles.length; i++) {
+						if (bundles[i].equals(bundleInfo)) {
+							bundles[i].setStartLevel(Integer.parseInt(startLevel));
+							break;
+						}
+					}
+					return Status.OK_STATUS;
+				}
+
+				public IStatus undo(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+
+					BundleInfo bundleInfo = new BundleInfo();
+					initFromManifest(getManifest(iu.getTouchpointData()), bundleInfo);
+					BundleInfo[] bundles = manipulator.getConfigData().getBundles();
+					for (int i = 0; i < bundles.length; i++) {
+						if (bundles[i].equals(bundleInfo)) {
+							bundles[i].setStartLevel(BundleInfo.NO_LEVEL); // memento support needed.
+							break;
+						}
+					}
+					return Status.OK_STATUS;
+				}
+			};
+		}
+
+		if (actionId.equals("markStarted")) {
+			return new ProvisioningAction() {
+				public IStatus execute(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+					String started = (String) parameters.get("started");
+
+					BundleInfo bundleInfo = new BundleInfo();
+					initFromManifest(getManifest(iu.getTouchpointData()), bundleInfo);
+					BundleInfo[] bundles = manipulator.getConfigData().getBundles();
+					for (int i = 0; i < bundles.length; i++) {
+						if (bundles[i].equals(bundleInfo)) {
+							bundles[i].setMarkedAsStarted(Boolean.valueOf(started).booleanValue());
+							break;
+						}
+					}
+					return Status.OK_STATUS;
+				}
+
+				public IStatus undo(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+
+					BundleInfo bundleInfo = new BundleInfo();
+					initFromManifest(getManifest(iu.getTouchpointData()), bundleInfo);
+					BundleInfo[] bundles = manipulator.getConfigData().getBundles();
+					for (int i = 0; i < bundles.length; i++) {
+						if (bundles[i].equals(bundleInfo)) {
+							bundles[i].setMarkedAsStarted(false); // memento support needed.
+							break;
+						}
+					}
+					return Status.OK_STATUS;
+				}
+			};
+		}
+
 		if (actionId.equals("setFwDependentProp")) {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
@@ -317,8 +391,6 @@ public class EclipseTouchpoint extends Touchpoint {
 		IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
 		Manipulator manipulator = (Manipulator) parameters.get("manipulator");
 		String bundleId = (String) parameters.get("bundle");
-		String startLevel = (String) parameters.get("startLevel");
-		String started = (String) parameters.get("markStarted");
 
 		//TODO: eventually remove this. What is a fragment doing here??
 		if (iu.isFragment()) {
@@ -352,12 +424,6 @@ public class EclipseTouchpoint extends Touchpoint {
 		String manifest = getManifest(iu.getTouchpointData());
 
 		BundleInfo bundleInfo = createBundleInfo(bundleFile, manifest);
-
-		if (startLevel != null)
-			bundleInfo.setStartLevel(Integer.parseInt(startLevel));
-
-		if (started != null)
-			bundleInfo.setMarkedAsStarted(Boolean.valueOf(started).booleanValue());
 		manipulator.getConfigData().addBundle(bundleInfo);
 
 		return Status.OK_STATUS;
@@ -383,7 +449,7 @@ public class EclipseTouchpoint extends Touchpoint {
 		return bundleInfo;
 	}
 
-	private String getManifest(TouchpointData[] data) {
+	String getManifest(TouchpointData[] data) {
 		for (int i = 0; i < data.length; i++) {
 			String manifest = data[i].getInstructions("manifest");
 			if (manifest != null)
commit 275d9ccca728dfa889c226449e73b7a18af19701
Author: Simon Kaegi <skaegi>
Date:   Wed Oct 17 03:29:38 2007 +0000

    Bug 206388 [prov] configure and unconfigure phase

3	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
10	3	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
10	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/GeneratorBundleInfo.java
2	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
90	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index 38e806b..c9a1814 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -214,6 +214,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 			temp.setSymbolicName(object.getId());
 			temp.setVersion(object.getVersion().toString());
 			temp.setSpecialConfigCommands("addProgramArg(programArg:--launcher.library);addProgramArg(programArg:@artifact);");
+			temp.setSpecialUnconfigCommands("removeProgramArg(programArg:--launcher.library);removeProgramArg(programArg:@artifact);");
 			result.add(temp);
 		}
 		return result;
@@ -235,6 +236,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		result.setVersion("0.0.0");
 		//result.setSpecialConfigCommands("manipulator.addProgramArgument('-startup'); manipulator.addProgramArgument(artifact);");
 		result.setSpecialConfigCommands("addProgramArg(programArg:-startup);addProgramArg(programArg:@artifact);");
+		result.setSpecialUnconfigCommands("removeProgramArg(programArg:-startup);removeProgramArg(programArg:@artifact);");
 		return result;
 	}
 
@@ -245,6 +247,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		result.setStartLevel(1);
 		result.setMarkedAsStarted(true);
 		result.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
+		result.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
 		return result;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 1a6d834..3236944 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -180,9 +180,11 @@ public class Generator {
 				bundle.setStartLevel(BundleInfo.NO_LEVEL);
 				bundle.setMarkedAsStarted(false);
 				bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.update.reconcile=false);");
+				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.update.reconcile=false);");
 			}
 			if (bundle.getSymbolicName().equals(ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR)) {
 				bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
+				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
 			}
 			IInstallableUnit cu = MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor());
 			if (cu != null)
@@ -257,6 +259,7 @@ public class Generator {
 		Map touchpointData = new HashMap();
 
 		String configurationData = "";
+		String unconfigurationData = "";
 
 		ConfigData configData = info.getConfigData();
 		if (configData != null) {
@@ -266,6 +269,7 @@ public class Generator {
 				if (key.equals("osgi.frameworkClassPath") || key.equals("osgi.framework") || key.equals("osgi.bundles") || key.equals("eof"))
 					continue;
 				configurationData += "setFwDependentProp(propName:" + key + ", propValue:" + ((String) aProperty.getValue()) + ");";
+				unconfigurationData += "setFwDependentProp(propName:" + key + ", propValue:);";
 			}
 			for (Iterator iterator = configData.getFwIndependentProps().entrySet().iterator(); iterator.hasNext();) {
 				Entry aProperty = (Entry) iterator.next();
@@ -273,14 +277,17 @@ public class Generator {
 				if (key.equals("osgi.frameworkClassPath") || key.equals("osgi.framework") || key.equals("osgi.bundles") || key.equals("eof"))
 					continue;
 				configurationData += "setFwIndependentProp(propName:" + key + ", propValue:" + ((String) aProperty.getValue()) + ");";
+				unconfigurationData += "setFwIndependentProp(propName:" + key + ", propValue:);";
 			}
 		}
 
 		LauncherData launcherData = info.getLauncherData();
 		if (launcherData != null) {
 			final String[] jvmArgs = launcherData.getJvmArgs();
-			for (int i = 0; i < jvmArgs.length; i++)
+			for (int i = 0; i < jvmArgs.length; i++) {
 				configurationData += "addJvmArg(jvmArg:" + jvmArgs[i] + ");";
+				unconfigurationData += "removeJvmArg(jvmArg:" + jvmArgs[i] + ");";
+			}
 
 			final String[] programArgs = launcherData.getProgramArgs();
 			for (int i = 0; i < programArgs.length; i++) {
@@ -288,11 +295,11 @@ public class Generator {
 				if (programArg.equals("--launcher.library") || programArg.equals("-startup") || programArg.equals("-configuration"))
 					i++;
 				configurationData += "addProgramArg(programArg:" + programArg + ");";
+				unconfigurationData += "removeProgramArg(programArg:" + programArg + ");";
 			}
 		}
 		touchpointData.put("configure", configurationData);
-		//TODO: This unconfigure is clearly not right
-		touchpointData.put("unconfigure", configurationData);
+		touchpointData.put("unconfigure", unconfigurationData);
 		iu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 		return iu;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/GeneratorBundleInfo.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/GeneratorBundleInfo.java
index 3c1227e..fe68b4f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/GeneratorBundleInfo.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/GeneratorBundleInfo.java
@@ -28,6 +28,7 @@ public class GeneratorBundleInfo extends BundleInfo {
 	//	private String manifest;
 
 	private String specialConfigCommands;
+	private String specialUnconfigCommands;
 
 	public GeneratorBundleInfo(BundleInfo bInfo) {
 		super.setBundleId(bInfo.getBundleId());
@@ -110,6 +111,14 @@ public class GeneratorBundleInfo extends BundleInfo {
 		this.specialConfigCommands = specialConfigCommands;
 	}
 
+	public String getSpecialUnconfigCommands() {
+		return specialUnconfigCommands;
+	}
+
+	public void setSpecialUnconfigCommands(String specialUnconfigCommands) {
+		this.specialUnconfigCommands = specialUnconfigCommands;
+	}
+
 	//	/* (non-Javadoc)
 	//	 * @see java.lang.Object#equals(java.lang.Object)
 	//	 */
@@ -147,4 +156,5 @@ public class GeneratorBundleInfo extends BundleInfo {
 			e.printStackTrace();
 		}
 	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index dfd42d6..6d4a050 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -289,8 +289,8 @@ public class MetadataGeneratorHelper {
 			unconfigScript += "markStarted(started: false);";
 		}
 
-		if (unconfigInfo.getSpecialConfigCommands() != null) {
-			unconfigScript += unconfigInfo.getSpecialConfigCommands();
+		if (unconfigInfo.getSpecialUnconfigCommands() != null) {
+			unconfigScript += unconfigInfo.getSpecialUnconfigCommands();
 		}
 		return unconfigScript;
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index fa20958..fd819fb 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -112,9 +112,81 @@ public class EclipseTouchpoint extends Touchpoint {
 				public IStatus undo(Map parameters) {
 					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
 					String programArg = (String) parameters.get("programArg");
+
+					if (programArg.equals("@artifact")) {
+						Profile profile = (Profile) parameters.get("profile");
+						IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+						IArtifactKey artifactKey = iu.getArtifacts()[0];
+
+						File fileLocation = null;
+						try {
+							fileLocation = getBundleFile(artifactKey, isZipped(iu.getTouchpointData()), profile);
+						} catch (IOException e) {
+							// TODO Auto-generated catch block
+							e.printStackTrace();
+						}
+						if (!fileLocation.exists())
+							return new Status(IStatus.ERROR, ID, "The file is not available" + fileLocation.getAbsolutePath());
+						programArg = fileLocation.getAbsolutePath();
+					}
+
+					manipulator.getLauncherData().removeProgramArg(programArg);
+					return Status.OK_STATUS;
+				}
+			};
+		}
+
+		if (actionId.equals("removeProgramArg")) {
+			return new ProvisioningAction() {
+				public IStatus execute(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					String programArg = (String) parameters.get("programArg");
+
+					if (programArg.equals("@artifact")) {
+						Profile profile = (Profile) parameters.get("profile");
+						IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+						IArtifactKey artifactKey = iu.getArtifacts()[0];
+
+						File fileLocation = null;
+						try {
+							fileLocation = getBundleFile(artifactKey, isZipped(iu.getTouchpointData()), profile);
+						} catch (IOException e) {
+							// TODO Auto-generated catch block
+							e.printStackTrace();
+						}
+						if (!fileLocation.exists())
+							return new Status(IStatus.ERROR, ID, "The file is not available" + fileLocation.getAbsolutePath());
+						programArg = fileLocation.getAbsolutePath();
+					}
+
 					manipulator.getLauncherData().removeProgramArg(programArg);
 					return Status.OK_STATUS;
 				}
+
+				public IStatus undo(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					String programArg = (String) parameters.get("programArg");
+
+					if (programArg.equals("@artifact")) {
+						Profile profile = (Profile) parameters.get("profile");
+						IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+						IArtifactKey artifactKey = iu.getArtifacts()[0];
+
+						File fileLocation = null;
+						try {
+							fileLocation = getBundleFile(artifactKey, isZipped(iu.getTouchpointData()), profile);
+						} catch (IOException e) {
+							// TODO Auto-generated catch block
+							e.printStackTrace();
+						}
+						if (!fileLocation.exists())
+							return new Status(IStatus.ERROR, ID, "The file is not available" + fileLocation.getAbsolutePath());
+						programArg = fileLocation.getAbsolutePath();
+					}
+
+					manipulator.getLauncherData().addProgramArg(programArg);
+					return Status.OK_STATUS;
+				}
 			};
 		}
 
@@ -248,6 +320,24 @@ public class EclipseTouchpoint extends Touchpoint {
 			};
 		}
 
+		if (actionId.equals("removeJvmArg")) {
+			return new ProvisioningAction() {
+				public IStatus execute(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					String jvmArg = (String) parameters.get("jvmArg");
+					manipulator.getLauncherData().removeJvmArg(jvmArg);
+					return Status.OK_STATUS;
+				}
+
+				public IStatus undo(Map parameters) {
+					Manipulator manipulator = (Manipulator) parameters.get("manipulator");
+					String jvmArg = (String) parameters.get("jvmArg");
+					manipulator.getLauncherData().addJvmArg(jvmArg);
+					return Status.OK_STATUS;
+				}
+			};
+		}
+
 		return null;
 	}
 

commit 57015686356de78591bf5a91e0f8a2ccf84429a3
Author: John Arthorne <johna>
Date:   Mon Nov 12 23:21:23 2007 +0000

    Bug 209576 [prov] Get rid of IResolvedInstallableUnit and IResolvedInstallableUnitFragment

12	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
14	14	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
6	6	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
5	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
1	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
13	5	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
0	4	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java
0	16	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InternalInstallableUnit.java
158	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
47	14	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
0	16	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnit.java
0	13	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnitFragment.java
19	2	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
0	151	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
0	26	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java
24	8	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/resolution/ResolutionHelper.java
7	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
10	16	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
4	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
1	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
4	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
1	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
index 993f5c5..2259f18 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
@@ -201,6 +201,18 @@ public class NewDependencyExpander {
 		public int compareTo(Object arg) {
 			return wrapped.compareTo(arg);
 		}
+
+		public IInstallableUnitFragment[] getFragments() {
+			return null;
+		}
+
+		public boolean isResolved() {
+			return false;
+		}
+
+		public IInstallableUnit unresolved() {
+			return this;
+		}
 	}
 
 	static final int OperationWork = 100;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
index 0317ebd..7018cfc 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
@@ -16,7 +16,7 @@ import org.eclipse.equinox.p2.query.CompoundIterator;
 import org.eclipse.osgi.service.resolver.VersionRange;
 
 public class OperationGenerator {
-	static IResolvedInstallableUnit NULL_IU = new ResolvedInstallableUnit(MetadataFactory.createInstallableUnit(new InstallableUnitDescription()));
+	private static final IInstallableUnit NULL_IU = MetadataFactory.createResolvedInstallableUnit(MetadataFactory.createInstallableUnit(new InstallableUnitDescription()), new IInstallableUnitFragment[0]);
 
 	public Operand[] generateOperation(Collection from_, Collection to_) {
 		List from = new ArrayList(from_);
@@ -36,8 +36,8 @@ public class OperationGenerator {
 		int toIdx = 0;
 		int fromIdx = 0;
 		while (fromIdx != from.size() && toIdx != to.size()) {
-			IResolvedInstallableUnit fromIU = (IResolvedInstallableUnit) from.get(fromIdx);
-			IResolvedInstallableUnit toIU = (IResolvedInstallableUnit) to.get(toIdx);
+			IInstallableUnit fromIU = (IInstallableUnit) from.get(fromIdx);
+			IInstallableUnit toIU = (IInstallableUnit) to.get(toIdx);
 			int comparison = toIU.compareTo(fromIU);
 			if (comparison < 0) {
 				operations.add(createInstallOperation(toIU));
@@ -53,12 +53,12 @@ public class OperationGenerator {
 		}
 		if (fromIdx != from.size()) {
 			for (int i = fromIdx; i < from.size(); i++) {
-				operations.add(createUninstallOperation((IResolvedInstallableUnit) from.get(i)));
+				operations.add(createUninstallOperation((IInstallableUnit) from.get(i)));
 			}
 		}
 		if (toIdx != to.size()) {
 			for (int i = toIdx; i < to.size(); i++) {
-				operations.add(createInstallOperation((IResolvedInstallableUnit) to.get(i)));
+				operations.add(createInstallOperation((IInstallableUnit) to.get(i)));
 			}
 		}
 	}
@@ -66,7 +66,7 @@ public class OperationGenerator {
 	private void generateUpdates(List from, List to, ArrayList operations) {
 		Set processed = new HashSet();
 		for (int toIdx = 0; toIdx < to.size(); toIdx++) {
-			IResolvedInstallableUnit iuTo = (IResolvedInstallableUnit) to.get(toIdx);
+			IInstallableUnit iuTo = (IInstallableUnit) to.get(toIdx);
 			if (iuTo.getId().equals(next(from, toIdx).getId())) {
 				toIdx = skip(to, iuTo, toIdx) - 1;
 				//System.out.println("Can't update " + iuTo + " because another iu with same id is in the target state");
@@ -76,11 +76,11 @@ public class OperationGenerator {
 				continue;
 			//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of 
 			Iterator updates = new CompoundIterator(new Iterator[] {from.iterator()}, iuTo.getProperty(IInstallableUnit.PROP_UPDATE_FROM), new VersionRange(iuTo.getProperty(IInstallableUnit.PROP_UPDATE_RANGE)), null, false);
-			IResolvedInstallableUnit iuFrom;
+			IInstallableUnit iuFrom;
 			if (!updates.hasNext()) { //Nothing to udpate from.
 				continue;
 			}
-			iuFrom = (IResolvedInstallableUnit) updates.next();
+			iuFrom = (IInstallableUnit) updates.next();
 			if (updates.hasNext()) { //There are multiple IUs to update from
 				//System.out.println("Can't update  " + iuTo + " because there are multiple IUs to update from (" + toString(iusFrom) + ')');
 				continue;
@@ -97,26 +97,26 @@ public class OperationGenerator {
 		to.removeAll(processed);
 	}
 
-	private Operand createUninstallOperation(IResolvedInstallableUnit iu) {
+	private Operand createUninstallOperation(IInstallableUnit iu) {
 		return new Operand(iu, null);
 	}
 
-	private Operand createInstallOperation(IResolvedInstallableUnit iu) {
+	private Operand createInstallOperation(IInstallableUnit iu) {
 		return new Operand(null, iu);
 	}
 
-	private Operand createUpdateOperation(IResolvedInstallableUnit from, IResolvedInstallableUnit to) {
+	private Operand createUpdateOperation(IInstallableUnit from, IInstallableUnit to) {
 		return new Operand(from, to);
 	}
 
-	private IResolvedInstallableUnit next(List l, int i) {
+	private IInstallableUnit next(List l, int i) {
 		i++;
 		if (i >= l.size())
 			return NULL_IU;
-		return (IResolvedInstallableUnit) l.get(i);
+		return (IInstallableUnit) l.get(i);
 	}
 
-	private int skip(List c, IResolvedInstallableUnit id, int idx) {
+	private int skip(List c, IInstallableUnit id, int idx) {
 		int i = idx;
 		for (; i < c.size(); i++) {
 			if (!id.getId().equals(((IInstallableUnit) c.get(idx)).getId()))
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
index 1ea5768..2d03e6d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
@@ -10,22 +10,22 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.engine;
 
-import org.eclipse.equinox.p2.metadata.IResolvedInstallableUnit;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 
 public class Operand {
-	private final IResolvedInstallableUnit first;
-	private final IResolvedInstallableUnit second;
+	private final IInstallableUnit first;
+	private final IInstallableUnit second;
 
-	public Operand(IResolvedInstallableUnit first, IResolvedInstallableUnit second) {
+	public Operand(IInstallableUnit first, IInstallableUnit second) {
 		this.first = first;
 		this.second = second;
 	}
 
-	public IResolvedInstallableUnit first() {
+	public IInstallableUnit first() {
 		return first;
 	}
 
-	public IResolvedInstallableUnit second() {
+	public IInstallableUnit second() {
 		return second;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
index 239d83a..656c5a0 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
@@ -131,7 +131,7 @@ public abstract class Phase {
 			try {
 				actions = getActions(operand);
 			} catch (Throwable t) {
-				status.add(new Status(IStatus.ERROR, phaseId, t.getMessage()));
+				status.add(new Status(IStatus.ERROR, phaseId, t.getMessage(), t));
 				return;
 			}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
index cf0276e..3c2d6f3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
@@ -35,7 +35,7 @@ public class Configure extends Phase {
 	}
 
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
-		IResolvedInstallableUnit iu = operand.second();
+		IInstallableUnit iu = operand.second();
 		monitor.subTask(NLS.bind("Configuring {0}", iu.getId()));
 		parameters.put("iu", iu);
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
index 5dfab73..13c2d95 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
@@ -93,7 +93,7 @@ public class Install extends Phase {
 	}
 
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
-		IResolvedInstallableUnit iu = operand.second();
+		IInstallableUnit iu = operand.second();
 		monitor.subTask(NLS.bind("Installing {0}", iu.getId()));
 		parameters.put("iu", iu);
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
index f2754bd..05eb344 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
@@ -34,7 +34,7 @@ public class Unconfigure extends Phase {
 	}
 
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
-		IResolvedInstallableUnit iu = operand.first();
+		IInstallableUnit iu = operand.first();
 		parameters.put("iu", iu);
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
index 7d46cb9..a633cc6 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
@@ -91,7 +91,7 @@ public class Uninstall extends Phase {
 	}
 
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
-		IResolvedInstallableUnit iu = operand.first();
+		IInstallableUnit iu = operand.first();
 		parameters.put("iu", iu);
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
index a0686e7..78af1f0 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
@@ -59,9 +59,9 @@ public class InstallRegistry implements IInstallRegistry {
 						return;
 					IProfileInstallRegistry registry = getProfileInstallRegistry(event.getProfile());
 					if (event.isInstall() && event.getOperand().second() != null) {
-						registry.addInstallableUnits(event.getOperand().second().getOriginal());
+						registry.addInstallableUnits(event.getOperand().second().unresolved());
 					} else if (event.isUninstall() && event.getOperand().first() != null) {
-						IInstallableUnit original = event.getOperand().first().getOriginal();
+						IInstallableUnit original = event.getOperand().first().unresolved();
 						String value = registry.getInstallableUnitProfileProperty(original, IInstallableUnit.PROP_PROFILE_ROOT_IU);
 						boolean isRoot = value != null && value.equals(Boolean.toString(true));
 						registry.removeInstallableUnits(original);
@@ -74,7 +74,7 @@ public class InstallRegistry implements IInstallRegistry {
 						// the engine.
 						// https://bugs.eclipse.org/bugs/show_bug.cgi?id=206077 
 						if (isRoot && event.getOperand().second() != null) {
-							registry.setInstallableUnitProfileProperty(event.getOperand().second().getOriginal(), IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+							registry.setInstallableUnitProfileProperty(event.getOperand().second().unresolved(), IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 						}
 					}
 				} else if (o instanceof CommitOperationEvent) {
@@ -97,7 +97,7 @@ public class InstallRegistry implements IInstallRegistry {
 		});
 	}
 
-	void persist() {
+	synchronized void persist() {
 		try {
 			BufferedOutputStream bof = null;
 			try {
@@ -123,7 +123,7 @@ public class InstallRegistry implements IInstallRegistry {
 		}
 	}
 
-	void restore() {
+	synchronized void restore() {
 		try {
 			BufferedInputStream bif = null;
 			try {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
index d08339f..ee2d5ed 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
@@ -20,7 +20,7 @@ import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.IResolvedInstallableUnit;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.osgi.framework.ServiceReference;
 
@@ -72,9 +72,9 @@ public class MetadataCache extends URLMetadataRepository {
 						return;
 					// TODO: what about uninstall??
 					if (event.isPost() && event.getResult().isOK() && event.isInstall()) {
-						IResolvedInstallableUnit installedIU = event.getOperand().second();
+						IInstallableUnit installedIU = event.getOperand().second();
 						if (installedIU != null)
-							units.add(installedIU.getOriginal());
+							units.add(installedIU.unresolved());
 						return;
 					}
 				}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
index cd6b0dc..5cb3030 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
@@ -36,8 +36,7 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 	}
 
 	protected void writeInstallableUnit(IInstallableUnit resolvedIU) {
-		IInstallableUnit iu = (!(resolvedIU instanceof IResolvedInstallableUnit) ? resolvedIU//
-				: ((IResolvedInstallableUnit) resolvedIU).getOriginal());
+		IInstallableUnit iu = resolvedIU.unresolved();
 		start(INSTALLABLE_UNIT_ELEMENT);
 		attribute(ID_ATTRIBUTE, iu.getId());
 		attribute(VERSION_ATTRIBUTE, iu.getVersion());
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
index 1bdaf66..8cadf09 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
@@ -14,7 +14,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.p2.metadata.*;
 import org.osgi.framework.Version;
 
-public class InstallableUnit implements IInstallableUnit, InternalInstallableUnit {
+public class InstallableUnit implements IInstallableUnit {
 
 	private static final OrderedProperties NO_PROPERTIES = new OrderedProperties();
 	private static final ProvidedCapability[] NO_PROVIDES = new ProvidedCapability[0];
@@ -119,6 +119,10 @@ public class InstallableUnit implements IInstallableUnit, InternalInstallableUni
 		return filter;
 	}
 
+	public IInstallableUnitFragment[] getFragments() {
+		return null;
+	}
+
 	public String getId() {
 		return id;
 	}
@@ -146,10 +150,6 @@ public class InstallableUnit implements IInstallableUnit, InternalInstallableUni
 
 	}
 
-	public IResolvedInstallableUnit getResolved() {
-		return new ResolvedInstallableUnit(this);
-	}
-
 	public TouchpointData[] getTouchpointData() {
 		return (touchpointData == null ? TouchpointData.NO_TOUCHPOINT_DATA //
 				: (TouchpointData[]) touchpointData.toArray(new TouchpointData[touchpointData.size()]));
@@ -175,6 +175,10 @@ public class InstallableUnit implements IInstallableUnit, InternalInstallableUni
 		return false;
 	}
 
+	public boolean isResolved() {
+		return false;
+	}
+
 	public boolean isSingleton() {
 		return singleton;
 	}
@@ -242,4 +246,8 @@ public class InstallableUnit implements IInstallableUnit, InternalInstallableUni
 	public String toString() {
 		return id + ' ' + getVersion();
 	}
+
+	public IInstallableUnit unresolved() {
+		return this;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java
index 6270e34..83c6470 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java
@@ -51,8 +51,4 @@ public class InstallableUnitFragment extends InstallableUnit implements IInstall
 	public boolean isFragment() {
 		return true;
 	}
-
-	public IResolvedInstallableUnit getResolved() {
-		return new ResolvedInstallableUnitFragment(this);
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InternalInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InternalInstallableUnit.java
deleted file mode 100644
index 84acdb9..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InternalInstallableUnit.java
+++ /dev/null
@@ -1,16 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.internal.p2.metadata;
-
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IResolvedInstallableUnit;
-
-public interface InternalInstallableUnit extends IInstallableUnit {
-	public IResolvedInstallableUnit getResolved();
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
new file mode 100644
index 0000000..241233e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
@@ -0,0 +1,158 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.metadata;
+
+import java.util.*;
+import org.eclipse.equinox.p2.metadata.*;
+import org.osgi.framework.Version;
+
+public class ResolvedInstallableUnit implements IInstallableUnit {
+	private static IInstallableUnit[] NO_IU = new IInstallableUnit[0];
+
+	private IInstallableUnit[] fragments = NO_IU;
+	protected IInstallableUnit original;
+
+	public ResolvedInstallableUnit(IInstallableUnit resolved) {
+		this.original = resolved;
+	}
+
+	public ResolvedInstallableUnit(IInstallableUnit resolved, IInstallableUnitFragment[] fragments) {
+		this.original = resolved;
+		this.fragments = fragments;
+	}
+
+	public IInstallableUnitFragment[] getFragments() {
+		ArrayList result = new ArrayList();
+		if (fragments != null)
+			result.addAll(Arrays.asList(fragments));
+		for (int i = 0; i < result.size(); i++) {
+			IInstallableUnit fragment = (IInstallableUnit) result.get(i);
+			if (fragment.isResolved())
+				result.addAll(Arrays.asList(fragment.getFragments()));
+		}
+		return (IInstallableUnitFragment[]) result.toArray(new IInstallableUnitFragment[result.size()]);
+	}
+
+	public String getApplicabilityFilter() {
+		return original.getApplicabilityFilter();
+	}
+
+	public IArtifactKey[] getArtifacts() {
+		return original.getArtifacts();
+	}
+
+	public String getFilter() {
+		return original.getFilter();
+	}
+
+	public String getId() {
+		return original.getId();
+	}
+
+	public String getProperty(String key) {
+		return original.getProperty(key);
+	}
+
+	public Map getProperties() {
+		return original.getProperties();
+	}
+
+	public ProvidedCapability[] getProvidedCapabilities() {
+		ArrayList result = new ArrayList();
+		result.addAll(Arrays.asList(original.getProvidedCapabilities()));
+		for (int i = 0; i < fragments.length; i++) {
+			result.addAll(Arrays.asList(fragments[i].getProvidedCapabilities()));
+		}
+		return original.getProvidedCapabilities();
+	}
+
+	public RequiredCapability[] getRequiredCapabilities() {
+		ArrayList result = new ArrayList();
+		result.addAll(Arrays.asList(original.getRequiredCapabilities()));
+		for (int i = 0; i < fragments.length; i++) {
+			result.addAll(Arrays.asList(fragments[i].getRequiredCapabilities()));
+		}
+		return (RequiredCapability[]) result.toArray(new RequiredCapability[result.size()]);
+
+	}
+
+	public TouchpointData[] getTouchpointData() {
+		ArrayList result = new ArrayList();
+		result.addAll(Arrays.asList(original.getTouchpointData()));
+		for (int i = 0; i < fragments.length; i++) {
+			TouchpointData[] data = fragments[i].getTouchpointData();
+			for (int j = 0; j < data.length; j++) {
+				result.add(data[j]);
+			}
+		}
+		return (TouchpointData[]) result.toArray(new TouchpointData[result.size()]);
+	}
+
+	public TouchpointType getTouchpointType() {
+		return original.getTouchpointType();
+	}
+
+	public Version getVersion() {
+		return original.getVersion();
+	}
+
+	public boolean isFragment() {
+		return original.isFragment();
+	}
+
+	public boolean isSingleton() {
+		return original.isSingleton();
+	}
+
+	public void accept(IMetadataVisitor visitor) {
+		visitor.visitInstallableUnit(this);
+	}
+
+	public boolean equals(Object obj) {
+		//TODO This is pretty ugly....
+		boolean result = original.equals(obj);
+		if (result)
+			return true;
+		if (obj instanceof ResolvedInstallableUnit)
+			return original.equals(((ResolvedInstallableUnit) obj).original);
+		return false;
+	}
+
+	public int hashCode() {
+		// TODO Auto-generated method stub
+		return original.hashCode();
+	}
+
+	public String toString() {
+		return "[R]" + original.toString(); //$NON-NLS-1$
+	}
+
+	public IInstallableUnit getOriginal() {
+		return original;
+	}
+
+	public int compareTo(Object toCompareTo) {
+		if (!(toCompareTo instanceof IInstallableUnit)) {
+			return -1;
+		}
+		IInstallableUnit other = (IInstallableUnit) toCompareTo;
+		if (getId().compareTo(other.getId()) == 0)
+			return (getVersion().compareTo(other.getVersion()));
+		return getId().compareTo(other.getId());
+	}
+
+	public boolean isResolved() {
+		return true;
+	}
+
+	public IInstallableUnit unresolved() {
+		return original;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
index cda7671..c3a6e7f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
@@ -115,11 +115,11 @@ public interface IInstallableUnit extends Comparable {
 	 */
 	public static final String PROP_UPDATE_SITE = "equinox.p2.update.site"; //$NON-NLS-1$
 
-	public abstract void accept(IMetadataVisitor visitor);
+	public void accept(IMetadataVisitor visitor);
 
-	public abstract String getApplicabilityFilter();
+	public String getApplicabilityFilter();
 
-	public abstract IArtifactKey[] getArtifacts();
+	public IArtifactKey[] getArtifacts();
 
 	/**
 	 * Returns the filter on this installable unit. The filter is matched against
@@ -128,9 +128,18 @@ public interface IInstallableUnit extends Comparable {
 	 * 
 	 * See Profile#getSelectionContext.
 	 */
-	public abstract String getFilter();
+	public String getFilter();
 
-	public abstract String getId();
+	/**
+	 * Returns the fragments that have been bound to this installable unit, or
+	 * <code>null</code> if this unit is not resolved.
+	 * 
+	 * @see #isResolved()
+	 * @return The fragments bound to this installable unit, or <code>null</code>
+	 */
+	public IInstallableUnitFragment[] getFragments();
+
+	public String getId();
 
 	/**
 	 * Get an <i>unmodifiable copy</i> of the properties
@@ -138,21 +147,45 @@ public interface IInstallableUnit extends Comparable {
 	 * 
 	 * @return an <i>unmodifiable copy</i> of the IU properties.
 	 */
-	public abstract Map getProperties();
+	public Map getProperties();
+
+	public String getProperty(String key);
+
+	public ProvidedCapability[] getProvidedCapabilities();
 
-	public abstract String getProperty(String key);
+	public RequiredCapability[] getRequiredCapabilities();
 
-	public abstract ProvidedCapability[] getProvidedCapabilities();
+	public TouchpointData[] getTouchpointData();
 
-	public abstract RequiredCapability[] getRequiredCapabilities();
+	public TouchpointType getTouchpointType();
 
-	public abstract TouchpointData[] getTouchpointData();
+	public Version getVersion();
 
-	public abstract TouchpointType getTouchpointType();
+	public boolean isFragment();
 
-	public abstract Version getVersion();
+	/**
+	 * Returns whether this installable unit has been resolved. A resolved
+	 * installable unit represents the union of an installable unit and some
+	 * fragments.
+	 * 
+	 * @see #getFragments()
+	 * @see #unresolved()
+	 * @return <code>true</code> if this installable unit is resolved, and 
+	 * <code>false</code> otherwise.
+	 */
+	public boolean isResolved();
 
-	public abstract boolean isFragment();
+	public boolean isSingleton();
 
-	public abstract boolean isSingleton();
+	/**
+	 * Returns the unresolved equivalent of this installable unit. If this unit is
+	 * already unresolved, this method returns the receiver. Otherwise, this
+	 * method returns an installable unit with the same id and version, but without
+	 * any fragments attached.
+	 * 
+	 * @see #getFragments()
+	 * @see #isResolved()
+	 * @return The unresolved equivalent of this unit
+	 */
+	public IInstallableUnit unresolved();
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnit.java
deleted file mode 100644
index 0e7eba2..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnit.java
+++ /dev/null
@@ -1,16 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.p2.metadata;
-
-public interface IResolvedInstallableUnit extends IInstallableUnit {
-
-	public abstract IInstallableUnitFragment[] getFragments();
-
-	public abstract IInstallableUnit getOriginal();
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnitFragment.java
deleted file mode 100644
index 4ea5c4b..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IResolvedInstallableUnitFragment.java
+++ /dev/null
@@ -1,13 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.p2.metadata;
-
-public interface IResolvedInstallableUnitFragment extends IInstallableUnitFragment, IResolvedInstallableUnit {
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
index d872370..a648fde 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
@@ -11,8 +11,7 @@
 package org.eclipse.equinox.p2.metadata;
 
 import org.eclipse.core.runtime.Assert;
-import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
-import org.eclipse.equinox.internal.p2.metadata.InstallableUnitFragment;
+import org.eclipse.equinox.internal.p2.metadata.*;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
@@ -106,6 +105,7 @@ public class MetadataFactory {
 	 * @return The created installable unit or fragment
 	 */
 	public static IInstallableUnit createInstallableUnit(InstallableUnitDescription description) {
+		Assert.isNotNull(description);
 		return description.unitCreate();
 	}
 
@@ -118,6 +118,23 @@ public class MetadataFactory {
 	 * @return The created installable unit or fragment
 	 */
 	public static IInstallableUnitFragment createInstallableUnitFragment(InstallableUnitFragmentDescription description) {
+		Assert.isNotNull(description);
 		return (IInstallableUnitFragment) description.unitCreate();
 	}
+
+	/**
+	 * Creates and returns an {@link IInstallableUnit} that represents the given
+	 * unit bound to the given fragments.
+	 * 
+	 * @see IInstallableUnit#isResolved()
+	 * @param unit The unit to be bound
+	 * @param fragments The fragments to be bound
+	 * @return A resolved installable unit
+	 */
+	public static IInstallableUnit createResolvedInstallableUnit(IInstallableUnit unit, IInstallableUnitFragment[] fragments) {
+		Assert.isNotNull(unit);
+		Assert.isNotNull(fragments);
+		return new ResolvedInstallableUnit(unit, fragments);
+
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
deleted file mode 100644
index 6490632..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.p2.metadata;
-
-import java.util.*;
-import org.eclipse.equinox.internal.p2.metadata.InternalInstallableUnit;
-import org.osgi.framework.Version;
-
-public class ResolvedInstallableUnit implements IResolvedInstallableUnit, InternalInstallableUnit {
-	private static IInstallableUnit[] NO_IU = new IInstallableUnit[0];
-
-	private IInstallableUnit[] fragments = NO_IU;
-	protected IInstallableUnit resolved;
-
-	public ResolvedInstallableUnit(IInstallableUnit resolved) {
-		this.resolved = resolved;
-	}
-
-	public void setFragments(IResolvedInstallableUnit[] fragments) {
-		this.fragments = fragments;
-	}
-
-	public IInstallableUnitFragment[] getFragments() {
-		ArrayList result = new ArrayList();
-		if (fragments != null)
-			result.addAll(Arrays.asList(fragments));
-		for (int i = 0; i < result.size(); i++) {
-			result.addAll(Arrays.asList(((IResolvedInstallableUnit) result.get(i)).getFragments()));
-		}
-		return (IInstallableUnitFragment[]) result.toArray(new IInstallableUnitFragment[result.size()]);
-	}
-
-	public String getApplicabilityFilter() {
-		return resolved.getApplicabilityFilter();
-	}
-
-	public IArtifactKey[] getArtifacts() {
-		return resolved.getArtifacts();
-	}
-
-	public String getFilter() {
-		return resolved.getFilter();
-	}
-
-	public String getId() {
-		return resolved.getId();
-	}
-
-	public String getProperty(String key) {
-		return resolved.getProperty(key);
-	}
-
-	public Map getProperties() {
-		return resolved.getProperties();
-	}
-
-	public ProvidedCapability[] getProvidedCapabilities() {
-		ArrayList result = new ArrayList();
-		result.addAll(Arrays.asList(resolved.getProvidedCapabilities()));
-		for (int i = 0; i < fragments.length; i++) {
-			result.addAll(Arrays.asList(fragments[i].getProvidedCapabilities()));
-		}
-		return resolved.getProvidedCapabilities();
-	}
-
-	public RequiredCapability[] getRequiredCapabilities() {
-		ArrayList result = new ArrayList();
-		result.addAll(Arrays.asList(resolved.getRequiredCapabilities()));
-		for (int i = 0; i < fragments.length; i++) {
-			result.addAll(Arrays.asList(fragments[i].getRequiredCapabilities()));
-		}
-		return (RequiredCapability[]) result.toArray(new RequiredCapability[result.size()]);
-
-	}
-
-	public TouchpointData[] getTouchpointData() {
-		ArrayList result = new ArrayList();
-		result.addAll(Arrays.asList(resolved.getTouchpointData()));
-		for (int i = 0; i < fragments.length; i++) {
-			TouchpointData[] data = fragments[i].getTouchpointData();
-			for (int j = 0; j < data.length; j++) {
-				result.add(data[j]);
-			}
-		}
-		return (TouchpointData[]) result.toArray(new TouchpointData[result.size()]);
-	}
-
-	public TouchpointType getTouchpointType() {
-		return resolved.getTouchpointType();
-	}
-
-	public Version getVersion() {
-		return resolved.getVersion();
-	}
-
-	public boolean isFragment() {
-		return resolved.isFragment();
-	}
-
-	public boolean isSingleton() {
-		return resolved.isSingleton();
-	}
-
-	public void accept(IMetadataVisitor visitor) {
-		visitor.visitInstallableUnit(this);
-	}
-
-	public boolean equals(Object obj) {
-		//TODO This is pretty ugly....
-		boolean result = resolved.equals(obj);
-		if (result)
-			return true;
-		if (obj instanceof ResolvedInstallableUnit)
-			return resolved.equals(((ResolvedInstallableUnit) obj).resolved);
-		return false;
-	}
-
-	public int hashCode() {
-		// TODO Auto-generated method stub
-		return resolved.hashCode();
-	}
-
-	public String toString() {
-		return "[R]" + resolved.toString(); //$NON-NLS-1$
-	}
-
-	public IInstallableUnit getOriginal() {
-		return resolved;
-	}
-
-	public int compareTo(Object toCompareTo) {
-		if (!(toCompareTo instanceof IInstallableUnit)) {
-			return -1;
-		}
-		IInstallableUnit other = (IInstallableUnit) toCompareTo;
-		if (getId().compareTo(other.getId()) == 0)
-			return (getVersion().compareTo(other.getVersion()));
-		return getId().compareTo(other.getId());
-	}
-
-	public IResolvedInstallableUnit getResolved() {
-		return this;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java
deleted file mode 100644
index 3a69502..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.p2.metadata;
-
-import org.eclipse.osgi.service.resolver.VersionRange;
-
-public class ResolvedInstallableUnitFragment extends ResolvedInstallableUnit implements IResolvedInstallableUnitFragment {
-
-	public ResolvedInstallableUnitFragment(IInstallableUnitFragment resolved) {
-		super(resolved);
-	}
-
-	public String getHostId() {
-		return ((IInstallableUnitFragment) resolved).getHostId();
-	}
-
-	public VersionRange getHostVersionRange() {
-		return ((IInstallableUnitFragment) resolved).getHostVersionRange();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/resolution/ResolutionHelper.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/resolution/ResolutionHelper.java
index a2404c5..f6a84ef 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/resolution/ResolutionHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/resolution/ResolutionHelper.java
@@ -11,19 +11,25 @@
 package org.eclipse.equinox.p2.resolution;
 
 import java.util.*;
-import org.eclipse.equinox.internal.p2.metadata.InternalInstallableUnit;
 import org.eclipse.equinox.internal.p2.metadata.MetadataActivator;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.osgi.service.resolver.*;
 import org.osgi.framework.ServiceReference;
 
 public class ResolutionHelper {
+	private static final IInstallableUnitFragment[] NO_FRAGMENTS = new IInstallableUnitFragment[0];
+
 	private static boolean DEBUG = false;
 
 	private Transformer transformer;
 	private State state;
 	private Dictionary selectionContext;
 	private RecommendationDescriptor recommendations;
+	/**
+	 * Map of IInstallableUnit->(IInstallableUnitFragment) representing the 
+	 * mapping of IUs to the fragment they are bound to.
+	 */
+	private Map fragmentBindings;
 
 	public ResolutionHelper(Dictionary selectionContext, RecommendationDescriptor recommendations) {
 		this.selectionContext = selectionContext;
@@ -35,6 +41,7 @@ public class ResolutionHelper {
 		PlatformAdmin pa = (PlatformAdmin) MetadataActivator.context.getService(sr);
 		transformer = new Transformer(pa.getFactory(), selectionContext, recommendations);
 		state = pa.getFactory().createState(true);
+		fragmentBindings = new HashMap();
 		if (selectionContext != null)
 			state.setPlatformProperties(selectionContext);
 	}
@@ -97,11 +104,8 @@ public class ResolutionHelper {
 	 */
 	public Collection attachCUs(Collection toAttach) {
 		initialize();
-		Collection result = new HashSet(toAttach.size());
 		for (Iterator iterator = toAttach.iterator(); iterator.hasNext();) {
-			IResolvedInstallableUnit tmp = ((InternalInstallableUnit) iterator.next()).getResolved();
-			result.add(tmp);
-			addInResolution(tmp);
+			addInResolution((IInstallableUnit) iterator.next());
 		}
 		state.resolve();
 		BundleDescription[] bds = state.getBundles();
@@ -117,14 +121,14 @@ public class ResolutionHelper {
 			// For now we will select just one fragment by preferring a fragment that matches the host
 
 			IInstallableUnit hostIU = ((StateMetadataMap) bds[i].getUserObject()).getUnit();
-			IResolvedInstallableUnitFragment selectedFragment = null;
+			IInstallableUnitFragment selectedFragment = null;
 			for (int k = 0; k < potentialIUFragments.length; k++) {
 				IInstallableUnit dependentIU = ((StateMetadataMap) potentialIUFragments[k].getUserObject()).getUnit();
 				if (hostIU.equals(dependentIU))
 					continue;
 
 				if (dependentIU.isFragment()) {
-					IResolvedInstallableUnitFragment potentialFragment = (IResolvedInstallableUnitFragment) dependentIU;
+					IInstallableUnitFragment potentialFragment = (IInstallableUnitFragment) dependentIU;
 
 					if (potentialFragment.getHostId() == null) {
 						// default fragment - we'll mark it selected but keep looking for a fragment that matches the host
@@ -137,7 +141,19 @@ public class ResolutionHelper {
 				}
 			}
 			if (selectedFragment != null)
-				((ResolvedInstallableUnit) hostIU).setFragments(new IResolvedInstallableUnit[] {selectedFragment});
+				fragmentBindings.put(hostIU, selectedFragment);
+		}
+		//build the collection of resolved IUs
+		Collection result = new HashSet(toAttach.size());
+		for (Iterator iterator = toAttach.iterator(); iterator.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
+			IInstallableUnitFragment fragment = (IInstallableUnitFragment) fragmentBindings.get(iu);
+			IInstallableUnitFragment[] fragments;
+			if (fragment == null)
+				fragments = NO_FRAGMENTS;
+			else
+				fragments = new IInstallableUnitFragment[] {fragment};
+			result.add(MetadataFactory.createResolvedInstallableUnit(iu, fragments));
 		}
 		return result;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index aea0b04..ee79200 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -473,4 +473,11 @@ public class AbstractProvisioningTest extends TestCase {
 			metadataRepos.clear();
 		}
 	}
+
+	/**
+	 * Returns a resolved IU corresponding to the given IU, with no attached fragments.
+	 */
+	protected IInstallableUnit createResolvedIU(IInstallableUnit unit) {
+		return MetadataFactory.createResolvedInstallableUnit(unit, new IInstallableUnitFragment[0]);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index e1a7877..8111953 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -124,7 +124,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new PhaseSet(new Phase[] {}) {
 			// empty PhaseSet
 		};
-		Operand op = new Operand(new ResolvedInstallableUnit(createIU("name")), null);
+		Operand op = new Operand(createResolvedIU(createIU("name")), null);
 		Operand[] operands = new Operand[] {op};
 		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
@@ -146,7 +146,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		for (Iterator it = profile.getInstallableUnits(); it.hasNext();) {
 			PhaseSet phaseSet = new DefaultPhaseSet();
 			IInstallableUnit doomed = (IInstallableUnit) it.next();
-			Operand[] operands = new Operand[] {new Operand(new ResolvedInstallableUnit(doomed), null)};
+			Operand[] operands = new Operand[] {new Operand(createResolvedIU(doomed), null)};
 			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		}
 		PhaseSet phaseSet = new DefaultPhaseSet();
@@ -198,7 +198,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		assertFalse(ius.hasNext());
 	}
 
-	private IResolvedInstallableUnit createOSGiIU() {
+	private IInstallableUnit createOSGiIU() {
 		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
 		description.setId("org.eclipse.osgi");
 		description.setVersion(new Version("3.3.1.R33x_v20070828"));
@@ -213,22 +213,20 @@ public class EngineTest extends AbstractProvisioningTest {
 		//touchpointData.put("install", "installBundle(bundle:${artifact});");
 		//touchpointData.put("uninstall", "uninstallBundle(bundle:${artifact});");
 
-		IResolvedInstallableUnit[] cus = new IResolvedInstallableUnit[1];
+		IInstallableUnitFragment[] cus = new IInstallableUnitFragment[1];
 		InstallableUnitFragmentDescription desc = new InstallableUnitFragmentDescription();
 		desc.addTouchpointData(new TouchpointData(touchpointData));
 		IInstallableUnitFragment fragment = MetadataFactory.createInstallableUnitFragment(desc);
-		cus[0] = new ResolvedInstallableUnitFragment(fragment);
+		cus[0] = fragment;
 
 		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
 		//iu.setArtifacts(new IArtifactKey[] {key});
 
 		IInstallableUnit iu = MetadataFactory.createInstallableUnit(description);
-		ResolvedInstallableUnit result = new ResolvedInstallableUnit(iu);
-		result.setFragments(cus);
-		return result;
+		return MetadataFactory.createResolvedInstallableUnit(iu, cus);
 	}
 
-	private IResolvedInstallableUnit createBadIU() {
+	private IInstallableUnit createBadIU() {
 		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
 		description.setId("org.eclipse.osgi.bad");
 		description.setVersion(new Version("3.3.1.R33x_v20070828"));
@@ -242,20 +240,16 @@ public class EngineTest extends AbstractProvisioningTest {
 		touchpointData.put("manifest", manifest);
 		touchpointData.put("install", "BAD");
 
-		IResolvedInstallableUnit[] cus = new IResolvedInstallableUnit[1];
+		IInstallableUnitFragment[] cus = new IInstallableUnitFragment[1];
 		InstallableUnitFragmentDescription desc = new InstallableUnitFragmentDescription();
 		desc.addTouchpointData(new TouchpointData(touchpointData));
-		IInstallableUnitFragment fragment = MetadataFactory.createInstallableUnitFragment(desc);
-		cus[0] = new ResolvedInstallableUnitFragment(fragment);
+		cus[0] = MetadataFactory.createInstallableUnitFragment(desc);
 
 		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
 		//iu.setArtifacts(new IArtifactKey[] {key});
 
 		IInstallableUnit iu = MetadataFactory.createInstallableUnit(description);
-		ResolvedInstallableUnit result = new ResolvedInstallableUnit(iu);
-		result.setFragments(cus);
-
-		return result;
+		return MetadataFactory.createResolvedInstallableUnit(iu, cus);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
index 981f4de..cf0c966 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
@@ -10,12 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.engine;
 
-import junit.framework.TestCase;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.installregistry.IInstallRegistry;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.Version;
@@ -23,7 +23,7 @@ import org.osgi.framework.Version;
 /**
  * Simple test of the engine API.
  */
-public class InstallRegistryTest extends TestCase {
+public class InstallRegistryTest extends AbstractProvisioningTest {
 	private ServiceReference registryRef;
 	private IInstallRegistry registry;
 	private ServiceReference engineRef;
@@ -90,12 +90,12 @@ public class InstallRegistryTest extends TestCase {
 		}
 	}
 
-	private IResolvedInstallableUnit createTestIU() {
+	private IInstallableUnit createTestIU() {
 		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
 		description.setId("org.eclipse.test");
 		description.setVersion(new Version("1.0.0"));
 		description.setTouchpointType(new TouchpointType("null", new Version("1.0.0")));
 		IInstallableUnit unit = MetadataFactory.createInstallableUnit(description);
-		return new ResolvedInstallableUnit(unit);
+		return createResolvedIU(unit);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
index 297102e..6c7745b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.p2.tests.engine;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.ResolvedInstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 /**
@@ -44,7 +43,7 @@ public class PhaseSetTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new PhaseSet(new Phase[] {}) {
 			// empty PhaseSet
 		};
-		Operand op = new Operand(new ResolvedInstallableUnit(createIU("iu")), null);
+		Operand op = new Operand(createResolvedIU(createIU("iu")), null);
 		Operand[] operands = new Operand[] {op};
 
 		IStatus result = phaseSet.perform(new EngineSession(profile), profile, operands, new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
index dd68e1e..f4e0c3e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
@@ -11,11 +11,11 @@
 package org.eclipse.equinox.p2.tests.engine;
 
 import java.util.Map;
-import junit.framework.TestCase;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.eclipse.equinox.p2.tests.engine.PhaseTest.TestPhaseSet;
 import org.osgi.framework.ServiceReference;
@@ -24,7 +24,7 @@ import org.osgi.framework.Version;
 /**
  * Simple test of the engine API.
  */
-public class TouchpointTest extends TestCase {
+public class TouchpointTest extends AbstractProvisioningTest {
 
 	static volatile TestTouchpoint testTouchpoint;
 
@@ -144,13 +144,13 @@ public class TouchpointTest extends TestCase {
 		assertEquals(1, testTouchpoint.completeOperand);
 	}
 
-	private IResolvedInstallableUnit createTestIU(String touchpointName) {
+	private IInstallableUnit createTestIU(String touchpointName) {
 		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
 		description.setId("org.eclipse.test");
 		description.setVersion(new Version("1.0.0"));
 		description.setTouchpointType(new TouchpointType(touchpointName, new Version("1.0.0")));
 		IInstallableUnit unit = MetadataFactory.createInstallableUnit(description);
-		return new ResolvedInstallableUnit(unit);
+		return createResolvedIU(unit);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
index 67e1e77..f2c4a40 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
@@ -20,7 +20,6 @@ import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IResolvedInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.tests.TestActivator;
@@ -140,7 +139,7 @@ public class DirectorTest extends TestCase {
 		if (!it.hasNext())
 			return;
 		IInstallableUnit sc = (IInstallableUnit) it.next();
-		if (sc instanceof IResolvedInstallableUnit)
+		if (sc.isResolved())
 			fail("The repository should not store resolved installable units");
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
index 3669b40..5729c41 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
@@ -44,7 +44,7 @@ public class FragmentMethodTest extends TestCase {
 		hash.add(iu3);
 		Collection result = new ResolutionHelper(new Hashtable(), null).attachCUs(hash);
 		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
-			IResolvedInstallableUnit iu = (IResolvedInstallableUnit) iterator.next();
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			if (iu.getId().equals(iu1.getId()))
 				iu1 = iu;
 			if (iu.getId().equals(iu3.getId()))
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
index 9cf11e1..6139dda 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
@@ -27,7 +27,7 @@ public class FragmentTest extends AbstractProvisioningTest {
 		set.add(iu2);
 		Collection result = rh.attachCUs(set);
 		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
-			IResolvedInstallableUnit iu = (IResolvedInstallableUnit) iterator.next();
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			if (iu.getId().equals("iu1.test1")) {
 				assertEquals(iu.getFragments().length, 1);
 				assertEquals(iu.getFragments()[0].getId(), "iuFragment.test1");
@@ -46,7 +46,7 @@ public class FragmentTest extends AbstractProvisioningTest {
 		set.add(iu3);
 		Collection result = rh.attachCUs(set);
 		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
-			IResolvedInstallableUnit iu = (IResolvedInstallableUnit) iterator.next();
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			if (iu.getId().equals("iu1.test1")) {
 				assertEquals(iu.getFragments().length, 1);
 				assertEquals(iu.getFragments()[0].getId(), "iuFragment.test1");
@@ -69,7 +69,7 @@ public class FragmentTest extends AbstractProvisioningTest {
 		set.add(iu2);
 		Collection result = rh.attachCUs(set);
 		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
-			IResolvedInstallableUnit iu = (IResolvedInstallableUnit) iterator.next();
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			if (iu.getId().equals(iu1.getId()))
 				assertEquals(2, iu.getTouchpointData().length);
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
index 52ac3b3..bc7ea8e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
@@ -43,7 +43,7 @@ public class MultipleIUAndFragmentTest extends AbstractProvisioningTest {
 
 	public void testAttachement() {
 		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
-			IResolvedInstallableUnit iu = (IResolvedInstallableUnit) iterator.next();
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			if (iu.getId().equals(iu1.getId())) {
 				assertEquals(1, iu.getFragments().length);
 				assertEquals(iu.getFragments()[0].getId(), iu3.getId());

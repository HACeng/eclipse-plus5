commit d3a1d553e09cc6bf5ca0516c0b72659d11a3d4c4
Author: Susan Franklin <sfranklin>
Date:   Wed May 7 15:18:20 2008 +0000

    Bug 229877 - [ui] Unable to start after upgrade

109	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java
7	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
4	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
7	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
5	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
47	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java
new file mode 100644
index 0000000..a18c02d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/PlanStatusHelper.java
@@ -0,0 +1,109 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui;
+
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
+import org.eclipse.equinox.internal.provisional.p2.engine.Operand;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.IStatusCodes;
+import org.eclipse.osgi.util.NLS;
+
+/**
+ * This class defines commonly used status objects for communicating issues
+ * about provisioning plans to the user and analyzes a proposed provisioning plan
+ * to find common problems and report them in a way that makes sense to a user.
+ * 
+ * @since 3.4
+ */
+public class PlanStatusHelper {
+
+	public static IStatus getStatus(int statusCode, IInstallableUnit affectedIU) {
+		switch (statusCode) {
+			case IStatusCodes.IMPLIED_UPDATE :
+				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_ImpliedUpdate, getIUString(affectedIU)), null);
+			case IStatusCodes.IGNORED_IMPLIED_DOWNGRADE :
+				return new Status(IStatus.WARNING, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_IgnoringImpliedDowngrade, getIUString(affectedIU)), null);
+			case IStatusCodes.IGNORED_ALREADY_INSTALLED :
+				return new Status(IStatus.WARNING, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_AlreadyInstalled, getIUString(affectedIU)), null);
+			case IStatusCodes.UNEXPECTED_NOTHING_TO_DO :
+				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_NothingToDo, getIUString(affectedIU)), null);
+			case IStatusCodes.PROFILE_CHANGE_ALTERED :
+				return new MultiStatus(ProvUIActivator.PLUGIN_ID, statusCode, ProvUIMessages.PlanStatusHelper_RequestAltered, null);
+			default :
+				return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, statusCode, NLS.bind(ProvUIMessages.PlanStatusHelper_UnexpectedError, new Integer(statusCode), getIUString(affectedIU)), null);
+		}
+	}
+
+	public static MultiStatus getProfileChangeAlteredStatus() {
+		return (MultiStatus) getStatus(IStatusCodes.PROFILE_CHANGE_ALTERED, null);
+	}
+
+	public static IStatus computeStatus(ProvisioningPlan plan, IInstallableUnit[] ius) {
+		if (plan == null)
+			return getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null);
+		// If the plan is ok, nothing to do
+		if (plan.getStatus().isOK())
+			return plan.getStatus();
+		// If this is a status we have already checked, don't bother doing so again.
+		if (plan.getStatus().getCode() == IStatusCodes.UNEXPECTED_NOTHING_TO_DO)
+			return plan.getStatus();
+		// If the plan has no IU operands and some were expected, then nothing will happen.
+		if (ius != null && ius.length > 0) {
+			boolean iusInPlan = false;
+			Operand[] operands = plan.getOperands();
+			for (int i = 0; i < operands.length; i++)
+				if (operands[i] instanceof InstallableUnitOperand) {
+					iusInPlan = true;
+					break;
+				}
+			if (!iusInPlan) {
+				MultiStatus status = new MultiStatus(ProvUIActivator.PLUGIN_ID, IStatusCodes.UNEXPECTED_NOTHING_TO_DO, NLS.bind(ProvUIMessages.PlanStatusHelper_NothingToDo, getIUString(ius)), null);
+				status.add(getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null));
+				if (plan.getStatus() != null)
+					status.merge(plan.getStatus());
+				return status;
+			}
+		}
+		// We have no further interpretation.
+		return plan.getStatus();
+
+	}
+
+	private static String getIUString(IInstallableUnit iu) {
+		if (iu == null)
+			return ProvUIMessages.PlanStatusHelper_Items;
+		String name = iu.getProperty(IInstallableUnit.PROP_NAME);
+		if (name != null)
+			return name;
+		return iu.getId();
+	}
+
+	private static String getIUString(IInstallableUnit[] ius) {
+		if (ius == null || ius.length == 0)
+			return ProvUIMessages.PlanStatusHelper_Items;
+		if (ius.length == 1)
+			return getIUString(ius[0]);
+		final StringBuffer stringBuffer = new StringBuffer();
+		stringBuffer.append("("); //$NON-NLS-1$
+		for (int i = 0; i < ius.length; i++) {
+			stringBuffer.append(getIUString(ius[i]));
+			if (i != ius.length - 1) {
+				stringBuffer.append(',');
+			}
+		}
+		stringBuffer.append(')');
+		return stringBuffer.toString();
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 7e85543..ffb74f3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -125,6 +125,13 @@ public class ProvUIMessages extends NLS {
 	public static String MetadataRepositoryElement_RepositoryLoadError;
 	public static String UpdateAction_UpdatesAvailableMessage;
 	public static String UpdateAction_UpdatesAvailableTitle;
+	public static String PlanStatusHelper_IgnoringImpliedDowngrade;
+	public static String PlanStatusHelper_ImpliedUpdate;
+	public static String PlanStatusHelper_Items;
+	public static String PlanStatusHelper_NothingToDo;
+	public static String PlanStatusHelper_AlreadyInstalled;
+	public static String PlanStatusHelper_RequestAltered;
+	public static String PlanStatusHelper_UnexpectedError;
 	public static String PlatformUpdateTitle;
 	public static String PlatformRestartMessage;
 	public static String ProvUI_ErrorDuringApplyConfig;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index c6314de..d177c0c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -14,8 +14,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.List;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
-import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
@@ -122,7 +121,7 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		if (currentPlan == null)
 			checkedIUsChanged();
 		else
-			currentStatus = currentPlan.getStatus();
+			currentStatus = PlanStatusHelper.computeStatus(currentPlan, ius);
 
 		createSizingInfo(composite);
 
@@ -207,7 +206,7 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 
 	protected void checkedIUsChanged() {
 		try {
-			final Object[] selections = getCheckedElements();
+			final IInstallableUnit[] selections = getCheckedIUs();
 			if (selections.length == 0) {
 				currentPlan = null;
 				currentStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProfileModificationWizardPage_NothingSelected);
@@ -217,7 +216,7 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 						try {
 							currentPlan = computeProvisioningPlan(selections, monitor);
 							if (currentPlan != null)
-								currentStatus = currentPlan.getStatus();
+								currentStatus = PlanStatusHelper.computeStatus(currentPlan, selections);
 							else
 								currentStatus = NULL_PLAN_STATUS;
 						} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 134b5e8..0832fcd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -110,6 +110,13 @@ UpdateManagerCompatibility_UnableToOpenManageConfiguration=Unable to open the Cl
 CategoryElementCollector_Uncategorized=Uncategorized
 InstallDialog_InstallSelectionMessage=Review and confirm that the checked items will be installed.
 
+PlanStatusHelper_IgnoringImpliedDowngrade={0} will be ignored because a newer version is already installed. 
+PlanStatusHelper_ImpliedUpdate={0} is already installed, so an update will be performed instead.
+PlanStatusHelper_Items=Items
+PlanStatusHelper_NothingToDo={0} will be ignored.
+PlanStatusHelper_AlreadyInstalled={0} will be ignored because it is already installed.
+PlanStatusHelper_RequestAltered=Your original request has been modified.
+PlanStatusHelper_UnexpectedError=Unexpected error code {0} encountered for {1}.
 PlatformUpdateTitle = Software Updates
 PlatformRestartMessage = You will need to restart the system for the changes to take effect. \
 Would you like to restart now?
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
index f86b8f9..7c48b34 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IStatusCodes.java
@@ -24,4 +24,9 @@ public interface IStatusCodes {
 	//in ProvisionException or we'll see strange results.
 
 	public static final int NOTHING_TO_UPDATE = 10000;
+	public static final int PROFILE_CHANGE_ALTERED = 10001;
+	public static final int IMPLIED_UPDATE = 10002;
+	public static final int IGNORED_IMPLIED_DOWNGRADE = 10003;
+	public static final int IGNORED_ALREADY_INSTALLED = 10004;
+	public static final int UNEXPECTED_NOTHING_TO_DO = 10005;
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index 6beaa73..0e3c561 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -12,6 +12,8 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.actions;
 
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.MultiStatus;
+import org.eclipse.equinox.internal.p2.ui.PlanStatusHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
@@ -20,8 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.ui.IProfileChooser;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.InstallWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policies;
@@ -32,26 +33,60 @@ import org.eclipse.swt.widgets.Shell;
 public class InstallAction extends ProfileModificationAction {
 
 	public static ProvisioningPlan computeProvisioningPlan(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) throws ProvisionException {
+		MultiStatus additionalStatus = PlanStatusHelper.getProfileChangeAlteredStatus();
 		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
-		request.addInstallableUnits(ius);
+		// Now check each individual IU for special cases
 		IProfile profile = ProvisioningUtil.getProfile(targetProfileId);
-		IInstallableUnit[] installedIUs = (IInstallableUnit[]) profile.query(new InstallableUnitQuery(null), new Collector(), null).toArray(IInstallableUnit.class);
 		for (int i = 0; i < ius.length; i++) {
 			// If the user is installing a patch, we mark it optional.  This allows
 			// the patched IU to be updated later by removing the patch.
 			if (Boolean.toString(true).equals(ius[i].getProperty(IInstallableUnit.PROP_TYPE_PATCH)))
 				request.setInstallableUnitInclusionRules(ius[i], PlannerHelper.createOptionalInclusionRule(ius[i]));
-			// If the iu is replacing something already installed, request the removal of the one in the profile
-			for (int j = 0; j < installedIUs.length; j++)
-				if (installedIUs[j].getId().equals(ius[i].getId())) {
-					request.removeInstallableUnits(new IInstallableUnit[] {installedIUs[j]});
-					break;
+
+			// Check to see if it is already installed.  This may alter the request.
+			Collector alreadyInstalled = profile.query(new InstallableUnitQuery(ius[i].getId()), new Collector(), null);
+			if (alreadyInstalled.size() > 0) {
+				IInstallableUnit installedIU = (IInstallableUnit) alreadyInstalled.iterator().next();
+				int compareTo = ius[i].getVersion().compareTo(installedIU.getVersion());
+				// If the iu is a newer version of something already installed, consider this an
+				// update request
+				if (compareTo > 0) {
+					request.addInstallableUnits(new IInstallableUnit[] {ius[i]});
+					request.removeInstallableUnits(new IInstallableUnit[] {installedIU});
+					// Mark it as a root if it hasn't been already
+					if (!Boolean.toString(true).equals(profile.getInstallableUnitProperty(installedIU, IInstallableUnit.PROP_PROFILE_ROOT_IU)))
+						request.setInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+					// Add a status informing the user that the update has been inferred
+					additionalStatus.merge(PlanStatusHelper.getStatus(IStatusCodes.IMPLIED_UPDATE, ius[i]));
+				} else if (compareTo < 0) {
+					// An implied downgrade.  We will not put this in the plan, add a status informing the user
+					additionalStatus.merge(PlanStatusHelper.getStatus(IStatusCodes.IGNORED_IMPLIED_DOWNGRADE, ius[i]));
+				} else {
+					if (Boolean.toString(true).equals(profile.getInstallableUnitProperty(installedIU, IInstallableUnit.PROP_PROFILE_ROOT_IU)))
+						// It is already a root, nothing to do. We tell the user it was already installed
+						additionalStatus.merge(PlanStatusHelper.getStatus(IStatusCodes.IGNORED_ALREADY_INSTALLED, ius[i]));
+					else
+						// It was already installed but not as a root.  Nothing to tell the user, it will just seem like a fast install.
+						request.setInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 				}
-			// Mark everything we are installing as a root
-			request.setInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+			} else {
+				// Install it and mark as a root
+				request.addInstallableUnits(new IInstallableUnit[] {ius[i]});
+				request.setInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+			}
 		}
+		// Now that we know what we are requesting, get the plan
 		ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
-		return plan;
+
+		// If we recorded additional status along the way, build a plan that merges in this status.
+		// Ideally this all would have been detected in the planner itself.
+		if (additionalStatus.getChildren().length > 0) {
+			additionalStatus.merge(plan.getStatus());
+			plan = new ProvisioningPlan(additionalStatus, plan.getOperands());
+		}
+		// Now run the result through the sanity checker.  Again, this would ideally be caught
+		// in the planner, but for now we have to build a new plan to include the UI status checking.
+		return new ProvisioningPlan(PlanStatusHelper.computeStatus(plan, ius), plan.getOperands());
 	}
 
 	public InstallAction(ISelectionProvider selectionProvider, String profileId, IProfileChooser chooser, Policies policies, Shell shell) {

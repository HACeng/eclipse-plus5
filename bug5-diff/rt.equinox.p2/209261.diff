commit 972e2856e56db9027e805f9444a940c96af27661
Author: John Arthorne <johna>
Date:   Thu Nov 8 20:54:42 2007 +0000

    Bug 209261 [prov] Remove InstallableUnit from API

2	2	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvCommandProvider.java
2	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Picker.java
1	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
2	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
7	7	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
2	2	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationPropertyPage.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvCommandProvider.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvCommandProvider.java
index 93e3c61..060c0e4 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvCommandProvider.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvCommandProvider.java
@@ -334,7 +334,7 @@ public class ProvCommandProvider implements CommandProvider {
 	}
 
 	/**
-	 * Prints a string representation of an {@link InstallableUnit} to the
+	 * Prints a string representation of an {@link IInstallableUnit} to the
 	 * iterpreter's output stream.
 	 */
 	public void print(CommandInterpreter interpreter, IInstallableUnit unit) {
@@ -342,7 +342,7 @@ public class ProvCommandProvider implements CommandProvider {
 	}
 
 	/**
-	 * Prints a string representation of an {@link InstallableUnit} to the
+	 * Prints a string representation of an {@link IInstallableUnit} to the
 	 * iterpreter's output stream, following by a line terminator
 	 */
 	public void println(CommandInterpreter interpreter, IInstallableUnit unit) {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Picker.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Picker.java
index e2bf454..5701324 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Picker.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Picker.java
@@ -30,7 +30,7 @@ public class Picker {
 		if (unitsToPickFrom != null)
 			completeSet = unitsToPickFrom;
 		else
-			completeSet = new InstallableUnit[0];
+			completeSet = new IInstallableUnit[0];
 		this.secondChoiceSet = completeSet;
 		this.recommendations = recommendations;
 		this.filters = new ArrayList(2);
@@ -80,7 +80,7 @@ public class Picker {
 				if (pool[i].getId().equals(id) && range.isIncluded(pool[i].getVersion()))
 					candidates.add(pool[i]);
 			}
-			pool = (InstallableUnit[]) candidates.toArray(new IInstallableUnit[candidates.size()]);
+			pool = (IInstallableUnit[]) candidates.toArray(new IInstallableUnit[candidates.size()]);
 		}
 
 		//Filter on capabilities.
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index 66363fd7..0d36c79 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -18,7 +18,6 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.metadata.generator.Activator;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.osgi.service.environment.EnvironmentInfo;
 import org.osgi.framework.*;
@@ -128,7 +127,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		Collection result = new HashSet();
 		Collection launchers = getIUs(ius, "org.eclipse.equinox.launcher.");
 		for (Iterator iterator = launchers.iterator(); iterator.hasNext();) {
-			InstallableUnit object = (InstallableUnit) iterator.next();
+			IInstallableUnit object = (IInstallableUnit) iterator.next();
 			GeneratorBundleInfo temp = new GeneratorBundleInfo();
 			temp.setSymbolicName(object.getId());
 			temp.setVersion(object.getVersion().toString());
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 4efd766..88b3053 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -29,7 +29,7 @@ public class Generator {
 	private static final String ORG_ECLIPSE_UPDATE_CONFIGURATOR = "org.eclipse.update.configurator";
 	//	private static String[][] defaultMappingRules = new String[][] { {"(& (namespace=eclipse) (classifier=feature))", "${repoUrl}/feature/${id}_${version}"}, {"(& (namespace=eclipse) (classifier=plugin))", "${repoUrl}/plugin/${id}_${version}"}, {"(& (namespace=eclipse) (classifier=native))", "${repoUrl}/native/${id}_${version}"}};
 
-	private IGeneratorInfo info;
+	private final IGeneratorInfo info;
 	private StateObjectFactory stateObjectFactory;
 
 	public Generator(IGeneratorInfo infoProvider) {
@@ -41,7 +41,7 @@ public class Generator {
 		}
 	}
 
-	protected InstallableUnit createTopLevelIU(Set resultantIUs, String configurationIdentification, String configurationVersion) {
+	protected IInstallableUnit createTopLevelIU(Set resultantIUs, String configurationIdentification, String configurationVersion) {
 		InstallableUnit root = new InstallableUnit();
 		root.setSingleton(true);
 		root.setId(configurationIdentification);
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
index bf3e8a0..f3410e4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
@@ -12,18 +12,18 @@ import org.eclipse.core.runtime.Assert;
 import org.eclipse.osgi.service.resolver.VersionRange;
 
 /**
- * A required capability represents some external constraint on an {@link InstallableUnit}.
- * Each capability represents something an {@link InstallableUnit} needs that
- * it expects to be provided by another {@link InstallableUnit}. Capabilities are
+ * A required capability represents some external constraint on an {@link IInstallableUnit}.
+ * Each capability represents something an {@link IInstallableUnit} needs that
+ * it expects to be provided by another {@link IInstallableUnit}. Capabilities are
  * entirely generic, and are intended to be capable of representing anything that
- * an {@link InstallableUnit} may need either at install time, or at runtime.
+ * an {@link IInstallableUnit} may need either at install time, or at runtime.
  * <p>
  * Capabilities are segmented into namespaces.  Anyone can introduce new 
  * capability namespaces. Some well-known namespaces are introduced directly
  * by the provisioning framework.
  * 
- * @see InstallableUnit#IU_KIND_NAMESPACE
- * @see InstallableUnit#IU_NAMESPACE
+ * @see IInstallableUnit#IU_KIND_NAMESPACE
+ * @see IInstallableUnit#IU_NAMESPACE
  */
 public class RequiredCapability {
 
@@ -39,7 +39,7 @@ public class RequiredCapability {
 	 * Returns a {@link RequiredCapability} on the installable unit with the given name
 	 * and version range.
 	 * 
-	 * @param name The name of the {@link InstallableUnit} that is required.
+	 * @param name The name of the {@link IInstallableUnit} that is required.
 	 * @param versionRange The range of versions that are required, or <code>null</code>
 	 * to indicate that any version will do.
 	 * @param optional <code>true</code> if this required capability is optional,
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
index bff4df4..6490632 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
@@ -16,9 +16,9 @@ public class ResolvedInstallableUnit implements IResolvedInstallableUnit, Intern
 	private static IInstallableUnit[] NO_IU = new IInstallableUnit[0];
 
 	private IInstallableUnit[] fragments = NO_IU;
-	protected InstallableUnit resolved;
+	protected IInstallableUnit resolved;
 
-	public ResolvedInstallableUnit(InstallableUnit resolved) {
+	public ResolvedInstallableUnit(IInstallableUnit resolved) {
 		this.resolved = resolved;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index eaa997b..dd61685 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin;
 
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.p2.ui.viewers.StructuredViewerProvisioningListener;
@@ -131,7 +131,7 @@ abstract class RepositoriesView extends ProvView {
 	}
 
 	protected void selectionChanged(IStructuredSelection selection) {
-		propertiesAction.setEnabled(selection.size() == 1 && ((selection.getFirstElement() instanceof InstallableUnit) || (isRepository(selection.getFirstElement()))));
+		propertiesAction.setEnabled(selection.size() == 1 && ((selection.getFirstElement() instanceof IInstallableUnit) || (isRepository(selection.getFirstElement()))));
 		boolean enabled = false;
 		Object[] selectionArray = selection.toArray();
 		for (int i = 0; i < selectionArray.length; i++) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationPropertyPage.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationPropertyPage.java
index 36be270..2c75a06 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationPropertyPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationPropertyPage.java
@@ -12,7 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ModifyEvent;
@@ -30,7 +30,7 @@ public class IUImplementationPropertyPage extends PropertyPage {
 	private IUImplementationGroup iuGroup;
 
 	protected Control createContents(Composite parent) {
-		InstallableUnit iu = (InstallableUnit) getElement().getAdapter(InstallableUnit.class);
+		IInstallableUnit iu = (IInstallableUnit) getElement().getAdapter(IInstallableUnit.class);
 		if (iu == null) {
 			Label label = new Label(parent, SWT.DEFAULT);
 			label.setText(ProvAdminUIMessages.No_Property_Item_Selected);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
index fd8f4c7..2d9aacb 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
@@ -15,7 +15,8 @@ import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepDescriptor;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.model.InstalledIUElement;
@@ -72,7 +73,7 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 		if (obj instanceof Profile) {
 			return ProvUIImages.getImage(ProvUIImages.IMG_PROFILE);
 		}
-		if (obj instanceof InstallableUnit) {
+		if (obj instanceof IInstallableUnit) {
 			return ProvUIImages.getImage(ProvUIImages.IMG_IU);
 		}
 		if (obj instanceof IArtifactRepository) {
commit c736690de70126007a4a4bf10cfc72ae18e351b3
Author: John Arthorne <johna>
Date:   Thu Nov 8 20:56:20 2007 +0000

    Bug 209261 prov] Remove InstallableUnit from API

2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUCapabilityFilter.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUCapabilityFilter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUCapabilityFilter.java
index 606f711..1593d82 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUCapabilityFilter.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUCapabilityFilter.java
@@ -33,10 +33,10 @@ public class IUCapabilityFilter extends ViewerFilter {
 
 	public boolean select(Viewer viewer, Object parentElement, Object element) {
 		IInstallableUnit iu = null;
-		if (element instanceof InstallableUnit) {
+		if (element instanceof IInstallableUnit) {
 			iu = (IInstallableUnit) element;
 		} else if (element instanceof IAdaptable) {
-			iu = (IInstallableUnit) ((IAdaptable) element).getAdapter(InstallableUnit.class);
+			iu = (IInstallableUnit) ((IAdaptable) element).getAdapter(IInstallableUnit.class);
 		}
 		if (iu == null) {
 			return true;
commit b9fbd42d921134c22c885fd629d7b96763e9a5ad
Author: John Arthorne <johna>
Date:   Fri Nov 9 17:58:31 2007 +0000

    Bug 209261 [prov] Remove InstallableUnit from API

41	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
2	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
3	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
18	17	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
49	42	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
2	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
32	9	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
245	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
0	254	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
6	10	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
110	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
120	37	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
14	21	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
1	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
26	62	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
15	20	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
24	26	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
6	12	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/PickerTest.java
2	8	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
11	15	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
2	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
13	16	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
18	16	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
7	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
3	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
7	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
4	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
5	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
0	97	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/OldTest.java
7	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
32	65	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/ResolutionHelperTest.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/plugin.xml
5	7	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
1	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
1	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
index d4b257a..7d8fbcb 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
@@ -100,7 +100,7 @@ public class NewDependencyExpander {
 	}
 
 	// Installable units that are optional have a dependency on themselves.
-	private class OptionalInstallableUnit extends InstallableUnit {
+	private class OptionalInstallableUnit implements IInstallableUnit {
 		private boolean optionalReqs;
 		private IInstallableUnit wrapped;
 
@@ -161,6 +161,46 @@ public class NewDependencyExpander {
 		public String toString() {
 			return wrapped.toString();
 		}
+
+		public void accept(IMetadataVisitor visitor) {
+			wrapped.accept(visitor);
+		}
+
+		public String getApplicabilityFilter() {
+			return wrapped.getApplicabilityFilter();
+		}
+
+		public IArtifactKey[] getArtifacts() {
+			return wrapped.getArtifacts();
+		}
+
+		public Map getProperties() {
+			return wrapped.getProperties();
+		}
+
+		public ProvidedCapability[] getProvidedCapabilities() {
+			return wrapped.getProvidedCapabilities();
+		}
+
+		public TouchpointData[] getTouchpointData() {
+			return wrapped.getTouchpointData();
+		}
+
+		public TouchpointType getTouchpointType() {
+			return wrapped.getTouchpointType();
+		}
+
+		public boolean isFragment() {
+			return wrapped.isFragment();
+		}
+
+		public boolean isSingleton() {
+			return wrapped.isSingleton();
+		}
+
+		public int compareTo(Object arg) {
+			return wrapped.compareTo(arg);
+		}
 	}
 
 	static final int OperationWork = 100;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
index a26c4a7..3c7da59 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
@@ -11,11 +11,12 @@ package org.eclipse.equinox.internal.p2.director;
 import java.util.*;
 import org.eclipse.equinox.p2.engine.Operand;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.query.CompoundIterator;
 import org.eclipse.osgi.service.resolver.VersionRange;
 
 public class OperationGenerator {
-	static IResolvedInstallableUnit NULL_IU = new ResolvedInstallableUnit(new InstallableUnit());
+	static IResolvedInstallableUnit NULL_IU = new ResolvedInstallableUnit(MetadataFactory.createInstallableUnit(new InstallableUnitDescription()));
 
 	public Operand[] generateOperation(Collection from_, Collection to_) {
 		List from = new ArrayList(from_);
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 91dd6da..18278d1 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -15,6 +15,7 @@ import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.osgi.framework.Version;
 
@@ -59,14 +60,14 @@ public class FormerState {
 	}
 
 	IInstallableUnit profileToIU(Profile toConvert) {
-		InstallableUnit result = new InstallableUnit();
+		InstallableUnitDescription result = new MetadataFactory.InstallableUnitDescription();
 		result.setProperty(IInstallableUnitConstants.PROFILE_IU_KEY, Boolean.TRUE.toString());
 		result.setId(toConvert.getProfileId());
 		result.setVersion(new Version(0, 0, 0, Long.toString(System.currentTimeMillis())));
 		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(toConvert.getInstallableUnits(), false));
 		//TODO Need to do the properties in the profile
 		//TODO Do we need to mark profile with a special marker
-		return result;
+		return MetadataFactory.createInstallableUnit(result);
 	}
 
 	//	private copyProperty(Profile p) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 88b3053..0ac142f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.p2.metadata.generator.features.FeatureParser
 import org.eclipse.equinox.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.osgi.service.resolver.*;
 import org.osgi.framework.Version;
 
@@ -42,7 +43,7 @@ public class Generator {
 	}
 
 	protected IInstallableUnit createTopLevelIU(Set resultantIUs, String configurationIdentification, String configurationVersion) {
-		InstallableUnit root = new InstallableUnit();
+		InstallableUnitDescription root = new MetadataFactory.InstallableUnitDescription();
 		root.setSingleton(true);
 		root.setId(configurationIdentification);
 		root.setVersion(new Version(configurationVersion));
@@ -51,7 +52,7 @@ public class Generator {
 
 		ArrayList reqsConfigurationUnits = new ArrayList(resultantIUs.size());
 		for (Iterator iterator = resultantIUs.iterator(); iterator.hasNext();) {
-			InstallableUnit iu = (InstallableUnit) iterator.next();
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			VersionRange range = new VersionRange(iu.getVersion(), true, iu.getVersion(), true);
 			reqsConfigurationUnits.add(new RequiredCapability(IInstallableUnit.IU_NAMESPACE, iu.getId(), range, iu.getFilter(), false, false));
 		}
@@ -63,7 +64,7 @@ public class Generator {
 		root.setProperty(IInstallableUnitConstants.UPDATE_FROM, configurationIdentification);
 		root.setProperty(IInstallableUnitConstants.UPDATE_RANGE, VersionRange.emptyRange.toString());
 		ProvidedCapability groupCapability = new ProvidedCapability(IInstallableUnit.IU_KIND_NAMESPACE, "group", new Version("1.0.0"));
-		root.setCapabilities(new ProvidedCapability[] {MetadataGeneratorHelper.createSelfCapability(root), groupCapability});
+		root.setCapabilities(new ProvidedCapability[] {MetadataGeneratorHelper.createSelfCapability(configurationIdentification, new Version(configurationVersion)), groupCapability});
 		root.setTouchpointType(MetadataGeneratorHelper.TOUCHPOINT_ECLIPSE);
 		Map touchpointData = new HashMap();
 
@@ -109,8 +110,8 @@ public class Generator {
 		}
 		touchpointData.put("configure", configurationData);
 		touchpointData.put("unconfigure", unconfigurationData);
-		root.setImmutableTouchpointData(new TouchpointData(touchpointData));
-		return root;
+		root.addTouchpointData(new TouchpointData(touchpointData));
+		return MetadataFactory.createInstallableUnit(root);
 	}
 
 	public IStatus generate() {
@@ -135,7 +136,7 @@ public class Generator {
 		//		if (info.publishArtifacts() || info.publishArtifactRepository()) {
 		//			persistence.saveArtifactRepository();
 		//		}
-		info.getMetadataRepository().addInstallableUnits((InstallableUnit[]) ius.toArray(new InstallableUnit[ius.size()]));
+		info.getMetadataRepository().addInstallableUnits((IInstallableUnit[]) ius.toArray(new IInstallableUnit[ius.size()]));
 
 		return Status.OK_STATUS;
 	}
@@ -175,7 +176,7 @@ public class Generator {
 				bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
 				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
 			}
-			InstallableUnit cu = (InstallableUnit) MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor());
+			IInstallableUnit cu = MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor());
 			if (cu != null)
 				resultantIUs.add(cu);
 		}
@@ -183,13 +184,13 @@ public class Generator {
 		if (info.addDefaultIUs()) {
 			for (Iterator iterator = info.getDefaultIUs(resultantIUs).iterator(); iterator.hasNext();) {
 				GeneratorBundleInfo bundle = (GeneratorBundleInfo) iterator.next();
-				InstallableUnit configuredIU = getIU(resultantIUs, bundle.getSymbolicName());
+				IInstallableUnit configuredIU = getIU(resultantIUs, bundle.getSymbolicName());
 				if (configuredIU != null)
 					bundle.setVersion(configuredIU.getVersion().toString());
-				InstallableUnit cu = (InstallableUnit) MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor());
+				IInstallableUnit cu = MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor());
 				//the configuration unit should share the same platform filter as the IU being configured.
 				if (configuredIU != null)
-					cu.setFilter(configuredIU.getFilter());
+					((InstallableUnitFragment) cu).setFilter(configuredIU.getFilter());
 				if (cu != null)
 					resultantIUs.add(cu);
 			}
@@ -261,7 +262,7 @@ public class Generator {
 	 */
 	private void generateExecutableIUs(String ws, String os, String arch, String version, File root, Set resultantIUs, IArtifactRepository destination) {
 		//Create the IU
-		InstallableUnit iu = new InstallableUnit();
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(true);
 		String launcherId = "org.eclipse.launcher." + ws + '.' + os + '.' + arch; //$NON-NLS-1$
 		iu.setId(launcherId);
@@ -273,14 +274,14 @@ public class Generator {
 		IArtifactKey key = MetadataGeneratorHelper.createLauncherArtifactKey(launcherId, launcherVersion);
 		iu.setArtifacts(new IArtifactKey[] {key});
 		iu.setTouchpointType(MetadataGeneratorHelper.TOUCHPOINT_NATIVE);
-		resultantIUs.add(iu);
+		resultantIUs.add(MetadataFactory.createInstallableUnit(iu));
 
 		//Create the CU
 		InstallableUnitFragment cu = new InstallableUnitFragment();
-		cu.setId(info.getFlavor() + iu.getId());
-		cu.setVersion(iu.getVersion());
+		cu.setId(info.getFlavor() + launcherId);
+		cu.setVersion(launcherVersion);
 		cu.setFilter(filter);
-		cu.setHost(iu.getId(), new VersionRange(iu.getVersion(), true, iu.getVersion(), true));
+		cu.setHost(launcherId, new VersionRange(launcherVersion, true, launcherVersion, true));
 
 		mungeLauncherFileNames(root);
 
@@ -382,9 +383,9 @@ public class Generator {
 		return info;
 	}
 
-	private InstallableUnit getIU(Set ius, String id) {
+	private IInstallableUnit getIU(Set ius, String id) {
 		for (Iterator iterator = ius.iterator(); iterator.hasNext();) {
-			InstallableUnit tmp = (InstallableUnit) iterator.next();
+			IInstallableUnit tmp = (IInstallableUnit) iterator.next();
 			if (tmp.getId().equals(id))
 				return tmp;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index 4c49ab4..889661a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.internal.p2.metadata.generator.Activator;
 import org.eclipse.equinox.p2.artifact.repository.ArtifactDescriptor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.osgi.service.environment.EnvironmentInfo;
 import org.eclipse.osgi.service.resolver.*;
 import org.eclipse.osgi.util.ManifestElement;
@@ -92,10 +93,6 @@ public class MetadataGeneratorHelper {
 		return new ArtifactKey(ECLIPSE_ARTIFACT_NAMESPACE, ECLIPSE_ARTIFACT_CLASSIFIER, bsn, new Version(version));
 	}
 
-	public static ProvidedCapability createSelfCapability(IInstallableUnit iu) {
-		return new ProvidedCapability(IU_NAMESPACE, iu.getId(), iu.getVersion());
-	}
-
 	public static IInstallableUnit createEclipseConfigurationUnit(String iuId, Version iuVersion, boolean isBundleFragment, GeneratorBundleInfo configInfo, String configurationFlavor) {
 		if (configInfo == null)
 			return null;
@@ -108,7 +105,7 @@ public class MetadataGeneratorHelper {
 		cu.setHost(iuId, new VersionRange(iuVersion, true, versionMax, true));
 
 		//Adds capabilities for fragment, self, and describing the flavor supported
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu.getId(), cu.getVersion()), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
 
 		cu.setTouchpointType(TOUCHPOINT_ECLIPSE); //TODO Is this necessary? I think we get that from the IU
 
@@ -128,7 +125,7 @@ public class MetadataGeneratorHelper {
 		cu.setVersion(new Version(1, 0, 0));
 
 		//Adds capabilities for fragment, self, and describing the flavor supported
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu.getId(), cu.getVersion()), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
 
 		//Create a capability on bundles
 		RequiredCapability[] reqs = new RequiredCapability[] {new RequiredCapability(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES, IInstallableUnit.CAPABILITY_ECLIPSE_BUNDLE, VersionRange.emptyRange, null, false, true)};
@@ -146,7 +143,7 @@ public class MetadataGeneratorHelper {
 	}
 
 	public static IInstallableUnit createEclipseIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key) {
-		InstallableUnit iu = new InstallableUnit();
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(bd.isSingleton());
 		iu.setId(bd.getSymbolicName());
 		iu.setVersion(bd.getVersion());
@@ -161,7 +158,7 @@ public class MetadataGeneratorHelper {
 		BundleSpecification requiredBundles[] = bd.getRequiredBundles();
 		ArrayList reqsDeps = new ArrayList();
 		if (requiresAFragment)
-			reqsDeps.add(new RequiredCapability("fragment", iu.getId(), VersionRange.emptyRange, null, false, false));
+			reqsDeps.add(new RequiredCapability("fragment", bd.getSymbolicName(), VersionRange.emptyRange, null, false, false));
 		if (isFragment)
 			reqsDeps.add(RequiredCapability.createRequiredCapabilityForName(bd.getHost().getName(), bd.getHost().getVersionRange(), false));
 		for (int j = 0; j < requiredBundles.length; j++)
@@ -186,7 +183,7 @@ public class MetadataGeneratorHelper {
 		//Process the export package
 		ExportPackageDescription exports[] = bd.getExportPackages();
 		ProvidedCapability[] exportedPackageAsCapabilities = new ProvidedCapability[exports.length + 2 + (isFragment ? 1 : 0)];
-		exportedPackageAsCapabilities[0] = createSelfCapability(iu);
+		exportedPackageAsCapabilities[0] = createSelfCapability(bd.getSymbolicName(), bd.getVersion());
 		for (int i = 1; i <= exports.length; i++) {
 			exportedPackageAsCapabilities[i] = new ProvidedCapability(CAPABILITY_TYPE_OSGI_PACKAGES, exports[i - 1].getName(), exports[i - 1].getVersion() == Version.emptyVersion ? null : exports[i - 1].getVersion()); //TODO make sure that we support all the refinement on the exports
 		}
@@ -222,16 +219,18 @@ public class MetadataGeneratorHelper {
 		if (isFolderPlugin)
 			touchpointData.put("zipped", "true");
 		touchpointData.put("manifest", toManifestString(manifest));
-		iu.setImmutableTouchpointData(new TouchpointData(touchpointData));
-		return iu;
+		iu.addTouchpointData(new TouchpointData(touchpointData));
+		return MetadataFactory.createInstallableUnit(iu);
 	}
 
 	public static IInstallableUnit createGroupIU(Feature feature) {
-		InstallableUnit iu = new InstallableUnit();
-		iu.setId(getTransformedId(feature.getId(), false));
-		iu.setVersion(new Version(feature.getVersion()));
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
+		String id = getTransformedId(feature.getId(), false);
+		iu.setId(id);
+		Version version = new Version(feature.getVersion());
+		iu.setVersion(version);
 		iu.setProperty(IInstallableUnitConstants.NAME, feature.getLabel());
-		iu.setProperty(IInstallableUnitConstants.UPDATE_FROM, iu.getId());
+		iu.setProperty(IInstallableUnitConstants.UPDATE_FROM, id);
 		iu.setProperty(IInstallableUnitConstants.UPDATE_RANGE, VersionRange.emptyRange.toString());
 
 		FeatureEntry entries[] = feature.getEntries();
@@ -243,8 +242,8 @@ public class MetadataGeneratorHelper {
 		iu.setRequiredCapabilities(required);
 		iu.setTouchpointType(TouchpointType.NONE);
 		ProvidedCapability groupCapability = new ProvidedCapability(IInstallableUnit.IU_KIND_NAMESPACE, "group", new Version("1.0.0"));
-		iu.setCapabilities(new ProvidedCapability[] {createSelfCapability(iu), groupCapability});
-		return iu;
+		iu.setCapabilities(new ProvidedCapability[] {createSelfCapability(id, version), groupCapability});
+		return MetadataFactory.createInstallableUnit(iu);
 	}
 
 	/**
@@ -253,36 +252,40 @@ public class MetadataGeneratorHelper {
 	 * If the jreLocation is <code>null</code>, default information is generated.
 	 */
 	public static IArtifactDescriptor createJREData(File jreLocation, Set resultantIUs) {
-		InstallableUnit iu = new InstallableUnit();
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(false);
-		iu.setId("a.jre"); //$NON-NLS-1$
+		String id = "a.jre"; //$NON-NLS-1$
+		Version version = DEFAULT_JRE_VERSION;
+		iu.setId(id);
+		iu.setVersion(version);
 		iu.setTouchpointType(TOUCHPOINT_NATIVE);
 
 		InstallableUnitFragment cu = new InstallableUnitFragment();
-		cu.setId("config." + iu.getId()); //$NON-NLS-1$
-		cu.setVersion(iu.getVersion());
-		cu.setHost(iu.getId(), new VersionRange(iu.getVersion(), true, versionMax, true));
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu)});
+		String configId = "config." + id;//$NON-NLS-1$
+		cu.setId(configId);
+		cu.setVersion(version);
+		cu.setHost(id, new VersionRange(version, true, versionMax, true));
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configId, version)});
 		cu.setTouchpointType(TOUCHPOINT_NATIVE);
 		Map touchpointData = new HashMap();
 
 		if (jreLocation == null || !jreLocation.exists()) {
 			//set some reasonable defaults
-			iu.setVersion(DEFAULT_JRE_VERSION);
-			iu.setCapabilities(generateJRECapability(iu, null));
-			resultantIUs.add(iu);
+			iu.setVersion(version);
+			iu.setCapabilities(generateJRECapability(id, version, null));
+			resultantIUs.add(MetadataFactory.createInstallableUnit(iu));
 
 			touchpointData.put("install", "");
 			cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
 			resultantIUs.add(cu);
 			return null;
 		}
-		generateJREIUData(iu, jreLocation);
+		generateJREIUData(iu, id, version, jreLocation);
 
 		//Generate artifact for JRE
-		IArtifactKey key = new ArtifactKey(ECLIPSE_ARTIFACT_NAMESPACE, TOUCHPOINT_NATIVE.getId(), iu.getId(), iu.getVersion());
+		IArtifactKey key = new ArtifactKey(ECLIPSE_ARTIFACT_NAMESPACE, TOUCHPOINT_NATIVE.getId(), id, version);
 		iu.setArtifacts(new IArtifactKey[] {key});
-		resultantIUs.add(iu);
+		resultantIUs.add(MetadataFactory.createInstallableUnit(iu));
 
 		//Create config info for the CU
 		String configurationData = "unzip(source:@artifact, target:${installFolder});";
@@ -294,6 +297,10 @@ public class MetadataGeneratorHelper {
 		return createArtifactDescriptor(key, jreLocation, false, true);
 	}
 
+	public static ArtifactKey createLauncherArtifactKey(String id, Version version) {
+		return new ArtifactKey(ECLIPSE_ARTIFACT_NAMESPACE, TOUCHPOINT_NATIVE.getId(), id, version);
+	}
+
 	/**
 	 * Creates IUs and artifacts for the Launcher executable. The resulting IUs are added
 	 * to the given set, and the resulting artifact descriptor is returned.
@@ -303,7 +310,7 @@ public class MetadataGeneratorHelper {
 			return null;
 
 		//Create the IU
-		InstallableUnit iu = new InstallableUnit();
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(true);
 		String launcherId = LAUNCHER_ID_PREFIX + '_' + launcher.getName();
 		iu.setId(launcherId);
@@ -311,17 +318,17 @@ public class MetadataGeneratorHelper {
 
 		IArtifactKey key = createLauncherArtifactKey(launcherId, LAUNCHER_VERSION);
 		iu.setArtifacts(new IArtifactKey[] {key});
-		iu.setCapabilities(new ProvidedCapability[] {createSelfCapability(iu)});
+		iu.setCapabilities(new ProvidedCapability[] {createSelfCapability(launcherId, LAUNCHER_VERSION)});
 		iu.setTouchpointType(TOUCHPOINT_NATIVE);
 		resultantIUs.add(iu);
 
 		//Create the CU
 		InstallableUnitFragment cu = new InstallableUnitFragment();
-		cu.setId(configurationFlavor + iu.getId());
-		cu.setVersion(iu.getVersion());
-		cu.setHost(iu.getId(), new VersionRange(iu.getVersion(), true, versionMax, true));
+		cu.setId(configurationFlavor + launcherId);
+		cu.setVersion(LAUNCHER_VERSION);
+		cu.setHost(launcherId, new VersionRange(LAUNCHER_VERSION, true, versionMax, true));
 
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu)});
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu.getId(), cu.getVersion())});
 		cu.setTouchpointType(TOUCHPOINT_NATIVE);
 		Map touchpointData = new HashMap();
 		String configurationData = "unzip(source:@artifact, target:${installFolder});";
@@ -337,8 +344,8 @@ public class MetadataGeneratorHelper {
 		return createArtifactDescriptor(key, launcher, false, true);
 	}
 
-	public static ArtifactKey createLauncherArtifactKey(String id, Version version) {
-		return new ArtifactKey(ECLIPSE_ARTIFACT_NAMESPACE, TOUCHPOINT_NATIVE.getId(), id, version);
+	public static ProvidedCapability createSelfCapability(String installableUnitId, Version installableUnitVersion) {
+		return new ProvidedCapability(IU_NAMESPACE, installableUnitId, installableUnitVersion);
 	}
 
 	private static String createUnconfigScript(GeneratorBundleInfo unconfigInfo, boolean isBundleFragment) {
@@ -359,7 +366,7 @@ public class MetadataGeneratorHelper {
 
 	}
 
-	private static ProvidedCapability[] generateJRECapability(InstallableUnit iu, InputStream profileStream) {
+	private static ProvidedCapability[] generateJRECapability(String installableUnitId, Version installableUnitVersion, InputStream profileStream) {
 		if (profileStream == null) {
 			//use the 1.5 profile stored in the generator bundle
 			try {
@@ -373,7 +380,7 @@ public class MetadataGeneratorHelper {
 			p.load(profileStream);
 			ManifestElement[] jrePackages = ManifestElement.parseHeader("org.osgi.framework.system.packages", (String) p.get("org.osgi.framework.system.packages"));
 			ProvidedCapability[] exportedPackageAsCapabilities = new ProvidedCapability[jrePackages.length + 1];
-			exportedPackageAsCapabilities[0] = createSelfCapability(iu);
+			exportedPackageAsCapabilities[0] = createSelfCapability(installableUnitId, installableUnitVersion);
 			for (int i = 1; i <= jrePackages.length; i++) {
 				exportedPackageAsCapabilities[i] = new ProvidedCapability("osgi.packages", jrePackages[i - 1].getValue(), null);
 			}
@@ -396,7 +403,7 @@ public class MetadataGeneratorHelper {
 		return new ProvidedCapability[0];
 	}
 
-	private static void generateJREIUData(InstallableUnit iu, File jreLocation) {
+	private static void generateJREIUData(InstallableUnitDescription iu, String installableUnitId, Version installableUnitVersion, File jreLocation) {
 		//Look for a JRE profile file to set version and capabilities
 		File[] profiles = jreLocation.listFiles(new FileFilter() {
 			public boolean accept(File pathname) {
@@ -405,7 +412,7 @@ public class MetadataGeneratorHelper {
 		});
 		if (profiles.length != 1) {
 			iu.setVersion(DEFAULT_JRE_VERSION);
-			iu.setCapabilities(generateJRECapability(iu, null));
+			iu.setCapabilities(generateJRECapability(installableUnitId, installableUnitVersion, null));
 			return;
 		}
 		String profileName = profiles[0].getAbsolutePath().substring(profiles[0].getAbsolutePath().lastIndexOf('/'));
@@ -418,7 +425,7 @@ public class MetadataGeneratorHelper {
 		}
 		iu.setVersion(version);
 		try {
-			iu.setCapabilities(generateJRECapability(iu, new FileInputStream(profiles[0])));
+			iu.setCapabilities(generateJRECapability(installableUnitId, installableUnitVersion, new FileInputStream(profiles[0])));
 		} catch (FileNotFoundException e) {
 			//Shouldn't happen, but ignore and fall through to use default
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
index d3dec37..d4ecf92 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/SimpleMetadataRepositoryFactory.java
@@ -47,12 +47,13 @@ public class SimpleMetadataRepositoryFactory implements IMetadataRepositoryFacto
 					((URLMetadataRepository) result).initializeAfterLoad(location);
 				return result;
 			} catch (RepositoryCreationException e) {
-				// TODO: distinguish between nonexistent input file and other creation problems.
 				log(e);
 			} finally {
 				if (descriptorStream != null)
 					descriptorStream.close();
 			}
+		} catch (FileNotFoundException e) {
+			//if the repository doesn't exist, then it's fine to return null
 		} catch (IOException e) {
 			log(e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index f57c7f8..1ae3f2b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -15,6 +15,8 @@ import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Version;
@@ -37,7 +39,14 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 		}
 
 		public IInstallableUnit[] getUnits() {
-			return (IInstallableUnit[]) units.toArray(new IInstallableUnit[units.size()]);
+			int size = units.size();
+			IInstallableUnit[] result = new IInstallableUnit[size];
+			int i = 0;
+			for (Iterator it = units.iterator(); it.hasNext(); i++) {
+				InstallableUnitDescription desc = (InstallableUnitDescription) it.next();
+				result[i] = MetadataFactory.createInstallableUnit(desc);
+			}
+			return result;
 		}
 
 		public void startElement(String name, Attributes attributes) {
@@ -54,7 +63,7 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 		private final String[] required = new String[] {ID_ATTRIBUTE, VERSION_ATTRIBUTE};
 		private final String[] optional = new String[] {SINGLETON_ATTRIBUTE, FRAGMENT_ATTRIBUTE, FRAGMENT_HOST_ID_ATTRIBUTE, FRAGMENT_HOST_RANGE_ATTRIBUTE};
 
-		InstallableUnit currentUnit = null;
+		InstallableUnitDescription currentUnit = null;
 
 		private PropertiesHandler propertiesHandler = null;
 		private ProvidedCapabilitiesHandler providedCapabilitiesHandler = null;
@@ -73,24 +82,33 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 			boolean singleton = checkBoolean(INSTALLABLE_UNIT_ELEMENT, SINGLETON_ATTRIBUTE, values[2], true).booleanValue();
 			boolean isFragment = checkBoolean(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_ATTRIBUTE, values[3], false).booleanValue();
 			if (isFragment) {
+				String hostId = values[4];
 				// TODO: tooling default fragment does not have a host id
-				// checkRequiredAttribute(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_HOST_ID_ATTRIBUTE, values[4]);
+				if (hostId != null)
+					checkRequiredAttribute(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_HOST_ID_ATTRIBUTE, hostId);
 				checkRequiredAttribute(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_HOST_RANGE_ATTRIBUTE, values[5]);
 				VersionRange hostRange = checkVersionRange(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_HOST_RANGE_ATTRIBUTE, values[5]);
-				currentUnit = new InstallableUnitFragment(values[0], version, singleton, values[4], hostRange);
+				currentUnit = new InstallableUnitFragmentDescription();
+				currentUnit.setId(values[0]);
+				currentUnit.setVersion(version);
+				currentUnit.setSingleton(singleton);
+				((InstallableUnitFragmentDescription) currentUnit).setHost(values[4], hostRange);
 			} else {
 				if (values[4] != null) {
 					unexpectedAttribute(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_HOST_ID_ATTRIBUTE, values[4]);
 				} else if (values[5] != null) {
 					unexpectedAttribute(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_HOST_RANGE_ATTRIBUTE, values[4]);
 				}
-				currentUnit = new InstallableUnit(values[0], version, singleton);
+				currentUnit = new InstallableUnitDescription();
+				currentUnit.setId(values[0]);
+				currentUnit.setVersion(version);
+				currentUnit.setSingleton(singleton);
 			}
 			units.add(currentUnit);
 		}
 
 		public IInstallableUnit getInstallableUnit() {
-			return currentUnit;
+			return MetadataFactory.createInstallableUnit(currentUnit);
 		}
 
 		public void startElement(String name, Attributes attributes) {
@@ -149,9 +167,13 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 
 		protected void finished() {
 			if (isValidXML() && currentUnit != null) {
-				Map properties = (propertiesHandler == null ? new OrderedProperties(0) //
+				OrderedProperties properties = (propertiesHandler == null ? new OrderedProperties(0) //
 						: propertiesHandler.getProperties());
-				currentUnit.addProperties(properties);
+				for (Enumeration e = properties.keys(); e.hasMoreElements();) {
+					String key = (String) e.nextElement();
+					String value = properties.getProperty(key);
+					currentUnit.setProperty(key, value);
+				}
 				ProvidedCapability[] providedCapabilities = (providedCapabilitiesHandler == null ? new ProvidedCapability[0] //
 						: providedCapabilitiesHandler.getProvidedCapabilities());
 				currentUnit.setCapabilities(providedCapabilities);
@@ -174,7 +196,8 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 				}
 				TouchpointData[] touchpointData = (touchpointDataHandler == null ? new TouchpointData[0] //
 						: touchpointDataHandler.getTouchpointData());
-				currentUnit.addTouchpointData(touchpointData);
+				for (int i = 0; i < touchpointData.length; i++)
+					currentUnit.addTouchpointData(touchpointData[i]);
 			}
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
new file mode 100644
index 0000000..86935ff
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
@@ -0,0 +1,245 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.metadata;
+
+import java.util.ArrayList;
+import java.util.Map;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import org.eclipse.equinox.p2.metadata.*;
+import org.osgi.framework.Version;
+
+public class InstallableUnit implements IInstallableUnitConstants, IInstallableUnit, InternalInstallableUnit {
+
+	private static final OrderedProperties NO_PROPERTIES = new OrderedProperties();
+	private static final ProvidedCapability[] NO_PROVIDES = new ProvidedCapability[0];
+	private static final RequiredCapability[] NO_REQUIRES = new RequiredCapability[0];
+
+	String applicabilityFilter;
+	private IArtifactKey[] artifacts;
+	private String filter;
+
+	private String id;
+
+	private OrderedProperties properties;
+	ProvidedCapability[] providedCapabilities = NO_PROVIDES;
+	private RequiredCapability[] requires;
+
+	private boolean singleton;
+
+	private ArrayList touchpointData = null;
+
+	private TouchpointType touchpointType;
+
+	private Version version;
+
+	public InstallableUnit() {
+		super();
+	}
+
+	public void accept(IMetadataVisitor visitor) {
+		visitor.visitInstallableUnit(this);
+	}
+
+	public void addProperties(Map newProperties) {
+		if (properties == null)
+			properties = new OrderedProperties(newProperties.size());
+		properties.putAll(newProperties);
+	}
+
+	protected void addProvidedCapability(ProvidedCapability capability) {
+		if (providedCapabilities != null && providedCapabilities.length > 0) {
+			ProvidedCapability[] result = new ProvidedCapability[providedCapabilities.length + 1];
+			result[0] = capability;
+			System.arraycopy(providedCapabilities, 0, result, 1, providedCapabilities.length);
+			providedCapabilities = result;
+		} else {
+			providedCapabilities = new ProvidedCapability[] {capability};
+		}
+	}
+
+	public void addTouchpointData(TouchpointData newData) {
+		ensureTouchpointDataCapacity(1);
+		touchpointData.add(newData);
+	}
+
+	public int compareTo(Object toCompareTo) {
+		if (!(toCompareTo instanceof IInstallableUnit)) {
+			return -1;
+		}
+		IInstallableUnit other = (IInstallableUnit) toCompareTo;
+		if (getId().compareTo(other.getId()) == 0)
+			return (getVersion().compareTo(other.getVersion()));
+		return getId().compareTo(other.getId());
+	}
+
+	private void ensureTouchpointDataCapacity(int size) {
+		if (touchpointData != null) {
+			touchpointData.ensureCapacity(size);
+		} else {
+			touchpointData = new ArrayList(size);
+		}
+	}
+
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof IInstallableUnit))
+			return false;
+		final IInstallableUnit other = (IInstallableUnit) obj;
+		if (id == null) {
+			if (other.getId() != null)
+				return false;
+		} else if (!id.equals(other.getId()))
+			return false;
+		if (getVersion() == null) {
+			if (other.getVersion() != null)
+				return false;
+		} else if (!getVersion().equals(other.getVersion()))
+			return false;
+		return true;
+	}
+
+	public String getApplicabilityFilter() {
+		return applicabilityFilter;
+	}
+
+	public IArtifactKey[] getArtifacts() {
+		return artifacts;
+	}
+
+	public String getFilter() {
+		return filter;
+	}
+
+	public String getId() {
+		return id;
+	}
+
+	/**
+	 * Get an <i>unmodifiable copy</i> of the properties
+	 * associated with the installable unit.
+	 * 
+	 * @return an <i>unmodifiable copy</i> of the IU properties.
+	 */
+	public Map getProperties() {
+		return OrderedProperties.unmodifiableProperties(properties());
+	}
+
+	public String getProperty(String key) {
+		return properties().getProperty(key);
+	}
+
+	public ProvidedCapability[] getProvidedCapabilities() {
+		return (providedCapabilities != null ? providedCapabilities : NO_PROVIDES);
+	}
+
+	public RequiredCapability[] getRequiredCapabilities() {
+		return requires != null ? requires : NO_REQUIRES;
+
+	}
+
+	public IResolvedInstallableUnit getResolved() {
+		return new ResolvedInstallableUnit(this);
+	}
+
+	public TouchpointData[] getTouchpointData() {
+		return (touchpointData == null ? TouchpointData.NO_TOUCHPOINT_DATA //
+				: (TouchpointData[]) touchpointData.toArray(new TouchpointData[touchpointData.size()]));
+	}
+
+	public TouchpointType getTouchpointType() {
+		return touchpointType != null ? touchpointType : TouchpointType.NONE;
+	}
+
+	public Version getVersion() {
+		return version;
+	}
+
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		result = prime * result + ((getVersion() == null) ? 0 : getVersion().hashCode());
+		return result;
+	}
+
+	public boolean isFragment() {
+		return false;
+	}
+
+	public boolean isSingleton() {
+		return singleton;
+	}
+
+	private OrderedProperties properties() {
+		return (properties != null ? properties : NO_PROPERTIES);
+	}
+
+	public void setApplicabilityFilter(String ldapFilter) {
+		applicabilityFilter = ldapFilter;
+	}
+
+	public void setArtifacts(IArtifactKey[] value) {
+		artifacts = value;
+	}
+
+	public void setCapabilities(ProvidedCapability[] exportedCapabilities) {
+		providedCapabilities = exportedCapabilities;
+	}
+
+	public void setFilter(String filter) {
+		this.filter = filter;
+	}
+
+	public void setId(String id) {
+		this.id = id;
+	}
+
+	// TODO: resolve the schizophrenia between the singleton immutable data
+	//	   	 and the public returned touchpoint data array.
+	public void setImmutableTouchpointData(TouchpointData immutableData) {
+		ensureTouchpointDataCapacity(4);
+		touchpointData.add(immutableData);
+	}
+
+	public String setProperty(String key, String value) {
+		if (value == null)
+			return (properties != null ? (String) properties.remove(key) : null);
+		if (properties == null)
+			properties = new OrderedProperties();
+		return (String) properties.setProperty(key, value);
+	}
+
+	public void setRequiredCapabilities(RequiredCapability[] capabilities) {
+		if (capabilities == NO_REQUIRES) {
+			this.requires = null;
+		} else {
+			//copy array for safety
+			this.requires = (RequiredCapability[]) capabilities.clone();
+		}
+	}
+
+	public void setSingleton(boolean singleton) {
+		this.singleton = singleton;
+	}
+
+	public void setTouchpointType(TouchpointType type) {
+		this.touchpointType = (type != TouchpointType.NONE ? type : null);
+	}
+
+	public void setVersion(Version newVersion) {
+		this.version = (newVersion != null ? newVersion : Version.emptyVersion);
+	}
+
+	public String toString() {
+		return id + ' ' + getVersion();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
deleted file mode 100644
index f24d7c5..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
+++ /dev/null
@@ -1,254 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.p2.metadata;
-
-import java.util.ArrayList;
-import java.util.Map;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.p2.metadata.InternalInstallableUnit;
-import org.osgi.framework.Version;
-
-public class InstallableUnit implements IInstallableUnitConstants, IInstallableUnit, InternalInstallableUnit {
-
-	private static final OrderedProperties NO_PROPERTIES = new OrderedProperties();
-	private static final ProvidedCapability[] NO_PROVIDES = new ProvidedCapability[0];
-	private static final RequiredCapability[] NO_REQUIRES = new RequiredCapability[0];
-
-	String applicabilityFilter;
-	private IArtifactKey[] artifacts;
-	private String filter;
-
-	private String id;
-
-	private OrderedProperties properties;
-	ProvidedCapability[] providedCapabilities = NO_PROVIDES;
-	private RequiredCapability[] requires;
-
-	private boolean singleton;
-
-	private ArrayList touchpointData = null;
-
-	private TouchpointType touchpointType;
-
-	private Version version;
-
-	public InstallableUnit() {
-		super();
-	}
-
-	public InstallableUnit(String id, Version version, boolean singleton) {
-		super();
-		this.id = id;
-		this.version = (version != null ? version : Version.emptyVersion);
-		this.singleton = singleton;
-	}
-
-	public void accept(IMetadataVisitor visitor) {
-		visitor.visitInstallableUnit(this);
-	}
-
-	public void addProperties(Map newProperties) {
-		if (properties == null)
-			properties = new OrderedProperties(newProperties.size());
-		properties.putAll(newProperties);
-	}
-
-	protected void addProvidedCapability(ProvidedCapability capability) {
-		if (providedCapabilities != null && providedCapabilities.length > 0) {
-			ProvidedCapability[] result = new ProvidedCapability[providedCapabilities.length + 1];
-			result[0] = capability;
-			System.arraycopy(providedCapabilities, 0, result, 1, providedCapabilities.length);
-			providedCapabilities = result;
-		} else {
-			providedCapabilities = new ProvidedCapability[] {capability};
-		}
-	}
-
-	public void addTouchpointData(TouchpointData[] newData) {
-		ensureTouchpointDataCapacity(newData.length);
-		for (int i = 0; i < newData.length; i++) {
-			touchpointData.add(newData[i]);
-		}
-	}
-
-	public int compareTo(Object toCompareTo) {
-		if (!(toCompareTo instanceof IInstallableUnit)) {
-			return -1;
-		}
-		IInstallableUnit other = (IInstallableUnit) toCompareTo;
-		if (getId().compareTo(other.getId()) == 0)
-			return (getVersion().compareTo(other.getVersion()));
-		return getId().compareTo(other.getId());
-	}
-
-	private void ensureTouchpointDataCapacity(int size) {
-		if (touchpointData != null) {
-			touchpointData.ensureCapacity(size);
-		} else {
-			touchpointData = new ArrayList(size);
-		}
-	}
-
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (!(obj instanceof IInstallableUnit))
-			return false;
-		final IInstallableUnit other = (IInstallableUnit) obj;
-		if (id == null) {
-			if (other.getId() != null)
-				return false;
-		} else if (!id.equals(other.getId()))
-			return false;
-		if (getVersion() == null) {
-			if (other.getVersion() != null)
-				return false;
-		} else if (!getVersion().equals(other.getVersion()))
-			return false;
-		return true;
-	}
-
-	public String getApplicabilityFilter() {
-		return applicabilityFilter;
-	}
-
-	public IArtifactKey[] getArtifacts() {
-		return artifacts;
-	}
-
-	public String getFilter() {
-		return filter;
-	}
-
-	public String getId() {
-		return id;
-	}
-
-	/**
-	 * Get an <i>unmodifiable copy</i> of the properties
-	 * associated with the installable unit.
-	 * 
-	 * @return an <i>unmodifiable copy</i> of the IU properties.
-	 */
-	public Map getProperties() {
-		return OrderedProperties.unmodifiableProperties(properties());
-	}
-
-	public String getProperty(String key) {
-		return properties().getProperty(key);
-	}
-
-	public ProvidedCapability[] getProvidedCapabilities() {
-		return (providedCapabilities != null ? providedCapabilities : NO_PROVIDES);
-	}
-
-	public RequiredCapability[] getRequiredCapabilities() {
-		return requires != null ? requires : NO_REQUIRES;
-
-	}
-
-	public IResolvedInstallableUnit getResolved() {
-		return new ResolvedInstallableUnit(this);
-	}
-
-	public TouchpointData[] getTouchpointData() {
-		return (touchpointData == null ? TouchpointData.NO_TOUCHPOINT_DATA //
-				: (TouchpointData[]) touchpointData.toArray(new TouchpointData[touchpointData.size()]));
-	}
-
-	public TouchpointType getTouchpointType() {
-		return touchpointType != null ? touchpointType : TouchpointType.NONE;
-	}
-
-	public Version getVersion() {
-		return version;
-	}
-
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((id == null) ? 0 : id.hashCode());
-		result = prime * result + ((getVersion() == null) ? 0 : getVersion().hashCode());
-		return result;
-	}
-
-	public boolean isFragment() {
-		return false;
-	}
-
-	public boolean isSingleton() {
-		return singleton;
-	}
-
-	private OrderedProperties properties() {
-		return (properties != null ? properties : NO_PROPERTIES);
-	}
-
-	public void setApplicabilityFilter(String ldapFilter) {
-		applicabilityFilter = ldapFilter;
-	}
-
-	public void setArtifacts(IArtifactKey[] value) {
-		artifacts = value;
-	}
-
-	public void setCapabilities(ProvidedCapability[] exportedCapabilities) {
-		providedCapabilities = exportedCapabilities;
-	}
-
-	public void setFilter(String filter) {
-		this.filter = filter;
-	}
-
-	public void setId(String id) {
-		this.id = id;
-	}
-
-	// TODO: resolve the schizophrenia between the singleton immutable data
-	//	   	 and the public returned touchpoint data array.
-	public void setImmutableTouchpointData(TouchpointData immutableData) {
-		ensureTouchpointDataCapacity(4);
-		touchpointData.add(immutableData);
-	}
-
-	public String setProperty(String key, String value) {
-		if (value == null)
-			return (properties != null ? (String) properties.remove(key) : null);
-		if (properties == null)
-			properties = new OrderedProperties();
-		return (String) properties.setProperty(key, value);
-	}
-
-	public void setRequiredCapabilities(RequiredCapability[] capabilities) {
-		if (capabilities == NO_REQUIRES) {
-			this.requires = null;
-		} else {
-			//copy array for safety
-			this.requires = (RequiredCapability[]) capabilities.clone();
-		}
-	}
-
-	public void setSingleton(boolean singleton) {
-		this.singleton = singleton;
-	}
-
-	public void setTouchpointType(TouchpointType type) {
-		this.touchpointType = (type != TouchpointType.NONE ? type : null);
-	}
-
-	public void setVersion(Version newVersion) {
-		this.version = (newVersion != null ? newVersion : Version.emptyVersion);
-	}
-
-	public String toString() {
-		return id + ' ' + getVersion();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
index 0e494ea..a5f700f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.metadata;
 
+import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
@@ -17,26 +18,21 @@ public class InstallableUnitFragment extends InstallableUnit implements IInstall
 
 	public static ProvidedCapability FRAGMENT_CAPABILITY = new ProvidedCapability(IU_KIND_NAMESPACE, "iu.fragment", new Version(1, 0, 0)); //$NON-NLS-1$
 
-	private String hostId;
+	//a host id of null is used for the default fragment
+	private String hostId = null;
 	private VersionRange hostRange = VersionRange.emptyRange;
 
 	public InstallableUnitFragment() {
 		super();
 	}
 
-	public InstallableUnitFragment(String id, Version version, boolean singleton, String hostId, VersionRange hostRange) {
-		super(id, version, singleton);
-		this.hostId = hostId;
-		if (hostRange != null)
-			this.hostRange = hostRange;
-	}
-
 	public void setHost(String iuId, VersionRange versionRange) {
-		if (iuId == null || versionRange == null)
+		if (versionRange == null)
 			throw new IllegalArgumentException();
 		hostId = iuId;
 		hostRange = versionRange;
-		addRequiredCapability(RequiredCapability.createRequiredCapabilityForName(iuId, versionRange, false));
+		if (hostId != null)
+			addRequiredCapability(RequiredCapability.createRequiredCapabilityForName(iuId, versionRange, false));
 	}
 
 	public String getHostId() {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
new file mode 100644
index 0000000..5a9b39e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
@@ -0,0 +1,110 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.metadata;
+
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
+import org.eclipse.osgi.service.resolver.VersionRange;
+import org.osgi.framework.Version;
+
+/**
+ * A factory class for instantiating various p2 metadata objects.
+ */
+public class MetadataFactory {
+	public static class InstallableUnitDescription {
+		protected InstallableUnit unit;
+
+		public InstallableUnitDescription() {
+			super();
+		}
+
+		public void addTouchpointData(TouchpointData data) {
+			Assert.isNotNull(data);
+			unit().addTouchpointData(data);
+		}
+
+		public void setApplicabilityFilter(String ldapFilter) {
+			unit().setApplicabilityFilter(ldapFilter);
+		}
+
+		public void setArtifacts(IArtifactKey[] value) {
+			unit().setArtifacts(value);
+		}
+
+		public void setCapabilities(ProvidedCapability[] exportedCapabilities) {
+			unit().setCapabilities(exportedCapabilities);
+		}
+
+		public void setFilter(String filter) {
+			unit().setFilter(filter);
+		}
+
+		public void setId(String id) {
+			unit().setId(id);
+		}
+
+		public void setProperty(String key, String value) {
+			unit().setProperty(key, value);
+		}
+
+		public void setRequiredCapabilities(RequiredCapability[] capabilities) {
+			unit().setRequiredCapabilities(capabilities);
+		}
+
+		public void setSingleton(boolean singleton) {
+			unit().setSingleton(singleton);
+		}
+
+		public void setTouchpointType(TouchpointType type) {
+			unit().setTouchpointType(type);
+		}
+
+		public void setVersion(Version newVersion) {
+			unit().setVersion(newVersion);
+		}
+
+		InstallableUnit unit() {
+			if (unit == null)
+				unit = new InstallableUnit();
+			return unit;
+		}
+
+		IInstallableUnit unitCreate() {
+			IInstallableUnit result = unit();
+			this.unit = null;
+			return result;
+		}
+	}
+
+	public static class InstallableUnitFragmentDescription extends InstallableUnitDescription {
+		public void setHost(String hostId, VersionRange hostRange) {
+			((InstallableUnitFragment) unit()).setHost(hostId, hostRange);
+		}
+
+		InstallableUnit unit() {
+			if (unit == null)
+				unit = new InstallableUnitFragment();
+			return unit;
+		}
+	}
+
+	/**
+	 * Creates and returns an {@link IInstallableUnit} or {@link IInstallableUnitFragment}
+	 * based on the given description.  Once the installable unit has been created, 
+	 * the information is discarded from the description object.
+	 * 
+	 * @param description The description of the unit to create
+	 * @return The created installable unit or fragment
+	 */
+	public static IInstallableUnit createInstallableUnit(InstallableUnitDescription description) {
+		return description.unitCreate();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 9a7c690..9fec701 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -17,6 +17,7 @@ import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.director.IPlanner;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.osgi.service.resolver.VersionRange;
@@ -27,14 +28,19 @@ import org.osgi.framework.Version;
  */
 public class AbstractProvisioningTest extends TestCase {
 
-	protected static VersionRange ANY_VERSION = new VersionRange(Version.emptyVersion, true, new Version(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE), true);
-	private static ProvidedCapability[] BUNDLE_CAPABILITY = new ProvidedCapability[] {new ProvidedCapability("eclipse.touchpoint", "bundle", new Version(1, 0, 0))};
+	protected static final VersionRange ANY_VERSION = new VersionRange(Version.emptyVersion, true, new Version(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE), true);
+	private static final ProvidedCapability[] BUNDLE_CAPABILITY = new ProvidedCapability[] {new ProvidedCapability("eclipse.touchpoint", "bundle", new Version(1, 0, 0))};
 
-	private static RequiredCapability[] BUNDLE_REQUIREMENT = new RequiredCapability[] {new RequiredCapability("eclipse.touchpoint", "bundle", VersionRange.emptyRange, null, false, true)};
+	private static final RequiredCapability[] BUNDLE_REQUIREMENT = new RequiredCapability[] {new RequiredCapability("eclipse.touchpoint", "bundle", VersionRange.emptyRange, null, false, true)};
 
-	protected static Version DEFAULT_VERSION = new Version(1, 0, 0);
+	protected static final Version DEFAULT_VERSION = new Version(1, 0, 0);
+	protected static final TouchpointType ECLIPSE_TOUCHPOINT = new TouchpointType("eclipse", new Version(1, 0, 0));
 
-	private static TouchpointType ECLIPSE_TOUCHPOINT = new TouchpointType("eclipse", new Version(1, 0, 0));
+	protected static final ProvidedCapability[] NO_PROVIDES = new ProvidedCapability[0];
+	protected static final Map NO_PROPERTIES = Collections.EMPTY_MAP;
+	protected static final TouchpointData NO_TP_DATA = null;
+
+	protected static final RequiredCapability[] NO_REQUIRES = new RequiredCapability[0];
 
 	/**
 	 * Tracks the metadata repositories created by this test instance. The repositories
@@ -140,21 +146,27 @@ public class AbstractProvisioningTest extends TestCase {
 	}
 
 	/**
-	 * 	Create an eclipse InstallableUnit with the given name and the eclipse touchpoint type.
-	 *  The IU has the default version and the default self capability is added to the IU.
+	 * 	Create an Eclipse InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
 	 */
-	public static InstallableUnit createEclipseIU(String name) {
+	public static IInstallableUnit createEclipseIU(String name) {
 		return createEclipseIU(name, DEFAULT_VERSION);
 	}
 
 	/**
-	 * 	Create an eclipse InstallableUnit with the given name, version, and the eclipse touchpoint type.
-	 *  The IU has the default version and the default self capability is added to the IU.
+	 * 	Create an Eclipse InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
 	 */
-	public static InstallableUnit createEclipseIU(String name, Version version) {
-		InstallableUnit iu = createIU(name, version, BUNDLE_CAPABILITY);
-		iu.setTouchpointType(ECLIPSE_TOUCHPOINT);
-		return iu;
+	public static IInstallableUnit createEclipseIU(String name, Version version) {
+		return createIU(name, version, null, NO_REQUIRES, BUNDLE_CAPABILITY, NO_PROPERTIES, ECLIPSE_TOUCHPOINT, NO_TP_DATA, false);
+	}
+
+	/**
+	 * 	Create an Eclipse InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createEclipseIU(String name, Version version, RequiredCapability[] requires, TouchpointData touchpointData) {
+		return createIU(name, version, null, requires, BUNDLE_CAPABILITY, NO_PROPERTIES, ECLIPSE_TOUCHPOINT, touchpointData, false);
 	}
 
 	/**
@@ -165,45 +177,114 @@ public class AbstractProvisioningTest extends TestCase {
 	}
 
 	/**
-	 * 	Create a basic InstallableUnit with the given name. The IU has the default version
-	 *  and the default self capability is added to the IU.
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
 	 */
-	public static InstallableUnit createIU(String name) {
+	public static IInstallableUnit createIU(String name) {
 		return createIU(name, DEFAULT_VERSION);
 	}
 
 	/**
-	 * 	Create a basic InstallableUnit with the given name and additional provided capabilities.
-	 *  The IU has the default version and the default self capability is also added to the IU.
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
 	 */
-	public static InstallableUnit createIU(String name, ProvidedCapability[] additionalProvides) {
-		return createIU(name, DEFAULT_VERSION, additionalProvides);
+	public static IInstallableUnit createIU(String name, ProvidedCapability[] additionalProvides) {
+		return createIU(name, DEFAULT_VERSION, null, NO_REQUIRES, additionalProvides, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, false);
 	}
 
 	/**
-	 * 	Create a basic InstallableUnit with the given name and version.
-	 * 	The default self capability is added to the IU.
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
 	 */
-	public static InstallableUnit createIU(String name, Version version) {
-		InstallableUnit iu = new InstallableUnit(name, version, false);
-		ProvidedCapability[] provides = new ProvidedCapability[] {getSelfCapability(iu)};
-		iu.setCapabilities(provides);
-		return iu;
+	public static IInstallableUnit createIU(String name, RequiredCapability[] requires) {
+		return createIU(name, DEFAULT_VERSION, null, requires, NO_PROVIDES, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, false);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, RequiredCapability[] requires, boolean singleton) {
+		return createIU(name, DEFAULT_VERSION, null, requires, NO_PROVIDES, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, singleton);
 	}
 
 	/**
-	 * 	Create a basic InstallableUnit with the given name, version, and additional
-	 *  provided capabilities. The default self capability is also added to the IU.
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
 	 */
-	public static InstallableUnit createIU(String name, Version version, ProvidedCapability[] additionalProvides) {
-		InstallableUnit iu = new InstallableUnit(name, version, false);
+	public static IInstallableUnit createIU(String name, String filter, ProvidedCapability[] additionalProvides) {
+		return createIU(name, DEFAULT_VERSION, filter, NO_REQUIRES, additionalProvides, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, false);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, Version version, String filter, ProvidedCapability[] additionalProvides) {
+		return createIU(name, version, filter, NO_REQUIRES, additionalProvides, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, false);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, Version version, ProvidedCapability[] additionalProvides) {
+		return createIU(name, version, null, NO_REQUIRES, additionalProvides, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, false);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, Version version) {
+		return createIU(name, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, false);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, Version version, RequiredCapability[] required) {
+		return createIU(name, version, null, required, NO_PROVIDES, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, false);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, Version version, RequiredCapability[] required, Map properties, boolean singleton) {
+		return createIU(name, version, null, required, NO_PROVIDES, properties, TouchpointType.NONE, NO_TP_DATA, singleton);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, Version version, boolean singleton) {
+		return createIU(name, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, TouchpointType.NONE, NO_TP_DATA, singleton);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
+	 * assume default values, and the default self capability is also added to the IU.
+	 */
+	public static IInstallableUnit createIU(String name, Version version, String filter, RequiredCapability[] required, ProvidedCapability[] additionalProvides, Map properties, TouchpointType tpType, TouchpointData tpData, boolean singleton) {
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
+		iu.setId(name);
+		iu.setVersion(version);
+		iu.setFilter(filter);
 		ProvidedCapability[] provides = new ProvidedCapability[additionalProvides.length + 1];
-		provides[0] = getSelfCapability(iu);
+		provides[0] = getSelfCapability(name, version);
 		for (int i = 0; i < additionalProvides.length; i++) {
 			provides[i + 1] = additionalProvides[i];
 		}
 		iu.setCapabilities(provides);
-		return iu;
+		iu.setRequiredCapabilities(required);
+		iu.setTouchpointType(tpType);
+		if (tpData != null)
+			iu.addTouchpointData(tpData);
+		iu.setSingleton(singleton);
+		return MetadataFactory.createInstallableUnit(iu);
 	}
 
 	/**
@@ -222,7 +303,7 @@ public class AbstractProvisioningTest extends TestCase {
 		InstallableUnitFragment iu = new InstallableUnitFragment();
 		iu.setId(name);
 		iu.setVersion(version);
-		ProvidedCapability[] cap = new ProvidedCapability[] {getSelfCapability(iu), InstallableUnitFragment.FRAGMENT_CAPABILITY};
+		ProvidedCapability[] cap = new ProvidedCapability[] {getSelfCapability(name, version), InstallableUnitFragment.FRAGMENT_CAPABILITY};
 		iu.setCapabilities(cap);
 		return iu;
 	}
@@ -265,8 +346,8 @@ public class AbstractProvisioningTest extends TestCase {
 	/**
 	 * 	Get the 'self' capability for the given installable unit.
 	 */
-	private static ProvidedCapability getSelfCapability(InstallableUnit iu) {
-		return new ProvidedCapability(IInstallableUnit.IU_NAMESPACE, iu.getId(), iu.getVersion());
+	private static ProvidedCapability getSelfCapability(String installableUnitId, Version installableUnitVersion) {
+		return new ProvidedCapability(IInstallableUnit.IU_NAMESPACE, installableUnitId, installableUnitVersion);
 	}
 
 	private static void indent(OutputStream output, int indent) {
@@ -291,6 +372,7 @@ public class AbstractProvisioningTest extends TestCase {
 		if (!containsIU)
 			System.out.println("No iu");
 	}
+
 	private static void write(IStatus status, int indent) {
 		PrintStream output = System.out;
 		indent(output, indent);
@@ -317,6 +399,7 @@ public class AbstractProvisioningTest extends TestCase {
 				write(children[i], indent + 1);
 		}
 	}
+
 	public AbstractProvisioningTest() {
 		super("");
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
index a1c7d71..0a8192b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
@@ -43,13 +43,12 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 	 */
 	public void testInstallFilteredCapability() {
 		//The IU that is required
-		InstallableUnit requiredIU = createIU("required." + getName());
+		IInstallableUnit requiredIU = createIU("required." + getName());
 
 		// The IU to be installed
-		InstallableUnit toInstallIU = createIU("toInstall." + getName());
 		String filter = createFilter("FilterKey", "true");
 		RequiredCapability capability = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, requiredIU.getId(), ANY_VERSION, filter, false, false);
-		toInstallIU.setRequiredCapabilities(new RequiredCapability[] {capability});
+		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {capability});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
 		IInstallableUnit[] toInstallArray = new IInstallableUnit[] {toInstallIU};
@@ -75,12 +74,11 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 	public void testInstallOptionalAvailable() {
 		String capabilityId = "test." + getName();
 		//The IU that exports the capability
-		InstallableUnit requiredIU = createIU("required." + getName(), new ProvidedCapability[] {new ProvidedCapability("test.capability", capabilityId, DEFAULT_VERSION)});
+		IInstallableUnit requiredIU = createIU("required." + getName(), new ProvidedCapability[] {new ProvidedCapability("test.capability", capabilityId, DEFAULT_VERSION)});
 
 		//The IU that optionally requires the capability
-		InstallableUnit toInstallIU = createIU("toInstall." + getName());
 		RequiredCapability required = new RequiredCapability("test.capability", capabilityId, ANY_VERSION, null, /* optional=> */true, /* multiple=> */false);
-		toInstallIU.setRequiredCapabilities(new RequiredCapability[] {required});
+		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {required});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {toInstallIU, requiredIU};
 		IInstallableUnit[] toInstallArray = new IInstallableUnit[] {toInstallIU};
@@ -100,10 +98,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 	 */
 	public void testInstallOptionalUnavailable() {
 		String capabilityId = "test." + getName();
-		InstallableUnit toInstallIU = createIU("toInstall." + getName());
 		//no IU will be available that exports this capability
 		RequiredCapability required = new RequiredCapability("test.capability", capabilityId, ANY_VERSION, null, true, false);
-		toInstallIU.setRequiredCapabilities(new RequiredCapability[] {required});
+		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {required});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {toInstallIU};
 		createTestMetdataRepository(allUnits);
@@ -124,11 +121,10 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 	public void testInstallPlatformFilter() {
 		//The IU that exports the capability
 		String capabilityId = "test." + getName();
-		InstallableUnit requiredIU = createIU("required." + getName(), new ProvidedCapability[] {new ProvidedCapability("test.capability", capabilityId, DEFAULT_VERSION)});
-		requiredIU.setFilter(createFilter("osgi.os", "blort"));
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", capabilityId, DEFAULT_VERSION)};
+		IInstallableUnit requiredIU = createIU("required." + getName(), createFilter("osgi.os", "blort"), provides);
 
-		InstallableUnit toInstallIU = createIU("toInstall." + getName());
-		toInstallIU.setRequiredCapabilities(createRequiredCapabilities("test.capability", capabilityId, ANY_VERSION, null));
+		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), createRequiredCapabilities("test.capability", capabilityId, ANY_VERSION, null));
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
 		IInstallableUnit[] toInstallArray = new IInstallableUnit[] {toInstallIU};
@@ -152,10 +148,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 	public void testSimpleInstallRequired() {
 		String capabilityId = "test." + getName();
 		//The IU that exports the capability
-		InstallableUnit requiredIU = createIU("required." + getName(), new ProvidedCapability[] {new ProvidedCapability("test.capability", capabilityId, DEFAULT_VERSION)});
+		IInstallableUnit requiredIU = createIU("required." + getName(), new ProvidedCapability[] {new ProvidedCapability("test.capability", capabilityId, DEFAULT_VERSION)});
 
-		InstallableUnit toInstallIU = createIU("toInstall." + getName());
-		toInstallIU.setRequiredCapabilities(createRequiredCapabilities("test.capability", capabilityId, ANY_VERSION, null));
+		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), createRequiredCapabilities("test.capability", capabilityId, ANY_VERSION, null));
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
 		IInstallableUnit[] toInstallArray = new IInstallableUnit[] {toInstallIU};
@@ -177,11 +172,10 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 	 */
 	public void testInstallRequiredNoVersion() {
 		//The IU that is needed
-		InstallableUnit requiredIU = createIU("required." + getName());
+		IInstallableUnit requiredIU = createIU("required." + getName());
 
-		InstallableUnit toInstallIU = createIU("toInstall." + getName());
 		RequiredCapability capability = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, requiredIU.getId(), null, null, false, false);
-		toInstallIU.setRequiredCapabilities(new RequiredCapability[] {capability});
+		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {capability});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
 		IInstallableUnit[] toInstallArray = new IInstallableUnit[] {toInstallIU};
@@ -204,11 +198,10 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 	 */
 	public void testSimpleInstallRequiredIU() {
 		//The IU that exports the capability
-		InstallableUnit requiredIU = createIU("required." + getName());
+		IInstallableUnit requiredIU = createIU("required." + getName());
 
-		InstallableUnit toInstallIU = createIU("toInstall." + getName());
 		RequiredCapability capability = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, requiredIU.getId(), ANY_VERSION, null, false, false);
-		toInstallIU.setRequiredCapabilities(new RequiredCapability[] {capability});
+		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {capability});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
 		IInstallableUnit[] toInstallArray = new IInstallableUnit[] {toInstallIU};
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
index 2a0aae3..172e819 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
@@ -11,7 +11,6 @@ package org.eclipse.equinox.p2.tests.director;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.osgi.framework.Version;
 
@@ -19,11 +18,7 @@ public class Bug203637 extends AbstractProvisioningTest {
 	public void test() {
 		IDirector d = createDirector();
 		Profile profile = new Profile("TestProfile." + getName());
-		InstallableUnit a1 = new InstallableUnit();
-		a1.setId("A");
-		a1.setVersion(new Version(1, 0, 0));
-		a1.setSingleton(true);
-
+		IInstallableUnit a1 = createIU("A", new Version(1, 0, 0), true);
 		assertOK(d.replace(new IInstallableUnit[0], new IInstallableUnit[] {a1}, profile, null));
 
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
index 158658b..f5ab19f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
@@ -10,26 +10,18 @@ package org.eclipse.equinox.p2.tests.director;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import junit.framework.TestCase;
 import org.eclipse.equinox.internal.p2.director.OperationGenerator;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.resolution.ResolutionHelper;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.osgi.framework.Version;
 
-public class OperationGenerationTest extends TestCase {
+public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void testInstallUninstall() {
-		InstallableUnit a1 = new InstallableUnit();
-		a1.setId("a");
-		a1.setVersion(new Version(1, 0, 0));
-
-		InstallableUnit a2 = new InstallableUnit();
-		a2.setId("a");
-		a2.setVersion(new Version(2, 0, 0));
-
-		InstallableUnit a3 = new InstallableUnit();
-		a3.setId("a");
-		a3.setVersion(new Version(3, 0, 0));
+		IInstallableUnit a1 = createIU("a", new Version(1, 0, 0), false);
+		IInstallableUnit a2 = createIU("a", new Version(2, 0, 0), false);
+		IInstallableUnit a3 = createIU("a", new Version(3, 0, 0), false);
 
 		Collection from;
 		from = new ArrayList();
@@ -47,17 +39,9 @@ public class OperationGenerationTest extends TestCase {
 	}
 
 	public void test1() {
-		InstallableUnit a1 = new InstallableUnit();
-		a1.setId("a");
-		a1.setVersion(new Version(1, 0, 0));
-
-		InstallableUnit a2 = new InstallableUnit();
-		a2.setId("a");
-		a2.setVersion(new Version(2, 0, 0));
-
-		InstallableUnit a3 = new InstallableUnit();
-		a3.setId("a");
-		a3.setVersion(new Version(3, 0, 0));
+		IInstallableUnit a1 = createIU("a", new Version(1, 0, 0), false);
+		IInstallableUnit a2 = createIU("a", new Version(2, 0, 0), false);
+		IInstallableUnit a3 = createIU("a", new Version(3, 0, 0), false);
 
 		Collection from;
 		from = new ArrayList();
@@ -76,17 +60,9 @@ public class OperationGenerationTest extends TestCase {
 	}
 
 	public void test2() {
-		InstallableUnit a1 = new InstallableUnit();
-		a1.setId("a");
-		a1.setVersion(new Version(1, 0, 0));
-
-		InstallableUnit a2 = new InstallableUnit();
-		a2.setId("a");
-		a2.setVersion(new Version(2, 0, 0));
-
-		InstallableUnit a3 = new InstallableUnit();
-		a3.setId("a");
-		a3.setVersion(new Version(3, 0, 0));
+		IInstallableUnit a1 = createIU("a", new Version(1, 0, 0), false);
+		IInstallableUnit a2 = createIU("a", new Version(2, 0, 0), false);
+		IInstallableUnit a3 = createIU("a", new Version(3, 0, 0), false);
 
 		Collection from;
 		from = new ArrayList();
@@ -105,21 +81,16 @@ public class OperationGenerationTest extends TestCase {
 	}
 
 	public void testUpdate3() {
-		InstallableUnit a1 = new InstallableUnit();
-		a1.setId("a");
-		a1.setVersion(new Version(1, 0, 0));
+		IInstallableUnit a1 = createIU("a", new Version(1, 0, 0), false);
+		IInstallableUnit a2 = createIU("a", new Version(2, 0, 0), false);
 
-		InstallableUnit a2 = new InstallableUnit();
-		a2.setId("a");
-		a2.setVersion(new Version(2, 0, 0));
-
-		InstallableUnit b = new InstallableUnit();
+		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
 		b.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
 		b.setProperty(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.0.0)");
 
-		InstallableUnit c = new InstallableUnit();
+		InstallableUnitDescription c = new MetadataFactory.InstallableUnitDescription();
 		c.setId("c");
 		c.setVersion(new Version(1, 0, 0));
 		c.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
@@ -132,8 +103,8 @@ public class OperationGenerationTest extends TestCase {
 
 		Collection to;
 		to = new ArrayList();
-		to.add(b);
-		to.add(c);
+		to.add(MetadataFactory.createInstallableUnit(b));
+		to.add(MetadataFactory.createInstallableUnit(c));
 
 		from = new ResolutionHelper(null, null).attachCUs(from);
 		to = new ResolutionHelper(null, null).attachCUs(to);
@@ -141,15 +112,10 @@ public class OperationGenerationTest extends TestCase {
 	}
 
 	public void testUpdate2() {
-		InstallableUnit a1 = new InstallableUnit();
-		a1.setId("a");
-		a1.setVersion(new Version(1, 0, 0));
-
-		InstallableUnit a2 = new InstallableUnit();
-		a2.setId("a");
-		a2.setVersion(new Version(2, 0, 0));
+		IInstallableUnit a1 = createIU("a", new Version(1, 0, 0), false);
+		IInstallableUnit a2 = createIU("a", new Version(2, 0, 0), false);
 
-		InstallableUnit b = new InstallableUnit();
+		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
 		b.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
@@ -162,7 +128,7 @@ public class OperationGenerationTest extends TestCase {
 
 		Collection to;
 		to = new ArrayList();
-		to.add(b);
+		to.add(MetadataFactory.createInstallableUnit(b));
 
 		from = new ResolutionHelper(null, null).attachCUs(from);
 		to = new ResolutionHelper(null, null).attachCUs(to);
@@ -170,11 +136,9 @@ public class OperationGenerationTest extends TestCase {
 	}
 
 	public void testUpdate1() {
-		InstallableUnit a = new InstallableUnit();
-		a.setId("a");
-		a.setVersion(new Version(1, 0, 0));
+		IInstallableUnit a = createIU("a", new Version(1, 0, 0), false);
 
-		InstallableUnit b = new InstallableUnit();
+		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
 		b.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
@@ -186,7 +150,7 @@ public class OperationGenerationTest extends TestCase {
 
 		Collection to;
 		to = new ArrayList();
-		to.add(b);
+		to.add(MetadataFactory.createInstallableUnit(b));
 
 		from = new ResolutionHelper(null, null).attachCUs(from);
 		to = new ResolutionHelper(null, null).attachCUs(to);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
index 954bcb4..7608d22 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
@@ -12,40 +12,35 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
 public class OracleTest extends AbstractProvisioningTest {
-	InstallableUnit a1;
-	InstallableUnit a2;
-	InstallableUnit b1;
-	InstallableUnit c1;
-	InstallableUnit d1;
-	InstallableUnit d2;
+	IInstallableUnit a1;
+	IInstallableUnit a2;
+	IInstallableUnit b1;
+	IInstallableUnit c1;
+	IInstallableUnit d1;
+	IInstallableUnit d2;
 
 	IDirector director;
 	Profile profile;
 
 	protected void setUp() throws Exception {
-		a1 = createIU("A");
-		a1.setSingleton(true);
-		a1.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[1.0.0, 2.0.0)"), null));
+		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[1.0.0, 2.0.0)"), null);
+		a1 = createIU("A", requires, true);
 
-		c1 = createIU("C");
-		c1.setSingleton(true);
-		c1.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "D", new VersionRange("[1.0.0, 3.0.0)"), null));
+		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "D", new VersionRange("[1.0.0, 3.0.0)"), null);
+		c1 = createIU("C", requires, true);
 
-		d1 = createIU("D");
-		d1.setSingleton(true);
+		d1 = createIU("D", DEFAULT_VERSION, true);
 
-		b1 = createIU("B");
-		b1.setSingleton(true);
-		b1.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "D", new VersionRange("[2.0.0, 3.0.0)"), null));
+		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "D", new VersionRange("[2.0.0, 3.0.0)"), null);
+		b1 = createIU("B", requires, true);
 
-		d2 = createIU("D", new Version(2, 0, 0));
-		d2.setSingleton(true);
+		d2 = createIU("D", new Version(2, 0, 0), true);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, c1, d1, b1});
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
index 507ed4d..a95616c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
@@ -8,6 +8,8 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.director;
 
+import java.util.HashMap;
+import java.util.Map;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
@@ -17,37 +19,33 @@ import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
 public class OracleTest2 extends AbstractProvisioningTest {
-	private InstallableUnit a1;
-	private InstallableUnit a2;
-	private InstallableUnit b1;
-	private InstallableUnit c1;
-	private InstallableUnit c2;
+	private IInstallableUnit a1;
+	private IInstallableUnit a2;
+	private IInstallableUnit b1;
+	private IInstallableUnit c1;
+	private IInstallableUnit c2;
 
 	IDirector director;
 	Profile profile;
 
 	protected void setUp() throws Exception {
-		a1 = createIU("A");
-		a1.setSingleton(true);
-		a1.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[1.0.0, 2.0.0)"), null));
-
-		c1 = createIU("C");
-		c1.setSingleton(true);
-
-		a2 = createIU("A", new Version(2, 0, 0));
-		a2.setSingleton(true);
-		a2.setProperty(IInstallableUnitConstants.UPDATE_FROM, "A");
-		a2.setProperty(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.3.0)");
-		a2.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[2.0.0, 3.0.0)"), null));
-
-		b1 = createIU("B");
-		b1.setSingleton(true);
-		b1.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[2.0.0, 3.0.0)"), null));
-
-		c2 = createIU("C", new Version(2, 0, 0));
-		c2.setSingleton(true);
-		c2.setProperty(IInstallableUnitConstants.UPDATE_FROM, "C");
-		c2.setProperty(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.3.0)");
+		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[1.0.0, 2.0.0)"), null);
+		a1 = createIU("A", requires, true);
+
+		c1 = createIU("C", DEFAULT_VERSION, true);
+
+		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[2.0.0, 3.0.0)"), null);
+		Map properties = new HashMap();
+		properties.put(IInstallableUnitConstants.UPDATE_FROM, "A");
+		properties.put(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.3.0)");
+		a2 = createIU("A", new Version(2, 0, 0), requires, properties, true);
+
+		b1 = createIU("B", DEFAULT_VERSION, requires, NO_PROPERTIES, true);
+
+		properties.clear();
+		properties.put(IInstallableUnitConstants.UPDATE_FROM, "C");
+		properties.put(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.3.0)");
+		c2 = createIU("C", new Version(2, 0, 0), NO_REQUIRES, properties, true);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, c1});
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/PickerTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/PickerTest.java
index 625d07c..b41a006 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/PickerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/PickerTest.java
@@ -10,17 +10,17 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.director;
 
-import junit.framework.TestCase;
 import org.eclipse.equinox.internal.p2.director.Picker;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
 /**
  * Testing of the {@link Picker} class.
  */
-public class PickerTest extends TestCase {
-	InstallableUnit unitVersion5;
+public class PickerTest extends AbstractProvisioningTest {
+	IInstallableUnit unitVersion5;
 	private Picker picker;
 
 	public PickerTest() {
@@ -31,21 +31,15 @@ public class PickerTest extends TestCase {
 		super(name);
 	}
 
-	private RequiredCapability[] createRequiredCapabilities(String namespace, String name, VersionRange range, String filter) {
-		return new RequiredCapability[] {new RequiredCapability(namespace, name, range, filter, false, false)};
-	}
-
 	protected void setUp() throws Exception {
 		super.setUp();
 		Version version = new Version(5, 0, 0);
 
 		//create some sample IUs to be available for the picker
-		unitVersion5 = new InstallableUnit();
-		unitVersion5.setId("required");
-		unitVersion5.setVersion(version);
-		unitVersion5.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		unitVersion5 = createIU("required", version, provides);
 
-		InstallableUnit[] units = new InstallableUnit[] {unitVersion5};
+		IInstallableUnit[] units = new IInstallableUnit[] {unitVersion5};
 		picker = new Picker(units, null);
 
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
index 140ffe9..23ba255 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
@@ -17,25 +17,19 @@ import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
-import org.osgi.framework.Version;
 
 public class RollbackTest extends AbstractProvisioningTest {
 
-	private InstallableUnit a1;
+	private IInstallableUnit a1;
 	private Profile profile;
 	private IDirector director;
 
 	protected void setUp() throws Exception {
-		a1 = new InstallableUnit();
-		a1.setId("A");
-		a1.setVersion(new Version(1, 0, 0));
-		a1.setSingleton(true);
-
+		a1 = createIU("A", DEFAULT_VERSION, true);
 		profile = new Profile("TestProfile." + getName());
 		director = createDirector();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
index d6eef66..c3458ee 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
@@ -13,32 +13,28 @@ import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.osgi.framework.Version;
 
 public class SingletonTest extends AbstractProvisioningTest {
-	InstallableUnit f1;
-	InstallableUnit f1_1;
+	IInstallableUnit f1;
+	IInstallableUnit f1_1;
 
-	InstallableUnit f2;
-	InstallableUnit f2_1;
+	IInstallableUnit f2;
+	IInstallableUnit f2_1;
 
-	InstallableUnit junit38;
-	InstallableUnit junit40;
+	IInstallableUnit junit38;
+	IInstallableUnit junit40;
 
 	IDirector director;
 	Profile profile;
 
 	protected void setUp() throws Exception {
-		f1 = createIU("f1");
-		f1.setSingleton(true);
+		f1 = createIU("f1", new Version(1, 0, 0), true);
 
-		f1_1 = createIU("f1", new Version(1, 1, 0));
-		f1_1.setSingleton(true);
+		f1_1 = createIU("f1", new Version(1, 1, 0), true);
 
-		f2 = createIU("f2");
-		f2.setSingleton(true);
+		f2 = createIU("f2", new Version(1, 0, 0), true);
 
 		f2_1 = createIU("f2", new Version(1, 0, 1));
 
@@ -58,12 +54,12 @@ public class SingletonTest extends AbstractProvisioningTest {
 	}
 
 	public void testMultipleVersionSingleton() {
-		// The installation of junit38 and junit 40 together should succeed
+		// The installation of junit38 and junit 40 together should not succeed
 		assertEquals(IStatus.ERROR, director.install(new IInstallableUnit[] {f1, f1_1}, profile, new NullProgressMonitor()).getSeverity());
 	}
 
 	public void testMultipleVersionSingleton2() {
-		// The installation of junit38 and junit 40 together should succeed
+		// The installation of junit38 and junit 40 together should not succeed
 		assertEquals(IStatus.ERROR, director.install(new IInstallableUnit[] {f2, f2_1}, profile, new NullProgressMonitor()).getSeverity());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
index dadfa9e..0aacd7a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
@@ -11,17 +11,15 @@ package org.eclipse.equinox.p2.tests.director;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 public class UninstallTest extends AbstractProvisioningTest {
-	private InstallableUnit a1;
+	private IInstallableUnit a1;
 	private Profile profile;
 	private IDirector director;
 
 	protected void setUp() throws Exception {
-		a1 = createIU("A");
-		a1.setSingleton(true);
+		a1 = createIU("A", DEFAULT_VERSION, true);
 
 		profile = new Profile("TestProfile." + getName());
 		director = createDirector();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
index adf9075..299ab63 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
@@ -14,36 +14,33 @@ import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
 public class UpdateTest extends AbstractProvisioningTest {
-	InstallableUnit f1;
-	InstallableUnit f1_1;
-	InstallableUnit f1_4;
+	IInstallableUnit f1;
+	IInstallableUnit f1_1;
+	IInstallableUnit f1_4;
 
-	InstallableUnit fa;
-	InstallableUnit fap;
+	IInstallableUnit fa;
+	IInstallableUnit fap;
 	IDirector director;
 	Profile profile;
 
 	protected void setUp() throws Exception {
-		f1 = createIU("f1");
-		f1.setSingleton(true);
+		f1 = createIU("f1", DEFAULT_VERSION, true);
 
-		f1_1 = createIU("f1", new Version(1, 1, 0));
-		f1_1.setSingleton(true);
+		f1_1 = createIU("f1", new Version(1, 1, 0), true);
 
-		f1_4 = createIU("f1", new Version(1, 4, 0));
-		f1_4.setSingleton(true);
+		f1_4 = createIU("f1", new Version(1, 4, 0), true);
 
-		fa = createIU("fa");
-		fa.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "f1", new VersionRange("[1.0.0, 1.3.0)"), null));
+		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "f1", new VersionRange("[1.0.0, 1.3.0)"), null);
+		fa = createIU("fa", requires, false);
 
-		fap = createIU("fa", new Version(1, 1, 0));
-		fap.setRequiredCapabilities(createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "f1", new VersionRange("[1.0.0, 1.4.0)"), null));
+		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "f1", new VersionRange("[1.0.0, 1.4.0)"), null);
+		fap = createIU("fa", new Version(1, 1, 0), requires, NO_PROPERTIES, false);
 
 		createTestMetdataRepository(new IInstallableUnit[] {f1, fa});
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 975e5fb..16b146b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -12,11 +12,12 @@ package org.eclipse.equinox.p2.tests.engine;
 
 import java.io.File;
 import java.util.*;
-import junit.framework.TestCase;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.Version;
@@ -28,7 +29,7 @@ import org.osgi.framework.Version;
  * Currently you MUST have previously generated metadata from a 3.3.1 install.
  * There are ordering dependencies for the tests temporarily 
  */
-public class EngineTest extends TestCase {
+public class EngineTest extends AbstractProvisioningTest {
 	private ServiceReference engineRef;
 	private Engine engine;
 	private File testProvisioning;
@@ -122,7 +123,7 @@ public class EngineTest extends TestCase {
 		PhaseSet phaseSet = new PhaseSet(new Phase[] {}) {
 			// empty PhaseSet
 		};
-		Operand op = new Operand(new ResolvedInstallableUnit(new InstallableUnit()), null);
+		Operand op = new Operand(new ResolvedInstallableUnit(createIU("name")), null);
 		Operand[] operands = new Operand[] {op};
 		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
@@ -143,8 +144,8 @@ public class EngineTest extends TestCase {
 		profile.setValue(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
 		for (Iterator it = profile.getInstallableUnits(); it.hasNext();) {
 			PhaseSet phaseSet = new DefaultPhaseSet();
-			InstallableUnit doomed = (InstallableUnit) it.next();
-			Operand[] operands = new Operand[] {new Operand(doomed.getResolved(), null)};
+			IInstallableUnit doomed = (IInstallableUnit) it.next();
+			Operand[] operands = new Operand[] {new Operand(new ResolvedInstallableUnit(doomed), null)};
 			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		}
 		PhaseSet phaseSet = new DefaultPhaseSet();
@@ -197,10 +198,10 @@ public class EngineTest extends TestCase {
 	}
 
 	private IResolvedInstallableUnit createOSGiIU() {
-		InstallableUnit iu = new InstallableUnit();
-		iu.setId("org.eclipse.osgi");
-		iu.setVersion(new Version("3.3.1.R33x_v20070828"));
-		iu.setTouchpointType(new TouchpointType("eclipse", new Version("1.0.0")));
+		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
+		description.setId("org.eclipse.osgi");
+		description.setVersion(new Version("3.3.1.R33x_v20070828"));
+		description.setTouchpointType(new TouchpointType("eclipse", new Version("1.0.0")));
 		Map touchpointData = new HashMap();
 		String manifest = "Manifest-Version: 1.0\r\n" + "Bundle-Activator: org.eclipse.osgi.framework.internal.core.SystemBundl\r\n" + " eActivator\r\n" + "Bundle-RequiredExecutionEnvironment: J2SE-1.4,OSGi/Minimum-1.0\r\n" + "Export-Package: org.eclipse.osgi.event;version=\"1.0\",org.eclipse.osgi.\r\n" + " framework.console;version=\"1.0\",org.eclipse.osgi.framework.eventmgr;v\r\n" + " ersion=\"1.0\",org.eclipse.osgi.framework.log;version=\"1.0\",org.eclipse\r\n" + " .osgi.service.datalocation;version=\"1.0\",org.eclipse.osgi.service.deb\r\n" + " ug;version=\"1.0\",org.eclipse.osgi.service.environment;version=\"1.0\",o\r\n" + " rg.eclipse.osgi.service.localization;version=\"1.0\",org.eclipse.osgi.s\r\n" + " ervice.pluginconversion;version=\"1.0\",org.eclipse.osgi.service.resolv\r\n"
 				+ " er;version=\"1.1\",org.eclipse.osgi.service.runnable;version=\"1.0\",org.\r\n" + " eclipse.osgi.service.urlconversion;version=\"1.0\",org.eclipse.osgi.sto\r\n" + " ragemanager;version=\"1.0\",org.eclipse.osgi.util;version=\"1.0\",org.osg\r\n" + " i.framework;version=\"1.3\",org.osgi.service.condpermadmin;version=\"1.0\r\n" + " \",org.osgi.service.packageadmin;version=\"1.2\",org.osgi.service.permis\r\n" + " sionadmin;version=\"1.2\",org.osgi.service.startlevel;version=\"1.0\",org\r\n" + " .osgi.service.url;version=\"1.0\",org.osgi.util.tracker;version=\"1.3.2\"\r\n" + " ,org.eclipse.core.runtime.adaptor;x-friends:=\"org.eclipse.core.runtim\r\n" + " e\",org.eclipse.core.runtime.internal.adaptor;x-internal:=true,org.ecl\r\n"
@@ -219,17 +220,17 @@ public class EngineTest extends TestCase {
 		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
 		//iu.setArtifacts(new IArtifactKey[] {key});
 
-		ResolvedInstallableUnit result = (ResolvedInstallableUnit) iu.getResolved();
+		IInstallableUnit iu = MetadataFactory.createInstallableUnit(description);
+		ResolvedInstallableUnit result = new ResolvedInstallableUnit(iu);
 		result.setFragments(cus);
-
 		return result;
 	}
 
 	private IResolvedInstallableUnit createBadIU() {
-		InstallableUnit iu = new InstallableUnit();
-		iu.setId("org.eclipse.osgi.bad");
-		iu.setVersion(new Version("3.3.1.R33x_v20070828"));
-		iu.setTouchpointType(new TouchpointType("eclipse", new Version("1.0.0")));
+		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
+		description.setId("org.eclipse.osgi.bad");
+		description.setVersion(new Version("3.3.1.R33x_v20070828"));
+		description.setTouchpointType(new TouchpointType("eclipse", new Version("1.0.0")));
 		Map touchpointData = new HashMap();
 		String manifest = "Manifest-Version: 1.0\r\n" + "Bundle-Activator: org.eclipse.osgi.framework.internal.core.SystemBundl\r\n" + " eActivator\r\n" + "Bundle-RequiredExecutionEnvironment: J2SE-1.4,OSGi/Minimum-1.0\r\n" + "Export-Package: org.eclipse.osgi.event;version=\"1.0\",org.eclipse.osgi.\r\n" + " framework.console;version=\"1.0\",org.eclipse.osgi.framework.eventmgr;v\r\n" + " ersion=\"1.0\",org.eclipse.osgi.framework.log;version=\"1.0\",org.eclipse\r\n" + " .osgi.service.datalocation;version=\"1.0\",org.eclipse.osgi.service.deb\r\n" + " ug;version=\"1.0\",org.eclipse.osgi.service.environment;version=\"1.0\",o\r\n" + " rg.eclipse.osgi.service.localization;version=\"1.0\",org.eclipse.osgi.s\r\n" + " ervice.pluginconversion;version=\"1.0\",org.eclipse.osgi.service.resolv\r\n"
 				+ " er;version=\"1.1\",org.eclipse.osgi.service.runnable;version=\"1.0\",org.\r\n" + " eclipse.osgi.service.urlconversion;version=\"1.0\",org.eclipse.osgi.sto\r\n" + " ragemanager;version=\"1.0\",org.eclipse.osgi.util;version=\"1.0\",org.osg\r\n" + " i.framework;version=\"1.3\",org.osgi.service.condpermadmin;version=\"1.0\r\n" + " \",org.osgi.service.packageadmin;version=\"1.2\",org.osgi.service.permis\r\n" + " sionadmin;version=\"1.2\",org.osgi.service.startlevel;version=\"1.0\",org\r\n" + " .osgi.service.url;version=\"1.0\",org.osgi.util.tracker;version=\"1.3.2\"\r\n" + " ,org.eclipse.core.runtime.adaptor;x-friends:=\"org.eclipse.core.runtim\r\n" + " e\",org.eclipse.core.runtime.internal.adaptor;x-internal:=true,org.ecl\r\n"
@@ -247,7 +248,8 @@ public class EngineTest extends TestCase {
 		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
 		//iu.setArtifacts(new IArtifactKey[] {key});
 
-		ResolvedInstallableUnit result = (ResolvedInstallableUnit) iu.getResolved();
+		IInstallableUnit iu = MetadataFactory.createInstallableUnit(description);
+		ResolvedInstallableUnit result = new ResolvedInstallableUnit(iu);
 		result.setFragments(cus);
 
 		return result;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
index 600879b..981f4de 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
@@ -15,6 +15,7 @@ import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.installregistry.IInstallRegistry;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.Version;
@@ -90,12 +91,11 @@ public class InstallRegistryTest extends TestCase {
 	}
 
 	private IResolvedInstallableUnit createTestIU() {
-		InstallableUnit iu = new InstallableUnit();
-		iu.setId("org.eclipse.test");
-		iu.setVersion(new Version("1.0.0"));
-		iu.setTouchpointType(new TouchpointType("null", new Version("1.0.0")));
-		ResolvedInstallableUnit result = (ResolvedInstallableUnit) iu.getResolved();
-
-		return result;
+		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
+		description.setId("org.eclipse.test");
+		description.setVersion(new Version("1.0.0"));
+		description.setTouchpointType(new TouchpointType("null", new Version("1.0.0")));
+		IInstallableUnit unit = MetadataFactory.createInstallableUnit(description);
+		return new ResolvedInstallableUnit(unit);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
index cd7a9c3..297102e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
@@ -10,17 +10,16 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.engine;
 
-import junit.framework.TestCase;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.metadata.ResolvedInstallableUnit;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
 /**
  * Simple test of the engine API.
  */
-public class PhaseSetTest extends TestCase {
+public class PhaseSetTest extends AbstractProvisioningTest {
 	public PhaseSetTest(String name) {
 		super(name);
 	}
@@ -45,7 +44,7 @@ public class PhaseSetTest extends TestCase {
 		PhaseSet phaseSet = new PhaseSet(new Phase[] {}) {
 			// empty PhaseSet
 		};
-		Operand op = new Operand(new ResolvedInstallableUnit(new InstallableUnit()), null);
+		Operand op = new Operand(new ResolvedInstallableUnit(createIU("iu")), null);
 		Operand[] operands = new Operand[] {op};
 
 		IStatus result = phaseSet.perform(new EngineSession(profile), profile, operands, new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
index 4da94b7..dd68e1e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
@@ -15,6 +15,7 @@ import junit.framework.TestCase;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.eclipse.equinox.p2.tests.engine.PhaseTest.TestPhaseSet;
 import org.osgi.framework.ServiceReference;
@@ -144,13 +145,12 @@ public class TouchpointTest extends TestCase {
 	}
 
 	private IResolvedInstallableUnit createTestIU(String touchpointName) {
-		InstallableUnit iu = new InstallableUnit();
-		iu.setId("org.eclipse.test");
-		iu.setVersion(new Version("1.0.0"));
-		iu.setTouchpointType(new TouchpointType(touchpointName, new Version("1.0.0")));
-		ResolvedInstallableUnit result = (ResolvedInstallableUnit) iu.getResolved();
-
-		return result;
+		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
+		description.setId("org.eclipse.test");
+		description.setVersion(new Version("1.0.0"));
+		description.setTouchpointType(new TouchpointType(touchpointName, new Version("1.0.0")));
+		IInstallableUnit unit = MetadataFactory.createInstallableUnit(description);
+		return new ResolvedInstallableUnit(unit);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
index 3de97a8..97b0961 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
@@ -14,6 +14,7 @@ import java.util.*;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.resolution.ResolutionHelper;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
@@ -165,14 +166,13 @@ public class FragmentMethodTest extends TestCase {
 	}
 
 	public IInstallableUnit createIU(String name) {
-		InstallableUnit iu = new InstallableUnit();
+		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setId(name);
 		iu.setVersion(new Version(1, 0, 0));
 		iu.setTouchpointType(new TouchpointType("eclipse", new Version(1, 0, 0)));
 		iu.setProperty(PROP_IU, "valueIU");
-
 		ProvidedCapability[] cap = new ProvidedCapability[] {new ProvidedCapability("eclipse.touchpoint", "bundle", new Version(1, 0, 0)), new ProvidedCapability("testCapability", "testCapability", new Version(1, 0, 0))};
 		iu.setCapabilities(cap);
-		return iu;
+		return MetadataFactory.createInstallableUnit(iu);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
index ca752fb..8af1f84 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
@@ -71,7 +71,7 @@ public class FragmentTest extends AbstractProvisioningTest {
 		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
 			IResolvedInstallableUnit iu = (IResolvedInstallableUnit) iterator.next();
 			if (iu.getId().equals(iu1.getId()))
-				assertEquals(iu.getTouchpointData().length, 2);
+				assertEquals(2, iu.getTouchpointData().length);
 
 		}
 	}
@@ -112,13 +112,12 @@ public class FragmentTest extends AbstractProvisioningTest {
 	}
 
 	private IInstallableUnit createIUWithTouchpointData() {
-		InstallableUnit unit = createEclipseIU("ui.test1");
-		unit.setImmutableTouchpointData(new TouchpointData(new HashMap()));
-		return unit;
+		TouchpointData data = new TouchpointData(new HashMap());
+		return createEclipseIU("ui.test1", DEFAULT_VERSION, NO_REQUIRES, data);
 	}
 
 	private IInstallableUnit createIUFragmentWithTouchpointData() {
-		InstallableUnit unit = createBundleFragment("iuFragment.test1");
+		InstallableUnitFragment unit = createBundleFragment("iuFragment.test1");
 		unit.setImmutableTouchpointData(new TouchpointData(new HashMap()));
 		return unit;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
index ca8533d..4577528 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
@@ -45,23 +45,22 @@ public class MultipleIUAndFragmentTest extends AbstractProvisioningTest {
 		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
 			IResolvedInstallableUnit iu = (IResolvedInstallableUnit) iterator.next();
 			if (iu.getId().equals(iu1.getId())) {
-				assertEquals(iu.getFragments().length, 1);
+				assertEquals(1, iu.getFragments().length);
 				assertEquals(iu.getFragments()[0].getId(), iu3.getId());
 			}
 			if (iu.getId().equals(iu2.getId())) {
-				assertEquals(iu.getFragments().length, 1);
+				assertEquals(1, iu.getFragments().length);
 				assertEquals(iu.getFragments()[0].getId(), iu3.getId());
 			}
 			if (iu.getId().equals(iu3.getId())) {
-				assertEquals(iu.getFragments().length, 0);
+				assertEquals(0, iu.getFragments().length);
 			}
 		}
 
 	}
 
 	private static IInstallableUnit createIUWithDependencyOn(String iuName, String dependencyOn) {
-		InstallableUnit iu = createEclipseIU(iuName);
-		iu.setRequiredCapabilities(new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, dependencyOn, VersionRange.emptyRange, null, false, true)});
-		return iu;
+		RequiredCapability[] requires = new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, dependencyOn, VersionRange.emptyRange, null, false, true)};
+		return createEclipseIU(iuName, DEFAULT_VERSION, requires, NO_TP_DATA);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/OldTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/OldTest.java
deleted file mode 100644
index 706f39a..0000000
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/OldTest.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.tests.metadata;
-
-import org.eclipse.equinox.p2.metadata.*;
-import org.eclipse.equinox.p2.resolution.Transformer;
-import org.eclipse.equinox.p2.tests.TestActivator;
-import org.eclipse.osgi.service.resolver.*;
-import org.osgi.framework.ServiceReference;
-import org.osgi.framework.Version;
-
-public class OldTest {
-	public void testDependencyOnCapability() {
-		InstallableUnit osgi = new InstallableUnit();
-		osgi.setId("org.eclipse.osgi");
-		osgi.setVersion(new Version(3, 2, 0, null));
-
-		osgi.setRequiredCapabilities(new RequiredCapability[] {new RequiredCapability("java.runtime", "JRE", null, null, false, false)});
-
-		InstallableUnit jre = new InstallableUnit();
-		jre.setId("com.ibm.jre");
-		jre.setVersion(new Version(1, 4, 2, "sr2"));
-		jre.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("java.runtime", "JRE", new Version(1, 4, 2, "sr2"))});
-
-		ServiceReference sr = TestActivator.context.getServiceReference(PlatformAdmin.class.getName());
-
-		StateObjectFactory factory = ((PlatformAdmin) TestActivator.context.getService(sr)).getFactory();
-		Transformer t = new Transformer(factory);
-		t.visitInstallableUnit(osgi);
-		BundleDescription osgiBd = t.getResult();
-
-		t = new Transformer(factory);
-		t.visitInstallableUnit(jre);
-		BundleDescription jreBd = t.getResult();
-
-		State state = factory.createState(true);
-		state.addBundle(osgiBd);
-		state.addBundle(jreBd);
-		state.resolve();
-
-		System.out.println(osgiBd + ": " + osgiBd.isResolved());
-		System.out.println(jreBd + ": " + jreBd.isResolved());
-	}
-
-	public void testNamedDependency() {
-		InstallableUnit jface = new InstallableUnit();
-		jface.setId("org.eclipse.jface");
-		jface.setVersion(new Version(3, 2, 0, null));
-
-		jface.setRequiredCapabilities(new RequiredCapability[] {RequiredCapability.createRequiredCapabilityForName("org.eclipse.swt", null, false)});
-
-		InstallableUnit swt = new InstallableUnit();
-		swt.setId("org.eclipse.swt");
-		swt.setVersion(new Version(3, 2, 0, null));
-
-		ServiceReference sr = TestActivator.context.getServiceReference(PlatformAdmin.class.getName());
-
-		StateObjectFactory factory = ((PlatformAdmin) TestActivator.context.getService(sr)).getFactory();
-		Transformer t = new Transformer(factory);
-		t.visitInstallableUnit(jface);
-		BundleDescription jfaceBd = t.getResult();
-
-		t = new Transformer(factory);
-		t.visitInstallableUnit(swt);
-		BundleDescription swtBd = t.getResult();
-
-		State state = factory.createState(true);
-		state.addBundle(jfaceBd);
-		state.addBundle(swtBd);
-		state.resolve();
-
-		System.out.println(jfaceBd + ": " + jfaceBd.isResolved());
-		System.out.println(swtBd + ": " + swtBd.isResolved());
-	}
-
-	public void testBackup() {
-		InstallableUnit osgi = new InstallableUnit();
-		osgi.setId("org.eclipse.osgi");
-		osgi.setVersion(new Version(3, 2, 0, null));
-		osgi.setRequiredCapabilities(new RequiredCapability[] {new RequiredCapability("java.runtime", "JRE", null, null, false, false)});
-
-		InstallableUnit jre = new InstallableUnit();
-		jre.setId("com.ibm.jre");
-		jre.setVersion(new Version(1, 4, 2, "sr2"));
-		jre.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("java.runtime", "JRE", new Version(1, 4, 2, "sr2"))});
-
-		throw new IllegalStateException("XStream has been removed.  Should this test be fixed? or removed?");
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
index 6ad3442..768926b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
@@ -42,8 +42,8 @@ public class RecommendationTest extends AbstractProvisioningTest {
 
 	public void testPicker() {
 		//The IUs we will pick from
-		InstallableUnit iu1 = createIU("iu1", new Version(1, 0, 0));
-		InstallableUnit iu2 = createIU("iu2", new Version(4, 0, 0));
+		IInstallableUnit iu1 = createIU("iu1", new Version(1, 0, 0));
+		IInstallableUnit iu2 = createIU("iu2", new Version(4, 0, 0));
 
 		//The recommendations to be used
 		RequiredCapability applyOn, newValue;
@@ -59,11 +59,11 @@ public class RecommendationTest extends AbstractProvisioningTest {
 		recommendations.add(r1);
 		recommendations.add(r2);
 
-		Picker p = new Picker(new InstallableUnit[] {iu1, iu2}, null);
+		Picker p = new Picker(new IInstallableUnit[] {iu1, iu2}, null);
 		IInstallableUnit[][] matches = p.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", null, null, false, false)}, false);
 		assertEquals(matches[1][0], iu1);
 
-		Picker p1 = new Picker(new InstallableUnit[] {iu1, iu2}, new RecommendationDescriptor(recommendations));
+		Picker p1 = new Picker(new IInstallableUnit[] {iu1, iu2}, new RecommendationDescriptor(recommendations));
 		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[1.0, 2.0)"), null, false, false)}, false);
 		assertEquals(matches[0].length, 0);
 		assertEquals(matches[1].length, 0);
@@ -75,7 +75,7 @@ public class RecommendationTest extends AbstractProvisioningTest {
 
 	public void testWideningRanges() {
 		//The IUs we will pick from
-		InstallableUnit iu1 = createIU("iu1", new Version(4, 0, 0));
+		IInstallableUnit iu1 = createIU("iu1", new Version(4, 0, 0));
 
 		//Here we add recommendation that widen the range of the bundle we are looking for
 		RequiredCapability applyOn2, newValue2;
@@ -86,12 +86,12 @@ public class RecommendationTest extends AbstractProvisioningTest {
 		recommendations.add(r2);
 
 		//Check without the recommendations
-		Picker p2 = new Picker(new InstallableUnit[] {iu1}, null);
+		Picker p2 = new Picker(new IInstallableUnit[] {iu1}, null);
 		IInstallableUnit[][] matches = p2.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[4.0, 5.0)"), null, false, false)}, false);
 		assertEquals(matches[1].length, 1);
 
 		//Check the widening works
-		Picker p1 = new Picker(new InstallableUnit[] {iu1}, new RecommendationDescriptor(recommendations));
+		Picker p1 = new Picker(new IInstallableUnit[] {iu1}, new RecommendationDescriptor(recommendations));
 		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[4.2, 5.0)"), null, false, false)}, false);
 		assertEquals(matches[1].length, 1);
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/ResolutionHelperTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/ResolutionHelperTest.java
index c5926ba..9cbac5f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/ResolutionHelperTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/ResolutionHelperTest.java
@@ -44,16 +44,12 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 		Version version = new Version(5, 0, 0);
 
 		//The IU that exports the capability
-		InstallableUnit required = new InstallableUnit();
-		required.setId("required");
-		required.setVersion(version);
-		required.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		IInstallableUnit required = createIU("required", version, provides);
 
 		//an IU whose required capability falls outside available range
-		InstallableUnit toInstall = new InstallableUnit();
-		toInstall.setId("match");
-		toInstall.setVersion(version);
-		toInstall.setRequiredCapabilities(createRequiredCapabilities("test.capability", "test", new VersionRange("[2.0,5.0)"), null));
+		RequiredCapability[] requires = createRequiredCapabilities("test.capability", "test", new VersionRange("[2.0,5.0)"), null);
+		IInstallableUnit toInstall = createIU("match", version, requires);
 
 		ResolutionHelper rh = new ResolutionHelper(null, null);
 		HashSet installSet = new HashSet();
@@ -77,16 +73,12 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 		Version version = new Version(2, 0, 0);
 
 		//The IU that exports the capability
-		InstallableUnit required = new InstallableUnit();
-		required.setId("required");
-		required.setVersion(version);
-		required.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		IInstallableUnit required = createIU("required", version, provides);
 
 		//an IU whose required capability falls outside available range
-		InstallableUnit toInstall = new InstallableUnit();
-		toInstall.setId("match");
-		toInstall.setVersion(version);
-		toInstall.setRequiredCapabilities(createRequiredCapabilities("test.capability", "test", new VersionRange("(2.0,3.0)"), null));
+		RequiredCapability[] requires = createRequiredCapabilities("test.capability", "test", new VersionRange("(2.0,3.0)"), null);
+		IInstallableUnit toInstall = createIU("match", version, requires);
 
 		ResolutionHelper rh = new ResolutionHelper(null, null);
 		HashSet installSet = new HashSet();
@@ -106,16 +98,11 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 		Version version = new Version(1, 0, 0);
 
 		//The IU that exports the capability
-		InstallableUnit required = new InstallableUnit();
-		required.setId("required");
-		required.setVersion(version);
-		required.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
-		required.setFilter(createFilter(FILTER_KEY, "win32"));
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		IInstallableUnit required = createIU("required", version, createFilter(FILTER_KEY, "win32"), provides);
 
-		InstallableUnit toInstall = new InstallableUnit();
-		toInstall.setId("toInstall");
-		toInstall.setVersion(version);
-		toInstall.setRequiredCapabilities(createRequiredCapabilities("test.capability", "test", ANY_VERSION, null));
+		RequiredCapability[] requires = createRequiredCapabilities("test.capability", "test", ANY_VERSION, null);
+		IInstallableUnit toInstall = createIU("toInstall", version, requires);
 
 		//setup context so that platform filter will satisfy dependency
 		Hashtable context = new Hashtable();
@@ -157,16 +144,12 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 		Version version = new Version(1, 0, 0);
 
 		//The IU that exports the capability
-		InstallableUnit required = new InstallableUnit();
-		required.setId("required");
-		required.setVersion(version);
-		required.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		IInstallableUnit required = createIU("required", version, provides);
 
 		//an IU whose filter will match the environment
-		InstallableUnit toInstall = new InstallableUnit();
-		toInstall.setId("match");
-		toInstall.setVersion(version);
-		toInstall.setRequiredCapabilities(createRequiredCapabilities("test.capability", "test", createFilter(FILTER_KEY, "matchValue")));
+		RequiredCapability[] requires = createRequiredCapabilities("test.capability", "test", createFilter(FILTER_KEY, "matchValue"));
+		IInstallableUnit toInstall = createIU("match", version, requires);
 
 		Dictionary environment = new Hashtable();
 		environment.put(FILTER_KEY, "matchValue");
@@ -189,16 +172,12 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 		Version version = new Version(1, 0, 0);
 
 		//The IU that exports the capability
-		InstallableUnit required = new InstallableUnit();
-		required.setId("required");
-		required.setVersion(version);
-		required.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		IInstallableUnit required = createIU("required", version, provides);
 
 		//an IU whose filter will not match the environment
-		InstallableUnit toInstall = new InstallableUnit();
-		toInstall.setId("noMatch");
-		toInstall.setVersion(version);
-		toInstall.setRequiredCapabilities(createRequiredCapabilities("test.capability", "test", createFilter(FILTER_KEY, "noMatchValue")));
+		RequiredCapability[] requires = createRequiredCapabilities("test.capability", "test", createFilter(FILTER_KEY, "noMatchValue"));
+		IInstallableUnit toInstall = createIU("noMatch", version, requires);
 
 		Dictionary environment = new Hashtable();
 		environment.put(FILTER_KEY, "matchValue");
@@ -213,15 +192,11 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 	}
 
 	public void testSimpleDependency() {
-		InstallableUnit osgi = new InstallableUnit();
-		osgi.setId("org.eclipse.osgi");
-		osgi.setVersion(new Version(3, 2, 0, null));
-		osgi.setRequiredCapabilities(new RequiredCapability[] {new RequiredCapability("java.runtime", "JRE", null, null, false, false)});
+		RequiredCapability[] requires = new RequiredCapability[] {new RequiredCapability("java.runtime", "JRE", null, null, false, false)};
+		IInstallableUnit osgi = createIU("org.eclipse.osgi", new Version(3, 2, 0, null), requires, NO_PROPERTIES, false);
 
-		InstallableUnit jre = new InstallableUnit();
-		jre.setId("com.ibm.jre");
-		jre.setVersion(new Version(1, 4, 2, "sr2"));
-		jre.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("java.runtime", "JRE", new Version(1, 4, 2, "sr2"))});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("java.runtime", "JRE", new Version(1, 4, 2, "sr2"))};
+		IInstallableUnit jre = createIU("com.ibm.jre", new Version(1, 4, 2, "sr2"), provides);
 
 		ResolutionHelper rh = new ResolutionHelper(null, null);
 		HashSet osgiSet = new HashSet(1);
@@ -240,16 +215,12 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 		Version version = new Version(1, 0, 0);
 
 		//The IU that exports the capability
-		InstallableUnit required = new InstallableUnit();
-		required.setId("required");
-		required.setVersion(version);
-		required.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		IInstallableUnit required = createIU("required", version, provides);
 
 		//an IU whose filter will match the environment
-		InstallableUnit toInstall = new InstallableUnit();
-		toInstall.setId("match");
-		toInstall.setVersion(version);
-		toInstall.setRequiredCapabilities(createRequiredCapabilities("test.capability", "does.not.exist", createFilter(FILTER_KEY, "matchValue")));
+		RequiredCapability[] requires = createRequiredCapabilities("test.capability", "does.not.exist", createFilter(FILTER_KEY, "matchValue"));
+		IInstallableUnit toInstall = createIU("match", version, requires);
 
 		Dictionary environment = new Hashtable();
 		environment.put(FILTER_KEY, "matchValue");
@@ -277,16 +248,12 @@ public class ResolutionHelperTest extends AbstractProvisioningTest {
 		Version version = new Version(1, 0, 0);
 
 		//The IU that exports the capability
-		InstallableUnit required = new InstallableUnit();
-		required.setId("required");
-		required.setVersion(version);
-		required.setCapabilities(new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)});
+		ProvidedCapability[] provides = new ProvidedCapability[] {new ProvidedCapability("test.capability", "test", version)};
+		IInstallableUnit required = createIU("required", version, provides);
 
 		//an IU whose filter will not match the environment
-		InstallableUnit toInstall = new InstallableUnit();
-		toInstall.setId("noMatch");
-		toInstall.setVersion(version);
-		toInstall.setRequiredCapabilities(createRequiredCapabilities("test.capability", "does.not.exist", createFilter(FILTER_KEY, "noMatchValue")));
+		RequiredCapability[] requires = createRequiredCapabilities("test.capability", "does.not.exist", createFilter(FILTER_KEY, "noMatchValue"));
+		IInstallableUnit toInstall = createIU("noMatch", version, requires);
 
 		Dictionary environment = new Hashtable();
 		environment.put(FILTER_KEY, "matchValue");
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/plugin.xml b/bundles/org.eclipse.equinox.p2.ui.admin/plugin.xml
index 1aa01e3..1959536 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/plugin.xml
@@ -78,7 +78,7 @@
             <enabledWhen>
             <or>
              <instanceof
-                  value="org.eclipse.equinox.p2.metadata.InstallableUnit">
+                  value="org.eclipse.equinox.p2.metadata.IInstallableUnit">
              </instanceof>
              <instanceof
                   value="org.eclipse.equinox.p2.ui.model.InstalledIUElement">
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
index 64b3924..1a37898 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
@@ -14,6 +14,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.p2.ui.dialogs.IUGroup;
 import org.eclipse.jface.dialogs.Dialog;
@@ -175,18 +176,15 @@ public class IUImplementationGroup extends IUGroup {
 	}
 
 	public void updateIU() {
-		if (iuElement == null) {
-			iuElement = new InstallableUnit();
-		}
 		// If it's not an InstallableUnit it is not editable
-		if (iuElement instanceof InstallableUnit) {
-			InstallableUnit unit = (InstallableUnit) iuElement;
+		if (iuElement == null || iuElement instanceof IInstallableUnit) {
+			InstallableUnitDescription unit = new InstallableUnitDescription();
 			unit.setId(id.getText().trim());
 			unit.setVersion(new Version(version.getText().trim()));
 			unit.setProperty(IInstallableUnit.IU_NAMESPACE, namespace.getText().trim());
-			// TODO this is bogus because we don't let user provide a touchpoint
-			// type version
+			// TODO this is bogus because we don't let user provide a touchpoint type version
 			unit.setTouchpointType(new TouchpointType(touchpointType.getText().trim(), new Version("1.0.0"))); //$NON-NLS-1$
+			iuElement = MetadataFactory.createInstallableUnit(unit);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml b/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
index e51510d..04de7be 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
@@ -19,7 +19,7 @@
             <enabledWhen>
             <or>
              <instanceof
-                  value="org.eclipse.equinox.p2.metadata.InstallableUnit">
+                  value="org.eclipse.equinox.p2.metadata.IInstallableUnit">
              </instanceof>
              <instanceof
                   value="org.eclipse.equinox.p2.ui.model.InstalledIUElement">
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
index 794d726..6f7855d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
@@ -11,7 +11,6 @@
 package org.eclipse.equinox.p2.ui.model;
 
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 
 /**
@@ -58,9 +57,7 @@ public class AvailableIUElement extends ProvElement {
 	}
 
 	public Object getAdapter(Class adapter) {
-		if (adapter == IInstallableUnit.class)
-			return iu;
-		if (adapter == InstallableUnit.class && iu instanceof InstallableUnit)
+		if (adapter == IInstallableUnit.class && iu instanceof IInstallableUnit)
 			return iu;
 		return super.getAdapter(adapter);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
index 85aa5cb..cb2ea31 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
@@ -12,7 +12,6 @@ package org.eclipse.equinox.p2.ui.model;
 
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 
 /**
@@ -58,9 +57,7 @@ public class InstalledIUElement extends ProvElement {
 	}
 
 	public Object getAdapter(Class adapter) {
-		if (adapter == IInstallableUnit.class)
-			return iu;
-		if (adapter == InstallableUnit.class && iu instanceof InstallableUnit)
+		if (adapter == IInstallableUnit.class && iu instanceof IInstallableUnit)
 			return iu;
 		return super.getAdapter(adapter);
 	}
commit 66812392cdf39ad8f1151aef88749c846064679c
Author: Susan Franklin <sfranklin>
Date:   Mon Nov 12 20:35:01 2007 +0000

    cleanup from Bug 209261 [prov] Remove InstallableUnit from API

1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
index 6f7855d..9d19913 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
@@ -57,7 +57,7 @@ public class AvailableIUElement extends ProvElement {
 	}
 
 	public Object getAdapter(Class adapter) {
-		if (adapter == IInstallableUnit.class && iu instanceof IInstallableUnit)
+		if (adapter == IInstallableUnit.class)
 			return iu;
 		return super.getAdapter(adapter);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
index cb2ea31..ca89a39 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
@@ -57,7 +57,7 @@ public class InstalledIUElement extends ProvElement {
 	}
 
 	public Object getAdapter(Class adapter) {
-		if (adapter == IInstallableUnit.class && iu instanceof IInstallableUnit)
+		if (adapter == IInstallableUnit.class)
 			return iu;
 		return super.getAdapter(adapter);
 	}

commit 822ba5f221bfe2f8d302832718ab2c3624139a38
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 25 18:38:43 2008 +0000

    Bug 250862 - [ui] Install, update, and uninstall wizards should show nested requirements

1	1	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
6	3	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
2	3	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
0	1	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
1	1	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
0	62	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java
41	3	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java
13	14	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
0	66	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionCollector.java
39	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
index da581de..c4f1557 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/actions/InstallActionTest.java
@@ -64,6 +64,6 @@ public class InstallActionTest extends ProfileModificationActionTest {
 	}
 
 	protected IIUElement element(IInstallableUnit iu) {
-		return new AvailableIUElement(null, iu, profile.getProfileId());
+		return new AvailableIUElement(null, iu, profile.getProfileId(), true);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
index b655682..d2ecf80 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
@@ -47,9 +47,12 @@ public class InstallWizardTest extends AbstractProvisioningUITest {
 			// test initial wizard state
 			assertTrue(page1.getSelectedIUs().length == 0);
 			assertFalse(page1.isPageComplete());
-			assertFalse(page2.isPageComplete());
-			// no licenses selected
-			assertTrue(page3.isPageComplete());
+
+			// resolution page not created
+			assertNull(page2);
+
+			// no license page created yet
+			assertNull(page3);
 
 			// Test the API.  Note we aren't testing much about correctness since
 			// there is not a lot of API to test the state of the UI.  However
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
index a10062a..fb3ada5 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
@@ -10,9 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.ui.dialogs;
 
-import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.UpdateWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
@@ -30,7 +29,7 @@ public class UpdateWizardTest extends AbstractProvisioningUITest {
 	public void testWizard() {
 		// this test is fairly useless until we seed it with real data and some mock profile, but
 		// at least we open the wizard up.
-		UpdateWizard wizard = new UpdateWizard(Policy.getDefault(), IProfileRegistry.SELF, new IInstallableUnit[0], new AvailableUpdateElement[0], new Object[0], null);
+		UpdateWizard wizard = new UpdateWizard(Policy.getDefault(), IProfileRegistry.SELF, new IUElementListRoot(), new Object[0], null);
 		WizardDialog dialog = new WizardDialog(ProvUI.getDefaultParentShell(), wizard);
 		dialog.setBlockOnOpen(false);
 		dialog.open();
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
index 36e3626..7c0b56b 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AllTests.java
@@ -23,7 +23,6 @@ public class AllTests extends TestCase {
 		suite.addTestSuite(AvailableIUCollectorTest.class);
 		suite.addTestSuite(CategoryElementCollectorTest.class);
 		suite.addTestSuite(IUPropertyUtilsTest.class);
-		suite.addTestSuite(LatestIUVersionCollectorTest.class);
 		suite.addTestSuite(LatestIUVersionElementCollectorTest.class);
 		suite.addTestSuite(QueryableMetadataRepositoryManagerTest.class);
 		return suite;
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
index f5a8bd5b..23e845d 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
@@ -32,7 +32,7 @@ public class AvailableIUCollectorTest extends QueryTest {
 	}
 
 	protected AvailableIUCollector createCollector(boolean makeCategories) {
-		return new AvailableIUCollector(new MockQueryable(), null, makeCategories);
+		return new AvailableIUCollector(new MockQueryable(), null, makeCategories, true);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java
deleted file mode 100644
index 4fbe77f..0000000
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionCollectorTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.tests.ui.query;
-
-import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
-import org.eclipse.equinox.internal.p2.ui.query.AvailableIUCollector;
-import org.eclipse.equinox.internal.p2.ui.query.LatestIUVersionCollector;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.tests.MockQueryable;
-import org.osgi.framework.Version;
-
-/**
- * Tests for {@link LatestIUVersionCollector}. This has all the tests of the superclass,
- * plus some extras for testing the latest IU capabilities.
- */
-public class LatestIUVersionCollectorTest extends AvailableIUCollectorTest {
-
-	protected AvailableIUCollector createCollector(boolean makeCategories) {
-		return new LatestIUVersionCollector(new MockQueryable(), null, makeCategories);
-	}
-
-	/**
-	 * Returns the IU corresponding to the collected element.
-	 */
-	protected IInstallableUnit getIU(Object collected) {
-		if (collected instanceof IInstallableUnit)
-			return (IInstallableUnit) collected;
-		return ((IIUElement) collected).getIU();
-	}
-
-	/**
-	 * Tests collecting items AvailableIUCollector doesn't care about.
-	 */
-	public void testCollectObject() {
-		AvailableIUCollector collector = createCollector();
-		Object object = new Object();
-		collector.accept(object);
-		assertEquals("1.0", 0, collector.size());
-	}
-
-	/**
-	 * Tests that only the latest version is collected.
-	 */
-	public void testCollectLatestIU() {
-		AvailableIUCollector collector = createCollector();
-		IInstallableUnit unit1 = createIU("f1", new Version(1, 0, 0));
-		IInstallableUnit unit2 = createIU("f1", new Version(1, 0, 1));
-		collector.accept(unit1);
-		collector.accept(unit2);
-		assertEquals("1.0", 1, collector.size());
-		IInstallableUnit collectedIU = getIU(collector.iterator().next());
-		assertEquals("1.1", unit2, collectedIU);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java
index 2d907b7..5840547 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/LatestIUVersionElementCollectorTest.java
@@ -10,15 +10,53 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.ui.query;
 
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.query.AvailableIUCollector;
 import org.eclipse.equinox.internal.p2.ui.query.LatestIUVersionElementCollector;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.tests.MockQueryable;
+import org.osgi.framework.Version;
 
 /**
- * 
+ * Tests for {@link LatestIUVersionCollector}. This has all the tests of the superclass,
+ * plus some extras for testing the latest IU capabilities.
  */
-public class LatestIUVersionElementCollectorTest extends LatestIUVersionCollectorTest {
+public class LatestIUVersionElementCollectorTest extends AvailableIUCollectorTest {
+
 	protected AvailableIUCollector createCollector(boolean makeCategories) {
-		return new LatestIUVersionElementCollector(new MockQueryable(), null, makeCategories);
+		return new LatestIUVersionElementCollector(new MockQueryable(), null, makeCategories, true);
+	}
+
+	/**
+	 * Returns the IU corresponding to the collected element.
+	 */
+	protected IInstallableUnit getIU(Object collected) {
+		if (collected instanceof IInstallableUnit)
+			return (IInstallableUnit) collected;
+		return ((IIUElement) collected).getIU();
+	}
+
+	/**
+	 * Tests collecting items AvailableIUCollector doesn't care about.
+	 */
+	public void testCollectObject() {
+		AvailableIUCollector collector = createCollector();
+		Object object = new Object();
+		collector.accept(object);
+		assertEquals("1.0", 0, collector.size());
+	}
+
+	/**
+	 * Tests that only the latest version is collected.
+	 */
+	public void testCollectLatestIU() {
+		AvailableIUCollector collector = createCollector();
+		IInstallableUnit unit1 = createIU("f1", new Version(1, 0, 0));
+		IInstallableUnit unit2 = createIU("f1", new Version(1, 0, 1));
+		collector.accept(unit1);
+		collector.accept(unit2);
+		assertEquals("1.0", 1, collector.size());
+		IInstallableUnit collectedIU = getIU(collector.iterator().next());
+		assertEquals("1.1", unit2, collectedIU);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
index 9917ff0..eec6208 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
@@ -103,9 +103,9 @@ public class DefaultQueryProvider extends QueryProvider {
 					if (context.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_FLAT || !context.getUseCategories()) {
 						AvailableIUCollector collector;
 						if (showLatest)
-							collector = new LatestIUVersionElementCollector(queryable, element, false);
+							collector = new LatestIUVersionElementCollector(queryable, element, false, context.getShowAvailableChildren());
 						else
-							collector = new AvailableIUCollector(queryable, element, false);
+							collector = new AvailableIUCollector(queryable, element, false, context.getShowAvailableChildren());
 						if (hideInstalled && installedQueryDescriptor != null)
 							collector.hideInstalledIUs(installedQueryDescriptor);
 						return new ElementQueryDescriptor(queryable, topLevelQuery, collector);
@@ -119,23 +119,23 @@ public class DefaultQueryProvider extends QueryProvider {
 				if (element instanceof UncategorizedCategoryElement) {
 					// Will have to look at all categories and groups and from there, figure out what's left
 					Query firstPassQuery = new CompoundQuery(new Query[] {topLevelQuery, categoryQuery}, false);
-					availableIUCollector = showLatest ? new LatestIUVersionElementCollector(queryable, element, false) : new AvailableIUCollector(queryable, element, false);
+					availableIUCollector = showLatest ? new LatestIUVersionElementCollector(queryable, element, false, context.getShowAvailableChildren()) : new AvailableIUCollector(queryable, element, false, context.getShowAvailableChildren());
 					if (hideInstalled && installedQueryDescriptor != null)
 						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
 					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(queryable, element, availableIUCollector));
 
 				}
-				// If it's a category, we get the requirements and show all requirements
-				// that are also visible in the available list.  Note this same query could be used to drill
-				// down into any IU's requirements, but we choose not to do this (yet) in the available view.
-				// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=226577
-				// if (element instanceof IUElement) {
-				if (element instanceof CategoryElement) {
+				// If it's a category or some other IUElement to drill down in, we get the requirements and show all requirements
+				// that are also visible in the available list.  
+				if (element instanceof CategoryElement || (element instanceof IIUElement && ((IIUElement) element).shouldShowChildren())) {
+					// children of a category should drill down according to the context.  If we aren't in a category, we are already drilling down and
+					// continue to do so.
+					boolean drillDown = element instanceof CategoryElement ? context.getShowAvailableChildren() : true;
 					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IIUElement) element).getRequirements());
 					if (showLatest)
-						availableIUCollector = new LatestIUVersionElementCollector(queryable, element, true);
+						availableIUCollector = new LatestIUVersionElementCollector(queryable, element, true, drillDown);
 					else
-						availableIUCollector = new AvailableIUCollector(queryable, element, true);
+						availableIUCollector = new AvailableIUCollector(queryable, element, true, drillDown);
 					if (hideInstalled && installedQueryDescriptor != null)
 						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
 					return new ElementQueryDescriptor(queryable, new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {topLevelQuery, categoryQuery}, false), meetsAnyRequirementQuery}, true), availableIUCollector);
@@ -164,16 +164,15 @@ public class DefaultQueryProvider extends QueryProvider {
 				}
 				QueryableUpdates updateQueryable = new QueryableUpdates(toUpdate);
 				if (context.getShowLatestVersionsOnly())
-					collector = new LatestIUVersionCollector(updateQueryable, element, true);
+					collector = new LatestIUVersionElementCollector(updateQueryable, element, true, false);
 				else
 					collector = new Collector();
 				return new ElementQueryDescriptor(updateQueryable, allQuery, collector);
 			case QueryProvider.INSTALLED_IUS :
 				// Querying of IU's.  We are drilling down into the requirements.
-				if (element instanceof IIUElement) {
+				if (element instanceof IIUElement && context.getShowInstallChildren()) {
 					Query meetsAnyRequirementQuery = new AnyRequiredCapabilityQuery(((IIUElement) element).getRequirements());
 					Query visibleAsAvailableQuery = new IUPropertyQuery(context.getVisibleAvailableIUProperty(), Boolean.TRUE.toString());
-					availableIUCollector = new AvailableIUCollector(queryable, element, true);
 					return new ElementQueryDescriptor(queryable, new CompoundQuery(new Query[] {visibleAsAvailableQuery, meetsAnyRequirementQuery}, true), new InstalledIUCollector(queryable, element));
 				}
 				profile = (IProfile) ProvUI.getAdapter(element, IProfile.class);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
index e3b1e3b..645108c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
@@ -29,10 +29,12 @@ public class AvailableIUCollector extends QueriedElementCollector {
 	private ElementQueryDescriptor installedQueryDescriptor;
 	private boolean hideInstalledIUs = false;
 	Collection installedElements = null;
+	private boolean drillDownChild = false;
 
-	public AvailableIUCollector(IQueryable queryable, Object parent, boolean makeCategories) {
+	public AvailableIUCollector(IQueryable queryable, Object parent, boolean makeCategories, boolean makeDrillDownChild) {
 		super(queryable, parent);
 		this.makeCategories = makeCategories;
+		this.drillDownChild = makeDrillDownChild;
 	}
 
 	public void hideInstalledIUs(ElementQueryDescriptor installedQuery) {
@@ -71,7 +73,9 @@ public class AvailableIUCollector extends QueriedElementCollector {
 	}
 
 	protected Object makeDefaultElement(IInstallableUnit iu) {
-		return new AvailableIUElement(parent, iu, null);
+		if (parent instanceof AvailableIUElement)
+			drillDownChild = ((AvailableIUElement) parent).shouldShowChildren();
+		return new AvailableIUElement(parent, iu, null, drillDownChild);
 	}
 
 	protected boolean isCategory(IInstallableUnit iu) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionCollector.java
deleted file mode 100644
index 2b80e6c..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionCollector.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.query;
-
-import java.util.HashMap;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-
-/**
- * Collector that only accepts categories or the latest version of each
- * IU.
- * 
- * @since 3.4
- */
-public class LatestIUVersionCollector extends AvailableIUCollector {
-
-	private HashMap uniqueIds = new HashMap();
-
-	public LatestIUVersionCollector(IQueryable queryable, Object parent, boolean makeCategories) {
-		super(queryable, parent, makeCategories);
-	}
-
-	/**
-	 * Accepts a result that matches the query criteria.
-	 * 
-	 * @param match an object matching the query
-	 * @return <code>true</code> if the query should continue,
-	 * or <code>false</code> to indicate the query should stop.
-	 */
-	public boolean accept(Object match) {
-		if (!(match instanceof IInstallableUnit))
-			return true;
-		IInstallableUnit iu = (IInstallableUnit) match;
-		// If it's a category, treat it as such if we are to build categories
-		if (makeCategory() && isCategory(iu))
-			return super.accept(match);
-		// Look for the latest element
-		Object matchElement = uniqueIds.get(iu.getId());
-		if (matchElement == null || iu.getVersion().compareTo(getIU(matchElement).getVersion()) > 0) {
-			if (matchElement != null)
-				getCollection().remove(matchElement);
-			matchElement = makeDefaultElement(iu);
-			uniqueIds.put(iu.getId(), matchElement);
-			return super.accept(matchElement);
-		}
-		return true;
-	}
-
-	protected Object makeDefaultElement(IInstallableUnit iu) {
-		return iu;
-	}
-
-	protected IInstallableUnit getIU(Object matchElement) {
-		if (matchElement instanceof IInstallableUnit)
-			return (IInstallableUnit) matchElement;
-		return null;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java
index 053504f..afb4fca 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/LatestIUVersionElementCollector.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,29 +10,56 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.query;
 
-import org.eclipse.equinox.internal.p2.ui.model.IUVersionsElement;
+import java.util.HashMap;
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 
 /**
  * Collector that only accepts categories or the latest version of each
- * IU, and wraps that version in an IUVersionsElement.
+ * IU.
  * 
  * @since 3.4
  */
-public class LatestIUVersionElementCollector extends LatestIUVersionCollector {
-	public LatestIUVersionElementCollector(IQueryable queryable, Object parent, boolean makeCategories) {
-		super(queryable, parent, makeCategories);
+public class LatestIUVersionElementCollector extends AvailableIUCollector {
+
+	private HashMap uniqueIds = new HashMap();
+
+	public LatestIUVersionElementCollector(IQueryable queryable, Object parent, boolean makeCategories, boolean makeDrillDownChild) {
+		super(queryable, parent, makeCategories, makeDrillDownChild);
 	}
 
-	protected Object makeDefaultElement(IInstallableUnit iu) {
-		return new IUVersionsElement(parent, iu);
+	/**
+	 * Accepts a result that matches the query criteria.
+	 * 
+	 * @param match an object matching the query
+	 * @return <code>true</code> if the query should continue,
+	 * or <code>false</code> to indicate the query should stop.
+	 */
+	public boolean accept(Object match) {
+		if (!(match instanceof IInstallableUnit))
+			return true;
+		IInstallableUnit iu = (IInstallableUnit) match;
+		// If it's a category, treat it as such if we are to build categories
+		if (makeCategory() && isCategory(iu))
+			return super.accept(match);
+		// Look for the latest element
+		Object matchElement = uniqueIds.get(iu.getId());
+		if (matchElement == null || iu.getVersion().compareTo(getIU(matchElement).getVersion()) > 0) {
+			if (matchElement != null)
+				getCollection().remove(matchElement);
+			matchElement = makeDefaultElement(iu);
+			uniqueIds.put(iu.getId(), matchElement);
+			return super.accept(matchElement);
+		}
+		return true;
 	}
 
 	protected IInstallableUnit getIU(Object matchElement) {
-		if (matchElement instanceof IUVersionsElement)
-			return ((IUVersionsElement) matchElement).getIU();
-		return super.getIU(matchElement);
+		if (matchElement instanceof IInstallableUnit)
+			return (IInstallableUnit) matchElement;
+		if (matchElement instanceof IIUElement)
+			return ((IIUElement) matchElement).getIU();
+		return null;
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
index 480ccad..ac07390 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 public class RollbackIUCollector extends AvailableIUCollector {
 
 	public RollbackIUCollector(IQueryable queryable, Object parent) {
-		super(queryable, parent, false);
+		super(queryable, parent, false, true);
 	}
 
 	protected Object makeDefaultElement(IInstallableUnit iu) {
commit 6757652f54e2fc46c875e623b143be5636a66ea1
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 25 18:45:50 2008 +0000

    Bug 250862 - [ui] Install, update, and uninstall wizards should show nested requirements

6	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
30	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
28	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java
8	41	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
0	384	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
134	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
344	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
195	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
13	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
4	15	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
13	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
7	53	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
71	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
8	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
36	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
7	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
17	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ElementUtils.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java
0	82	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
7	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
0	36	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java
8	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
15	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
21	57	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
29	19	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
26	50	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 91104e6..77b4f21 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -64,6 +64,7 @@ public class ProvUIMessages extends NLS {
 	public static String ProfileElement_InvalidProfile;
 	public static String ProfileModificationAction_NoChangeRequestProvided;
 	public static String ProfileModificationAction_NoExplanationProvided;
+	public static String ProfileModificationAction_NoProfileOrSelection;
 	public static String ProfileModificationAction_NoProfileToModify;
 	public static String ProfileModificationAction_ResolutionOperationLabel;
 	public static String ProfileModificationAction_UnexpectedError;
@@ -95,11 +96,14 @@ public class ProvUIMessages extends NLS {
 	public static String InstallIUCommandTooltip;
 	public static String InstallIUProgress;
 	public static String InstallWizardPage_NoCheckboxDescription;
+	public static String InstallWizardPage_Title;
 	public static String UninstallDialog_UninstallMessage;
 	public static String UninstallIUOperationLabel;
 	public static String UninstallIUCommandLabel;
 	public static String UninstallIUCommandTooltip;
 	public static String UninstallIUProgress;
+	public static String UninstallWizardPage_Description;
+	public static String UninstallWizardPage_Title;
 	public static String UpdateIUOperationLabel;
 	public static String UpdateIUCommandLabel;
 	public static String UpdateIUCommandTooltip;
@@ -238,5 +242,7 @@ public class ProvUIMessages extends NLS {
 	public static String ServiceUI_OK;
 	public static String UpdateOrInstallWizardPage_Size;
 	public static String Updates_Label;
+	public static String UpdateWizardPage_Description;
+	public static String UpdateWizardPage_Title;
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
index ff30b95..3ac0449 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
@@ -13,8 +13,8 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import java.util.*;
 import java.util.List;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
-import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
 import org.eclipse.equinox.internal.provisional.p2.engine.Operand;
@@ -24,6 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.ProvElementContentProvider;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.wizard.WizardPage;
@@ -92,10 +93,10 @@ public class AcceptLicensesWizardPage extends WizardPage {
 		label.setText(ProvUIMessages.AcceptLicensesWizardPage_ItemsLabel);
 		iuViewer = new TableViewer(composite, SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
 		setTableColumns(iuViewer.getTable());
-		iuViewer.setContentProvider(new StaticContentProvider(iusWithUnacceptedLicenses));
+		iuViewer.setContentProvider(new ProvElementContentProvider());
 		iuViewer.setLabelProvider(new IUDetailsLabelProvider());
 		iuViewer.setComparator(new ViewerComparator());
-		iuViewer.setInput(iusWithUnacceptedLicenses);
+		iuViewer.setInput(new IUElementListRoot(iusWithUnacceptedLicenses));
 
 		iuViewer.addSelectionChangedListener(new ISelectionChangedListener() {
 			public void selectionChanged(SelectionChangedEvent event) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index a917358..5d1aac0 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -16,7 +16,6 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AvailableIUGroup;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.InstallWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
@@ -35,7 +34,7 @@ import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
 
-public class AvailableIUsPage extends WizardPage {
+public class AvailableIUsPage extends WizardPage implements ISelectableIUsPage {
 	private static final String DIALOG_SETTINGS_SECTION = "AvailableIUsPage"; //$NON-NLS-1$
 	private static final String AVAILABLE_VIEW_TYPE = "AvailableViewType"; //$NON-NLS-1$
 	private static final String SHOW_LATEST_VERSIONS_ONLY = "ShowLatestVersionsOnly"; //$NON-NLS-1$
@@ -43,9 +42,9 @@ public class AvailableIUsPage extends WizardPage {
 	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
 	private static final int DEFAULT_WIDTH = 300;
 
-	InstallWizard wizard;
 	String profileId;
 	Policy policy;
+	Object[] initialSelections;
 	QueryableMetadataRepositoryManager manager;
 	IUViewQueryContext queryContext;
 	AvailableIUGroup availableIUGroup;
@@ -56,11 +55,10 @@ public class AvailableIUsPage extends WizardPage {
 	StructuredViewerProvisioningListener profileListener;
 	Display display;
 
-	public AvailableIUsPage(Policy policy, String profileId, InstallWizard wizard, QueryableMetadataRepositoryManager manager) {
+	public AvailableIUsPage(Policy policy, String profileId, QueryableMetadataRepositoryManager manager) {
 		super("AvailableSoftwarePage"); //$NON-NLS-1$
 		this.policy = policy;
 		this.profileId = profileId;
-		this.wizard = wizard;
 		this.manager = manager;
 		makeQueryContext();
 		setTitle(ProvUIMessages.AvailableIUsPage_Title);
@@ -353,6 +351,9 @@ public class AvailableIUsPage extends WizardPage {
 		showInstalledCheckbox.setSelection(!queryContext.getHideAlreadyInstalled());
 		showLatestVersionsCheckbox.setSelection(queryContext.getShowLatestVersionsOnly());
 		availableIUGroup.updateTreeColumns();
+		if (initialSelections != null)
+			availableIUGroup.setInitialSelections(initialSelections);
+
 		Control focusControl = null;
 		focusControl = availableIUGroup.getDefaultFocusControl();
 		if (focusControl != null)
@@ -453,4 +454,28 @@ public class AvailableIUsPage extends WizardPage {
 	public boolean canFlipToNextPage() {
 		return isPageComplete();
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ISelectableIUsPage#getCheckedIUElements()
+	 */
+	public Object[] getCheckedIUElements() {
+		return availableIUGroup.getCheckedLeafIUs();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ISelectableIUsPage#getSelectedIUElements()
+	 */
+	public Object[] getSelectedIUElements() {
+		return availableIUGroup.getSelectedIUElements();
+	}
+
+	/**
+	 * Set the initial selections to be used in this page.  This method has no effect
+	 * once the page has been created.
+	 * 
+	 * @param elements
+	 */
+	public void setInitialSelections(Object[] elements) {
+		initialSelections = elements;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java
new file mode 100644
index 0000000..fa8a1da
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.jface.wizard.IWizardPage;
+
+/**
+ * 
+ * ISelectableIUsPage is used to get the selected or checked IUs in a
+ * wizard page.
+ *
+ * @since 3.5
+ *
+ */
+public interface ISelectableIUsPage extends IWizardPage {
+	public Object[] getCheckedIUElements();
+
+	public Object[] getSelectedIUElements();
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
index b7f6718..fc19ed4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
@@ -13,29 +13,20 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.InstallWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.jface.viewers.TableViewer;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.widgets.Composite;
 
-public class InstallWizardPage extends ProfileModificationWizardPage {
-	InstallWizard wizard;
-	boolean useCheckbox;
+public class InstallWizardPage extends SizeComputingWizardPage {
 
-	public InstallWizardPage(Policy policy, String profileId, IInstallableUnit[] selectedIUs, ProvisioningPlan plan, InstallWizard wizard) {
-		super(policy, "InstallWizardPage", selectedIUs, profileId, plan); //$NON-NLS-1$
-		useCheckbox = selectedIUs != null;
-		this.wizard = wizard;
-		setTitle(ProvUIMessages.InstallIUOperationLabel);
-		if (useCheckbox)
-			setDescription(ProvUIMessages.InstallDialog_InstallSelectionMessage);
-		else
-			setDescription(ProvUIMessages.InstallWizardPage_NoCheckboxDescription);
+	public InstallWizardPage(Policy policy, String profileId, IUElementListRoot root, ProvisioningPlan initialPlan) {
+		super(policy, "InstallWizardPage", root, profileId, initialPlan); //$NON-NLS-1$
+		setTitle(ProvUIMessages.InstallWizardPage_Title);
+		setDescription(ProvUIMessages.InstallWizardPage_NoCheckboxDescription);
 	}
 
 	protected String getOperationLabel() {
@@ -43,31 +34,7 @@ public class InstallWizardPage extends ProfileModificationWizardPage {
 	}
 
 	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
-		IInstallableUnit[] selected = elementsToIUs(selectedElements);
+		IInstallableUnit[] selected = ElementUtils.elementsToIUs(selectedElements);
 		return InstallAction.computeProfileChangeRequest(selected, getProfileId(), additionalStatus, monitor);
 	}
-
-	protected TableViewer createTableViewer(Composite parent) {
-		if (!useCheckbox)
-			return new TableViewer(parent, SWT.BORDER | SWT.FULL_SELECTION);
-		return super.createTableViewer(parent);
-	}
-
-	protected Object[] getCheckedElements() {
-		if (!useCheckbox)
-			return wizard.getCheckedIUs();
-		return super.getCheckedElements();
-	}
-
-	protected void setInitialCheckState() {
-		if (!useCheckbox) {
-			return;
-		}
-		super.setInitialCheckState();
-	}
-
-	public void updateIUs() {
-		tableViewer.setInput(getCheckedElements());
-		super.checkedIUsChanged();
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
deleted file mode 100644
index db363aa..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ /dev/null
@@ -1,384 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.dialogs;
-
-import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.List;
-import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.*;
-import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
-import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
-import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.dialogs.IMessageProvider;
-import org.eclipse.jface.operation.IRunnableWithProgress;
-import org.eclipse.jface.viewers.*;
-import org.eclipse.jface.wizard.WizardPage;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.statushandlers.StatusManager;
-
-public abstract class ProfileModificationWizardPage extends WizardPage {
-	private static final String NESTING_INDENT = "  "; //$NON-NLS-1$
-	private static final IStatus NULL_PLAN_STATUS = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, null);
-	protected IInstallableUnit[] ius;
-	ProvisioningPlan currentPlan;
-	IStatus currentStatus;
-	private String profileId;
-	protected Policy policy;
-	TableViewer tableViewer;
-	Text detailsArea;
-	StaticContentProvider contentProvider;
-	protected Display display;
-
-	protected ProfileModificationWizardPage(Policy policy, String id, IInstallableUnit[] ius, String profileID, ProvisioningPlan initialPlan) {
-		super(id);
-		this.policy = policy;
-		this.ius = ius;
-		this.profileId = profileID;
-		this.currentPlan = initialPlan;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
-	 */
-	public void createControl(Composite parent) {
-		display = parent.getDisplay();
-		SashForm sashForm = new SashForm(parent, SWT.VERTICAL);
-		FillLayout layout = new FillLayout();
-		sashForm.setLayout(layout);
-		GridData data = new GridData(GridData.FILL_BOTH);
-		sashForm.setLayoutData(data);
-		initializeDialogUnits(sashForm);
-
-		Composite composite = new Composite(sashForm, SWT.NONE);
-		GridLayout gridLayout = new GridLayout();
-		gridLayout.marginWidth = 0;
-		gridLayout.marginHeight = 0;
-		composite.setLayout(gridLayout);
-
-		tableViewer = createTableViewer(composite);
-		data = new GridData(GridData.FILL_BOTH);
-		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
-		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
-		Table table = tableViewer.getTable();
-		table.setLayoutData(data);
-		table.setHeaderVisible(true);
-		IUColumnConfig[] columns = getColumnConfig();
-		for (int i = 0; i < columns.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.LEFT, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			if (columns[i].columnField == IUColumnConfig.COLUMN_SIZE) {
-				tc.setAlignment(SWT.RIGHT);
-				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH));
-			} else
-				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
-		}
-
-		final List list;
-		if (ius != null) {
-			list = new ArrayList(ius.length);
-			makeElements(getIUs(), list);
-		} else
-			list = new ArrayList();
-
-		tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
-			public void selectionChanged(SelectionChangedEvent event) {
-				updateStatus();
-			}
-		});
-
-		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
-		tableViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
-		tableViewer.setComparer(new ProvElementComparer());
-
-		contentProvider = new StaticContentProvider(list.toArray());
-		tableViewer.setContentProvider(contentProvider);
-		tableViewer.setInput(new Object());
-		tableViewer.setLabelProvider(new IUDetailsLabelProvider(null, getColumnConfig(), getShell()));
-		setInitialCheckState();
-		// If the initial provisioning plan was already calculated,
-		// no need to repeat it until the user changes selections
-		if (currentPlan == null)
-			checkedIUsChanged();
-		else
-			currentStatus = PlanStatusHelper.computeStatus(currentPlan, ius);
-
-		// Optional area to show the size
-		createSizingInfo(composite);
-
-		// The text area shows a description of the selected IU, or error detail if applicable.
-		Group group = new Group(sashForm, SWT.NONE);
-		group.setText(ProvUIMessages.ProfileModificationWizardPage_DetailsLabel);
-		group.setLayout(new GridLayout());
-
-		createDetailsArea(group);
-
-		updateStatus();
-		setControl(sashForm);
-		sashForm.setWeights(new int[] {80, 20});
-		Dialog.applyDialogFont(sashForm);
-	}
-
-	protected void createSizingInfo(Composite parent) {
-		// Default is to do nothing
-	}
-
-	protected void createDetailsArea(Composite parent) {
-		detailsArea = new Text(parent, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY | SWT.WRAP);
-		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
-		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_DESCRIPTION_HEIGHT);
-		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
-		detailsArea.setLayoutData(data);
-	}
-
-	protected void makeElements(IInstallableUnit[] iusToShow, List list) {
-		for (int i = 0; i < iusToShow.length; i++) {
-			list.add(new AvailableIUElement(this, iusToShow[i], getProfileId()));
-		}
-	}
-
-	public boolean performFinish() {
-		if (currentStatus != null && currentStatus.getSeverity() != IStatus.ERROR) {
-			ProfileModificationOperation op = createProfileModificationOperation(currentPlan);
-			ProvisioningOperationRunner.schedule(op, getShell(), StatusManager.SHOW | StatusManager.LOG);
-			return true;
-		}
-		return false;
-	}
-
-	/*
-	 * Override this method if overriding createTableViewer()
-	 */
-	protected Object[] getCheckedElements() {
-		return ((CheckboxTableViewer) tableViewer).getCheckedElements();
-	}
-
-	protected TableViewer getTableViewer() {
-		return tableViewer;
-	}
-
-	public IInstallableUnit[] getSelectedIUs() {
-		return elementsToIUs(getCheckedElements());
-	}
-
-	public ProvisioningPlan getCurrentPlan() {
-		return currentPlan;
-	}
-
-	protected Object[] getSelectedElements() {
-		return ((IStructuredSelection) tableViewer.getSelection()).toArray();
-	}
-
-	protected IInstallableUnit[] elementsToIUs(Object[] elements) {
-		IInstallableUnit[] theIUs = new IInstallableUnit[elements.length];
-		for (int i = 0; i < elements.length; i++) {
-			theIUs[i] = (IInstallableUnit) ProvUI.getAdapter(elements[i], IInstallableUnit.class);
-		}
-		return theIUs;
-	}
-
-	protected IInstallableUnit getSelectedIU() {
-		IInstallableUnit[] units = elementsToIUs(getSelectedElements());
-		if (units.length == 0)
-			return null;
-		return units[0];
-	}
-
-	protected String getProfileId() {
-		return profileId;
-	}
-
-	protected IInstallableUnit[] getIUs() {
-		return ius;
-	}
-
-	protected IUColumnConfig[] getColumnConfig() {
-		return ProvUI.getIUColumnConfig();
-	}
-
-	protected void checkedIUsChanged() {
-		try {
-			final Object[] selections = getCheckedElements();
-			if (selections.length == 0) {
-				currentPlan = null;
-				currentStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, IStatusCodes.EXPECTED_NOTHING_TO_DO, ProvUIMessages.ProfileModificationWizardPage_NothingSelected, null);
-			} else
-				getContainer().run(true, true, new IRunnableWithProgress() {
-					public void run(IProgressMonitor monitor) {
-
-						currentPlan = null;
-						currentStatus = NULL_PLAN_STATUS;
-						MultiStatus status = PlanStatusHelper.getProfileChangeAlteredStatus();
-						ProfileChangeRequest request = computeProfileChangeRequest(selections, status, monitor);
-						if (request != null) {
-							PlannerResolutionOperation op = new PlannerResolutionOperation(ProvUIMessages.ProfileModificationWizardPage_ResolutionOperationLabel, elementsToIUs(selections), getProfileId(), request, status, false);
-							try {
-								op.execute(monitor, ProvUI.getUIInfoAdapter(getShell()));
-							} catch (ExecutionException e) {
-								currentStatus = ProvUI.handleException(e.getCause(), ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, StatusManager.LOG);
-							}
-							currentPlan = op.getProvisioningPlan();
-							if (currentPlan != null)
-								currentStatus = currentPlan.getStatus();
-						}
-					}
-				});
-		} catch (InterruptedException e) {
-			// Nothing to report if thread was interrupted
-		} catch (InvocationTargetException e) {
-			currentPlan = null;
-			currentStatus = ProvUI.handleException(e.getCause(), ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, StatusManager.LOG);
-		}
-		updateStatus();
-	}
-
-	private ProfileModificationOperation createProfileModificationOperation(ProvisioningPlan plan) {
-		return new ProfileModificationOperation(getOperationLabel(), profileId, plan);
-	}
-
-	protected abstract ProfileChangeRequest computeProfileChangeRequest(Object[] checkedElements, MultiStatus additionalStatus, IProgressMonitor monitor);
-
-	protected void setInitialCheckState() {
-		// The default is to check everything because 
-		// in most cases, the user has selected exactly
-		// what they want before this page opens.
-		((CheckboxTableViewer) tableViewer).setAllChecked(true);
-	}
-
-	// We currently create an empty provisioning context, but
-	// in the future we could consider letting clients supply this.
-	protected ProvisioningContext getProvisioningContext() {
-		return new ProvisioningContext();
-	}
-
-	protected abstract String getOperationLabel();
-
-	void updateStatus() {
-		if (detailsArea == null || detailsArea.isDisposed())
-			return;
-		int messageType = IMessageProvider.NONE;
-		boolean pageComplete = true;
-		if (currentStatus != null && !currentStatus.isOK()) {
-			messageType = IMessageProvider.INFORMATION;
-			int severity = currentStatus.getSeverity();
-			if (severity == IStatus.ERROR) {
-				messageType = IMessageProvider.ERROR;
-				pageComplete = false;
-				// Log errors for later support, but not if these are 
-				// simple UI validation errors.
-				if (currentStatus.getCode() != IStatusCodes.EXPECTED_NOTHING_TO_DO)
-					ProvUI.reportStatus(currentStatus, StatusManager.LOG);
-			} else if (severity == IStatus.WARNING) {
-				messageType = IMessageProvider.WARNING;
-				// Log warnings for later support
-				ProvUI.reportStatus(currentStatus, StatusManager.LOG);
-			}
-		}
-		setPageComplete(pageComplete);
-		setMessage(getMessageText(), messageType);
-		detailsArea.setText(getDetailText());
-	}
-
-	String getDetailText() {
-		String detail = ""; //$NON-NLS-1$
-		if (currentStatus == null || currentStatus.isOK()) {
-			IInstallableUnit iu = getSelectedIU();
-			if (iu != null)
-				detail = getIUDescription(iu);
-		} else {
-			// current status is not OK.  See if there are embedded exceptions or status to report
-			StringBuffer buffer = new StringBuffer();
-			appendDetailText(currentStatus, buffer, -1, false);
-			detail = buffer.toString();
-		}
-		return detail;
-	}
-
-	void appendDetailText(IStatus status, StringBuffer buffer, int indent, boolean includeTopLevel) {
-		for (int i = 0; i < indent; i++)
-			buffer.append(NESTING_INDENT);
-		if (includeTopLevel && status.getMessage() != null)
-			buffer.append(status.getMessage());
-		Throwable t = status.getException();
-		if (t != null) {
-			// A provision (or core) exception occurred.  Get its status message or if none, its top level message.
-			if (t instanceof CoreException) {
-				IStatus exceptionStatus = ((CoreException) t).getStatus();
-				if (exceptionStatus != null && exceptionStatus.getMessage() != null)
-					buffer.append(exceptionStatus.getMessage());
-				else {
-					String details = t.getLocalizedMessage();
-					if (details != null)
-						buffer.append(details);
-				}
-			} else {
-				String details = t.getLocalizedMessage();
-				if (details != null)
-					buffer.append(details);
-			}
-		} else {
-			// This is the most important case.  No exception occurred, we have a non-OK status after trying
-			// to get a provisioning plan.  It's important not to lose the multi status information.  The top level status
-			// message has already been reported 
-			IStatus[] children = status.getChildren();
-			for (int i = 0; i < children.length; i++) {
-				appendDetailText(children[i], buffer, indent + 1, true);
-				buffer.append('\n');
-			}
-		}
-	}
-
-	String getMessageText() {
-		if (currentStatus == null || currentStatus.isOK())
-			return getDescription();
-		return currentStatus.getMessage();
-	}
-
-	protected String getIUDescription(IInstallableUnit iu) {
-		// Get the iu description in the default locale
-		String description = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_DESCRIPTION);
-		if (description == null)
-			description = ""; //$NON-NLS-1$
-		return description;
-	}
-
-	/*
-	 * If this method is overridden, you must also override 
-	 * getCheckedElements and setInitialCheckState
-	 */
-	protected TableViewer createTableViewer(Composite parent) {
-		// The viewer allows selection of IU's for browsing the details,
-		// and checking to include in the provisioning operation.
-		CheckboxTableViewer v = CheckboxTableViewer.newCheckList(parent, SWT.BORDER | SWT.FULL_SELECTION);
-		v.addCheckStateListener(new ICheckStateListener() {
-			public void checkStateChanged(CheckStateChangedEvent event) {
-				checkedIUsChanged();
-			}
-		});
-		return v;
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
new file mode 100644
index 0000000..ca9fb79
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
@@ -0,0 +1,134 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.jface.wizard.IWizardPage;
+import org.eclipse.jface.wizard.Wizard;
+
+/**
+ * Common superclass for a wizard that performs a provisioning
+ * operation.
+ * 
+ * @since 3.5
+ */
+public abstract class ProvisioningOperationWizard extends Wizard {
+
+	protected Policy policy;
+	protected String profileId;
+	private IUElementListRoot root;
+	private Object[] planSelections;
+	protected ISelectableIUsPage mainPage;
+	protected ResolutionWizardPage resolutionPage;
+	private ProvisioningPlan plan;
+
+	public ProvisioningOperationWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, ProvisioningPlan initialPlan) {
+		super();
+		this.policy = policy;
+		this.profileId = profileId;
+		this.root = root;
+		this.plan = initialPlan;
+		if (initialSelections == null)
+			planSelections = new Object[0];
+		else
+			planSelections = initialSelections;
+		setForcePreviousAndNextButtons(true);
+		setNeedsProgressMonitor(true);
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.Wizard#addPages()
+	 */
+	public void addPages() {
+		mainPage = createMainPage(root, planSelections);
+		addPage(mainPage);
+		if (plan != null && planSelections != null) {
+			resolutionPage = createResolutionPage(makeResolutionElementRoot(planSelections), plan);
+			addPage(resolutionPage);
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.Wizard#getStartingPage()
+	 */
+	public IWizardPage getStartingPage() {
+		// If we already had initial selections and a plan, then there is no reason to get
+		// additional information on the selection page.
+		if (resolutionPage != null)
+			return resolutionPage;
+		return super.getStartingPage();
+	}
+
+	protected abstract ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections);
+
+	protected abstract ResolutionWizardPage createResolutionPage(IUElementListRoot input, ProvisioningPlan initialPlan);
+
+	public boolean performFinish() {
+		return resolutionPage.performFinish();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.Wizard#canFinish()
+	 */
+	public boolean canFinish() {
+		if (resolutionPage == null)
+			return false;
+		return super.canFinish();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.Wizard#getNextPage(org.eclipse.jface.wizard.IWizardPage)
+	 */
+	public IWizardPage getNextPage(IWizardPage page) {
+		if (page == mainPage) {
+			if (resolutionPage != null) {
+				if (mainPageSelectionsHaveChanged()) {
+					// any initial plan that was passed in is no longer valid, no need to hang on to it
+					plan = null;
+					planSelections = mainPage.getCheckedIUElements();
+					resolutionPage.recomputePlan(makeResolutionElementRoot(planSelections));
+					planChanged();
+				}
+			} else {
+				if (plan != null && mainPageSelectionsHaveChanged())
+					plan = null;
+				resolutionPage = createResolutionPage(makeResolutionElementRoot(mainPage.getCheckedIUElements()), plan);
+				planChanged();
+				addPage(resolutionPage);
+			}
+			return resolutionPage;
+		}
+		return null;
+	}
+
+	private boolean mainPageSelectionsHaveChanged() {
+		HashSet selectedIUs = new HashSet();
+		selectedIUs.addAll(Arrays.asList(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements())));
+		HashSet lastIUSelections = new HashSet();
+		lastIUSelections.addAll(Arrays.asList(ElementUtils.elementsToIUs(planSelections)));
+		return !(selectedIUs.equals(lastIUSelections));
+	}
+
+	protected void planChanged() {
+		// hook for subclasses.  Default is to do nothing
+	}
+
+	protected abstract IUElementListRoot makeResolutionElementRoot(Object[] selectedElements);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
new file mode 100644
index 0000000..57d869b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
@@ -0,0 +1,344 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import java.lang.reflect.InvocationTargetException;
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.*;
+import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProfileModificationOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IMessageProvider;
+import org.eclipse.jface.operation.IRunnableWithProgress;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.jface.wizard.WizardPage;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+public abstract class ResolutionWizardPage extends WizardPage {
+	private static final String NESTING_INDENT = "  "; //$NON-NLS-1$
+	static final IStatus NULL_PLAN_STATUS = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, null);
+	protected IUElementListRoot input;
+	ProvisioningPlan currentPlan;
+	IStatus currentStatus;
+	private String profileId;
+	protected Policy policy;
+	TreeViewer treeViewer;
+	Text detailsArea;
+	ProvElementContentProvider contentProvider;
+	protected Display display;
+
+	protected ResolutionWizardPage(Policy policy, String id, IUElementListRoot input, String profileID, ProvisioningPlan initialPlan) {
+		super(id);
+		this.policy = policy;
+		currentPlan = initialPlan;
+		if (input == null)
+			this.input = new IUElementListRoot();
+		else
+			this.input = input;
+		this.profileId = profileID;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
+	 */
+	public void createControl(Composite parent) {
+		display = parent.getDisplay();
+		SashForm sashForm = new SashForm(parent, SWT.VERTICAL);
+		FillLayout layout = new FillLayout();
+		sashForm.setLayout(layout);
+		GridData data = new GridData(GridData.FILL_BOTH);
+		sashForm.setLayoutData(data);
+		initializeDialogUnits(sashForm);
+
+		Composite composite = new Composite(sashForm, SWT.NONE);
+		GridLayout gridLayout = new GridLayout();
+		gridLayout.marginWidth = 0;
+		gridLayout.marginHeight = 0;
+		composite.setLayout(gridLayout);
+
+		treeViewer = createTreeViewer(composite);
+		data = new GridData(GridData.FILL_BOTH);
+		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
+		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
+		Tree tree = treeViewer.getTree();
+		tree.setLayoutData(data);
+		tree.setHeaderVisible(true);
+		IUColumnConfig[] columns = getColumnConfig();
+		for (int i = 0; i < columns.length; i++) {
+			TreeColumn tc = new TreeColumn(tree, SWT.LEFT, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			if (columns[i].columnField == IUColumnConfig.COLUMN_SIZE) {
+				tc.setAlignment(SWT.RIGHT);
+				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH));
+			} else
+				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		}
+
+		treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				updateStatus();
+			}
+		});
+
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
+		treeViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
+		treeViewer.setComparer(new ProvElementComparer());
+
+		contentProvider = new ProvElementContentProvider();
+		treeViewer.setContentProvider(contentProvider);
+		treeViewer.setLabelProvider(new IUDetailsLabelProvider(null, getColumnConfig(), getShell()));
+
+		if (currentPlan == null)
+			// this will also set the input on the viewer
+			recomputePlan(input);
+		else {
+			treeViewer.setInput(input);
+			currentStatus = PlanStatusHelper.computeStatus(currentPlan, ElementUtils.elementsToIUs(input.getChildren(input)));
+		}
+
+		// Optional area to show the size
+		createSizingInfo(composite);
+
+		// The text area shows a description of the selected IU, or error detail if applicable.
+		Group group = new Group(sashForm, SWT.NONE);
+		group.setText(ProvUIMessages.ProfileModificationWizardPage_DetailsLabel);
+		group.setLayout(new GridLayout());
+
+		createDetailsArea(group);
+
+		updateStatus();
+		setControl(sashForm);
+		sashForm.setWeights(new int[] {80, 20});
+		Dialog.applyDialogFont(sashForm);
+	}
+
+	protected void createSizingInfo(Composite parent) {
+		// Default is to do nothing
+	}
+
+	protected void createDetailsArea(Composite parent) {
+		detailsArea = new Text(parent, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY | SWT.WRAP);
+		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
+		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_DESCRIPTION_HEIGHT);
+		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
+		detailsArea.setLayoutData(data);
+	}
+
+	public boolean performFinish() {
+		if (currentStatus != null && currentStatus.getSeverity() != IStatus.ERROR) {
+			ProfileModificationOperation op = createProfileModificationOperation(currentPlan);
+			ProvisioningOperationRunner.schedule(op, getShell(), StatusManager.SHOW | StatusManager.LOG);
+			return true;
+		}
+		return false;
+	}
+
+	protected TreeViewer getTreeViewer() {
+		return treeViewer;
+	}
+
+	public ProvisioningPlan getCurrentPlan() {
+		return currentPlan;
+	}
+
+	protected Object[] getSelectedElements() {
+		return ((IStructuredSelection) treeViewer.getSelection()).toArray();
+	}
+
+	protected IInstallableUnit getSelectedIU() {
+		IInstallableUnit[] units = ElementUtils.elementsToIUs(getSelectedElements());
+		if (units.length == 0)
+			return null;
+		return units[0];
+	}
+
+	protected String getProfileId() {
+		return profileId;
+	}
+
+	protected IInstallableUnit[] getIUs() {
+		return ElementUtils.elementsToIUs(input.getChildren(input));
+	}
+
+	protected IUColumnConfig[] getColumnConfig() {
+		return ProvUI.getIUColumnConfig();
+	}
+
+	public void recomputePlan(IUElementListRoot root) {
+		this.input = root;
+		final Object[] elements = root.getChildren(root);
+		final IInstallableUnit[] ius = ElementUtils.elementsToIUs(elements);
+		try {
+			if (elements.length == 0) {
+				currentPlan = null;
+				currentStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, IStatusCodes.EXPECTED_NOTHING_TO_DO, ProvUIMessages.ProfileModificationWizardPage_NothingSelected, null);
+			} else
+				getContainer().run(true, true, new IRunnableWithProgress() {
+					public void run(IProgressMonitor monitor) {
+						currentPlan = null;
+						currentStatus = NULL_PLAN_STATUS;
+						MultiStatus status = PlanStatusHelper.getProfileChangeAlteredStatus();
+						ProfileChangeRequest request = computeProfileChangeRequest(elements, status, monitor);
+						if (request != null) {
+							PlannerResolutionOperation op = new PlannerResolutionOperation(ProvUIMessages.ProfileModificationWizardPage_ResolutionOperationLabel, ius, getProfileId(), request, status, false);
+							try {
+								op.execute(monitor, ProvUI.getUIInfoAdapter(getShell()));
+							} catch (ExecutionException e) {
+								currentStatus = ProvUI.handleException(e.getCause(), ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, StatusManager.LOG);
+							}
+							currentPlan = op.getProvisioningPlan();
+							if (currentPlan != null) {
+								for (int i = 0; i < elements.length; i++) {
+									if (elements[i] instanceof QueriedElement) {
+										((QueriedElement) elements[i]).setQueryable(getQueryable(currentPlan));
+									}
+								}
+								currentStatus = currentPlan.getStatus();
+							}
+						}
+					}
+				});
+		} catch (InterruptedException e) {
+			// Nothing to report if thread was interrupted
+		} catch (InvocationTargetException e) {
+			currentPlan = null;
+			currentStatus = ProvUI.handleException(e.getCause(), ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, StatusManager.LOG);
+		}
+		treeViewer.setInput(input);
+		updateStatus();
+	}
+
+	private ProfileModificationOperation createProfileModificationOperation(ProvisioningPlan plan) {
+		return new ProfileModificationOperation(getOperationLabel(), profileId, plan);
+	}
+
+	protected abstract ProfileChangeRequest computeProfileChangeRequest(Object[] checkedElements, MultiStatus additionalStatus, IProgressMonitor monitor);
+
+	// We currently create an empty provisioning context, but
+	// in the future we could consider letting clients supply this.
+	protected ProvisioningContext getProvisioningContext() {
+		return new ProvisioningContext();
+	}
+
+	protected abstract String getOperationLabel();
+
+	void updateStatus() {
+		if (detailsArea == null || detailsArea.isDisposed())
+			return;
+		int messageType = IMessageProvider.NONE;
+		boolean pageComplete = true;
+		if (currentStatus != null && !currentStatus.isOK()) {
+			messageType = IMessageProvider.INFORMATION;
+			int severity = currentStatus.getSeverity();
+			if (severity == IStatus.ERROR) {
+				messageType = IMessageProvider.ERROR;
+				pageComplete = false;
+				// Log errors for later support, but not if these are 
+				// simple UI validation errors.
+				if (currentStatus.getCode() != IStatusCodes.EXPECTED_NOTHING_TO_DO)
+					ProvUI.reportStatus(currentStatus, StatusManager.LOG);
+			} else if (severity == IStatus.WARNING) {
+				messageType = IMessageProvider.WARNING;
+				// Log warnings for later support
+				ProvUI.reportStatus(currentStatus, StatusManager.LOG);
+			}
+		}
+		setPageComplete(pageComplete);
+		setMessage(getMessageText(), messageType);
+		detailsArea.setText(getDetailText());
+	}
+
+	String getDetailText() {
+		String detail = ""; //$NON-NLS-1$
+		if (currentStatus == null || currentStatus.isOK()) {
+			IInstallableUnit iu = getSelectedIU();
+			if (iu != null)
+				detail = getIUDescription(iu);
+		} else {
+			// current status is not OK.  See if there are embedded exceptions or status to report
+			StringBuffer buffer = new StringBuffer();
+			appendDetailText(currentStatus, buffer, -1, false);
+			detail = buffer.toString();
+		}
+		return detail;
+	}
+
+	void appendDetailText(IStatus status, StringBuffer buffer, int indent, boolean includeTopLevel) {
+		for (int i = 0; i < indent; i++)
+			buffer.append(NESTING_INDENT);
+		if (includeTopLevel && status.getMessage() != null)
+			buffer.append(status.getMessage());
+		Throwable t = status.getException();
+		if (t != null) {
+			// A provision (or core) exception occurred.  Get its status message or if none, its top level message.
+			if (t instanceof CoreException) {
+				IStatus exceptionStatus = ((CoreException) t).getStatus();
+				if (exceptionStatus != null && exceptionStatus.getMessage() != null)
+					buffer.append(exceptionStatus.getMessage());
+				else {
+					String details = t.getLocalizedMessage();
+					if (details != null)
+						buffer.append(details);
+				}
+			} else {
+				String details = t.getLocalizedMessage();
+				if (details != null)
+					buffer.append(details);
+			}
+		} else {
+			// This is the most important case.  No exception occurred, we have a non-OK status after trying
+			// to get a provisioning plan.  It's important not to lose the multi status information.  The top level status
+			// message has already been reported 
+			IStatus[] children = status.getChildren();
+			for (int i = 0; i < children.length; i++) {
+				appendDetailText(children[i], buffer, indent + 1, true);
+				buffer.append('\n');
+			}
+		}
+	}
+
+	String getMessageText() {
+		if (currentStatus == null || currentStatus.isOK())
+			return getDescription();
+		return currentStatus.getMessage();
+	}
+
+	protected String getIUDescription(IInstallableUnit iu) {
+		// Get the iu description in the default locale
+		String description = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_DESCRIPTION);
+		if (description == null)
+			description = ""; //$NON-NLS-1$
+		return description;
+	}
+
+	protected TreeViewer createTreeViewer(Composite parent) {
+		return new TreeViewer(parent, SWT.BORDER | SWT.FULL_SELECTION);
+	}
+
+	protected abstract IQueryable getQueryable(ProvisioningPlan plan);
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
new file mode 100644
index 0000000..ad678ae
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -0,0 +1,195 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.jface.wizard.WizardPage;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
+
+/**
+ * A wizard page that presents a check box list of IUs and allows the user
+ * to select and deselect them.  Typically the first page in a provisioning
+ * operation wizard.
+ * 
+ * @since 3.5
+ *
+ */
+public class SelectableIUsPage extends WizardPage implements ISelectableIUsPage {
+
+	IUElementListRoot root;
+	Object[] initialSelections;
+	CheckboxTableViewer tableViewer;
+	Text detailsArea;
+	ProvElementContentProvider contentProvider;
+	protected Display display;
+	protected Policy policy;
+	String profileId;
+
+	public SelectableIUsPage(Policy policy, String id, IUElementListRoot root, Object[] initialSelections, String profileId) {
+		super(id);
+		this.root = root;
+		this.policy = policy;
+		this.initialSelections = initialSelections;
+		this.profileId = profileId;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
+	 */
+	public void createControl(Composite parent) {
+		display = parent.getDisplay();
+		SashForm sashForm = new SashForm(parent, SWT.VERTICAL);
+		FillLayout layout = new FillLayout();
+		sashForm.setLayout(layout);
+		GridData data = new GridData(GridData.FILL_BOTH);
+		sashForm.setLayoutData(data);
+		initializeDialogUnits(sashForm);
+
+		Composite composite = new Composite(sashForm, SWT.NONE);
+		GridLayout gridLayout = new GridLayout();
+		gridLayout.marginWidth = 0;
+		gridLayout.marginHeight = 0;
+		composite.setLayout(gridLayout);
+
+		tableViewer = createTableViewer(composite);
+		data = new GridData(GridData.FILL_BOTH);
+		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
+		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
+		Table table = tableViewer.getTable();
+		table.setLayoutData(data);
+		table.setHeaderVisible(true);
+		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
+		for (int i = 0; i < columns.length; i++) {
+			TableColumn tc = new TableColumn(table, SWT.LEFT, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			if (columns[i].columnField == IUColumnConfig.COLUMN_SIZE) {
+				tc.setAlignment(SWT.RIGHT);
+				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH));
+			} else
+				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		}
+
+		tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				updateDetails();
+			}
+		});
+
+		tableViewer.addCheckStateListener(new ICheckStateListener() {
+			public void checkStateChanged(CheckStateChangedEvent event) {
+				setPageComplete(tableViewer.getCheckedElements().length > 0);
+			}
+
+		});
+
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
+		tableViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
+		tableViewer.setComparer(new ProvElementComparer());
+
+		contentProvider = new ProvElementContentProvider();
+		tableViewer.setContentProvider(contentProvider);
+		tableViewer.setInput(root);
+		tableViewer.setLabelProvider(new IUDetailsLabelProvider(null, ProvUI.getIUColumnConfig(), getShell()));
+		setInitialCheckState();
+
+		// The text area shows a description of the selected IU, or error detail if applicable.
+		Group group = new Group(sashForm, SWT.NONE);
+		group.setText(ProvUIMessages.ProfileModificationWizardPage_DetailsLabel);
+		group.setLayout(new GridLayout());
+
+		createDetailsArea(group);
+
+		setControl(sashForm);
+		sashForm.setWeights(new int[] {80, 20});
+		Dialog.applyDialogFont(sashForm);
+	}
+
+	protected CheckboxTableViewer createTableViewer(Composite parent) {
+		// The viewer allows selection of IU's for browsing the details,
+		// and checking to include in the provisioning operation.
+		CheckboxTableViewer v = CheckboxTableViewer.newCheckList(parent, SWT.BORDER | SWT.FULL_SELECTION);
+		return v;
+	}
+
+	protected void createDetailsArea(Composite parent) {
+		detailsArea = new Text(parent, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY | SWT.WRAP);
+		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
+		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_DESCRIPTION_HEIGHT);
+		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
+		detailsArea.setLayoutData(data);
+	}
+
+	protected void updateDetails() {
+		detailsArea.setText(getDetailText());
+	}
+
+	String getDetailText() {
+		IInstallableUnit[] ius = ElementUtils.elementsToIUs(getSelectedIUElements());
+		String description = null;
+		if (ius.length > 0) {
+			description = IUPropertyUtils.getIUProperty(ius[0], IInstallableUnit.PROP_DESCRIPTION);
+		}
+		if (description == null)
+			description = ""; //$NON-NLS-1$
+		return description;
+	}
+
+	public Object[] getCheckedIUElements() {
+		return tableViewer.getCheckedElements();
+	}
+
+	public Object[] getSelectedIUElements() {
+		return ((IStructuredSelection) tableViewer.getSelection()).toArray();
+	}
+
+	protected Object[] getSelectedElements() {
+		return ((IStructuredSelection) tableViewer.getSelection()).toArray();
+	}
+
+	protected IInstallableUnit[] elementsToIUs(Object[] elements) {
+		IInstallableUnit[] theIUs = new IInstallableUnit[elements.length];
+		for (int i = 0; i < elements.length; i++) {
+			theIUs[i] = (IInstallableUnit) ProvUI.getAdapter(elements[i], IInstallableUnit.class);
+		}
+		return theIUs;
+	}
+
+	protected void setInitialCheckState() {
+		tableViewer.setCheckedElements(initialSelections);
+	}
+
+	/*
+	 * Overridden so that we don't call getNextPage().
+	 * We use getNextPage() to start resolving the operation so
+	 * we only want to do that when the next button is pressed.
+	 * 
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.WizardPage#canFlipToNextPage()
+	 */
+	public boolean canFlipToNextPage() {
+		return isPageComplete();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
index d15d860..01ed45c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
@@ -15,9 +15,10 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.osgi.util.NLS;
@@ -30,20 +31,15 @@ import org.eclipse.swt.widgets.Label;
  * 
  * @since 3.5
  */
-public abstract class SizeComputingWizardPage extends ProfileModificationWizardPage {
-	/**
-	 * @param id
-	 * @param ius
-	 * @param profileID
-	 * @param initialPlan
-	 */
-	protected SizeComputingWizardPage(Policy policy, String id, IInstallableUnit[] ius, String profileID, ProvisioningPlan initialPlan) {
-		super(policy, id, ius, profileID, initialPlan);
+public abstract class SizeComputingWizardPage extends ResolutionWizardPage {
+
+	protected SizeComputingWizardPage(Policy policy, String id, IUElementListRoot root, String profileID, ProvisioningPlan initialPlan) {
+		super(policy, id, root, profileID, initialPlan);
 	}
 
 	protected Label sizeInfo;
 	protected long size;
-	private Job sizingJob;
+	Job sizingJob;
 
 	protected void computeSizing(final ProvisioningPlan plan, final String profileId) {
 		size = IIUElement.SIZE_UNKNOWN;
@@ -114,8 +110,12 @@ public abstract class SizeComputingWizardPage extends ProfileModificationWizardP
 		}
 	}
 
-	protected void checkedIUsChanged() {
-		super.checkedIUsChanged();
+	public void recomputePlan(IUElementListRoot root) {
+		super.recomputePlan(root);
 		computeSizing(getCurrentPlan(), getProfileId());
 	}
+
+	protected IQueryable getQueryable(ProvisioningPlan plan) {
+		return plan.getAdditions();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
index 362cb4d..0d85988 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
@@ -10,8 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import java.util.ArrayList;
-import java.util.List;
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
@@ -104,21 +103,11 @@ public abstract class StructuredIUGroup {
 	}
 
 	public IInstallableUnit[] getSelectedIUs() {
-		return elementsToIUs(((IStructuredSelection) viewer.getSelection()).toList());
+		return ElementUtils.elementsToIUs(getSelectedIUElements());
 	}
 
-	protected IInstallableUnit[] elementsToIUs(List elements) {
-		List iusList = new ArrayList(elements.size());
-		for (int i = 0; i < elements.size(); i++) {
-			IInstallableUnit iu = getIU(elements.get(i));
-			if (iu != null)
-				iusList.add(iu);
-		}
-		return (IInstallableUnit[]) iusList.toArray(new IInstallableUnit[iusList.size()]);
-	}
-
-	protected IInstallableUnit getIU(Object element) {
-		return (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
+	public Object[] getSelectedIUElements() {
+		return ((IStructuredSelection) viewer.getSelection()).toArray();
 	}
 
 	protected int convertHorizontalDLUsToPixels(int dlus) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
index 22f0248..5e679e1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
@@ -13,26 +13,32 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
-public class UninstallWizardPage extends ProfileModificationWizardPage {
+public class UninstallWizardPage extends ResolutionWizardPage {
 
-	public UninstallWizardPage(Policy policy, IInstallableUnit[] ius, String profileId, ProvisioningPlan plan) {
-		super(policy, "UninstallWizard", ius, profileId, plan); //$NON-NLS-1$
-		setTitle(ProvUIMessages.UninstallIUOperationLabel);
-		setDescription(ProvUIMessages.UninstallDialog_UninstallMessage);
+	public UninstallWizardPage(Policy policy, IUElementListRoot root, String profileId, ProvisioningPlan initialPlan) {
+		super(policy, "UninstallWizard", root, profileId, initialPlan); //$NON-NLS-1$
+		setTitle(ProvUIMessages.UninstallWizardPage_Title);
+		setDescription(ProvUIMessages.UninstallWizardPage_Description);
 	}
 
 	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
 		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
-		request.removeInstallableUnits(elementsToIUs(selectedElements));
+		request.removeInstallableUnits(ElementUtils.elementsToIUs(selectedElements));
 		return request;
 	}
 
 	protected String getOperationLabel() {
 		return ProvUIMessages.UninstallIUOperationLabel;
 	}
+
+	protected IQueryable getQueryable(ProvisioningPlan plan) {
+		return plan.getRemovals();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index fbee826..89c4656 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -10,26 +10,21 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import java.util.*;
+import java.util.HashSet;
+import java.util.Set;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IUpdateDescriptor;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.UpdateWizard;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.jface.viewers.CheckboxTableViewer;
 
 public class UpdateWizardPage extends SizeComputingWizardPage {
 
-	protected UpdateWizard wizard;
-	AvailableUpdateElement[] updateElements;
-	IInstallableUnit[] suggestedReplacements;
-	Object[] initialSelections = new Object[0];
-
 	public static IInstallableUnit[] getIUsToReplace(Object[] replacementElements) {
 		Set iusToReplace = new HashSet();
 		for (int i = 0; i < replacementElements.length; i++) {
@@ -50,38 +45,10 @@ public class UpdateWizardPage extends SizeComputingWizardPage {
 		return (IInstallableUnit[]) replacements.toArray(new IInstallableUnit[replacements.size()]);
 	}
 
-	public UpdateWizardPage(Policy policy, IInstallableUnit[] iusToReplace, AvailableUpdateElement[] elements, Object[] initialSelections, String profileId, ProvisioningPlan plan, UpdateWizard wizard) {
-		super(policy, "UpdateWizardPage", iusToReplace, profileId, plan); //$NON-NLS-1$
-		this.wizard = wizard;
-		this.updateElements = elements;
-		this.initialSelections = initialSelections;
-		setTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
-		setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
-		computeSizing(plan, profileId);
-	}
-
-	// This method is removed to improve performance
-	// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=221087
-	/*
-	protected IUColumnConfig[] getColumnConfig() {
-		initializeDialogUnits(getShell());
-		int pixels = convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH);
-		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_SizeColumnTitle, IUColumnConfig.COLUMN_SIZE, pixels / 2)};
-	}
-	*/
-
-	protected void checkedIUsChanged() {
-		// First ensure that a new plan is computed.
-		super.checkedIUsChanged();
-		// Now update the license page accordingly.  This requires the plan so
-		// that licenses for required items can also be checked.
-		wizard.planChanged(elementsToIUs(getCheckedElements()), currentPlan);
-		// status of license page could change status of wizard next button
-		// It no current page has been set yet (ie, we are still being created)
-		// then the updateButtons() method will NPE.  This check is needed in
-		// order to run the automated test cases.
-		if (getContainer().getCurrentPage() != null)
-			getContainer().updateButtons();
+	public UpdateWizardPage(Policy policy, IUElementListRoot root, String profileId, ProvisioningPlan initialPlan) {
+		super(policy, "UpdateWizardPage", root, profileId, initialPlan); //$NON-NLS-1$
+		setTitle(ProvUIMessages.UpdateWizardPage_Title);
+		setDescription(ProvUIMessages.UpdateWizardPage_Description);
 	}
 
 	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
@@ -91,10 +58,6 @@ public class UpdateWizardPage extends SizeComputingWizardPage {
 		return request;
 	}
 
-	protected void setInitialCheckState() {
-		((CheckboxTableViewer) tableViewer).setCheckedElements(initialSelections);
-	}
-
 	protected String getIUDescription(IInstallableUnit iu) {
 		if (iu != null) {
 			IUpdateDescriptor updateDescriptor = iu.getUpdateDescriptor();
@@ -104,15 +67,6 @@ public class UpdateWizardPage extends SizeComputingWizardPage {
 		return super.getIUDescription(iu);
 	}
 
-	protected void makeElements(IInstallableUnit[] iusToBeUpdated, List elements) {
-		// ignore the originally selected ius, we want to use the
-		// update elements computed by the creator of the wizard,
-		// which contains both the elements to be replaced, and the
-		// replacements
-		for (int i = 0; i < updateElements.length; i++)
-			elements.add(updateElements[i]);
-	}
-
 	protected String getOperationLabel() {
 		return ProvUIMessages.UpdateIUOperationLabel;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
new file mode 100644
index 0000000..dd5ba38
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
@@ -0,0 +1,71 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.jface.wizard.IWizardPage;
+
+/**
+ * Common superclass for wizards that need to show licenses.
+ * @since 3.5
+ */
+public abstract class WizardWithLicenses extends ProvisioningOperationWizard {
+
+	AcceptLicensesWizardPage licensePage;
+
+	public WizardWithLicenses(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, ProvisioningPlan initialPlan) {
+		super(policy, profileId, root, initialSelections, initialPlan);
+	}
+
+	protected AcceptLicensesWizardPage createLicensesPage(IInstallableUnit[] ius, ProvisioningPlan plan) {
+		return new AcceptLicensesWizardPage(policy, ius, plan);
+	}
+
+	public void addPages() {
+		super.addPages();
+	}
+
+	public IWizardPage getNextPage(IWizardPage page) {
+		if (page == resolutionPage) {
+			if (licensePage == null) {
+				licensePage = createLicensesPage(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements()), resolutionPage.getCurrentPlan());
+				addPage(licensePage);
+			}
+			if (licensePage.hasLicensesToAccept()) {
+				return licensePage;
+			}
+		}
+		return super.getNextPage(page);
+	}
+
+	protected void planChanged() {
+		if (licensePage == null) {
+			licensePage = createLicensesPage(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements()), resolutionPage.getCurrentPlan());
+			addPage(licensePage);
+		} else
+			licensePage.update(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements()), resolutionPage.getCurrentPlan());
+		// Status of license page could change status of wizard next button
+		// If no current page has been set yet (ie, we are still being created)
+		// then the updateButtons() method will NPE.  This check is needed in
+		// order to run the automated test cases.
+		if (getContainer().getCurrentPage() != null)
+			getContainer().updateButtons();
+	}
+
+	public boolean performFinish() {
+		licensePage.performFinish();
+		return super.performFinish();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 21ce58a..2585502 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -13,6 +13,7 @@ ProfileChangeRequestBuildingRequest=Processing request
 ProfileElement_InvalidProfile=Invalid profile ID {0}
 ProfileModificationAction_NoChangeRequestProvided=Could not interpret the request
 ProfileModificationAction_NoExplanationProvided=Unexpected error while processing the request.
+ProfileModificationAction_NoProfileOrSelection=Problem determining user request.  Profile id: {0}, Selection count: {1}
 ProfileModificationAction_NoProfileToModify=Could not determine what to do.
 ProfileModificationAction_ResolutionOperationLabel=Calculating Requirements
 ProfileModificationAction_UnexpectedError=Unexpected error encountered while preparing for the operation.
@@ -36,11 +37,13 @@ InstallIUOperationLabel=Install
 InstallIUCommandLabel=&Install...
 InstallIUCommandTooltip=Install the selected items
 InstallIUProgress=Installing...
-UninstallDialog_UninstallMessage=Review and confirm that the checked items will be uninstalled.
+UninstallDialog_UninstallMessage=Check the items that you wish to uninstall.
 UninstallIUOperationLabel=Uninstall
 UninstallIUCommandLabel=&Uninstall...
 UninstallIUCommandTooltip=Uninstall the selected items
 UninstallIUProgress=Uninstalling...
+UninstallWizardPage_Description=Review and confirm the items to be uninstalled.
+UninstallWizardPage_Title=Uninstall Details
 ServiceUI_Cancel=Cancel
 ServiceUI_LoginDetails=Please provide login details for {0}
 ServiceUI_LoginRequired=Login required
@@ -119,7 +122,7 @@ AddRepositoryDialog_Title=Add Repository
 AddRepositoryDialog_DuplicateURL=Duplicate URL
 AddRepositoryDialog_InvalidURL=The provided URL is not valid
 
-UpdateAction_UpdatesAvailableMessage=Review and confirm that the checked updates will be installed.
+UpdateAction_UpdatesAvailableMessage=Check the updates that you wish to install.
 UpdateAction_UpdatesAvailableTitle=Available Updates
 UpdateOperation_NothingToUpdate=There is nothing to update.
 UpdateOrInstallWizardPage_Size=Size: {0}
@@ -131,6 +134,8 @@ UpdateManagerCompatibility_InvalidSitesTitle=Invalid Sites File
 UpdateManagerCompatibility_UnableToOpenFindAndInstall=Unable to open the Classic Update Manager 'Find and Install' wizard.
 UpdateManagerCompatibility_UnableToOpenManageConfiguration=Unable to open the Classic Update Manager 'Manage Configuration' dialog.
 Updates_Label=Updates Available
+UpdateWizardPage_Description=Review and confirm the updates.
+UpdateWizardPage_Title=Update Details
 CategoryElementCollector_Uncategorized=Uncategorized
 ColocatedRepositoryManipulator_AddSiteOperationLabel=Add Site
 ColocatedRepositoryManipulator_ManageSites=&Manage Sites...
@@ -139,6 +144,7 @@ InstallDialog_InstallSelectionMessage=Review and confirm that the checked items
 InstalledSoftwarePage_RevertLabel=Re&vert...
 InstalledSoftwarePage_RevertTooltip=Revert to a previous install configuration.
 InstallWizardPage_NoCheckboxDescription=Review the items to be installed.
+InstallWizardPage_Title=Install Details
 
 PlannerResolutionOperation_UnexpectedError=Unexpected error.  Unable to calculate requirements and dependencies.
 PlanStatusHelper_IgnoringImpliedDowngrade={0} will be ignored because a newer version is already installed. 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index 2b4d30a..3520639 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
 
 /**
@@ -34,6 +35,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
 public class AvailableIUElement extends QueriedElement implements IIUElement {
 
 	IInstallableUnit iu;
+	boolean shouldShowChildren = Policy.getDefault().getQueryContext().getShowAvailableChildren();
+
 	// Currently this variable is not settable due to the
 	// poor performance of sizing, but it is kept here for future improvement.
 	// If we reinstate the ability to compute individual sizes we would
@@ -43,10 +46,11 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 	long size = IIUElement.SIZE_UNKNOWN;
 	String profileID;
 
-	public AvailableIUElement(Object parent, IInstallableUnit iu, String profileID) {
+	public AvailableIUElement(Object parent, IInstallableUnit iu, String profileID, boolean showChildren) {
 		super(parent);
 		this.iu = iu;
 		this.profileID = profileID;
+		this.shouldShowChildren = showChildren;
 	}
 
 	/*
@@ -120,4 +124,35 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 	public RequiredCapability[] getRequirements() {
 		return iu.getRequiredCapabilities();
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IIUElement#shouldShowChildren()
+	 */
+	public boolean shouldShowChildren() {
+		return shouldShowChildren;
+	}
+
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof AvailableIUElement))
+			return false;
+		if (iu == null)
+			return false;
+		return iu.equals(((AvailableIUElement) obj).getIU());
+	}
+
+	public int hashCode() {
+		if (iu == null)
+			return 0;
+		return iu.hashCode();
+	}
+
+	public String toString() {
+		if (iu == null)
+			return "NULL"; //$NON-NLS-1$
+		return iu.toString();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
index 37a523d..1a8cb3a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
@@ -29,8 +29,8 @@ public class AvailableUpdateElement extends AvailableIUElement {
 
 	IInstallableUnit iuToBeUpdated;
 
-	public AvailableUpdateElement(Object parent, IInstallableUnit iu, IInstallableUnit iuToBeUpdated, String profileID) {
-		super(parent, iu, profileID);
+	public AvailableUpdateElement(Object parent, IInstallableUnit iu, IInstallableUnit iuToBeUpdated, String profileID, boolean shouldShowChildren) {
+		super(parent, iu, profileID, shouldShowChildren);
 		this.iuToBeUpdated = iuToBeUpdated;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
index 127141d..d649115 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/CategoryElement.java
@@ -104,4 +104,11 @@ public class CategoryElement extends RemoteQueriedElement implements IIUElement
 		return requirements;
 	}
 
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IIUElement#shouldShowChildren()
+	 */
+	public boolean shouldShowChildren() {
+		return true;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ElementUtils.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ElementUtils.java
index 3e390d4..a361b5b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ElementUtils.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ElementUtils.java
@@ -17,6 +17,7 @@ import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.swt.widgets.Shell;
@@ -70,6 +71,22 @@ public class ElementUtils {
 		job.schedule();
 	}
 
+	public static IInstallableUnit getIU(Object element) {
+		if (element instanceof IInstallableUnit)
+			return (IInstallableUnit) element;
+		if (element instanceof IIUElement)
+			return ((IIUElement) element).getIU();
+		return (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
+	}
+
+	public static IInstallableUnit[] elementsToIUs(Object[] elements) {
+		IInstallableUnit[] theIUs = new IInstallableUnit[elements.length];
+		for (int i = 0; i < elements.length; i++) {
+			theIUs[i] = (IInstallableUnit) ProvUI.getAdapter(elements[i], IInstallableUnit.class);
+		}
+		return theIUs;
+	}
+
 	static boolean containsURI(URI[] locations, URI url) {
 		for (int i = 0; i < locations.length; i++)
 			if (locations[i].equals(url))
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java
index 221eb40..ec2fe6a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IIUElement.java
@@ -52,4 +52,6 @@ public interface IIUElement {
 	public RequiredCapability[] getRequirements();
 
 	public Object getParent(Object obj);
+
+	public boolean shouldShowChildren();
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
deleted file mode 100644
index 4a1e4b3..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/IUVersionsElement.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.model;
-
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.QueryProvider;
-
-/**
- * Element wrapper class for a particular IU version, whose
- * children are the other versions.
- * 
- * @since 3.4
- */
-public class IUVersionsElement extends QueriedElement implements IIUElement {
-
-	IInstallableUnit iu;
-
-	public IUVersionsElement(Object parent, IInstallableUnit iu) {
-		super(parent);
-		this.iu = iu;
-	}
-
-	public String getLabel(Object o) {
-		return iu.getId();
-	}
-
-	public String getImageId(Object o) {
-		return ProvUIImages.IMG_UNINSTALLED_IU;
-	}
-
-	public Object getAdapter(Class adapter) {
-		if (adapter == IInstallableUnit.class)
-			return iu;
-		return super.getAdapter(adapter);
-	}
-
-	public IInstallableUnit getIU() {
-		return iu;
-	}
-
-	public void setIU(IInstallableUnit iu) {
-		this.iu = iu;
-	}
-
-	protected int getDefaultQueryType() {
-		return QueryProvider.AVAILABLE_IUS;
-	}
-
-	public long getSize() {
-		return SIZE_UNKNOWN;
-	}
-
-	public boolean shouldShowSize() {
-		return false;
-	}
-
-	public boolean shouldShowVersion() {
-		return true;
-	}
-
-	public void computeSize(IProgressMonitor monitor) {
-		// Should never be called, since shouldShowSize() returns false
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.equinox.internal.p2.ui.model.IUElement#getRequirements()
-	 */
-	public RequiredCapability[] getRequirements() {
-		return iu.getRequiredCapabilities();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
index 096c1ae..26ad2c8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RollbackProfileElement.java
@@ -137,4 +137,11 @@ public class RollbackProfileElement extends RemoteQueriedElement implements IIUE
 	public RequiredCapability[] getRequirements() {
 		return iu.getRequiredCapabilities();
 	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.model.IIUElement#shouldShowChildren()
+	 */
+	public boolean shouldShowChildren() {
+		return false;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java
deleted file mode 100644
index 7c453da..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.equinox.internal.p2.ui.viewers;
-
-import org.eclipse.jface.viewers.IStructuredContentProvider;
-import org.eclipse.jface.viewers.Viewer;
-
-public final class StaticContentProvider implements IStructuredContentProvider {
-	private Object[] elements;
-
-	public StaticContentProvider(Object[] elements) {
-		this.elements = elements;
-	}
-
-	public Object[] getElements(Object inputElement) {
-		return elements;
-	}
-
-	public void dispose() {
-		// nothing to dispose
-	}
-
-	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
-		if (newInput instanceof Object[])
-			this.elements = (Object[]) newInput;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
index 504e91d..39b6dd8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.PlanStatusHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -29,7 +30,7 @@ import org.eclipse.ui.PlatformUI;
 
 public class UpdateAction extends ExistingIUInProfileAction {
 
-	ArrayList allReplacements; // cache all the replacements found to seed the wizard
+	IUElementListRoot root; // root that will be used to seed the wizard
 	HashMap latestReplacements;
 	boolean resolveIsVisible = true;
 
@@ -42,10 +43,10 @@ public class UpdateAction extends ExistingIUInProfileAction {
 	protected int performAction(IInstallableUnit[] ius, String targetProfileId, ProvisioningPlan plan) {
 		// Caches should have been created while formulating the plan
 		Assert.isNotNull(latestReplacements);
-		Assert.isNotNull(allReplacements);
+		Assert.isNotNull(root);
 		Assert.isNotNull(plan);
 
-		UpdateWizard wizard = new UpdateWizard(getPolicy(), targetProfileId, ius, (AvailableUpdateElement[]) allReplacements.toArray(new AvailableUpdateElement[allReplacements.size()]), latestReplacements.values().toArray(), plan);
+		UpdateWizard wizard = new UpdateWizard(getPolicy(), targetProfileId, root, latestReplacements.values().toArray(), plan);
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.UPDATE_WIZARD);
@@ -57,7 +58,7 @@ public class UpdateAction extends ExistingIUInProfileAction {
 		// Here we create a profile change request by finding the latest version available for any replacement.
 		ArrayList toBeUpdated = new ArrayList();
 		latestReplacements = new HashMap();
-		allReplacements = new ArrayList();
+		ArrayList allReplacements = new ArrayList();
 		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.ProfileChangeRequestBuildingRequest, ius.length);
 		for (int i = 0; i < ius.length; i++) {
 			ElementQueryDescriptor descriptor = getQueryProvider().getQueryDescriptor(new Updates(targetProfileId, new IInstallableUnit[] {ius[i]}));
@@ -65,14 +66,16 @@ public class UpdateAction extends ExistingIUInProfileAction {
 			if (iter.hasNext())
 				toBeUpdated.add(ius[i]);
 			ArrayList currentReplacements = new ArrayList();
+			root = new IUElementListRoot();
 			while (iter.hasNext()) {
 				IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(iter.next(), IInstallableUnit.class);
 				if (iu != null) {
-					AvailableUpdateElement element = new AvailableUpdateElement(null, iu, ius[i], targetProfileId);
+					AvailableUpdateElement element = new AvailableUpdateElement(root, iu, ius[i], targetProfileId, true);
 					currentReplacements.add(element);
 					allReplacements.add(element);
 				}
 			}
+			root.setChildren(allReplacements.toArray());
 			for (int j = 0; j < currentReplacements.size(); j++) {
 				AvailableUpdateElement replacementElement = (AvailableUpdateElement) currentReplacements.get(j);
 				AvailableUpdateElement latestElement = (AvailableUpdateElement) latestReplacements.get(replacementElement.getIU().getId());
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 5519206..cfd7333 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -266,10 +266,16 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 * Get the selected IU's
 	 * @return the array of selected IU's
 	 */
+	// overridden for visibility in the public package
 	public IInstallableUnit[] getSelectedIUs() {
 		return super.getSelectedIUs();
 	}
 
+	// overridden for visibility
+	public Object[] getSelectedIUElements() {
+		return super.getSelectedIUElements();
+	}
+
 	public CheckboxTreeViewer getCheckboxTreeViewer() {
 		return filteredTree.getCheckboxTreeViewer();
 	}
@@ -414,4 +420,13 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		data.heightHint = convertVerticalDLUsToPixels(240);
 		return data;
 	}
+
+	// TODO this is potentially very expensive if used indiscriminately, need to doc the
+	// expected preconditions
+	public void setInitialSelections(Object[] selections) {
+		for (int i = 0; i < selections.length; i++) {
+			getCheckboxTreeViewer().expandToLevel(selections[i], AbstractTreeViewer.ALL_LEVELS);
+			getCheckboxTreeViewer().setSubtreeChecked(selections[i], true);
+		}
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
index 4e822f2..6ab4f32 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
@@ -10,38 +10,26 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
+import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
+import org.eclipse.equinox.internal.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.jface.wizard.IWizardPage;
-import org.eclipse.jface.wizard.Wizard;
 
 /**
  * @since 3.4
  */
-public class InstallWizard extends Wizard {
+public class InstallWizard extends WizardWithLicenses {
 
-	Policy policy;
-	AvailableIUsPage mainPage;
-	InstallWizardPage resolutionPage;
-	AcceptLicensesWizardPage licensePage;
 	QueryableMetadataRepositoryManager manager;
-	String profileId;
-	IInstallableUnit[] ius;
-	ProvisioningPlan plan;
 
-	public InstallWizard(Policy policy, String profileId, IInstallableUnit[] ius, ProvisioningPlan plan, QueryableMetadataRepositoryManager manager) {
-		this.policy = policy;
-		this.profileId = profileId;
-		this.plan = plan;
-		this.ius = ius;
+	public InstallWizard(Policy policy, String profileId, IInstallableUnit[] initialSelections, ProvisioningPlan initialPlan, QueryableMetadataRepositoryManager manager) {
+		super(policy, profileId, null, initialSelections, initialPlan);
 		this.manager = manager;
-		setForcePreviousAndNextButtons(true);
-		setNeedsProgressMonitor(true);
 		setWindowTitle(ProvUIMessages.InstallIUOperationLabel);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL));
 	}
@@ -50,51 +38,27 @@ public class InstallWizard extends Wizard {
 		this(policy, profileId, null, null, new QueryableMetadataRepositoryManager(policy, false));
 	}
 
-	protected InstallWizardPage createResolutionPage() {
-		return new InstallWizardPage(policy, profileId, ius, plan, this);
+	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, ProvisioningPlan initialPlan) {
+		return new InstallWizardPage(policy, profileId, input, initialPlan);
 	}
 
-	protected AvailableIUsPage createMainPage() {
-		return new AvailableIUsPage(policy, profileId, this, manager);
-	}
-
-	protected AcceptLicensesWizardPage createLicensesPage() {
-		return new AcceptLicensesWizardPage(policy, ius, plan);
-	}
+	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
+		AvailableIUsPage page = new AvailableIUsPage(policy, profileId, manager);
+		if (selections != null && selections.length > 0)
+			page.setInitialSelections(selections);
+		return page;
 
-	public void addPages() {
-		// If the ius are already established, we don't need the first page
-		if (ius == null)
-			addPage(mainPage = createMainPage());
-		addPage(resolutionPage = createResolutionPage());
-		addPage(licensePage = createLicensesPage());
 	}
 
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.jface.wizard.Wizard#getNextPage(org.eclipse.jface.wizard.IWizardPage)
-	 */
-	public IWizardPage getNextPage(IWizardPage page) {
-		if (page == mainPage) {
-			resolutionPage.updateIUs();
-			licensePage.update(resolutionPage.getSelectedIUs(), resolutionPage.getCurrentPlan());
-			return resolutionPage;
+	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
+		IUElementListRoot elementRoot = new IUElementListRoot();
+		ArrayList list = new ArrayList(selectedElements.length);
+		for (int i = 0; i < selectedElements.length; i++) {
+			IInstallableUnit iu = ElementUtils.getIU(selectedElements[i]);
+			if (iu != null)
+				list.add(new AvailableIUElement(elementRoot, iu, profileId, policy.getQueryContext().getShowProvisioningPlanChildren()));
 		}
-		if (page == resolutionPage && licensePage.hasLicensesToAccept())
-			return licensePage;
-		return null;
-	}
-
-	public boolean performFinish() {
-		if (mainPage != null)
-			mainPage.performFinish();
-		licensePage.performFinish();
-		return resolutionPage.performFinish();
-	}
-
-	public IInstallableUnit[] getCheckedIUs() {
-		if (mainPage == null)
-			return resolutionPage.getSelectedIUs();
-		return mainPage.getCheckedIUs();
+		elementRoot.setChildren(list.toArray());
+		return elementRoot;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
index c32092b..af94d5d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
@@ -10,42 +10,52 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
+import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.dialogs.UninstallWizardPage;
+import org.eclipse.equinox.internal.p2.ui.dialogs.*;
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.jface.wizard.Wizard;
 
 /**
  * @since 3.4
  */
-public class UninstallWizard extends Wizard {
+public class UninstallWizard extends ProvisioningOperationWizard {
 
-	UninstallWizardPage page;
-	Policy policy;
-	String profileId;
-	IInstallableUnit[] ius;
-	ProvisioningPlan plan;
+	static IUElementListRoot makeElementRoot(Object[] selectedElements, String profileId) {
+		IUElementListRoot elementRoot = new IUElementListRoot();
+		ArrayList list = new ArrayList(selectedElements.length);
+		for (int i = 0; i < selectedElements.length; i++) {
+			IInstallableUnit iu = ElementUtils.getIU(selectedElements[i]);
+			if (iu != null)
+				list.add(new InstalledIUElement(elementRoot, profileId, iu));
+		}
+		elementRoot.setChildren(list.toArray());
+		return elementRoot;
+	}
 
-	public UninstallWizard(Policy policy, String profileId, IInstallableUnit[] ius, ProvisioningPlan initialProvisioningPlan) {
-		super();
-		this.policy = policy;
+	public UninstallWizard(Policy policy, String profileId, IInstallableUnit[] ius, ProvisioningPlan initialPlan) {
+		super(policy, profileId, makeElementRoot(ius, profileId), ius, initialPlan);
 		setWindowTitle(ProvUIMessages.UninstallIUOperationLabel);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_UNINSTALL));
-		this.profileId = profileId;
-		this.ius = ius;
-		this.plan = initialProvisioningPlan;
 	}
 
-	public void addPages() {
-		page = new UninstallWizardPage(policy, ius, profileId, plan);
-		addPage(page);
+	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
+		ISelectableIUsPage page = new SelectableIUsPage(policy, profileId, input, selections, profileId);
+		page.setTitle(ProvUIMessages.UninstallIUOperationLabel);
+		page.setDescription(ProvUIMessages.UninstallDialog_UninstallMessage);
+		return page;
 	}
 
-	public boolean performFinish() {
-		return page.performFinish();
+	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, ProvisioningPlan plan) {
+		return new UninstallWizardPage(policy, input, profileId, plan);
 	}
 
+	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
+		return makeElementRoot(selectedElements, profileId);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
index 5b493d8..9472885 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
@@ -11,74 +11,50 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
+import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.dialogs.AcceptLicensesWizardPage;
-import org.eclipse.equinox.internal.p2.ui.dialogs.UpdateWizardPage;
+import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.jface.wizard.IWizardPage;
-import org.eclipse.jface.wizard.Wizard;
 
 /**
  * @since 3.4
  */
-public class UpdateWizard extends Wizard {
-	UpdateWizardPage mainPage;
-	Policy policy;
-	AcceptLicensesWizardPage licensePage;
-	protected String profileId;
-	protected IInstallableUnit[] ius;
-	ProvisioningPlan plan;
-	AvailableUpdateElement[] elements;
-	Object[] initialSelections;
+public class UpdateWizard extends WizardWithLicenses {
+	IInstallableUnit[] iusToReplace;
 
-	public UpdateWizard(Policy policy, String profileId, IInstallableUnit[] iusToReplace, AvailableUpdateElement[] elements, Object[] initialSelections, ProvisioningPlan plan) {
-		super();
-		this.policy = policy;
-		setForcePreviousAndNextButtons(true);
-		setNeedsProgressMonitor(true);
-		this.profileId = profileId;
-		this.ius = iusToReplace;
+	public UpdateWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, ProvisioningPlan initialPlan) {
+		super(policy, profileId, root, initialSelections, initialPlan);
 		setWindowTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_UPDATE));
-		this.plan = plan;
-		this.elements = elements;
-		this.initialSelections = initialSelections;
 	}
 
-	public void addPages() {
-		addPage(mainPage = createMainPage());
-		addPage(licensePage = createLicensesPage());
+	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
+		SelectableIUsPage page = new SelectableIUsPage(policy, profileId, input, selections, profileId);
+		page.setTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
+		page.setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
+		return page;
 	}
 
-	protected UpdateWizardPage createMainPage() {
-		return new UpdateWizardPage(policy, ius, elements, initialSelections, profileId, plan, this);
+	protected ResolutionWizardPage createResolutionPage(IUElementListRoot root, ProvisioningPlan plan) {
+		return new UpdateWizardPage(policy, root, profileId, plan);
 	}
 
-	protected AcceptLicensesWizardPage createLicensesPage() {
-		return new AcceptLicensesWizardPage(policy, UpdateWizardPage.getReplacementIUs(initialSelections), plan);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.jface.wizard.Wizard#getNextPage(org.eclipse.jface.wizard.IWizardPage)
-	 */
-	public IWizardPage getNextPage(IWizardPage page) {
-		if (page == mainPage && licensePage.hasLicensesToAccept())
-			return licensePage;
-		return null;
-	}
-
-	public boolean performFinish() {
-		licensePage.performFinish();
-		return mainPage.performFinish();
-	}
-
-	public void planChanged(IInstallableUnit[] selectedIUs, ProvisioningPlan newPlan) {
-		this.ius = selectedIUs;
-		licensePage.update(selectedIUs, newPlan);
+	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
+		IUElementListRoot elementRoot = new IUElementListRoot();
+		ArrayList list = new ArrayList(selectedElements.length);
+		for (int i = 0; i < selectedElements.length; i++) {
+			if (selectedElements[i] instanceof AvailableUpdateElement) {
+				AvailableUpdateElement element = (AvailableUpdateElement) selectedElements[i];
+				AvailableUpdateElement newElement = new AvailableUpdateElement(elementRoot, element.getIU(), element.getIUToBeUpdated(), profileId, policy.getQueryContext().getShowProvisioningPlanChildren());
+				list.add(newElement);
+			}
+		}
+		elementRoot.setChildren(list.toArray());
+		return elementRoot;
 	}
 }

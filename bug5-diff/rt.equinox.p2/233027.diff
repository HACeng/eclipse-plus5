commit 88c975a9efc37539746c67801fcb0ac037db8f06
Author: Susan Franklin <sfranklin>
Date:   Wed Feb 17 02:36:36 2010 +0000

    Bug 233027 -  [ui] Remembered licenses should be stored in the profile data area

2	1	bundles/org.eclipse.equinox.p2.tests.ui/META-INF/MANIFEST.MF
24	6	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
1	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AutomatedTests.java
25	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/AllTests.java
82	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/LicenseManagerTest.java
1	2	bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
6	53	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
42	68	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/SimpleLicenseManager.java
1	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
12	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
0	17	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/LicenseManager.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tests.ui/META-INF/MANIFEST.MF
index ee642dd..d9d22f2 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/META-INF/MANIFEST.MF
@@ -19,4 +19,5 @@ Require-Bundle: org.eclipse.core.runtime;bundle-version="3.4.100",
  org.junit;bundle-version="3.8.0",
  org.eclipse.equinox.p2.repository;bundle-version="1.0.0",
  org.eclipse.equinox.p2.tests;bundle-version="1.2.0"
-Import-Package: org.eclipse.equinox.p2.operations
+Import-Package: org.eclipse.equinox.p2.operations,
+ org.eclipse.equinox.internal.p2.ui.sdk
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
index e55c117..d554c11 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
@@ -12,23 +12,27 @@ package org.eclipse.equinox.p2.tests.ui;
 
 import java.io.File;
 import java.net.URI;
+import java.util.Dictionary;
+import java.util.Hashtable;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.ColocatedRepositoryTracker;
 import org.eclipse.equinox.internal.p2.ui.model.ProfileElement;
+import org.eclipse.equinox.internal.p2.ui.sdk.SimpleLicenseManager;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
-import org.eclipse.equinox.p2.operations.ProfileModificationJob;
-import org.eclipse.equinox.p2.operations.ProvisioningSession;
+import org.eclipse.equinox.p2.operations.*;
 import org.eclipse.equinox.p2.repository.IRepositoryManager;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRepositoryManager;
 import org.eclipse.equinox.p2.repository.metadata.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
-import org.eclipse.equinox.p2.ui.Policy;
-import org.eclipse.equinox.p2.ui.ProvisioningUI;
+import org.eclipse.equinox.p2.ui.*;
+import org.osgi.framework.Constants;
+import org.osgi.framework.ServiceRegistration;
 
 /**
  * Abstract class to set up the colocated UI test repo
@@ -56,15 +60,27 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 	protected IInstallableUnit uninstalled;
 	protected IInstallableUnit category;
 	private ProvisioningUI ui;
+	private ServiceRegistration regLicenseManager, regTracker;
 
 	protected void setUp() throws Exception {
 		super.setUp();
+		// create test profile
+		profile = createProfile(TESTPROFILE);
+
+		// copy of provisioning UI that uses a different profile
 		ui = ProvisioningUI.getDefaultUI();
 		ui = new ProvisioningUI(ui.getSession(), TESTPROFILE, ui.getPolicy());
 		ui.getOperationRunner().suppressRestart(true);
-		// to squelch repo error reporting
 		ui.getPolicy().setRepositoriesVisible(false);
-		profile = createProfile(TESTPROFILE);
+
+		// register alternate services
+		SimpleLicenseManager manager = new SimpleLicenseManager(TESTPROFILE);
+		RepositoryTracker tracker = new ColocatedRepositoryTracker(ui);
+		Dictionary<String, Object> properties = new Hashtable<String, Object>(5);
+		properties.put(Constants.SERVICE_RANKING, new Integer(1));
+		regLicenseManager = TestActivator.getContext().registerService(LicenseManager.class.getName(), manager, properties);
+		regTracker = TestActivator.getContext().registerService(RepositoryTracker.class.getName(), tracker, properties);
+
 		profileElement = new ProfileElement(null, TESTPROFILE);
 		install((top1 = createIU(TOPLEVELIU, Version.create("1.0.0"))), true, false);
 		install((top2 = createIU(TOPLEVELIU2)), true, false);
@@ -89,6 +105,8 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 		super.tearDown();
 		metaManager.removeRepository(testRepoLocation);
 		artifactManager.removeRepository(testRepoLocation);
+		regLicenseManager.unregister();
+		regTracker.unregister();
 	}
 
 	protected boolean managerContains(IRepositoryManager<?> manager, URI location) {
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AutomatedTests.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AutomatedTests.java
index cb2b184..98ff202 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AutomatedTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AutomatedTests.java
@@ -23,6 +23,7 @@ public class AutomatedTests extends TestCase {
 		suite.addTest(org.eclipse.equinox.p2.tests.ui.query.AllTests.suite());
 		suite.addTest(org.eclipse.equinox.p2.tests.ui.actions.AllTests.suite());
 		suite.addTest(org.eclipse.equinox.p2.tests.ui.dialogs.AllTests.suite());
+		suite.addTest(org.eclipse.equinox.p2.tests.ui.misc.AllTests.suite());
 		suite.addTest(org.eclipse.equinox.p2.tests.ui.repohandling.AllTests.suite());
 		suite.addTest(org.eclipse.equinox.p2.tests.ui.planning.AllTests.suite());
 		return suite;
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/AllTests.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/AllTests.java
new file mode 100644
index 0000000..7171307
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/AllTests.java
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ *  Copyright (c) 2008, 2009 IBM Corporation and others.
+ *  All rights reserved. This program and the accompanying materials
+ *  are made available under the terms of the Eclipse Public License v1.0
+ *  which accompanies this distribution, and is available at
+ *  http://www.eclipse.org/legal/epl-v10.html
+ * 
+ *  Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.misc;
+
+import junit.framework.*;
+
+/**
+ * Performs all UI action tests.
+ */
+public class AllTests extends TestCase {
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite(AllTests.class.getName());
+		suite.addTestSuite(LicenseManagerTest.class);
+		return suite;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/LicenseManagerTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/LicenseManagerTest.java
new file mode 100644
index 0000000..b7ccedd
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/misc/LicenseManagerTest.java
@@ -0,0 +1,82 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.misc;
+
+import java.net.URI;
+import org.eclipse.equinox.internal.p2.ui.sdk.SimpleLicenseManager;
+import org.eclipse.equinox.p2.metadata.ILicense;
+import org.eclipse.equinox.p2.tests.ui.AbstractProvisioningUITest;
+import org.eclipse.equinox.p2.ui.LicenseManager;
+
+public class LicenseManagerTest extends AbstractProvisioningUITest {
+
+	class SimpleLicense implements ILicense {
+		String body;
+		String id;
+
+		SimpleLicense(String id, String body) {
+			this.id = id;
+			this.body = body;
+		}
+
+		public URI getLocation() {
+			return null;
+		}
+
+		public String getBody() {
+			return body;
+		}
+
+		public String getUUID() {
+			return id;
+		}
+
+	}
+
+	public void testLicenseAcceptAndReject() {
+		LicenseManager manager = getProvisioningUI().getLicenseManager();
+		SimpleLicense foo = new SimpleLicense("foo", "foo");
+		SimpleLicense bar = new SimpleLicense("bar", "bar");
+
+		manager.accept(foo);
+		manager.accept(bar);
+
+		assertTrue("1.0", manager.hasAcceptedLicenses());
+		manager.reject(foo);
+		manager.reject(bar);
+		assertFalse("1.1", manager.hasAcceptedLicenses());
+
+		manager.accept(foo);
+		manager.accept(bar);
+		assertTrue("1.2", manager.hasAcceptedLicenses());
+	}
+
+	public void testDifferentProfilesDifferentLicenses() {
+		LicenseManager manager = getProvisioningUI().getLicenseManager();
+		SimpleLicense foo = new SimpleLicense("foo", "foo");
+		SimpleLicense bar = new SimpleLicense("bar", "bar");
+
+		manager.accept(foo);
+		manager.accept(bar);
+
+		assertTrue("1.0", manager.hasAcceptedLicenses());
+
+		// Ensure that a newly created license manager with the same profile has the
+		// same licenses
+		SimpleLicenseManager manager2 = new SimpleLicenseManager(TESTPROFILE);
+		assertTrue("1.1", manager2.hasAcceptedLicenses());
+
+		// A manager with a different profile would not have the same licenses
+		profile = createProfile("ANOTHER");
+		manager2 = new SimpleLicenseManager("ANOTHER");
+		assertFalse("1.2", manager2.hasAcceptedLicenses());
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
index b216d74..2106b3c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
@@ -7,8 +7,7 @@ Bundle-SymbolicName: org.eclipse.equinox.p2.ui.sdk;singleton:=true
 Bundle-Version: 1.0.100.qualifier
 Bundle-Activator: org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator
 Import-Package: javax.xml.parsers,
- org.eclipse.equinox.internal.p2.core.helpers,
- org.eclipse.equinox.internal.provisional.p2.core.eventbus,
+ org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.engine,
  org.eclipse.equinox.p2.engine.query,
  org.eclipse.equinox.p2.metadata,
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index 1c24767..75c7b7d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -10,14 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
-import org.eclipse.equinox.p2.ui.LicenseManager;
-
-import java.io.*;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import java.io.IOException;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceInitializer;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.ProfileScope;
 import org.eclipse.equinox.p2.ui.Policy;
@@ -30,14 +28,12 @@ import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.eclipse.ui.preferences.ScopedPreferenceStore;
 import org.eclipse.ui.statushandlers.StatusManager;
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceReference;
 
 /**
  * Activator class for the p2 UI.
  */
 public class ProvSDKUIActivator extends AbstractUIPlugin {
 
-	private static final String LICENSE_STORAGE = "licenses.xml"; //$NON-NLS-1$
 	private static ProvSDKUIActivator plugin;
 	private static BundleContext context;
 	private ScopedPreferenceStore preferenceStore;
@@ -84,7 +80,6 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		super.start(bundleContext);
 		plugin = this;
 		ProvSDKUIActivator.context = bundleContext;
-		readLicenseRegistry();
 		PreferenceInitializer.migratePreferences();
 		getPreferenceStore().addPropertyChangeListener(getPreferenceListener());
 	}
@@ -108,58 +103,16 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		return getProvisioningUI().getPolicy();
 	}
 
-	private LicenseManager getLicenseManager() {
-		return (LicenseManager) ServiceHelper.getService(getContext(), LicenseManager.class.getName());
-	}
-
-	private void readLicenseRegistry() {
-		if (getLicenseManager() == null)
-			return;
-		IPath location = getStateLocation().append(LICENSE_STORAGE);
-		File f = location.toFile();
-		BufferedInputStream stream = null;
-		if (f.exists()) {
-			try {
-				stream = new BufferedInputStream(new FileInputStream(f));
-				getLicenseManager().read(stream);
-				stream.close();
-			} catch (IOException e) {
-				StatusManager.getManager().handle(new Status(IStatus.ERROR, PLUGIN_ID, 0, ProvSDKMessages.ProvSDKUIActivator_LicenseManagerReadError, e), StatusManager.LOG);
-			}
-		}
-	}
-
-	private void writeLicenseRegistry() {
-		if (getLicenseManager() == null)
-			return;
-		if (!getLicenseManager().hasAcceptedLicenses())
-			return;
-		IPath location = getStateLocation().append(LICENSE_STORAGE);
-		File f = location.toFile();
-		BufferedOutputStream stream = null;
-		try {
-			stream = new BufferedOutputStream(new FileOutputStream(f, false));
-			getLicenseManager().write(stream);
-			stream.close();
-		} catch (IOException e) {
-			StatusManager.getManager().handle(new Status(IStatus.ERROR, PLUGIN_ID, 0, ProvSDKMessages.ProvSDKUIActivator_ErrorWritingLicenseRegistry, e), StatusManager.LOG);
-		}
+	public IProvisioningAgent getProvisioningAgent() {
+		return getProvisioningUI().getSession().getProvisioningAgent();
 	}
 
 	public void stop(BundleContext bundleContext) throws Exception {
-		writeLicenseRegistry();
 		plugin = null;
 		getPreferenceStore().removePropertyChangeListener(preferenceListener);
 		super.stop(bundleContext);
 	}
 
-	public IProvisioningEventBus getProvisioningEventBus() {
-		ServiceReference busReference = context.getServiceReference(IProvisioningEventBus.SERVICE_NAME);
-		if (busReference == null)
-			return null;
-		return (IProvisioningEventBus) context.getService(busReference);
-	}
-
 	static IStatus getNoSelfProfileStatus() {
 		return new Status(IStatus.WARNING, PLUGIN_ID, ProvSDKMessages.ProvSDKUIActivator_NoSelfProfile);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/SimpleLicenseManager.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/SimpleLicenseManager.java
index a30f2d0..077198a 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/SimpleLicenseManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/SimpleLicenseManager.java
@@ -11,34 +11,46 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
-import java.io.*;
-import java.util.*;
-import javax.xml.parsers.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import java.util.HashSet;
+import java.util.StringTokenizer;
+import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
+import org.eclipse.equinox.p2.core.IAgentLocation;
+import org.eclipse.equinox.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.p2.engine.ProfileScope;
 import org.eclipse.equinox.p2.metadata.ILicense;
 import org.eclipse.equinox.p2.ui.LicenseManager;
-import org.eclipse.ui.statushandlers.StatusManager;
-import org.w3c.dom.*;
-import org.xml.sax.SAXException;
+import org.osgi.service.prefs.Preferences;
 
 /**
  * SimpleLicenseManager is a license manager that keeps track of 
- * IInstallableUnit licenses by using the digests of the IU's licenses.
- * It can read and write its accepted list to a stream.
+ * IInstallableUnit licenses using their UUID.  The licenses ids
+ * are stored in the profile's preferences.
  * 
- * @since 3.4
+ * @since 3.6
  */
 public class SimpleLicenseManager extends LicenseManager {
 	java.util.Set accepted = new HashSet();
+	String profileId;
+
+	public SimpleLicenseManager(String profileId) {
+		super();
+		this.profileId = profileId;
+		initializeFromPreferences();
+	}
+
+	public SimpleLicenseManager() {
+		this(IProfileRegistry.SELF);
+	}
 
 	public boolean accept(ILicense license) {
 		accepted.add(license.getUUID());
+		updatePreferences();
 		return true;
 	}
 
 	public boolean reject(ILicense license) {
 		accepted.remove(license.getUUID());
+		updatePreferences();
 		return true;
 	}
 
@@ -50,69 +62,31 @@ public class SimpleLicenseManager extends LicenseManager {
 		return !accepted.isEmpty();
 	}
 
-	public void read(InputStream stream) throws IOException {
-		try {
-			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-			factory.setNamespaceAware(true);
-			DocumentBuilder parser = factory.newDocumentBuilder();
-			Document doc = parser.parse(stream);
-			Node root = doc.getDocumentElement();
-			processRoot(root, accepted);
-		} catch (ParserConfigurationException e) {
-			handleException(e, ProvSDKMessages.ProvUILicenseManager_ParsingError, StatusManager.LOG);
-		} catch (SAXException e) {
-			handleException(e, ProvSDKMessages.ProvUILicenseManager_ParsingError, StatusManager.LOG);
-		}
-	}
-
-	private void handleException(Throwable t, String message, int style) {
-		if (message == null && t != null) {
-			message = t.getMessage();
-		}
-		IStatus status = new Status(IStatus.ERROR, ProvSDKUIActivator.PLUGIN_ID, 0, message, t);
-		StatusManager.getManager().handle(status, style);
+	private Preferences getPreferences() {
+		IAgentLocation location = (IAgentLocation) ProvSDKUIActivator.getDefault().getProvisioningAgent().getService(IAgentLocation.SERVICE_NAME);
+		return new ProfileScope(location, profileId).getNode(ProvSDKUIActivator.PLUGIN_ID);
 	}
 
-	public void write(OutputStream stream) throws IOException {
-		OutputStreamWriter osw = null;
-		PrintWriter writer = null;
-		try {
-			osw = new OutputStreamWriter(stream, "UTF8"); //$NON-NLS-1$
-			writer = new PrintWriter(osw);
-			writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"); //$NON-NLS-1$
-			writer.println("<licenses>"); //$NON-NLS-1$
-			for (Iterator i = accepted.iterator(); i.hasNext();) {
-				String digest = (String) i.next();
-				writer.print("    " + "<license digest=\"" + digest + "\"/>"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ 
+	private void initializeFromPreferences() {
+		Preferences pref = getPreferences();
+		if (pref != null) {
+			String digestList = pref.get(PreferenceConstants.PREF_LICENSE_DIGESTS, ""); //$NON-NLS-1$
+			StringTokenizer tokenizer = new StringTokenizer(digestList, ","); //$NON-NLS-1$
+			while (tokenizer.hasMoreTokens()) {
+				accepted.add(tokenizer.nextToken().trim());
 			}
-		} finally {
-			writer.println("</licenses>"); //$NON-NLS-1$
-			writer.flush();
-			writer.close();
-			if (osw != null)
-				osw.close();
-		}
-	}
-
-	private void processRoot(Node root, Set licenses) {
-		if (root.getNodeName().equals("licenses")) { //$NON-NLS-1$
-			NodeList children = root.getChildNodes();
-			processChildren(children, licenses);
 		}
 	}
 
-	private void processChildren(NodeList children, Set licenses) {
-		for (int i = 0; i < children.getLength(); i++) {
-			Node child = children.item(i);
-			if (child.getNodeType() == Node.ELEMENT_NODE) {
-				if (child.getNodeName().equals("license")) { //$NON-NLS-1$
-					NamedNodeMap atts = child.getAttributes();
-					Node digestAtt = atts.getNamedItem("digest"); //$NON-NLS-1$
-					if (digestAtt != null) {
-						licenses.add(digestAtt.getNodeValue());
-					}
-				}
-			}
+	private void updatePreferences() {
+		Preferences pref = getPreferences();
+		StringBuffer result = new StringBuffer();
+		Object[] indexedList = accepted.toArray();
+		for (int i = 0; i < indexedList.length; i++) {
+			if (i != 0)
+				result.append(","); //$NON-NLS-1$
+			result.append((String) indexedList[i]);
 		}
+		pref.put(PreferenceConstants.PREF_LICENSE_DIGESTS, result.toString());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
index 8885ed9..abb5085 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
@@ -18,4 +18,5 @@ public class PreferenceConstants {
 	public static final String PREF_PAGE_SITES = "org.eclipse.equinox.internal.p2.ui.sdk.SitesPreferencePage"; //$NON-NLS-1$
 	public static final String PREF_SHOW_LATEST_VERSION = "showLatestVersion"; //$NON-NLS-1$
 	public static final String PREF_OPEN_WIZARD_ON_ERROR_PLAN = "allowNonOKPlan"; //$NON-NLS-1$
+	public static final String PREF_LICENSE_DIGESTS = "licenseDigestList"; //$NON-NLS-1$
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
index bc0369f..29417af 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
@@ -15,10 +15,12 @@ import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.preferences.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.p2.core.IAgentLocation;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.ProfileScope;
 import org.eclipse.jface.dialogs.MessageDialogWithToggle;
 import org.eclipse.ui.statushandlers.StatusManager;
+import org.osgi.framework.ServiceReference;
 import org.osgi.service.prefs.BackingStoreException;
 import org.osgi.service.prefs.Preferences;
 
@@ -28,7 +30,7 @@ import org.osgi.service.prefs.Preferences;
 public class PreferenceInitializer extends AbstractPreferenceInitializer {
 
 	public static void migratePreferences() {
-		Preferences pref = new ProfileScope(IProfileRegistry.SELF).getNode(ProvSDKUIActivator.PLUGIN_ID);
+		Preferences pref = new ProfileScope(getDefaultAgentLocation(), IProfileRegistry.SELF).getNode(ProvSDKUIActivator.PLUGIN_ID);
 		try {
 			if (pref.keys().length == 0) {
 				// migrate preferences from instance scope to profile scope
@@ -53,4 +55,13 @@ public class PreferenceInitializer extends AbstractPreferenceInitializer {
 		node.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, true);
 		node.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.PROMPT);
 	}
+
+	private static IAgentLocation getDefaultAgentLocation() {
+		ServiceReference reference = ProvSDKUIActivator.getContext().getServiceReference(IAgentLocation.SERVICE_NAME);
+		if (reference == null)
+			return null;
+		IAgentLocation result = (IAgentLocation) ProvSDKUIActivator.getContext().getService(reference);
+		ProvSDKUIActivator.getContext().ungetService(reference);
+		return result;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/LicenseManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/LicenseManager.java
index 61caae4..792297f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/LicenseManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/LicenseManager.java
@@ -12,8 +12,6 @@ package org.eclipse.equinox.p2.ui;
 
 import org.eclipse.equinox.p2.metadata.ILicense;
 
-import java.io.*;
-
 /**
  * LicenseManager defines a service which records the licenses that have been
  * accepted in the course of installing or updating software. It can be used to determine
@@ -67,19 +65,4 @@ public abstract class LicenseManager {
 
 	 */
 	public abstract boolean hasAcceptedLicenses();
-
-	/**
-	 * Write the accepted licenses list to the specified stream.
-	 * @param stream the stream to which licenses should be written
-	 * @throws IOException 
-	 */
-	public abstract void write(OutputStream stream) throws IOException;
-
-	/**
-	 * Read the accepted licenses list from the specified stream.
-	 * @param stream the stream from which to read the licenses
-	 * @throws IOException 
-	 */
-	public abstract void read(InputStream stream) throws IOException;
-
 }
